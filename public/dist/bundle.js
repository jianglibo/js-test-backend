'use strict';

var path$6 = require('path');
var require$$0$3 = require('tty');
var require$$1$1 = require('util');
var require$$1$2 = require('fs');
var require$$4$1 = require('net');
var require$$0$4 = require('events');
var require$$1$3 = require('stream');
var require$$3$1 = require('zlib');
var require$$0$5 = require('buffer');
var require$$1$4 = require('string_decoder');
var require$$8 = require('querystring');
var require$$0$6 = require('url');
var require$$0$7 = require('http');
var require$$0$8 = require('crypto');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */


function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var express$1 = {exports: {}};

var _package$R = {exports: {}};

/*!
 * depd
 * Copyright(c) 2014-2018 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var relative = path$6.relative;

/**
 * Module exports.
 */

var _package$Q = depd;

/**
 * Get the path to base files on.
 */

var basePath = process.cwd();

/**
 * Determine if namespace is contained in the string.
 */

function containsNamespace (str, namespace) {
  var vals = str.split(/[ ,]+/);
  var ns = String(namespace).toLowerCase();

  for (var i = 0; i < vals.length; i++) {
    var val = vals[i];

    // namespace contained
    if (val && (val === '*' || val.toLowerCase() === ns)) {
      return true
    }
  }

  return false
}

/**
 * Convert a data descriptor to accessor descriptor.
 */

function convertDataDescriptorToAccessor (obj, prop, message) {
  var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
  var value = descriptor.value;

  descriptor.get = function getter () { return value };

  if (descriptor.writable) {
    descriptor.set = function setter (val) { return (value = val) };
  }

  delete descriptor.value;
  delete descriptor.writable;

  Object.defineProperty(obj, prop, descriptor);

  return descriptor
}

/**
 * Create arguments string to keep arity.
 */

function createArgumentsString (arity) {
  var str = '';

  for (var i = 0; i < arity; i++) {
    str += ', arg' + i;
  }

  return str.substr(2)
}

/**
 * Create stack string from stack.
 */

function createStackString (stack) {
  var str = this.name + ': ' + this.namespace;

  if (this.message) {
    str += ' deprecated ' + this.message;
  }

  for (var i = 0; i < stack.length; i++) {
    str += '\n    at ' + stack[i].toString();
  }

  return str
}

/**
 * Create deprecate for namespace in caller.
 */

function depd (namespace) {
  if (!namespace) {
    throw new TypeError('argument namespace is required')
  }

  var stack = getStack();
  var site = callSiteLocation(stack[1]);
  var file = site[0];

  function deprecate (message) {
    // call to self as log
    log.call(deprecate, message);
  }

  deprecate._file = file;
  deprecate._ignored = isignored(namespace);
  deprecate._namespace = namespace;
  deprecate._traced = istraced(namespace);
  deprecate._warned = Object.create(null);

  deprecate.function = wrapfunction;
  deprecate.property = wrapproperty;

  return deprecate
}

/**
 * Determine if event emitter has listeners of a given type.
 *
 * The way to do this check is done three different ways in Node.js >= 0.8
 * so this consolidates them into a minimal set using instance methods.
 *
 * @param {EventEmitter} emitter
 * @param {string} type
 * @returns {boolean}
 * @private
 */

function eehaslisteners (emitter, type) {
  var count = typeof emitter.listenerCount !== 'function'
    ? emitter.listeners(type).length
    : emitter.listenerCount(type);

  return count > 0
}

/**
 * Determine if namespace is ignored.
 */

function isignored (namespace) {
  if (process.noDeprecation) {
    // --no-deprecation support
    return true
  }

  var str = process.env.NO_DEPRECATION || '';

  // namespace ignored
  return containsNamespace(str, namespace)
}

/**
 * Determine if namespace is traced.
 */

function istraced (namespace) {
  if (process.traceDeprecation) {
    // --trace-deprecation support
    return true
  }

  var str = process.env.TRACE_DEPRECATION || '';

  // namespace traced
  return containsNamespace(str, namespace)
}

/**
 * Display deprecation message.
 */

function log (message, site) {
  var haslisteners = eehaslisteners(process, 'deprecation');

  // abort early if no destination
  if (!haslisteners && this._ignored) {
    return
  }

  var caller;
  var callFile;
  var callSite;
  var depSite;
  var i = 0;
  var seen = false;
  var stack = getStack();
  var file = this._file;

  if (site) {
    // provided site
    depSite = site;
    callSite = callSiteLocation(stack[1]);
    callSite.name = depSite.name;
    file = callSite[0];
  } else {
    // get call site
    i = 2;
    depSite = callSiteLocation(stack[i]);
    callSite = depSite;
  }

  // get caller of deprecated thing in relation to file
  for (; i < stack.length; i++) {
    caller = callSiteLocation(stack[i]);
    callFile = caller[0];

    if (callFile === file) {
      seen = true;
    } else if (callFile === this._file) {
      file = this._file;
    } else if (seen) {
      break
    }
  }

  var key = caller
    ? depSite.join(':') + '__' + caller.join(':')
    : undefined;

  if (key !== undefined && key in this._warned) {
    // already warned
    return
  }

  this._warned[key] = true;

  // generate automatic message from call site
  var msg = message;
  if (!msg) {
    msg = callSite === depSite || !callSite.name
      ? defaultMessage(depSite)
      : defaultMessage(callSite);
  }

  // emit deprecation if listeners exist
  if (haslisteners) {
    var err = DeprecationError(this._namespace, msg, stack.slice(i));
    process.emit('deprecation', err);
    return
  }

  // format and write message
  var format = process.stderr.isTTY
    ? formatColor
    : formatPlain;
  var output = format.call(this, msg, caller, stack.slice(i));
  process.stderr.write(output + '\n', 'utf8');
}

/**
 * Get call site location as array.
 */

function callSiteLocation (callSite) {
  var file = callSite.getFileName() || '<anonymous>';
  var line = callSite.getLineNumber();
  var colm = callSite.getColumnNumber();

  if (callSite.isEval()) {
    file = callSite.getEvalOrigin() + ', ' + file;
  }

  var site = [file, line, colm];

  site.callSite = callSite;
  site.name = callSite.getFunctionName();

  return site
}

/**
 * Generate a default message from the site.
 */

function defaultMessage (site) {
  var callSite = site.callSite;
  var funcName = site.name;

  // make useful anonymous name
  if (!funcName) {
    funcName = '<anonymous@' + formatLocation(site) + '>';
  }

  var context = callSite.getThis();
  var typeName = context && callSite.getTypeName();

  // ignore useless type name
  if (typeName === 'Object') {
    typeName = undefined;
  }

  // make useful type name
  if (typeName === 'Function') {
    typeName = context.name || typeName;
  }

  return typeName && callSite.getMethodName()
    ? typeName + '.' + funcName
    : funcName
}

/**
 * Format deprecation message without color.
 */

function formatPlain (msg, caller, stack) {
  var timestamp = new Date().toUTCString();

  var formatted = timestamp +
    ' ' + this._namespace +
    ' deprecated ' + msg;

  // add stack trace
  if (this._traced) {
    for (var i = 0; i < stack.length; i++) {
      formatted += '\n    at ' + stack[i].toString();
    }

    return formatted
  }

  if (caller) {
    formatted += ' at ' + formatLocation(caller);
  }

  return formatted
}

/**
 * Format deprecation message with color.
 */

function formatColor (msg, caller, stack) {
  var formatted = '\x1b[36;1m' + this._namespace + '\x1b[22;39m' + // bold cyan
    ' \x1b[33;1mdeprecated\x1b[22;39m' + // bold yellow
    ' \x1b[0m' + msg + '\x1b[39m'; // reset

  // add stack trace
  if (this._traced) {
    for (var i = 0; i < stack.length; i++) {
      formatted += '\n    \x1b[36mat ' + stack[i].toString() + '\x1b[39m'; // cyan
    }

    return formatted
  }

  if (caller) {
    formatted += ' \x1b[36m' + formatLocation(caller) + '\x1b[39m'; // cyan
  }

  return formatted
}

/**
 * Format call site location.
 */

function formatLocation (callSite) {
  return relative(basePath, callSite[0]) +
    ':' + callSite[1] +
    ':' + callSite[2]
}

/**
 * Get the stack as array of call sites.
 */

function getStack () {
  var limit = Error.stackTraceLimit;
  var obj = {};
  var prep = Error.prepareStackTrace;

  Error.prepareStackTrace = prepareObjectStackTrace;
  Error.stackTraceLimit = Math.max(10, limit);

  // capture the stack
  Error.captureStackTrace(obj);

  // slice this function off the top
  var stack = obj.stack.slice(1);

  Error.prepareStackTrace = prep;
  Error.stackTraceLimit = limit;

  return stack
}

/**
 * Capture call site stack from v8.
 */

function prepareObjectStackTrace (obj, stack) {
  return stack
}

/**
 * Return a wrapped function in a deprecation message.
 */

function wrapfunction (fn, message) {
  if (typeof fn !== 'function') {
    throw new TypeError('argument fn must be a function')
  }

  var args = createArgumentsString(fn.length);
  var stack = getStack();
  var site = callSiteLocation(stack[1]);

  site.name = fn.name;

  // eslint-disable-next-line no-new-func
  var deprecatedfn = new Function('fn', 'log', 'deprecate', 'message', 'site',
    '"use strict"\n' +
    'return function (' + args + ') {' +
    'log.call(deprecate, message, site)\n' +
    'return fn.apply(this, arguments)\n' +
    '}')(fn, log, this, message, site);

  return deprecatedfn
}

/**
 * Wrap property in a deprecation message.
 */

function wrapproperty (obj, prop, message) {
  if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
    throw new TypeError('argument obj must be object')
  }

  var descriptor = Object.getOwnPropertyDescriptor(obj, prop);

  if (!descriptor) {
    throw new TypeError('must call property on owner object')
  }

  if (!descriptor.configurable) {
    throw new TypeError('property must be configurable')
  }

  var deprecate = this;
  var stack = getStack();
  var site = callSiteLocation(stack[1]);

  // set site name
  site.name = prop;

  // convert data descriptor
  if ('value' in descriptor) {
    descriptor = convertDataDescriptorToAccessor(obj, prop);
  }

  var get = descriptor.get;
  var set = descriptor.set;

  // wrap getter
  if (typeof get === 'function') {
    descriptor.get = function getter () {
      log.call(deprecate, message, site);
      return get.apply(this, arguments)
    };
  }

  // wrap setter
  if (typeof set === 'function') {
    descriptor.set = function setter () {
      log.call(deprecate, message, site);
      return set.apply(this, arguments)
    };
  }

  Object.defineProperty(obj, prop, descriptor);
}

/**
 * Create DeprecationError for deprecation
 */

function DeprecationError (namespace, message, stack) {
  var error = new Error();
  var stackString;

  Object.defineProperty(error, 'constructor', {
    value: DeprecationError
  });

  Object.defineProperty(error, 'message', {
    configurable: true,
    enumerable: false,
    value: message,
    writable: true
  });

  Object.defineProperty(error, 'name', {
    enumerable: false,
    configurable: true,
    value: 'DeprecationError',
    writable: true
  });

  Object.defineProperty(error, 'namespace', {
    configurable: true,
    enumerable: false,
    value: namespace,
    writable: true
  });

  Object.defineProperty(error, 'stack', {
    configurable: true,
    enumerable: false,
    get: function () {
      if (stackString !== undefined) {
        return stackString
      }

      // prepare stack trace
      return (stackString = createStackString.call(this, stack))
    },
    set: function setter (val) {
      stackString = val;
    }
  });

  return error
}

var _package$P = {exports: {}};

/*!
 * bytes
 * Copyright(c) 2012-2014 TJ Holowaychuk
 * Copyright(c) 2015 Jed Watson
 * MIT Licensed
 */

var hasRequired_package$f;

function require_package$f () {
	if (hasRequired_package$f) return _package$P.exports;
	hasRequired_package$f = 1;

	/**
	 * Module exports.
	 * @public
	 */

	_package$P.exports = bytes;
	_package$P.exports.format = format;
	_package$P.exports.parse = parse;

	/**
	 * Module variables.
	 * @private
	 */

	var formatThousandsRegExp = /\B(?=(\d{3})+(?!\d))/g;

	var formatDecimalsRegExp = /(?:\.0*|(\.[^0]+)0+)$/;

	var map = {
	  b:  1,
	  kb: 1 << 10,
	  mb: 1 << 20,
	  gb: 1 << 30,
	  tb: Math.pow(1024, 4),
	  pb: Math.pow(1024, 5),
	};

	var parseRegExp = /^((-|\+)?(\d+(?:\.\d+)?)) *(kb|mb|gb|tb|pb)$/i;

	/**
	 * Convert the given value in bytes into a string or parse to string to an integer in bytes.
	 *
	 * @param {string|number} value
	 * @param {{
	 *  case: [string],
	 *  decimalPlaces: [number]
	 *  fixedDecimals: [boolean]
	 *  thousandsSeparator: [string]
	 *  unitSeparator: [string]
	 *  }} [options] bytes options.
	 *
	 * @returns {string|number|null}
	 */

	function bytes(value, options) {
	  if (typeof value === 'string') {
	    return parse(value);
	  }

	  if (typeof value === 'number') {
	    return format(value, options);
	  }

	  return null;
	}

	/**
	 * Format the given value in bytes into a string.
	 *
	 * If the value is negative, it is kept as such. If it is a float,
	 * it is rounded.
	 *
	 * @param {number} value
	 * @param {object} [options]
	 * @param {number} [options.decimalPlaces=2]
	 * @param {number} [options.fixedDecimals=false]
	 * @param {string} [options.thousandsSeparator=]
	 * @param {string} [options.unit=]
	 * @param {string} [options.unitSeparator=]
	 *
	 * @returns {string|null}
	 * @public
	 */

	function format(value, options) {
	  if (!Number.isFinite(value)) {
	    return null;
	  }

	  var mag = Math.abs(value);
	  var thousandsSeparator = (options && options.thousandsSeparator) || '';
	  var unitSeparator = (options && options.unitSeparator) || '';
	  var decimalPlaces = (options && options.decimalPlaces !== undefined) ? options.decimalPlaces : 2;
	  var fixedDecimals = Boolean(options && options.fixedDecimals);
	  var unit = (options && options.unit) || '';

	  if (!unit || !map[unit.toLowerCase()]) {
	    if (mag >= map.pb) {
	      unit = 'PB';
	    } else if (mag >= map.tb) {
	      unit = 'TB';
	    } else if (mag >= map.gb) {
	      unit = 'GB';
	    } else if (mag >= map.mb) {
	      unit = 'MB';
	    } else if (mag >= map.kb) {
	      unit = 'KB';
	    } else {
	      unit = 'B';
	    }
	  }

	  var val = value / map[unit.toLowerCase()];
	  var str = val.toFixed(decimalPlaces);

	  if (!fixedDecimals) {
	    str = str.replace(formatDecimalsRegExp, '$1');
	  }

	  if (thousandsSeparator) {
	    str = str.split('.').map(function (s, i) {
	      return i === 0
	        ? s.replace(formatThousandsRegExp, thousandsSeparator)
	        : s
	    }).join('.');
	  }

	  return str + unitSeparator + unit;
	}

	/**
	 * Parse the string value into an integer in bytes.
	 *
	 * If no unit is given, it is assumed the value is in bytes.
	 *
	 * @param {number|string} val
	 *
	 * @returns {number|null}
	 * @public
	 */

	function parse(val) {
	  if (typeof val === 'number' && !isNaN(val)) {
	    return val;
	  }

	  if (typeof val !== 'string') {
	    return null;
	  }

	  // Test if the string passed is valid
	  var results = parseRegExp.exec(val);
	  var floatValue;
	  var unit = 'b';

	  if (!results) {
	    // Nothing could be extracted from the given string
	    floatValue = parseInt(val, 10);
	    unit = 'b';
	  } else {
	    // Retrieve the value and the unit
	    floatValue = parseFloat(results[1]);
	    unit = results[4].toLowerCase();
	  }

	  if (isNaN(floatValue)) {
	    return null;
	  }

	  return Math.floor(map[unit] * floatValue);
	}
	return _package$P.exports;
}

var _package$O = {};

/*!
 * content-type
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * RegExp to match *( ";" parameter ) in RFC 7231 sec 3.1.1.1
 *
 * parameter     = token "=" ( token / quoted-string )
 * token         = 1*tchar
 * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
 *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
 *               / DIGIT / ALPHA
 *               ; any VCHAR, except delimiters
 * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
 * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text
 * obs-text      = %x80-FF
 * quoted-pair   = "\" ( HTAB / SP / VCHAR / obs-text )
 */
var PARAM_REGEXP$1 = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g; // eslint-disable-line no-control-regex
var TEXT_REGEXP$1 = /^[\u000b\u0020-\u007e\u0080-\u00ff]+$/; // eslint-disable-line no-control-regex
var TOKEN_REGEXP$1 = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;

/**
 * RegExp to match quoted-pair in RFC 7230 sec 3.2.6
 *
 * quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text )
 * obs-text    = %x80-FF
 */
var QESC_REGEXP$1 = /\\([\u000b\u0020-\u00ff])/g; // eslint-disable-line no-control-regex

/**
 * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6
 */
var QUOTE_REGEXP$1 = /([\\"])/g;

/**
 * RegExp to match type in RFC 7231 sec 3.1.1.1
 *
 * media-type = type "/" subtype
 * type       = token
 * subtype    = token
 */
var TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;

/**
 * Module exports.
 * @public
 */

_package$O.format = format$2;
_package$O.parse = parse$9;

/**
 * Format object to media type.
 *
 * @param {object} obj
 * @return {string}
 * @public
 */

function format$2 (obj) {
  if (!obj || typeof obj !== 'object') {
    throw new TypeError('argument obj is required')
  }

  var parameters = obj.parameters;
  var type = obj.type;

  if (!type || !TYPE_REGEXP.test(type)) {
    throw new TypeError('invalid type')
  }

  var string = type;

  // append parameters
  if (parameters && typeof parameters === 'object') {
    var param;
    var params = Object.keys(parameters).sort();

    for (var i = 0; i < params.length; i++) {
      param = params[i];

      if (!TOKEN_REGEXP$1.test(param)) {
        throw new TypeError('invalid parameter name')
      }

      string += '; ' + param + '=' + qstring$2(parameters[param]);
    }
  }

  return string
}

/**
 * Parse media type to object.
 *
 * @param {string|object} string
 * @return {Object}
 * @public
 */

function parse$9 (string) {
  if (!string) {
    throw new TypeError('argument string is required')
  }

  // support req/res-like objects as argument
  var header = typeof string === 'object'
    ? getcontenttype$1(string)
    : string;

  if (typeof header !== 'string') {
    throw new TypeError('argument string is required to be a string')
  }

  var index = header.indexOf(';');
  var type = index !== -1
    ? header.slice(0, index).trim()
    : header.trim();

  if (!TYPE_REGEXP.test(type)) {
    throw new TypeError('invalid media type')
  }

  var obj = new ContentType(type.toLowerCase());

  // parse parameters
  if (index !== -1) {
    var key;
    var match;
    var value;

    PARAM_REGEXP$1.lastIndex = index;

    while ((match = PARAM_REGEXP$1.exec(header))) {
      if (match.index !== index) {
        throw new TypeError('invalid parameter format')
      }

      index += match[0].length;
      key = match[1].toLowerCase();
      value = match[2];

      if (value.charCodeAt(0) === 0x22 /* " */) {
        // remove quotes
        value = value.slice(1, -1);

        // remove escapes
        if (value.indexOf('\\') !== -1) {
          value = value.replace(QESC_REGEXP$1, '$1');
        }
      }

      obj.parameters[key] = value;
    }

    if (index !== header.length) {
      throw new TypeError('invalid parameter format')
    }
  }

  return obj
}

/**
 * Get content-type from req/res objects.
 *
 * @param {object}
 * @return {Object}
 * @private
 */

function getcontenttype$1 (obj) {
  var header;

  if (typeof obj.getHeader === 'function') {
    // res-like
    header = obj.getHeader('content-type');
  } else if (typeof obj.headers === 'object') {
    // req-like
    header = obj.headers && obj.headers['content-type'];
  }

  if (typeof header !== 'string') {
    throw new TypeError('content-type header is missing from object')
  }

  return header
}

/**
 * Quote a string if necessary.
 *
 * @param {string} val
 * @return {string}
 * @private
 */

function qstring$2 (val) {
  var str = String(val);

  // no need to quote tokens
  if (TOKEN_REGEXP$1.test(str)) {
    return str
  }

  if (str.length > 0 && !TEXT_REGEXP$1.test(str)) {
    throw new TypeError('invalid parameter value')
  }

  return '"' + str.replace(QUOTE_REGEXP$1, '\\$1') + '"'
}

/**
 * Class to represent a content type.
 * @private
 */
function ContentType (type) {
  this.parameters = Object.create(null);
  this.type = type;
}

var _package$N = {exports: {}};

/* eslint no-proto: 0 */
var _package$M = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);

function setProtoOf (obj, proto) {
  obj.__proto__ = proto;
  return obj
}

function mixinProperties (obj, proto) {
  for (var prop in proto) {
    if (!Object.prototype.hasOwnProperty.call(obj, prop)) {
      obj[prop] = proto[prop];
    }
  }
  return obj
}

var require$$0$2 = {
	"100": "Continue",
	"101": "Switching Protocols",
	"102": "Processing",
	"103": "Early Hints",
	"200": "OK",
	"201": "Created",
	"202": "Accepted",
	"203": "Non-Authoritative Information",
	"204": "No Content",
	"205": "Reset Content",
	"206": "Partial Content",
	"207": "Multi-Status",
	"208": "Already Reported",
	"226": "IM Used",
	"300": "Multiple Choices",
	"301": "Moved Permanently",
	"302": "Found",
	"303": "See Other",
	"304": "Not Modified",
	"305": "Use Proxy",
	"307": "Temporary Redirect",
	"308": "Permanent Redirect",
	"400": "Bad Request",
	"401": "Unauthorized",
	"402": "Payment Required",
	"403": "Forbidden",
	"404": "Not Found",
	"405": "Method Not Allowed",
	"406": "Not Acceptable",
	"407": "Proxy Authentication Required",
	"408": "Request Timeout",
	"409": "Conflict",
	"410": "Gone",
	"411": "Length Required",
	"412": "Precondition Failed",
	"413": "Payload Too Large",
	"414": "URI Too Long",
	"415": "Unsupported Media Type",
	"416": "Range Not Satisfiable",
	"417": "Expectation Failed",
	"418": "I'm a Teapot",
	"421": "Misdirected Request",
	"422": "Unprocessable Entity",
	"423": "Locked",
	"424": "Failed Dependency",
	"425": "Too Early",
	"426": "Upgrade Required",
	"428": "Precondition Required",
	"429": "Too Many Requests",
	"431": "Request Header Fields Too Large",
	"451": "Unavailable For Legal Reasons",
	"500": "Internal Server Error",
	"501": "Not Implemented",
	"502": "Bad Gateway",
	"503": "Service Unavailable",
	"504": "Gateway Timeout",
	"505": "HTTP Version Not Supported",
	"506": "Variant Also Negotiates",
	"507": "Insufficient Storage",
	"508": "Loop Detected",
	"509": "Bandwidth Limit Exceeded",
	"510": "Not Extended",
	"511": "Network Authentication Required"
};

/*!
 * statuses
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 * @private
 */

var codes = require$$0$2;

/**
 * Module exports.
 * @public
 */

var _package$L = status;

// status code to message map
status.message = codes;

// status message (lower-case) to code map
status.code = createMessageToStatusCodeMap(codes);

// array of status codes
status.codes = createStatusCodeList(codes);

// status codes for redirects
status.redirect = {
  300: true,
  301: true,
  302: true,
  303: true,
  305: true,
  307: true,
  308: true
};

// status codes for empty bodies
status.empty = {
  204: true,
  205: true,
  304: true
};

// status codes for when you should retry the request
status.retry = {
  502: true,
  503: true,
  504: true
};

/**
 * Create a map of message to status code.
 * @private
 */

function createMessageToStatusCodeMap (codes) {
  var map = {};

  Object.keys(codes).forEach(function forEachCode (code) {
    var message = codes[code];
    var status = Number(code);

    // populate map
    map[message.toLowerCase()] = status;
  });

  return map
}

/**
 * Create a list of all status codes.
 * @private
 */

function createStatusCodeList (codes) {
  return Object.keys(codes).map(function mapCode (code) {
    return Number(code)
  })
}

/**
 * Get the status code for given message.
 * @private
 */

function getStatusCode (message) {
  var msg = message.toLowerCase();

  if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {
    throw new Error('invalid status message: "' + message + '"')
  }

  return status.code[msg]
}

/**
 * Get the status message for given code.
 * @private
 */

function getStatusMessage (code) {
  if (!Object.prototype.hasOwnProperty.call(status.message, code)) {
    throw new Error('invalid status code: ' + code)
  }

  return status.message[code]
}

/**
 * Get the status code.
 *
 * Given a number, this will throw if it is not a known status
 * code, otherwise the code will be returned. Given a string,
 * the string will be parsed for a number and return the code
 * if valid, otherwise will lookup the code assuming this is
 * the status message.
 *
 * @param {string|number} code
 * @returns {number}
 * @public
 */

function status (code) {
  if (typeof code === 'number') {
    return getStatusMessage(code)
  }

  if (typeof code !== 'string') {
    throw new TypeError('code must be a number or string')
  }

  // '403'
  var n = parseInt(code, 10);
  if (!isNaN(n)) {
    return getStatusMessage(n)
  }

  return getStatusCode(code)
}

var inherits = {exports: {}};

var inherits_browser = {exports: {}};

var hasRequiredInherits_browser;

function requireInherits_browser () {
	if (hasRequiredInherits_browser) return inherits_browser.exports;
	hasRequiredInherits_browser = 1;
	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  inherits_browser.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	          value: ctor,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      });
	    }
	  };
	} else {
	  // old school shim for old browsers
	  inherits_browser.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      var TempCtor = function () {};
	      TempCtor.prototype = superCtor.prototype;
	      ctor.prototype = new TempCtor();
	      ctor.prototype.constructor = ctor;
	    }
	  };
	}
	return inherits_browser.exports;
}

try {
  var util$1 = require('util');
  /* istanbul ignore next */
  if (typeof util$1.inherits !== 'function') throw '';
  inherits.exports = util$1.inherits;
} catch (e) {
  /* istanbul ignore next */
  inherits.exports = requireInherits_browser();
}

var inheritsExports = inherits.exports;

/*!
 * toidentifier
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var _package$K = toIdentifier;

/**
 * Trasform the given string into a JavaScript identifier
 *
 * @param {string} str
 * @returns {string}
 * @public
 */

function toIdentifier (str) {
  return str
    .split(' ')
    .map(function (token) {
      return token.slice(0, 1).toUpperCase() + token.slice(1)
    })
    .join('')
    .replace(/[^ _0-9a-z]/gi, '')
}

/*!
 * http-errors
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */

(function (module) {

	/**
	 * Module dependencies.
	 * @private
	 */

	var deprecate = _package$Q('http-errors');
	var setPrototypeOf = _package$M;
	var statuses = _package$L;
	var inherits = inheritsExports;
	var toIdentifier = _package$K;

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = createError;
	module.exports.HttpError = createHttpErrorConstructor();
	module.exports.isHttpError = createIsHttpErrorFunction(module.exports.HttpError);

	// Populate exports for all constructors
	populateConstructorExports(module.exports, statuses.codes, module.exports.HttpError);

	/**
	 * Get the code class of a status code.
	 * @private
	 */

	function codeClass (status) {
	  return Number(String(status).charAt(0) + '00')
	}

	/**
	 * Create a new HTTP Error.
	 *
	 * @returns {Error}
	 * @public
	 */

	function createError () {
	  // so much arity going on ~_~
	  var err;
	  var msg;
	  var status = 500;
	  var props = {};
	  for (var i = 0; i < arguments.length; i++) {
	    var arg = arguments[i];
	    var type = typeof arg;
	    if (type === 'object' && arg instanceof Error) {
	      err = arg;
	      status = err.status || err.statusCode || status;
	    } else if (type === 'number' && i === 0) {
	      status = arg;
	    } else if (type === 'string') {
	      msg = arg;
	    } else if (type === 'object') {
	      props = arg;
	    } else {
	      throw new TypeError('argument #' + (i + 1) + ' unsupported type ' + type)
	    }
	  }

	  if (typeof status === 'number' && (status < 400 || status >= 600)) {
	    deprecate('non-error status code; use only 4xx or 5xx status codes');
	  }

	  if (typeof status !== 'number' ||
	    (!statuses.message[status] && (status < 400 || status >= 600))) {
	    status = 500;
	  }

	  // constructor
	  var HttpError = createError[status] || createError[codeClass(status)];

	  if (!err) {
	    // create error
	    err = HttpError
	      ? new HttpError(msg)
	      : new Error(msg || statuses.message[status]);
	    Error.captureStackTrace(err, createError);
	  }

	  if (!HttpError || !(err instanceof HttpError) || err.status !== status) {
	    // add properties to generic error
	    err.expose = status < 500;
	    err.status = err.statusCode = status;
	  }

	  for (var key in props) {
	    if (key !== 'status' && key !== 'statusCode') {
	      err[key] = props[key];
	    }
	  }

	  return err
	}

	/**
	 * Create HTTP error abstract base class.
	 * @private
	 */

	function createHttpErrorConstructor () {
	  function HttpError () {
	    throw new TypeError('cannot construct abstract class')
	  }

	  inherits(HttpError, Error);

	  return HttpError
	}

	/**
	 * Create a constructor for a client error.
	 * @private
	 */

	function createClientErrorConstructor (HttpError, name, code) {
	  var className = toClassName(name);

	  function ClientError (message) {
	    // create the error object
	    var msg = message != null ? message : statuses.message[code];
	    var err = new Error(msg);

	    // capture a stack trace to the construction point
	    Error.captureStackTrace(err, ClientError);

	    // adjust the [[Prototype]]
	    setPrototypeOf(err, ClientError.prototype);

	    // redefine the error message
	    Object.defineProperty(err, 'message', {
	      enumerable: true,
	      configurable: true,
	      value: msg,
	      writable: true
	    });

	    // redefine the error name
	    Object.defineProperty(err, 'name', {
	      enumerable: false,
	      configurable: true,
	      value: className,
	      writable: true
	    });

	    return err
	  }

	  inherits(ClientError, HttpError);
	  nameFunc(ClientError, className);

	  ClientError.prototype.status = code;
	  ClientError.prototype.statusCode = code;
	  ClientError.prototype.expose = true;

	  return ClientError
	}

	/**
	 * Create function to test is a value is a HttpError.
	 * @private
	 */

	function createIsHttpErrorFunction (HttpError) {
	  return function isHttpError (val) {
	    if (!val || typeof val !== 'object') {
	      return false
	    }

	    if (val instanceof HttpError) {
	      return true
	    }

	    return val instanceof Error &&
	      typeof val.expose === 'boolean' &&
	      typeof val.statusCode === 'number' && val.status === val.statusCode
	  }
	}

	/**
	 * Create a constructor for a server error.
	 * @private
	 */

	function createServerErrorConstructor (HttpError, name, code) {
	  var className = toClassName(name);

	  function ServerError (message) {
	    // create the error object
	    var msg = message != null ? message : statuses.message[code];
	    var err = new Error(msg);

	    // capture a stack trace to the construction point
	    Error.captureStackTrace(err, ServerError);

	    // adjust the [[Prototype]]
	    setPrototypeOf(err, ServerError.prototype);

	    // redefine the error message
	    Object.defineProperty(err, 'message', {
	      enumerable: true,
	      configurable: true,
	      value: msg,
	      writable: true
	    });

	    // redefine the error name
	    Object.defineProperty(err, 'name', {
	      enumerable: false,
	      configurable: true,
	      value: className,
	      writable: true
	    });

	    return err
	  }

	  inherits(ServerError, HttpError);
	  nameFunc(ServerError, className);

	  ServerError.prototype.status = code;
	  ServerError.prototype.statusCode = code;
	  ServerError.prototype.expose = false;

	  return ServerError
	}

	/**
	 * Set the name of a function, if possible.
	 * @private
	 */

	function nameFunc (func, name) {
	  var desc = Object.getOwnPropertyDescriptor(func, 'name');

	  if (desc && desc.configurable) {
	    desc.value = name;
	    Object.defineProperty(func, 'name', desc);
	  }
	}

	/**
	 * Populate the exports object with constructors for every error class.
	 * @private
	 */

	function populateConstructorExports (exports, codes, HttpError) {
	  codes.forEach(function forEachCode (code) {
	    var CodeError;
	    var name = toIdentifier(statuses.message[code]);

	    switch (codeClass(code)) {
	      case 400:
	        CodeError = createClientErrorConstructor(HttpError, name, code);
	        break
	      case 500:
	        CodeError = createServerErrorConstructor(HttpError, name, code);
	        break
	    }

	    if (CodeError) {
	      // export the constructor
	      exports[code] = CodeError;
	      exports[name] = CodeError;
	    }
	  });
	}

	/**
	 * Get a class name from a name identifier.
	 * @private
	 */

	function toClassName (name) {
	  return name.substr(-5) !== 'Error'
	    ? name + 'Error'
	    : name
	} 
} (_package$N));

var _packageExports$b = _package$N.exports;

var src = {exports: {}};

var node = {exports: {}};

var debug$6 = {exports: {}};

/**
 * Helpers.
 */

var _package$J;
var hasRequired_package$e;

function require_package$e () {
	if (hasRequired_package$e) return _package$J;
	hasRequired_package$e = 1;
	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	_package$J = function(val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse(val);
	  } else if (type === 'number' && isNaN(val) === false) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  if (ms >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (ms >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (ms >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (ms >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  return plural(ms, d, 'day') ||
	    plural(ms, h, 'hour') ||
	    plural(ms, m, 'minute') ||
	    plural(ms, s, 'second') ||
	    ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) {
	    return;
	  }
	  if (ms < n * 1.5) {
	    return Math.floor(ms / n) + ' ' + name;
	  }
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}
	return _package$J;
}

var hasRequiredDebug;

function requireDebug () {
	if (hasRequiredDebug) return debug$6.exports;
	hasRequiredDebug = 1;
	(function (module, exports) {
		/**
		 * This is the common logic for both the Node.js and web browser
		 * implementations of `debug()`.
		 *
		 * Expose `debug()` as the module.
		 */

		exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
		exports.coerce = coerce;
		exports.disable = disable;
		exports.enable = enable;
		exports.enabled = enabled;
		exports.humanize = require_package$e();

		/**
		 * The currently active debug mode names, and names to skip.
		 */

		exports.names = [];
		exports.skips = [];

		/**
		 * Map of special "%n" handling functions, for the debug "format" argument.
		 *
		 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
		 */

		exports.formatters = {};

		/**
		 * Previous log timestamp.
		 */

		var prevTime;

		/**
		 * Select a color.
		 * @param {String} namespace
		 * @return {Number}
		 * @api private
		 */

		function selectColor(namespace) {
		  var hash = 0, i;

		  for (i in namespace) {
		    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
		    hash |= 0; // Convert to 32bit integer
		  }

		  return exports.colors[Math.abs(hash) % exports.colors.length];
		}

		/**
		 * Create a debugger with the given `namespace`.
		 *
		 * @param {String} namespace
		 * @return {Function}
		 * @api public
		 */

		function createDebug(namespace) {

		  function debug() {
		    // disabled?
		    if (!debug.enabled) return;

		    var self = debug;

		    // set `diff` timestamp
		    var curr = +new Date();
		    var ms = curr - (prevTime || curr);
		    self.diff = ms;
		    self.prev = prevTime;
		    self.curr = curr;
		    prevTime = curr;

		    // turn the `arguments` into a proper Array
		    var args = new Array(arguments.length);
		    for (var i = 0; i < args.length; i++) {
		      args[i] = arguments[i];
		    }

		    args[0] = exports.coerce(args[0]);

		    if ('string' !== typeof args[0]) {
		      // anything else let's inspect with %O
		      args.unshift('%O');
		    }

		    // apply any `formatters` transformations
		    var index = 0;
		    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
		      // if we encounter an escaped % then don't increase the array index
		      if (match === '%%') return match;
		      index++;
		      var formatter = exports.formatters[format];
		      if ('function' === typeof formatter) {
		        var val = args[index];
		        match = formatter.call(self, val);

		        // now we need to remove `args[index]` since it's inlined in the `format`
		        args.splice(index, 1);
		        index--;
		      }
		      return match;
		    });

		    // apply env-specific formatting (colors, etc.)
		    exports.formatArgs.call(self, args);

		    var logFn = debug.log || exports.log || console.log.bind(console);
		    logFn.apply(self, args);
		  }

		  debug.namespace = namespace;
		  debug.enabled = exports.enabled(namespace);
		  debug.useColors = exports.useColors();
		  debug.color = selectColor(namespace);

		  // env-specific initialization logic for debug instances
		  if ('function' === typeof exports.init) {
		    exports.init(debug);
		  }

		  return debug;
		}

		/**
		 * Enables a debug mode by namespaces. This can include modes
		 * separated by a colon and wildcards.
		 *
		 * @param {String} namespaces
		 * @api public
		 */

		function enable(namespaces) {
		  exports.save(namespaces);

		  exports.names = [];
		  exports.skips = [];

		  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		  var len = split.length;

		  for (var i = 0; i < len; i++) {
		    if (!split[i]) continue; // ignore empty strings
		    namespaces = split[i].replace(/\*/g, '.*?');
		    if (namespaces[0] === '-') {
		      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
		    } else {
		      exports.names.push(new RegExp('^' + namespaces + '$'));
		    }
		  }
		}

		/**
		 * Disable debug output.
		 *
		 * @api public
		 */

		function disable() {
		  exports.enable('');
		}

		/**
		 * Returns true if the given mode name is enabled, false otherwise.
		 *
		 * @param {String} name
		 * @return {Boolean}
		 * @api public
		 */

		function enabled(name) {
		  var i, len;
		  for (i = 0, len = exports.skips.length; i < len; i++) {
		    if (exports.skips[i].test(name)) {
		      return false;
		    }
		  }
		  for (i = 0, len = exports.names.length; i < len; i++) {
		    if (exports.names[i].test(name)) {
		      return true;
		    }
		  }
		  return false;
		}

		/**
		 * Coerce `val`.
		 *
		 * @param {Mixed} val
		 * @return {Mixed}
		 * @api private
		 */

		function coerce(val) {
		  if (val instanceof Error) return val.stack || val.message;
		  return val;
		} 
	} (debug$6, debug$6.exports));
	return debug$6.exports;
}

/**
 * Module dependencies.
 */

var hasRequiredNode;

function requireNode () {
	if (hasRequiredNode) return node.exports;
	hasRequiredNode = 1;
	(function (module, exports) {
		var tty = require$$0$3;
		var util = require$$1$1;

		/**
		 * This is the Node.js implementation of `debug()`.
		 *
		 * Expose `debug()` as the module.
		 */

		exports = module.exports = requireDebug();
		exports.init = init;
		exports.log = log;
		exports.formatArgs = formatArgs;
		exports.save = save;
		exports.load = load;
		exports.useColors = useColors;

		/**
		 * Colors.
		 */

		exports.colors = [6, 2, 3, 4, 5, 1];

		/**
		 * Build up the default `inspectOpts` object from the environment variables.
		 *
		 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
		 */

		exports.inspectOpts = Object.keys(process.env).filter(function (key) {
		  return /^debug_/i.test(key);
		}).reduce(function (obj, key) {
		  // camel-case
		  var prop = key
		    .substring(6)
		    .toLowerCase()
		    .replace(/_([a-z])/g, function (_, k) { return k.toUpperCase() });

		  // coerce string value into JS value
		  var val = process.env[key];
		  if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
		  else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
		  else if (val === 'null') val = null;
		  else val = Number(val);

		  obj[prop] = val;
		  return obj;
		}, {});

		/**
		 * The file descriptor to write the `debug()` calls to.
		 * Set the `DEBUG_FD` env variable to override with another value. i.e.:
		 *
		 *   $ DEBUG_FD=3 node script.js 3>debug.log
		 */

		var fd = parseInt(process.env.DEBUG_FD, 10) || 2;

		if (1 !== fd && 2 !== fd) {
		  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')();
		}

		var stream = 1 === fd ? process.stdout :
		             2 === fd ? process.stderr :
		             createWritableStdioStream(fd);

		/**
		 * Is stdout a TTY? Colored output is enabled when `true`.
		 */

		function useColors() {
		  return 'colors' in exports.inspectOpts
		    ? Boolean(exports.inspectOpts.colors)
		    : tty.isatty(fd);
		}

		/**
		 * Map %o to `util.inspect()`, all on a single line.
		 */

		exports.formatters.o = function(v) {
		  this.inspectOpts.colors = this.useColors;
		  return util.inspect(v, this.inspectOpts)
		    .split('\n').map(function(str) {
		      return str.trim()
		    }).join(' ');
		};

		/**
		 * Map %o to `util.inspect()`, allowing multiple lines if needed.
		 */

		exports.formatters.O = function(v) {
		  this.inspectOpts.colors = this.useColors;
		  return util.inspect(v, this.inspectOpts);
		};

		/**
		 * Adds ANSI color escape codes if enabled.
		 *
		 * @api public
		 */

		function formatArgs(args) {
		  var name = this.namespace;
		  var useColors = this.useColors;

		  if (useColors) {
		    var c = this.color;
		    var prefix = '  \u001b[3' + c + ';1m' + name + ' ' + '\u001b[0m';

		    args[0] = prefix + args[0].split('\n').join('\n' + prefix);
		    args.push('\u001b[3' + c + 'm+' + exports.humanize(this.diff) + '\u001b[0m');
		  } else {
		    args[0] = new Date().toUTCString()
		      + ' ' + name + ' ' + args[0];
		  }
		}

		/**
		 * Invokes `util.format()` with the specified arguments and writes to `stream`.
		 */

		function log() {
		  return stream.write(util.format.apply(util, arguments) + '\n');
		}

		/**
		 * Save `namespaces`.
		 *
		 * @param {String} namespaces
		 * @api private
		 */

		function save(namespaces) {
		  if (null == namespaces) {
		    // If you set a process.env field to null or undefined, it gets cast to the
		    // string 'null' or 'undefined'. Just delete instead.
		    delete process.env.DEBUG;
		  } else {
		    process.env.DEBUG = namespaces;
		  }
		}

		/**
		 * Load `namespaces`.
		 *
		 * @return {String} returns the previously persisted debug modes
		 * @api private
		 */

		function load() {
		  return process.env.DEBUG;
		}

		/**
		 * Copied from `node/src/node.js`.
		 *
		 * XXX: It's lame that node doesn't expose this API out-of-the-box. It also
		 * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.
		 */

		function createWritableStdioStream (fd) {
		  var stream;
		  var tty_wrap = process.binding('tty_wrap');

		  // Note stream._type is used for test-module-load-list.js

		  switch (tty_wrap.guessHandleType(fd)) {
		    case 'TTY':
		      stream = new tty.WriteStream(fd);
		      stream._type = 'tty';

		      // Hack to have stream not keep the event loop alive.
		      // See https://github.com/joyent/node/issues/1726
		      if (stream._handle && stream._handle.unref) {
		        stream._handle.unref();
		      }
		      break;

		    case 'FILE':
		      var fs = require$$1$2;
		      stream = new fs.SyncWriteStream(fd, { autoClose: false });
		      stream._type = 'fs';
		      break;

		    case 'PIPE':
		    case 'TCP':
		      var net = require$$4$1;
		      stream = new net.Socket({
		        fd: fd,
		        readable: false,
		        writable: true
		      });

		      // FIXME Should probably have an option in net.Socket to create a
		      // stream from an existing fd which is writable only. But for now
		      // we'll just add this hack and set the `readable` member to false.
		      // Test: ./node test/fixtures/echo.js < /etc/passwd
		      stream.readable = false;
		      stream.read = null;
		      stream._type = 'pipe';

		      // FIXME Hack to have stream not keep the event loop alive.
		      // See https://github.com/joyent/node/issues/1726
		      if (stream._handle && stream._handle.unref) {
		        stream._handle.unref();
		      }
		      break;

		    default:
		      // Probably an error on in uv_guess_handle()
		      throw new Error('Implement me. Unknown stream file type!');
		  }

		  // For supporting legacy API we put the FD here.
		  stream.fd = fd;

		  stream._isStdio = true;

		  return stream;
		}

		/**
		 * Init logic for `debug` instances.
		 *
		 * Create a new `inspectOpts` object in case `useColors` is set
		 * differently for a particular `debug` instance.
		 */

		function init (debug) {
		  debug.inspectOpts = {};

		  var keys = Object.keys(exports.inspectOpts);
		  for (var i = 0; i < keys.length; i++) {
		    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
		  }
		}

		/**
		 * Enable namespaces listed in `process.env.DEBUG` initially.
		 */

		exports.enable(load()); 
	} (node, node.exports));
	return node.exports;
}

var browser = {exports: {}};

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

var hasRequiredBrowser;

function requireBrowser () {
	if (hasRequiredBrowser) return browser.exports;
	hasRequiredBrowser = 1;
	(function (module, exports) {
		exports = module.exports = requireDebug();
		exports.log = log;
		exports.formatArgs = formatArgs;
		exports.save = save;
		exports.load = load;
		exports.useColors = useColors;
		exports.storage = 'undefined' != typeof chrome
		               && 'undefined' != typeof chrome.storage
		                  ? chrome.storage.local
		                  : localstorage();

		/**
		 * Colors.
		 */

		exports.colors = [
		  'lightseagreen',
		  'forestgreen',
		  'goldenrod',
		  'dodgerblue',
		  'darkorchid',
		  'crimson'
		];

		/**
		 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
		 * and the Firebug extension (any Firefox version) are known
		 * to support "%c" CSS customizations.
		 *
		 * TODO: add a `localStorage` variable to explicitly enable/disable colors
		 */

		function useColors() {
		  // NB: In an Electron preload script, document will be defined but not fully
		  // initialized. Since we know we're in Chrome, we'll just detect this case
		  // explicitly
		  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
		    return true;
		  }

		  // is webkit? http://stackoverflow.com/a/16459606/376773
		  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
		  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		    // is firebug? http://stackoverflow.com/a/398120/376773
		    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		    // is firefox >= v31?
		    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
		    // double check webkit in userAgent just in case we are in a worker
		    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
		}

		/**
		 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
		 */

		exports.formatters.j = function(v) {
		  try {
		    return JSON.stringify(v);
		  } catch (err) {
		    return '[UnexpectedJSONParseError]: ' + err.message;
		  }
		};


		/**
		 * Colorize log arguments if enabled.
		 *
		 * @api public
		 */

		function formatArgs(args) {
		  var useColors = this.useColors;

		  args[0] = (useColors ? '%c' : '')
		    + this.namespace
		    + (useColors ? ' %c' : ' ')
		    + args[0]
		    + (useColors ? '%c ' : ' ')
		    + '+' + exports.humanize(this.diff);

		  if (!useColors) return;

		  var c = 'color: ' + this.color;
		  args.splice(1, 0, c, 'color: inherit');

		  // the final "%c" is somewhat tricky, because there could be other
		  // arguments passed either before or after the %c, so we need to
		  // figure out the correct index to insert the CSS into
		  var index = 0;
		  var lastC = 0;
		  args[0].replace(/%[a-zA-Z%]/g, function(match) {
		    if ('%%' === match) return;
		    index++;
		    if ('%c' === match) {
		      // we only are interested in the *last* %c
		      // (the user may have provided their own)
		      lastC = index;
		    }
		  });

		  args.splice(lastC, 0, c);
		}

		/**
		 * Invokes `console.log()` when available.
		 * No-op when `console.log` is not a "function".
		 *
		 * @api public
		 */

		function log() {
		  // this hackery is required for IE8/9, where
		  // the `console.log` function doesn't have 'apply'
		  return 'object' === typeof console
		    && console.log
		    && Function.prototype.apply.call(console.log, console, arguments);
		}

		/**
		 * Save `namespaces`.
		 *
		 * @param {String} namespaces
		 * @api private
		 */

		function save(namespaces) {
		  try {
		    if (null == namespaces) {
		      exports.storage.removeItem('debug');
		    } else {
		      exports.storage.debug = namespaces;
		    }
		  } catch(e) {}
		}

		/**
		 * Load `namespaces`.
		 *
		 * @return {String} returns the previously persisted debug modes
		 * @api private
		 */

		function load() {
		  var r;
		  try {
		    r = exports.storage.debug;
		  } catch(e) {}

		  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
		  if (!r && typeof process !== 'undefined' && 'env' in process) {
		    r = process.env.DEBUG;
		  }

		  return r;
		}

		/**
		 * Enable namespaces listed in `localStorage.debug` initially.
		 */

		exports.enable(load());

		/**
		 * Localstorage attempts to return the localstorage.
		 *
		 * This is necessary because safari throws
		 * when a user disables cookies/localstorage
		 * and you attempt to access it.
		 *
		 * @return {LocalStorage}
		 * @api private
		 */

		function localstorage() {
		  try {
		    return window.localStorage;
		  } catch (e) {}
		} 
	} (browser, browser.exports));
	return browser.exports;
}

/**
 * Detect Electron renderer process, which is node, but we should
 * treat as a browser.
 */

if (typeof process !== 'undefined' && process.type === 'renderer') {
  src.exports = requireBrowser();
} else {
  src.exports = requireNode();
}

var srcExports = src.exports;

/*!
 * destroy
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015-2022 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 * @private
 */

var EventEmitter = require$$0$4.EventEmitter;
var ReadStream = require$$1$2.ReadStream;
var Stream$1 = require$$1$3;
var Zlib = require$$3$1;

/**
 * Module exports.
 * @public
 */

var _package$I = destroy$1;

/**
 * Destroy the given stream, and optionally suppress any future `error` events.
 *
 * @param {object} stream
 * @param {boolean} suppress
 * @public
 */

function destroy$1 (stream, suppress) {
  if (isFsReadStream(stream)) {
    destroyReadStream(stream);
  } else if (isZlibStream(stream)) {
    destroyZlibStream(stream);
  } else if (hasDestroy(stream)) {
    stream.destroy();
  }

  if (isEventEmitter(stream) && suppress) {
    stream.removeAllListeners('error');
    stream.addListener('error', noop);
  }

  return stream
}

/**
 * Destroy a ReadStream.
 *
 * @param {object} stream
 * @private
 */

function destroyReadStream (stream) {
  stream.destroy();

  if (typeof stream.close === 'function') {
    // node.js core bug work-around
    stream.on('open', onOpenClose);
  }
}

/**
 * Close a Zlib stream.
 *
 * Zlib streams below Node.js 4.5.5 have a buggy implementation
 * of .close() when zlib encountered an error.
 *
 * @param {object} stream
 * @private
 */

function closeZlibStream (stream) {
  if (stream._hadError === true) {
    var prop = stream._binding === null
      ? '_binding'
      : '_handle';

    stream[prop] = {
      close: function () { this[prop] = null; }
    };
  }

  stream.close();
}

/**
 * Destroy a Zlib stream.
 *
 * Zlib streams don't have a destroy function in Node.js 6. On top of that
 * simply calling destroy on a zlib stream in Node.js 8+ will result in a
 * memory leak. So until that is fixed, we need to call both close AND destroy.
 *
 * PR to fix memory leak: https://github.com/nodejs/node/pull/23734
 *
 * In Node.js 6+8, it's important that destroy is called before close as the
 * stream would otherwise emit the error 'zlib binding closed'.
 *
 * @param {object} stream
 * @private
 */

function destroyZlibStream (stream) {
  if (typeof stream.destroy === 'function') {
    // node.js core bug work-around
    // istanbul ignore if: node.js 0.8
    if (stream._binding) {
      // node.js < 0.10.0
      stream.destroy();
      if (stream._processing) {
        stream._needDrain = true;
        stream.once('drain', onDrainClearBinding);
      } else {
        stream._binding.clear();
      }
    } else if (stream._destroy && stream._destroy !== Stream$1.Transform.prototype._destroy) {
      // node.js >= 12, ^11.1.0, ^10.15.1
      stream.destroy();
    } else if (stream._destroy && typeof stream.close === 'function') {
      // node.js 7, 8
      stream.destroyed = true;
      stream.close();
    } else {
      // fallback
      // istanbul ignore next
      stream.destroy();
    }
  } else if (typeof stream.close === 'function') {
    // node.js < 8 fallback
    closeZlibStream(stream);
  }
}

/**
 * Determine if stream has destroy.
 * @private
 */

function hasDestroy (stream) {
  return stream instanceof Stream$1 &&
    typeof stream.destroy === 'function'
}

/**
 * Determine if val is EventEmitter.
 * @private
 */

function isEventEmitter (val) {
  return val instanceof EventEmitter
}

/**
 * Determine if stream is fs.ReadStream stream.
 * @private
 */

function isFsReadStream (stream) {
  return stream instanceof ReadStream
}

/**
 * Determine if stream is Zlib stream.
 * @private
 */

function isZlibStream (stream) {
  return stream instanceof Zlib.Gzip ||
    stream instanceof Zlib.Gunzip ||
    stream instanceof Zlib.Deflate ||
    stream instanceof Zlib.DeflateRaw ||
    stream instanceof Zlib.Inflate ||
    stream instanceof Zlib.InflateRaw ||
    stream instanceof Zlib.Unzip
}

/**
 * No-op function.
 * @private
 */

function noop () {}

/**
 * On drain handler to clear binding.
 * @private
 */

// istanbul ignore next: node.js 0.8
function onDrainClearBinding () {
  this._binding.clear();
}

/**
 * On open handler to close stream.
 * @private
 */

function onOpenClose () {
  if (typeof this.fd === 'number') {
    // actually close down the fd
    this.close();
  }
}

var lib$4 = {exports: {}};

/* eslint-disable node/no-deprecated-api */

var safer_1;
var hasRequiredSafer;

function requireSafer () {
	if (hasRequiredSafer) return safer_1;
	hasRequiredSafer = 1;

	var buffer = require$$0$5;
	var Buffer = buffer.Buffer;

	var safer = {};

	var key;

	for (key in buffer) {
	  if (!buffer.hasOwnProperty(key)) continue
	  if (key === 'SlowBuffer' || key === 'Buffer') continue
	  safer[key] = buffer[key];
	}

	var Safer = safer.Buffer = {};
	for (key in Buffer) {
	  if (!Buffer.hasOwnProperty(key)) continue
	  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
	  Safer[key] = Buffer[key];
	}

	safer.Buffer.prototype = Buffer.prototype;

	if (!Safer.from || Safer.from === Uint8Array.from) {
	  Safer.from = function (value, encodingOrOffset, length) {
	    if (typeof value === 'number') {
	      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
	    }
	    if (value && typeof value.length === 'undefined') {
	      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
	    }
	    return Buffer(value, encodingOrOffset, length)
	  };
	}

	if (!Safer.alloc) {
	  Safer.alloc = function (size, fill, encoding) {
	    if (typeof size !== 'number') {
	      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
	    }
	    if (size < 0 || size >= 2 * (1 << 30)) {
	      throw new RangeError('The value "' + size + '" is invalid for option "size"')
	    }
	    var buf = Buffer(size);
	    if (!fill || fill.length === 0) {
	      buf.fill(0);
	    } else if (typeof encoding === 'string') {
	      buf.fill(fill, encoding);
	    } else {
	      buf.fill(fill);
	    }
	    return buf
	  };
	}

	if (!safer.kStringMaxLength) {
	  try {
	    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength;
	  } catch (e) {
	    // we can't determine kStringMaxLength in environments where process.binding
	    // is unsupported, so let's not set it
	  }
	}

	if (!safer.constants) {
	  safer.constants = {
	    MAX_LENGTH: safer.kMaxLength
	  };
	  if (safer.kStringMaxLength) {
	    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
	  }
	}

	safer_1 = safer;
	return safer_1;
}

var bomHandling = {};

var hasRequiredBomHandling;

function requireBomHandling () {
	if (hasRequiredBomHandling) return bomHandling;
	hasRequiredBomHandling = 1;

	var BOMChar = '\uFEFF';

	bomHandling.PrependBOM = PrependBOMWrapper;
	function PrependBOMWrapper(encoder, options) {
	    this.encoder = encoder;
	    this.addBOM = true;
	}

	PrependBOMWrapper.prototype.write = function(str) {
	    if (this.addBOM) {
	        str = BOMChar + str;
	        this.addBOM = false;
	    }

	    return this.encoder.write(str);
	};

	PrependBOMWrapper.prototype.end = function() {
	    return this.encoder.end();
	};


	//------------------------------------------------------------------------------

	bomHandling.StripBOM = StripBOMWrapper;
	function StripBOMWrapper(decoder, options) {
	    this.decoder = decoder;
	    this.pass = false;
	    this.options = options || {};
	}

	StripBOMWrapper.prototype.write = function(buf) {
	    var res = this.decoder.write(buf);
	    if (this.pass || !res)
	        return res;

	    if (res[0] === BOMChar) {
	        res = res.slice(1);
	        if (typeof this.options.stripBOM === 'function')
	            this.options.stripBOM();
	    }

	    this.pass = true;
	    return res;
	};

	StripBOMWrapper.prototype.end = function() {
	    return this.decoder.end();
	};
	return bomHandling;
}

var encodings = {};

var internal;
var hasRequiredInternal;

function requireInternal () {
	if (hasRequiredInternal) return internal;
	hasRequiredInternal = 1;
	var Buffer = requireSafer().Buffer;

	// Export Node.js internal encodings.

	internal = {
	    // Encodings
	    utf8:   { type: "_internal", bomAware: true},
	    cesu8:  { type: "_internal", bomAware: true},
	    unicode11utf8: "utf8",

	    ucs2:   { type: "_internal", bomAware: true},
	    utf16le: "ucs2",

	    binary: { type: "_internal" },
	    base64: { type: "_internal" },
	    hex:    { type: "_internal" },

	    // Codec.
	    _internal: InternalCodec,
	};

	//------------------------------------------------------------------------------

	function InternalCodec(codecOptions, iconv) {
	    this.enc = codecOptions.encodingName;
	    this.bomAware = codecOptions.bomAware;

	    if (this.enc === "base64")
	        this.encoder = InternalEncoderBase64;
	    else if (this.enc === "cesu8") {
	        this.enc = "utf8"; // Use utf8 for decoding.
	        this.encoder = InternalEncoderCesu8;

	        // Add decoder for versions of Node not supporting CESU-8
	        if (Buffer.from('eda0bdedb2a9', 'hex').toString() !== '💩') {
	            this.decoder = InternalDecoderCesu8;
	            this.defaultCharUnicode = iconv.defaultCharUnicode;
	        }
	    }
	}

	InternalCodec.prototype.encoder = InternalEncoder;
	InternalCodec.prototype.decoder = InternalDecoder;

	//------------------------------------------------------------------------------

	// We use node.js internal decoder. Its signature is the same as ours.
	var StringDecoder = require$$1$4.StringDecoder;

	if (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.
	    StringDecoder.prototype.end = function() {};


	function InternalDecoder(options, codec) {
	    StringDecoder.call(this, codec.enc);
	}

	InternalDecoder.prototype = StringDecoder.prototype;


	//------------------------------------------------------------------------------
	// Encoder is mostly trivial

	function InternalEncoder(options, codec) {
	    this.enc = codec.enc;
	}

	InternalEncoder.prototype.write = function(str) {
	    return Buffer.from(str, this.enc);
	};

	InternalEncoder.prototype.end = function() {
	};


	//------------------------------------------------------------------------------
	// Except base64 encoder, which must keep its state.

	function InternalEncoderBase64(options, codec) {
	    this.prevStr = '';
	}

	InternalEncoderBase64.prototype.write = function(str) {
	    str = this.prevStr + str;
	    var completeQuads = str.length - (str.length % 4);
	    this.prevStr = str.slice(completeQuads);
	    str = str.slice(0, completeQuads);

	    return Buffer.from(str, "base64");
	};

	InternalEncoderBase64.prototype.end = function() {
	    return Buffer.from(this.prevStr, "base64");
	};


	//------------------------------------------------------------------------------
	// CESU-8 encoder is also special.

	function InternalEncoderCesu8(options, codec) {
	}

	InternalEncoderCesu8.prototype.write = function(str) {
	    var buf = Buffer.alloc(str.length * 3), bufIdx = 0;
	    for (var i = 0; i < str.length; i++) {
	        var charCode = str.charCodeAt(i);
	        // Naive implementation, but it works because CESU-8 is especially easy
	        // to convert from UTF-16 (which all JS strings are encoded in).
	        if (charCode < 0x80)
	            buf[bufIdx++] = charCode;
	        else if (charCode < 0x800) {
	            buf[bufIdx++] = 0xC0 + (charCode >>> 6);
	            buf[bufIdx++] = 0x80 + (charCode & 0x3f);
	        }
	        else { // charCode will always be < 0x10000 in javascript.
	            buf[bufIdx++] = 0xE0 + (charCode >>> 12);
	            buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);
	            buf[bufIdx++] = 0x80 + (charCode & 0x3f);
	        }
	    }
	    return buf.slice(0, bufIdx);
	};

	InternalEncoderCesu8.prototype.end = function() {
	};

	//------------------------------------------------------------------------------
	// CESU-8 decoder is not implemented in Node v4.0+

	function InternalDecoderCesu8(options, codec) {
	    this.acc = 0;
	    this.contBytes = 0;
	    this.accBytes = 0;
	    this.defaultCharUnicode = codec.defaultCharUnicode;
	}

	InternalDecoderCesu8.prototype.write = function(buf) {
	    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, 
	        res = '';
	    for (var i = 0; i < buf.length; i++) {
	        var curByte = buf[i];
	        if ((curByte & 0xC0) !== 0x80) { // Leading byte
	            if (contBytes > 0) { // Previous code is invalid
	                res += this.defaultCharUnicode;
	                contBytes = 0;
	            }

	            if (curByte < 0x80) { // Single-byte code
	                res += String.fromCharCode(curByte);
	            } else if (curByte < 0xE0) { // Two-byte code
	                acc = curByte & 0x1F;
	                contBytes = 1; accBytes = 1;
	            } else if (curByte < 0xF0) { // Three-byte code
	                acc = curByte & 0x0F;
	                contBytes = 2; accBytes = 1;
	            } else { // Four or more are not supported for CESU-8.
	                res += this.defaultCharUnicode;
	            }
	        } else { // Continuation byte
	            if (contBytes > 0) { // We're waiting for it.
	                acc = (acc << 6) | (curByte & 0x3f);
	                contBytes--; accBytes++;
	                if (contBytes === 0) {
	                    // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)
	                    if (accBytes === 2 && acc < 0x80 && acc > 0)
	                        res += this.defaultCharUnicode;
	                    else if (accBytes === 3 && acc < 0x800)
	                        res += this.defaultCharUnicode;
	                    else
	                        // Actually add character.
	                        res += String.fromCharCode(acc);
	                }
	            } else { // Unexpected continuation byte
	                res += this.defaultCharUnicode;
	            }
	        }
	    }
	    this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;
	    return res;
	};

	InternalDecoderCesu8.prototype.end = function() {
	    var res = 0;
	    if (this.contBytes > 0)
	        res += this.defaultCharUnicode;
	    return res;
	};
	return internal;
}

var utf16 = {};

var hasRequiredUtf16;

function requireUtf16 () {
	if (hasRequiredUtf16) return utf16;
	hasRequiredUtf16 = 1;
	var Buffer = requireSafer().Buffer;

	// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js

	// == UTF16-BE codec. ==========================================================

	utf16.utf16be = Utf16BECodec;
	function Utf16BECodec() {
	}

	Utf16BECodec.prototype.encoder = Utf16BEEncoder;
	Utf16BECodec.prototype.decoder = Utf16BEDecoder;
	Utf16BECodec.prototype.bomAware = true;


	// -- Encoding

	function Utf16BEEncoder() {
	}

	Utf16BEEncoder.prototype.write = function(str) {
	    var buf = Buffer.from(str, 'ucs2');
	    for (var i = 0; i < buf.length; i += 2) {
	        var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;
	    }
	    return buf;
	};

	Utf16BEEncoder.prototype.end = function() {
	};


	// -- Decoding

	function Utf16BEDecoder() {
	    this.overflowByte = -1;
	}

	Utf16BEDecoder.prototype.write = function(buf) {
	    if (buf.length == 0)
	        return '';

	    var buf2 = Buffer.alloc(buf.length + 1),
	        i = 0, j = 0;

	    if (this.overflowByte !== -1) {
	        buf2[0] = buf[0];
	        buf2[1] = this.overflowByte;
	        i = 1; j = 2;
	    }

	    for (; i < buf.length-1; i += 2, j+= 2) {
	        buf2[j] = buf[i+1];
	        buf2[j+1] = buf[i];
	    }

	    this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;

	    return buf2.slice(0, j).toString('ucs2');
	};

	Utf16BEDecoder.prototype.end = function() {
	};


	// == UTF-16 codec =============================================================
	// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.
	// Defaults to UTF-16LE, as it's prevalent and default in Node.
	// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le
	// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});

	// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).

	utf16.utf16 = Utf16Codec;
	function Utf16Codec(codecOptions, iconv) {
	    this.iconv = iconv;
	}

	Utf16Codec.prototype.encoder = Utf16Encoder;
	Utf16Codec.prototype.decoder = Utf16Decoder;


	// -- Encoding (pass-through)

	function Utf16Encoder(options, codec) {
	    options = options || {};
	    if (options.addBOM === undefined)
	        options.addBOM = true;
	    this.encoder = codec.iconv.getEncoder('utf-16le', options);
	}

	Utf16Encoder.prototype.write = function(str) {
	    return this.encoder.write(str);
	};

	Utf16Encoder.prototype.end = function() {
	    return this.encoder.end();
	};


	// -- Decoding

	function Utf16Decoder(options, codec) {
	    this.decoder = null;
	    this.initialBytes = [];
	    this.initialBytesLen = 0;

	    this.options = options || {};
	    this.iconv = codec.iconv;
	}

	Utf16Decoder.prototype.write = function(buf) {
	    if (!this.decoder) {
	        // Codec is not chosen yet. Accumulate initial bytes.
	        this.initialBytes.push(buf);
	        this.initialBytesLen += buf.length;
	        
	        if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)
	            return '';

	        // We have enough bytes -> detect endianness.
	        var buf = Buffer.concat(this.initialBytes),
	            encoding = detectEncoding(buf, this.options.defaultEncoding);
	        this.decoder = this.iconv.getDecoder(encoding, this.options);
	        this.initialBytes.length = this.initialBytesLen = 0;
	    }

	    return this.decoder.write(buf);
	};

	Utf16Decoder.prototype.end = function() {
	    if (!this.decoder) {
	        var buf = Buffer.concat(this.initialBytes),
	            encoding = detectEncoding(buf, this.options.defaultEncoding);
	        this.decoder = this.iconv.getDecoder(encoding, this.options);

	        var res = this.decoder.write(buf),
	            trail = this.decoder.end();

	        return trail ? (res + trail) : res;
	    }
	    return this.decoder.end();
	};

	function detectEncoding(buf, defaultEncoding) {
	    var enc = defaultEncoding || 'utf-16le';

	    if (buf.length >= 2) {
	        // Check BOM.
	        if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM
	            enc = 'utf-16be';
	        else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM
	            enc = 'utf-16le';
	        else {
	            // No BOM found. Try to deduce encoding from initial content.
	            // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.
	            // So, we count ASCII as if it was LE or BE, and decide from that.
	            var asciiCharsLE = 0, asciiCharsBE = 0, // Counts of chars in both positions
	                _len = Math.min(buf.length - (buf.length % 2), 64); // Len is always even.

	            for (var i = 0; i < _len; i += 2) {
	                if (buf[i] === 0 && buf[i+1] !== 0) asciiCharsBE++;
	                if (buf[i] !== 0 && buf[i+1] === 0) asciiCharsLE++;
	            }

	            if (asciiCharsBE > asciiCharsLE)
	                enc = 'utf-16be';
	            else if (asciiCharsBE < asciiCharsLE)
	                enc = 'utf-16le';
	        }
	    }

	    return enc;
	}
	return utf16;
}

var utf7 = {};

var hasRequiredUtf7;

function requireUtf7 () {
	if (hasRequiredUtf7) return utf7;
	hasRequiredUtf7 = 1;
	var Buffer = requireSafer().Buffer;

	// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152
	// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3

	utf7.utf7 = Utf7Codec;
	utf7.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7
	function Utf7Codec(codecOptions, iconv) {
	    this.iconv = iconv;
	}
	Utf7Codec.prototype.encoder = Utf7Encoder;
	Utf7Codec.prototype.decoder = Utf7Decoder;
	Utf7Codec.prototype.bomAware = true;


	// -- Encoding

	var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;

	function Utf7Encoder(options, codec) {
	    this.iconv = codec.iconv;
	}

	Utf7Encoder.prototype.write = function(str) {
	    // Naive implementation.
	    // Non-direct chars are encoded as "+<base64>-"; single "+" char is encoded as "+-".
	    return Buffer.from(str.replace(nonDirectChars, function(chunk) {
	        return "+" + (chunk === '+' ? '' : 
	            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) 
	            + "-";
	    }.bind(this)));
	};

	Utf7Encoder.prototype.end = function() {
	};


	// -- Decoding

	function Utf7Decoder(options, codec) {
	    this.iconv = codec.iconv;
	    this.inBase64 = false;
	    this.base64Accum = '';
	}

	var base64Regex = /[A-Za-z0-9\/+]/;
	var base64Chars = [];
	for (var i = 0; i < 256; i++)
	    base64Chars[i] = base64Regex.test(String.fromCharCode(i));

	var plusChar = '+'.charCodeAt(0), 
	    minusChar = '-'.charCodeAt(0),
	    andChar = '&'.charCodeAt(0);

	Utf7Decoder.prototype.write = function(buf) {
	    var res = "", lastI = 0,
	        inBase64 = this.inBase64,
	        base64Accum = this.base64Accum;

	    // The decoder is more involved as we must handle chunks in stream.

	    for (var i = 0; i < buf.length; i++) {
	        if (!inBase64) { // We're in direct mode.
	            // Write direct chars until '+'
	            if (buf[i] == plusChar) {
	                res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
	                lastI = i+1;
	                inBase64 = true;
	            }
	        } else { // We decode base64.
	            if (!base64Chars[buf[i]]) { // Base64 ended.
	                if (i == lastI && buf[i] == minusChar) {// "+-" -> "+"
	                    res += "+";
	                } else {
	                    var b64str = base64Accum + buf.slice(lastI, i).toString();
	                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
	                }

	                if (buf[i] != minusChar) // Minus is absorbed after base64.
	                    i--;

	                lastI = i+1;
	                inBase64 = false;
	                base64Accum = '';
	            }
	        }
	    }

	    if (!inBase64) {
	        res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
	    } else {
	        var b64str = base64Accum + buf.slice(lastI).toString();

	        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
	        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
	        b64str = b64str.slice(0, canBeDecoded);

	        res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
	    }

	    this.inBase64 = inBase64;
	    this.base64Accum = base64Accum;

	    return res;
	};

	Utf7Decoder.prototype.end = function() {
	    var res = "";
	    if (this.inBase64 && this.base64Accum.length > 0)
	        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), "utf16-be");

	    this.inBase64 = false;
	    this.base64Accum = '';
	    return res;
	};


	// UTF-7-IMAP codec.
	// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)
	// Differences:
	//  * Base64 part is started by "&" instead of "+"
	//  * Direct characters are 0x20-0x7E, except "&" (0x26)
	//  * In Base64, "," is used instead of "/"
	//  * Base64 must not be used to represent direct characters.
	//  * No implicit shift back from Base64 (should always end with '-')
	//  * String must end in non-shifted position.
	//  * "-&" while in base64 is not allowed.


	utf7.utf7imap = Utf7IMAPCodec;
	function Utf7IMAPCodec(codecOptions, iconv) {
	    this.iconv = iconv;
	}
	Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
	Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
	Utf7IMAPCodec.prototype.bomAware = true;


	// -- Encoding

	function Utf7IMAPEncoder(options, codec) {
	    this.iconv = codec.iconv;
	    this.inBase64 = false;
	    this.base64Accum = Buffer.alloc(6);
	    this.base64AccumIdx = 0;
	}

	Utf7IMAPEncoder.prototype.write = function(str) {
	    var inBase64 = this.inBase64,
	        base64Accum = this.base64Accum,
	        base64AccumIdx = this.base64AccumIdx,
	        buf = Buffer.alloc(str.length*5 + 10), bufIdx = 0;

	    for (var i = 0; i < str.length; i++) {
	        var uChar = str.charCodeAt(i);
	        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.
	            if (inBase64) {
	                if (base64AccumIdx > 0) {
	                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
	                    base64AccumIdx = 0;
	                }

	                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
	                inBase64 = false;
	            }

	            if (!inBase64) {
	                buf[bufIdx++] = uChar; // Write direct character

	                if (uChar === andChar)  // Ampersand -> '&-'
	                    buf[bufIdx++] = minusChar;
	            }

	        } else { // Non-direct character
	            if (!inBase64) {
	                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.
	                inBase64 = true;
	            }
	            if (inBase64) {
	                base64Accum[base64AccumIdx++] = uChar >> 8;
	                base64Accum[base64AccumIdx++] = uChar & 0xFF;

	                if (base64AccumIdx == base64Accum.length) {
	                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\//g, ','), bufIdx);
	                    base64AccumIdx = 0;
	                }
	            }
	        }
	    }

	    this.inBase64 = inBase64;
	    this.base64AccumIdx = base64AccumIdx;

	    return buf.slice(0, bufIdx);
	};

	Utf7IMAPEncoder.prototype.end = function() {
	    var buf = Buffer.alloc(10), bufIdx = 0;
	    if (this.inBase64) {
	        if (this.base64AccumIdx > 0) {
	            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
	            this.base64AccumIdx = 0;
	        }

	        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
	        this.inBase64 = false;
	    }

	    return buf.slice(0, bufIdx);
	};


	// -- Decoding

	function Utf7IMAPDecoder(options, codec) {
	    this.iconv = codec.iconv;
	    this.inBase64 = false;
	    this.base64Accum = '';
	}

	var base64IMAPChars = base64Chars.slice();
	base64IMAPChars[','.charCodeAt(0)] = true;

	Utf7IMAPDecoder.prototype.write = function(buf) {
	    var res = "", lastI = 0,
	        inBase64 = this.inBase64,
	        base64Accum = this.base64Accum;

	    // The decoder is more involved as we must handle chunks in stream.
	    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).

	    for (var i = 0; i < buf.length; i++) {
	        if (!inBase64) { // We're in direct mode.
	            // Write direct chars until '&'
	            if (buf[i] == andChar) {
	                res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
	                lastI = i+1;
	                inBase64 = true;
	            }
	        } else { // We decode base64.
	            if (!base64IMAPChars[buf[i]]) { // Base64 ended.
	                if (i == lastI && buf[i] == minusChar) { // "&-" -> "&"
	                    res += "&";
	                } else {
	                    var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');
	                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
	                }

	                if (buf[i] != minusChar) // Minus may be absorbed after base64.
	                    i--;

	                lastI = i+1;
	                inBase64 = false;
	                base64Accum = '';
	            }
	        }
	    }

	    if (!inBase64) {
	        res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
	    } else {
	        var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');

	        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
	        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
	        b64str = b64str.slice(0, canBeDecoded);

	        res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
	    }

	    this.inBase64 = inBase64;
	    this.base64Accum = base64Accum;

	    return res;
	};

	Utf7IMAPDecoder.prototype.end = function() {
	    var res = "";
	    if (this.inBase64 && this.base64Accum.length > 0)
	        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), "utf16-be");

	    this.inBase64 = false;
	    this.base64Accum = '';
	    return res;
	};
	return utf7;
}

var sbcsCodec = {};

var hasRequiredSbcsCodec;

function requireSbcsCodec () {
	if (hasRequiredSbcsCodec) return sbcsCodec;
	hasRequiredSbcsCodec = 1;
	var Buffer = requireSafer().Buffer;

	// Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that
	// correspond to encoded bytes (if 128 - then lower half is ASCII). 

	sbcsCodec._sbcs = SBCSCodec;
	function SBCSCodec(codecOptions, iconv) {
	    if (!codecOptions)
	        throw new Error("SBCS codec is called without the data.")
	    
	    // Prepare char buffer for decoding.
	    if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))
	        throw new Error("Encoding '"+codecOptions.type+"' has incorrect 'chars' (must be of len 128 or 256)");
	    
	    if (codecOptions.chars.length === 128) {
	        var asciiString = "";
	        for (var i = 0; i < 128; i++)
	            asciiString += String.fromCharCode(i);
	        codecOptions.chars = asciiString + codecOptions.chars;
	    }

	    this.decodeBuf = Buffer.from(codecOptions.chars, 'ucs2');
	    
	    // Encoding buffer.
	    var encodeBuf = Buffer.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));

	    for (var i = 0; i < codecOptions.chars.length; i++)
	        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;

	    this.encodeBuf = encodeBuf;
	}

	SBCSCodec.prototype.encoder = SBCSEncoder;
	SBCSCodec.prototype.decoder = SBCSDecoder;


	function SBCSEncoder(options, codec) {
	    this.encodeBuf = codec.encodeBuf;
	}

	SBCSEncoder.prototype.write = function(str) {
	    var buf = Buffer.alloc(str.length);
	    for (var i = 0; i < str.length; i++)
	        buf[i] = this.encodeBuf[str.charCodeAt(i)];
	    
	    return buf;
	};

	SBCSEncoder.prototype.end = function() {
	};


	function SBCSDecoder(options, codec) {
	    this.decodeBuf = codec.decodeBuf;
	}

	SBCSDecoder.prototype.write = function(buf) {
	    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.
	    var decodeBuf = this.decodeBuf;
	    var newBuf = Buffer.alloc(buf.length*2);
	    var idx1 = 0, idx2 = 0;
	    for (var i = 0; i < buf.length; i++) {
	        idx1 = buf[i]*2; idx2 = i*2;
	        newBuf[idx2] = decodeBuf[idx1];
	        newBuf[idx2+1] = decodeBuf[idx1+1];
	    }
	    return newBuf.toString('ucs2');
	};

	SBCSDecoder.prototype.end = function() {
	};
	return sbcsCodec;
}

var sbcsData;
var hasRequiredSbcsData;

function requireSbcsData () {
	if (hasRequiredSbcsData) return sbcsData;
	hasRequiredSbcsData = 1;

	// Manually added data to be used by sbcs codec in addition to generated one.

	sbcsData = {
	    // Not supported by iconv, not sure why.
	    "10029": "maccenteuro",
	    "maccenteuro": {
	        "type": "_sbcs",
	        "chars": "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"
	    },

	    "808": "cp808",
	    "ibm808": "cp808",
	    "cp808": {
	        "type": "_sbcs",
	        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "
	    },

	    "mik": {
	        "type": "_sbcs",
	        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
	    },

	    // Aliases of generated encodings.
	    "ascii8bit": "ascii",
	    "usascii": "ascii",
	    "ansix34": "ascii",
	    "ansix341968": "ascii",
	    "ansix341986": "ascii",
	    "csascii": "ascii",
	    "cp367": "ascii",
	    "ibm367": "ascii",
	    "isoir6": "ascii",
	    "iso646us": "ascii",
	    "iso646irv": "ascii",
	    "us": "ascii",

	    "latin1": "iso88591",
	    "latin2": "iso88592",
	    "latin3": "iso88593",
	    "latin4": "iso88594",
	    "latin5": "iso88599",
	    "latin6": "iso885910",
	    "latin7": "iso885913",
	    "latin8": "iso885914",
	    "latin9": "iso885915",
	    "latin10": "iso885916",

	    "csisolatin1": "iso88591",
	    "csisolatin2": "iso88592",
	    "csisolatin3": "iso88593",
	    "csisolatin4": "iso88594",
	    "csisolatincyrillic": "iso88595",
	    "csisolatinarabic": "iso88596",
	    "csisolatingreek" : "iso88597",
	    "csisolatinhebrew": "iso88598",
	    "csisolatin5": "iso88599",
	    "csisolatin6": "iso885910",

	    "l1": "iso88591",
	    "l2": "iso88592",
	    "l3": "iso88593",
	    "l4": "iso88594",
	    "l5": "iso88599",
	    "l6": "iso885910",
	    "l7": "iso885913",
	    "l8": "iso885914",
	    "l9": "iso885915",
	    "l10": "iso885916",

	    "isoir14": "iso646jp",
	    "isoir57": "iso646cn",
	    "isoir100": "iso88591",
	    "isoir101": "iso88592",
	    "isoir109": "iso88593",
	    "isoir110": "iso88594",
	    "isoir144": "iso88595",
	    "isoir127": "iso88596",
	    "isoir126": "iso88597",
	    "isoir138": "iso88598",
	    "isoir148": "iso88599",
	    "isoir157": "iso885910",
	    "isoir166": "tis620",
	    "isoir179": "iso885913",
	    "isoir199": "iso885914",
	    "isoir203": "iso885915",
	    "isoir226": "iso885916",

	    "cp819": "iso88591",
	    "ibm819": "iso88591",

	    "cyrillic": "iso88595",

	    "arabic": "iso88596",
	    "arabic8": "iso88596",
	    "ecma114": "iso88596",
	    "asmo708": "iso88596",

	    "greek" : "iso88597",
	    "greek8" : "iso88597",
	    "ecma118" : "iso88597",
	    "elot928" : "iso88597",

	    "hebrew": "iso88598",
	    "hebrew8": "iso88598",

	    "turkish": "iso88599",
	    "turkish8": "iso88599",

	    "thai": "iso885911",
	    "thai8": "iso885911",

	    "celtic": "iso885914",
	    "celtic8": "iso885914",
	    "isoceltic": "iso885914",

	    "tis6200": "tis620",
	    "tis62025291": "tis620",
	    "tis62025330": "tis620",

	    "10000": "macroman",
	    "10006": "macgreek",
	    "10007": "maccyrillic",
	    "10079": "maciceland",
	    "10081": "macturkish",

	    "cspc8codepage437": "cp437",
	    "cspc775baltic": "cp775",
	    "cspc850multilingual": "cp850",
	    "cspcp852": "cp852",
	    "cspc862latinhebrew": "cp862",
	    "cpgr": "cp869",

	    "msee": "cp1250",
	    "mscyrl": "cp1251",
	    "msansi": "cp1252",
	    "msgreek": "cp1253",
	    "msturk": "cp1254",
	    "mshebr": "cp1255",
	    "msarab": "cp1256",
	    "winbaltrim": "cp1257",

	    "cp20866": "koi8r",
	    "20866": "koi8r",
	    "ibm878": "koi8r",
	    "cskoi8r": "koi8r",

	    "cp21866": "koi8u",
	    "21866": "koi8u",
	    "ibm1168": "koi8u",

	    "strk10482002": "rk1048",

	    "tcvn5712": "tcvn",
	    "tcvn57121": "tcvn",

	    "gb198880": "iso646cn",
	    "cn": "iso646cn",

	    "csiso14jisc6220ro": "iso646jp",
	    "jisc62201969ro": "iso646jp",
	    "jp": "iso646jp",

	    "cshproman8": "hproman8",
	    "r8": "hproman8",
	    "roman8": "hproman8",
	    "xroman8": "hproman8",
	    "ibm1051": "hproman8",

	    "mac": "macintosh",
	    "csmacintosh": "macintosh",
	};
	return sbcsData;
}

var sbcsDataGenerated;
var hasRequiredSbcsDataGenerated;

function requireSbcsDataGenerated () {
	if (hasRequiredSbcsDataGenerated) return sbcsDataGenerated;
	hasRequiredSbcsDataGenerated = 1;

	// Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.
	sbcsDataGenerated = {
	  "437": "cp437",
	  "737": "cp737",
	  "775": "cp775",
	  "850": "cp850",
	  "852": "cp852",
	  "855": "cp855",
	  "856": "cp856",
	  "857": "cp857",
	  "858": "cp858",
	  "860": "cp860",
	  "861": "cp861",
	  "862": "cp862",
	  "863": "cp863",
	  "864": "cp864",
	  "865": "cp865",
	  "866": "cp866",
	  "869": "cp869",
	  "874": "windows874",
	  "922": "cp922",
	  "1046": "cp1046",
	  "1124": "cp1124",
	  "1125": "cp1125",
	  "1129": "cp1129",
	  "1133": "cp1133",
	  "1161": "cp1161",
	  "1162": "cp1162",
	  "1163": "cp1163",
	  "1250": "windows1250",
	  "1251": "windows1251",
	  "1252": "windows1252",
	  "1253": "windows1253",
	  "1254": "windows1254",
	  "1255": "windows1255",
	  "1256": "windows1256",
	  "1257": "windows1257",
	  "1258": "windows1258",
	  "28591": "iso88591",
	  "28592": "iso88592",
	  "28593": "iso88593",
	  "28594": "iso88594",
	  "28595": "iso88595",
	  "28596": "iso88596",
	  "28597": "iso88597",
	  "28598": "iso88598",
	  "28599": "iso88599",
	  "28600": "iso885910",
	  "28601": "iso885911",
	  "28603": "iso885913",
	  "28604": "iso885914",
	  "28605": "iso885915",
	  "28606": "iso885916",
	  "windows874": {
	    "type": "_sbcs",
	    "chars": "€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
	  },
	  "win874": "windows874",
	  "cp874": "windows874",
	  "windows1250": {
	    "type": "_sbcs",
	    "chars": "€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
	  },
	  "win1250": "windows1250",
	  "cp1250": "windows1250",
	  "windows1251": {
	    "type": "_sbcs",
	    "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
	  },
	  "win1251": "windows1251",
	  "cp1251": "windows1251",
	  "windows1252": {
	    "type": "_sbcs",
	    "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
	  },
	  "win1252": "windows1252",
	  "cp1252": "windows1252",
	  "windows1253": {
	    "type": "_sbcs",
	    "chars": "€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
	  },
	  "win1253": "windows1253",
	  "cp1253": "windows1253",
	  "windows1254": {
	    "type": "_sbcs",
	    "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
	  },
	  "win1254": "windows1254",
	  "cp1254": "windows1254",
	  "windows1255": {
	    "type": "_sbcs",
	    "chars": "€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
	  },
	  "win1255": "windows1255",
	  "cp1255": "windows1255",
	  "windows1256": {
	    "type": "_sbcs",
	    "chars": "€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"
	  },
	  "win1256": "windows1256",
	  "cp1256": "windows1256",
	  "windows1257": {
	    "type": "_sbcs",
	    "chars": "€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"
	  },
	  "win1257": "windows1257",
	  "cp1257": "windows1257",
	  "windows1258": {
	    "type": "_sbcs",
	    "chars": "€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
	  },
	  "win1258": "windows1258",
	  "cp1258": "windows1258",
	  "iso88591": {
	    "type": "_sbcs",
	    "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
	  },
	  "cp28591": "iso88591",
	  "iso88592": {
	    "type": "_sbcs",
	    "chars": " Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
	  },
	  "cp28592": "iso88592",
	  "iso88593": {
	    "type": "_sbcs",
	    "chars": " Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙"
	  },
	  "cp28593": "iso88593",
	  "iso88594": {
	    "type": "_sbcs",
	    "chars": " ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙"
	  },
	  "cp28594": "iso88594",
	  "iso88595": {
	    "type": "_sbcs",
	    "chars": " ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ"
	  },
	  "cp28595": "iso88595",
	  "iso88596": {
	    "type": "_sbcs",
	    "chars": " ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������"
	  },
	  "cp28596": "iso88596",
	  "iso88597": {
	    "type": "_sbcs",
	    "chars": " ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
	  },
	  "cp28597": "iso88597",
	  "iso88598": {
	    "type": "_sbcs",
	    "chars": " �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
	  },
	  "cp28598": "iso88598",
	  "iso88599": {
	    "type": "_sbcs",
	    "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
	  },
	  "cp28599": "iso88599",
	  "iso885910": {
	    "type": "_sbcs",
	    "chars": " ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ"
	  },
	  "cp28600": "iso885910",
	  "iso885911": {
	    "type": "_sbcs",
	    "chars": " กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
	  },
	  "cp28601": "iso885911",
	  "iso885913": {
	    "type": "_sbcs",
	    "chars": " ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’"
	  },
	  "cp28603": "iso885913",
	  "iso885914": {
	    "type": "_sbcs",
	    "chars": " Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ"
	  },
	  "cp28604": "iso885914",
	  "iso885915": {
	    "type": "_sbcs",
	    "chars": " ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
	  },
	  "cp28605": "iso885915",
	  "iso885916": {
	    "type": "_sbcs",
	    "chars": " ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ"
	  },
	  "cp28606": "iso885916",
	  "cp437": {
	    "type": "_sbcs",
	    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
	  },
	  "ibm437": "cp437",
	  "csibm437": "cp437",
	  "cp737": {
	    "type": "_sbcs",
	    "chars": "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ "
	  },
	  "ibm737": "cp737",
	  "csibm737": "cp737",
	  "cp775": {
	    "type": "_sbcs",
	    "chars": "ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ "
	  },
	  "ibm775": "cp775",
	  "csibm775": "cp775",
	  "cp850": {
	    "type": "_sbcs",
	    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
	  },
	  "ibm850": "cp850",
	  "csibm850": "cp850",
	  "cp852": {
	    "type": "_sbcs",
	    "chars": "ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ "
	  },
	  "ibm852": "cp852",
	  "csibm852": "cp852",
	  "cp855": {
	    "type": "_sbcs",
	    "chars": "ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ "
	  },
	  "ibm855": "cp855",
	  "csibm855": "cp855",
	  "cp856": {
	    "type": "_sbcs",
	    "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ "
	  },
	  "ibm856": "cp856",
	  "csibm856": "cp856",
	  "cp857": {
	    "type": "_sbcs",
	    "chars": "ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ "
	  },
	  "ibm857": "cp857",
	  "csibm857": "cp857",
	  "cp858": {
	    "type": "_sbcs",
	    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
	  },
	  "ibm858": "cp858",
	  "csibm858": "cp858",
	  "cp860": {
	    "type": "_sbcs",
	    "chars": "ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
	  },
	  "ibm860": "cp860",
	  "csibm860": "cp860",
	  "cp861": {
	    "type": "_sbcs",
	    "chars": "ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
	  },
	  "ibm861": "cp861",
	  "csibm861": "cp861",
	  "cp862": {
	    "type": "_sbcs",
	    "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
	  },
	  "ibm862": "cp862",
	  "csibm862": "cp862",
	  "cp863": {
	    "type": "_sbcs",
	    "chars": "ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
	  },
	  "ibm863": "cp863",
	  "csibm863": "cp863",
	  "cp864": {
	    "type": "_sbcs",
	    "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�"
	  },
	  "ibm864": "cp864",
	  "csibm864": "cp864",
	  "cp865": {
	    "type": "_sbcs",
	    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
	  },
	  "ibm865": "cp865",
	  "csibm865": "cp865",
	  "cp866": {
	    "type": "_sbcs",
	    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "
	  },
	  "ibm866": "cp866",
	  "csibm866": "cp866",
	  "cp869": {
	    "type": "_sbcs",
	    "chars": "������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "
	  },
	  "ibm869": "cp869",
	  "csibm869": "cp869",
	  "cp922": {
	    "type": "_sbcs",
	    "chars": " ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ"
	  },
	  "ibm922": "cp922",
	  "csibm922": "cp922",
	  "cp1046": {
	    "type": "_sbcs",
	    "chars": "ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�"
	  },
	  "ibm1046": "cp1046",
	  "csibm1046": "cp1046",
	  "cp1124": {
	    "type": "_sbcs",
	    "chars": " ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ"
	  },
	  "ibm1124": "cp1124",
	  "csibm1124": "cp1124",
	  "cp1125": {
	    "type": "_sbcs",
	    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ "
	  },
	  "ibm1125": "cp1125",
	  "csibm1125": "cp1125",
	  "cp1129": {
	    "type": "_sbcs",
	    "chars": " ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
	  },
	  "ibm1129": "cp1129",
	  "csibm1129": "cp1129",
	  "cp1133": {
	    "type": "_sbcs",
	    "chars": " ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�"
	  },
	  "ibm1133": "cp1133",
	  "csibm1133": "cp1133",
	  "cp1161": {
	    "type": "_sbcs",
	    "chars": "��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ "
	  },
	  "ibm1161": "cp1161",
	  "csibm1161": "cp1161",
	  "cp1162": {
	    "type": "_sbcs",
	    "chars": "€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
	  },
	  "ibm1162": "cp1162",
	  "csibm1162": "cp1162",
	  "cp1163": {
	    "type": "_sbcs",
	    "chars": " ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
	  },
	  "ibm1163": "cp1163",
	  "csibm1163": "cp1163",
	  "maccroatian": {
	    "type": "_sbcs",
	    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"
	  },
	  "maccyrillic": {
	    "type": "_sbcs",
	    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
	  },
	  "macgreek": {
	    "type": "_sbcs",
	    "chars": "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"
	  },
	  "maciceland": {
	    "type": "_sbcs",
	    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
	  },
	  "macroman": {
	    "type": "_sbcs",
	    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
	  },
	  "macromania": {
	    "type": "_sbcs",
	    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
	  },
	  "macthai": {
	    "type": "_sbcs",
	    "chars": "«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"
	  },
	  "macturkish": {
	    "type": "_sbcs",
	    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"
	  },
	  "macukraine": {
	    "type": "_sbcs",
	    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
	  },
	  "koi8r": {
	    "type": "_sbcs",
	    "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
	  },
	  "koi8u": {
	    "type": "_sbcs",
	    "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
	  },
	  "koi8ru": {
	    "type": "_sbcs",
	    "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
	  },
	  "koi8t": {
	    "type": "_sbcs",
	    "chars": "қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
	  },
	  "armscii8": {
	    "type": "_sbcs",
	    "chars": " �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�"
	  },
	  "rk1048": {
	    "type": "_sbcs",
	    "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
	  },
	  "tcvn": {
	    "type": "_sbcs",
	    "chars": "\u0000ÚỤ\u0003ỪỬỮ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010ỨỰỲỶỸÝỴ\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ"
	  },
	  "georgianacademy": {
	    "type": "_sbcs",
	    "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
	  },
	  "georgianps": {
	    "type": "_sbcs",
	    "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
	  },
	  "pt154": {
	    "type": "_sbcs",
	    "chars": "ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
	  },
	  "viscii": {
	    "type": "_sbcs",
	    "chars": "\u0000\u0001Ẳ\u0003\u0004ẴẪ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013Ỷ\u0015\u0016\u0017\u0018Ỹ\u001a\u001b\u001c\u001dỴ\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ"
	  },
	  "iso646cn": {
	    "type": "_sbcs",
	    "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
	  },
	  "iso646jp": {
	    "type": "_sbcs",
	    "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
	  },
	  "hproman8": {
	    "type": "_sbcs",
	    "chars": " ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�"
	  },
	  "macintosh": {
	    "type": "_sbcs",
	    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
	  },
	  "ascii": {
	    "type": "_sbcs",
	    "chars": "��������������������������������������������������������������������������������������������������������������������������������"
	  },
	  "tis620": {
	    "type": "_sbcs",
	    "chars": "���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
	  }
	};
	return sbcsDataGenerated;
}

var dbcsCodec = {};

var hasRequiredDbcsCodec;

function requireDbcsCodec () {
	if (hasRequiredDbcsCodec) return dbcsCodec;
	hasRequiredDbcsCodec = 1;
	var Buffer = requireSafer().Buffer;

	// Multibyte codec. In this scheme, a character is represented by 1 or more bytes.
	// Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.
	// To save memory and loading time, we read table files only when requested.

	dbcsCodec._dbcs = DBCSCodec;

	var UNASSIGNED = -1,
	    GB18030_CODE = -2,
	    SEQ_START  = -10,
	    NODE_START = -1000,
	    UNASSIGNED_NODE = new Array(0x100),
	    DEF_CHAR = -1;

	for (var i = 0; i < 0x100; i++)
	    UNASSIGNED_NODE[i] = UNASSIGNED;


	// Class DBCSCodec reads and initializes mapping tables.
	function DBCSCodec(codecOptions, iconv) {
	    this.encodingName = codecOptions.encodingName;
	    if (!codecOptions)
	        throw new Error("DBCS codec is called without the data.")
	    if (!codecOptions.table)
	        throw new Error("Encoding '" + this.encodingName + "' has no data.");

	    // Load tables.
	    var mappingTable = codecOptions.table();


	    // Decode tables: MBCS -> Unicode.

	    // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.
	    // Trie root is decodeTables[0].
	    // Values: >=  0 -> unicode character code. can be > 0xFFFF
	    //         == UNASSIGNED -> unknown/unassigned sequence.
	    //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.
	    //         <= NODE_START -> index of the next node in our trie to process next byte.
	    //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.
	    this.decodeTables = [];
	    this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.

	    // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. 
	    this.decodeTableSeq = [];

	    // Actual mapping tables consist of chunks. Use them to fill up decode tables.
	    for (var i = 0; i < mappingTable.length; i++)
	        this._addDecodeChunk(mappingTable[i]);

	    this.defaultCharUnicode = iconv.defaultCharUnicode;

	    
	    // Encode tables: Unicode -> DBCS.

	    // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.
	    // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.
	    // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).
	    //         == UNASSIGNED -> no conversion found. Output a default char.
	    //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.
	    this.encodeTable = [];
	    
	    // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of
	    // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key
	    // means end of sequence (needed when one sequence is a strict subsequence of another).
	    // Objects are kept separately from encodeTable to increase performance.
	    this.encodeTableSeq = [];

	    // Some chars can be decoded, but need not be encoded.
	    var skipEncodeChars = {};
	    if (codecOptions.encodeSkipVals)
	        for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {
	            var val = codecOptions.encodeSkipVals[i];
	            if (typeof val === 'number')
	                skipEncodeChars[val] = true;
	            else
	                for (var j = val.from; j <= val.to; j++)
	                    skipEncodeChars[j] = true;
	        }
	        
	    // Use decode trie to recursively fill out encode tables.
	    this._fillEncodeTable(0, 0, skipEncodeChars);

	    // Add more encoding pairs when needed.
	    if (codecOptions.encodeAdd) {
	        for (var uChar in codecOptions.encodeAdd)
	            if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
	                this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
	    }

	    this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
	    if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];
	    if (this.defCharSB === UNASSIGNED) this.defCharSB = "?".charCodeAt(0);


	    // Load & create GB18030 tables when needed.
	    if (typeof codecOptions.gb18030 === 'function') {
	        this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.

	        // Add GB18030 decode tables.
	        var thirdByteNodeIdx = this.decodeTables.length;
	        var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);

	        var fourthByteNodeIdx = this.decodeTables.length;
	        var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);

	        for (var i = 0x81; i <= 0xFE; i++) {
	            var secondByteNodeIdx = NODE_START - this.decodeTables[0][i];
	            var secondByteNode = this.decodeTables[secondByteNodeIdx];
	            for (var j = 0x30; j <= 0x39; j++)
	                secondByteNode[j] = NODE_START - thirdByteNodeIdx;
	        }
	        for (var i = 0x81; i <= 0xFE; i++)
	            thirdByteNode[i] = NODE_START - fourthByteNodeIdx;
	        for (var i = 0x30; i <= 0x39; i++)
	            fourthByteNode[i] = GB18030_CODE;
	    }        
	}

	DBCSCodec.prototype.encoder = DBCSEncoder;
	DBCSCodec.prototype.decoder = DBCSDecoder;

	// Decoder helpers
	DBCSCodec.prototype._getDecodeTrieNode = function(addr) {
	    var bytes = [];
	    for (; addr > 0; addr >>= 8)
	        bytes.push(addr & 0xFF);
	    if (bytes.length == 0)
	        bytes.push(0);

	    var node = this.decodeTables[0];
	    for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.
	        var val = node[bytes[i]];

	        if (val == UNASSIGNED) { // Create new node.
	            node[bytes[i]] = NODE_START - this.decodeTables.length;
	            this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
	        }
	        else if (val <= NODE_START) { // Existing node.
	            node = this.decodeTables[NODE_START - val];
	        }
	        else
	            throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
	    }
	    return node;
	};


	DBCSCodec.prototype._addDecodeChunk = function(chunk) {
	    // First element of chunk is the hex mbcs code where we start.
	    var curAddr = parseInt(chunk[0], 16);

	    // Choose the decoding node where we'll write our chars.
	    var writeTable = this._getDecodeTrieNode(curAddr);
	    curAddr = curAddr & 0xFF;

	    // Write all other elements of the chunk to the table.
	    for (var k = 1; k < chunk.length; k++) {
	        var part = chunk[k];
	        if (typeof part === "string") { // String, write as-is.
	            for (var l = 0; l < part.length;) {
	                var code = part.charCodeAt(l++);
	                if (0xD800 <= code && code < 0xDC00) { // Decode surrogate
	                    var codeTrail = part.charCodeAt(l++);
	                    if (0xDC00 <= codeTrail && codeTrail < 0xE000)
	                        writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);
	                    else
	                        throw new Error("Incorrect surrogate pair in "  + this.encodingName + " at chunk " + chunk[0]);
	                }
	                else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)
	                    var len = 0xFFF - code + 2;
	                    var seq = [];
	                    for (var m = 0; m < len; m++)
	                        seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.

	                    writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
	                    this.decodeTableSeq.push(seq);
	                }
	                else
	                    writeTable[curAddr++] = code; // Basic char
	            }
	        } 
	        else if (typeof part === "number") { // Integer, meaning increasing sequence starting with prev character.
	            var charCode = writeTable[curAddr - 1] + 1;
	            for (var l = 0; l < part; l++)
	                writeTable[curAddr++] = charCode++;
	        }
	        else
	            throw new Error("Incorrect type '" + typeof part + "' given in "  + this.encodingName + " at chunk " + chunk[0]);
	    }
	    if (curAddr > 0xFF)
	        throw new Error("Incorrect chunk in "  + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
	};

	// Encoder helpers
	DBCSCodec.prototype._getEncodeBucket = function(uCode) {
	    var high = uCode >> 8; // This could be > 0xFF because of astral characters.
	    if (this.encodeTable[high] === undefined)
	        this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.
	    return this.encodeTable[high];
	};

	DBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {
	    var bucket = this._getEncodeBucket(uCode);
	    var low = uCode & 0xFF;
	    if (bucket[low] <= SEQ_START)
	        this.encodeTableSeq[SEQ_START-bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.
	    else if (bucket[low] == UNASSIGNED)
	        bucket[low] = dbcsCode;
	};

	DBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {
	    
	    // Get the root of character tree according to first character of the sequence.
	    var uCode = seq[0];
	    var bucket = this._getEncodeBucket(uCode);
	    var low = uCode & 0xFF;

	    var node;
	    if (bucket[low] <= SEQ_START) {
	        // There's already a sequence with  - use it.
	        node = this.encodeTableSeq[SEQ_START-bucket[low]];
	    }
	    else {
	        // There was no sequence object - allocate a new one.
	        node = {};
	        if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.
	        bucket[low] = SEQ_START - this.encodeTableSeq.length;
	        this.encodeTableSeq.push(node);
	    }

	    // Traverse the character tree, allocating new nodes as needed.
	    for (var j = 1; j < seq.length-1; j++) {
	        var oldVal = node[uCode];
	        if (typeof oldVal === 'object')
	            node = oldVal;
	        else {
	            node = node[uCode] = {};
	            if (oldVal !== undefined)
	                node[DEF_CHAR] = oldVal;
	        }
	    }

	    // Set the leaf to given dbcsCode.
	    uCode = seq[seq.length-1];
	    node[uCode] = dbcsCode;
	};

	DBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {
	    var node = this.decodeTables[nodeIdx];
	    for (var i = 0; i < 0x100; i++) {
	        var uCode = node[i];
	        var mbCode = prefix + i;
	        if (skipEncodeChars[mbCode])
	            continue;

	        if (uCode >= 0)
	            this._setEncodeChar(uCode, mbCode);
	        else if (uCode <= NODE_START)
	            this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);
	        else if (uCode <= SEQ_START)
	            this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
	    }
	};



	// == Encoder ==================================================================

	function DBCSEncoder(options, codec) {
	    // Encoder state
	    this.leadSurrogate = -1;
	    this.seqObj = undefined;
	    
	    // Static data
	    this.encodeTable = codec.encodeTable;
	    this.encodeTableSeq = codec.encodeTableSeq;
	    this.defaultCharSingleByte = codec.defCharSB;
	    this.gb18030 = codec.gb18030;
	}

	DBCSEncoder.prototype.write = function(str) {
	    var newBuf = Buffer.alloc(str.length * (this.gb18030 ? 4 : 3)),
	        leadSurrogate = this.leadSurrogate,
	        seqObj = this.seqObj, nextChar = -1,
	        i = 0, j = 0;

	    while (true) {
	        // 0. Get next character.
	        if (nextChar === -1) {
	            if (i == str.length) break;
	            var uCode = str.charCodeAt(i++);
	        }
	        else {
	            var uCode = nextChar;
	            nextChar = -1;    
	        }

	        // 1. Handle surrogates.
	        if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.
	            if (uCode < 0xDC00) { // We've got lead surrogate.
	                if (leadSurrogate === -1) {
	                    leadSurrogate = uCode;
	                    continue;
	                } else {
	                    leadSurrogate = uCode;
	                    // Double lead surrogate found.
	                    uCode = UNASSIGNED;
	                }
	            } else { // We've got trail surrogate.
	                if (leadSurrogate !== -1) {
	                    uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);
	                    leadSurrogate = -1;
	                } else {
	                    // Incomplete surrogate pair - only trail surrogate found.
	                    uCode = UNASSIGNED;
	                }
	                
	            }
	        }
	        else if (leadSurrogate !== -1) {
	            // Incomplete surrogate pair - only lead surrogate found.
	            nextChar = uCode; uCode = UNASSIGNED; // Write an error, then current char.
	            leadSurrogate = -1;
	        }

	        // 2. Convert uCode character.
	        var dbcsCode = UNASSIGNED;
	        if (seqObj !== undefined && uCode != UNASSIGNED) { // We are in the middle of the sequence
	            var resCode = seqObj[uCode];
	            if (typeof resCode === 'object') { // Sequence continues.
	                seqObj = resCode;
	                continue;

	            } else if (typeof resCode == 'number') { // Sequence finished. Write it.
	                dbcsCode = resCode;

	            } else if (resCode == undefined) { // Current character is not part of the sequence.

	                // Try default character for this sequence
	                resCode = seqObj[DEF_CHAR];
	                if (resCode !== undefined) {
	                    dbcsCode = resCode; // Found. Write it.
	                    nextChar = uCode; // Current character will be written too in the next iteration.

	                }
	            }
	            seqObj = undefined;
	        }
	        else if (uCode >= 0) {  // Regular character
	            var subtable = this.encodeTable[uCode >> 8];
	            if (subtable !== undefined)
	                dbcsCode = subtable[uCode & 0xFF];
	            
	            if (dbcsCode <= SEQ_START) { // Sequence start
	                seqObj = this.encodeTableSeq[SEQ_START-dbcsCode];
	                continue;
	            }

	            if (dbcsCode == UNASSIGNED && this.gb18030) {
	                // Use GB18030 algorithm to find character(s) to write.
	                var idx = findIdx(this.gb18030.uChars, uCode);
	                if (idx != -1) {
	                    var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
	                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;
	                    newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;
	                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;
	                    newBuf[j++] = 0x30 + dbcsCode;
	                    continue;
	                }
	            }
	        }

	        // 3. Write dbcsCode character.
	        if (dbcsCode === UNASSIGNED)
	            dbcsCode = this.defaultCharSingleByte;
	        
	        if (dbcsCode < 0x100) {
	            newBuf[j++] = dbcsCode;
	        }
	        else if (dbcsCode < 0x10000) {
	            newBuf[j++] = dbcsCode >> 8;   // high byte
	            newBuf[j++] = dbcsCode & 0xFF; // low byte
	        }
	        else {
	            newBuf[j++] = dbcsCode >> 16;
	            newBuf[j++] = (dbcsCode >> 8) & 0xFF;
	            newBuf[j++] = dbcsCode & 0xFF;
	        }
	    }

	    this.seqObj = seqObj;
	    this.leadSurrogate = leadSurrogate;
	    return newBuf.slice(0, j);
	};

	DBCSEncoder.prototype.end = function() {
	    if (this.leadSurrogate === -1 && this.seqObj === undefined)
	        return; // All clean. Most often case.

	    var newBuf = Buffer.alloc(10), j = 0;

	    if (this.seqObj) { // We're in the sequence.
	        var dbcsCode = this.seqObj[DEF_CHAR];
	        if (dbcsCode !== undefined) { // Write beginning of the sequence.
	            if (dbcsCode < 0x100) {
	                newBuf[j++] = dbcsCode;
	            }
	            else {
	                newBuf[j++] = dbcsCode >> 8;   // high byte
	                newBuf[j++] = dbcsCode & 0xFF; // low byte
	            }
	        }
	        this.seqObj = undefined;
	    }

	    if (this.leadSurrogate !== -1) {
	        // Incomplete surrogate pair - only lead surrogate found.
	        newBuf[j++] = this.defaultCharSingleByte;
	        this.leadSurrogate = -1;
	    }
	    
	    return newBuf.slice(0, j);
	};

	// Export for testing
	DBCSEncoder.prototype.findIdx = findIdx;


	// == Decoder ==================================================================

	function DBCSDecoder(options, codec) {
	    // Decoder state
	    this.nodeIdx = 0;
	    this.prevBuf = Buffer.alloc(0);

	    // Static data
	    this.decodeTables = codec.decodeTables;
	    this.decodeTableSeq = codec.decodeTableSeq;
	    this.defaultCharUnicode = codec.defaultCharUnicode;
	    this.gb18030 = codec.gb18030;
	}

	DBCSDecoder.prototype.write = function(buf) {
	    var newBuf = Buffer.alloc(buf.length*2),
	        nodeIdx = this.nodeIdx, 
	        prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length,
	        seqStart = -this.prevBuf.length, // idx of the start of current parsed sequence.
	        uCode;

	    if (prevBufOffset > 0) // Make prev buf overlap a little to make it easier to slice later.
	        prevBuf = Buffer.concat([prevBuf, buf.slice(0, 10)]);
	    
	    for (var i = 0, j = 0; i < buf.length; i++) {
	        var curByte = (i >= 0) ? buf[i] : prevBuf[i + prevBufOffset];

	        // Lookup in current trie node.
	        var uCode = this.decodeTables[nodeIdx][curByte];

	        if (uCode >= 0) ;
	        else if (uCode === UNASSIGNED) { // Unknown char.
	            // TODO: Callback with seq.
	            //var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);
	            i = seqStart; // Try to parse again, after skipping first byte of the sequence ('i' will be incremented by 'for' cycle).
	            uCode = this.defaultCharUnicode.charCodeAt(0);
	        }
	        else if (uCode === GB18030_CODE) {
	            var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);
	            var ptr = (curSeq[0]-0x81)*12600 + (curSeq[1]-0x30)*1260 + (curSeq[2]-0x81)*10 + (curSeq[3]-0x30);
	            var idx = findIdx(this.gb18030.gbChars, ptr);
	            uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
	        }
	        else if (uCode <= NODE_START) { // Go to next trie node.
	            nodeIdx = NODE_START - uCode;
	            continue;
	        }
	        else if (uCode <= SEQ_START) { // Output a sequence of chars.
	            var seq = this.decodeTableSeq[SEQ_START - uCode];
	            for (var k = 0; k < seq.length - 1; k++) {
	                uCode = seq[k];
	                newBuf[j++] = uCode & 0xFF;
	                newBuf[j++] = uCode >> 8;
	            }
	            uCode = seq[seq.length-1];
	        }
	        else
	            throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);

	        // Write the character to buffer, handling higher planes using surrogate pair.
	        if (uCode > 0xFFFF) { 
	            uCode -= 0x10000;
	            var uCodeLead = 0xD800 + Math.floor(uCode / 0x400);
	            newBuf[j++] = uCodeLead & 0xFF;
	            newBuf[j++] = uCodeLead >> 8;

	            uCode = 0xDC00 + uCode % 0x400;
	        }
	        newBuf[j++] = uCode & 0xFF;
	        newBuf[j++] = uCode >> 8;

	        // Reset trie node.
	        nodeIdx = 0; seqStart = i+1;
	    }

	    this.nodeIdx = nodeIdx;
	    this.prevBuf = (seqStart >= 0) ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);
	    return newBuf.slice(0, j).toString('ucs2');
	};

	DBCSDecoder.prototype.end = function() {
	    var ret = '';

	    // Try to parse all remaining chars.
	    while (this.prevBuf.length > 0) {
	        // Skip 1 character in the buffer.
	        ret += this.defaultCharUnicode;
	        var buf = this.prevBuf.slice(1);

	        // Parse remaining as usual.
	        this.prevBuf = Buffer.alloc(0);
	        this.nodeIdx = 0;
	        if (buf.length > 0)
	            ret += this.write(buf);
	    }

	    this.nodeIdx = 0;
	    return ret;
	};

	// Binary search for GB18030. Returns largest i such that table[i] <= val.
	function findIdx(table, val) {
	    if (table[0] > val)
	        return -1;

	    var l = 0, r = table.length;
	    while (l < r-1) { // always table[l] <= val < table[r]
	        var mid = l + Math.floor((r-l+1)/2);
	        if (table[mid] <= val)
	            l = mid;
	        else
	            r = mid;
	    }
	    return l;
	}
	return dbcsCodec;
}

var require$$0$1 = [
	[
		"0",
		"\u0000",
		128
	],
	[
		"a1",
		"｡",
		62
	],
	[
		"8140",
		"　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",
		9,
		"＋－±×"
	],
	[
		"8180",
		"÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"
	],
	[
		"81b8",
		"∈∋⊆⊇⊂⊃∪∩"
	],
	[
		"81c8",
		"∧∨￢⇒⇔∀∃"
	],
	[
		"81da",
		"∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"
	],
	[
		"81f0",
		"Å‰♯♭♪†‡¶"
	],
	[
		"81fc",
		"◯"
	],
	[
		"824f",
		"０",
		9
	],
	[
		"8260",
		"Ａ",
		25
	],
	[
		"8281",
		"ａ",
		25
	],
	[
		"829f",
		"ぁ",
		82
	],
	[
		"8340",
		"ァ",
		62
	],
	[
		"8380",
		"ム",
		22
	],
	[
		"839f",
		"Α",
		16,
		"Σ",
		6
	],
	[
		"83bf",
		"α",
		16,
		"σ",
		6
	],
	[
		"8440",
		"А",
		5,
		"ЁЖ",
		25
	],
	[
		"8470",
		"а",
		5,
		"ёж",
		7
	],
	[
		"8480",
		"о",
		17
	],
	[
		"849f",
		"─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"
	],
	[
		"8740",
		"①",
		19,
		"Ⅰ",
		9
	],
	[
		"875f",
		"㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"
	],
	[
		"877e",
		"㍻"
	],
	[
		"8780",
		"〝〟№㏍℡㊤",
		4,
		"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"
	],
	[
		"889f",
		"亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"
	],
	[
		"8940",
		"院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円"
	],
	[
		"8980",
		"園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"
	],
	[
		"8a40",
		"魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫"
	],
	[
		"8a80",
		"橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"
	],
	[
		"8b40",
		"機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救"
	],
	[
		"8b80",
		"朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"
	],
	[
		"8c40",
		"掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨"
	],
	[
		"8c80",
		"劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"
	],
	[
		"8d40",
		"后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降"
	],
	[
		"8d80",
		"項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"
	],
	[
		"8e40",
		"察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止"
	],
	[
		"8e80",
		"死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"
	],
	[
		"8f40",
		"宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳"
	],
	[
		"8f80",
		"準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"
	],
	[
		"9040",
		"拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨"
	],
	[
		"9080",
		"逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"
	],
	[
		"9140",
		"繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻"
	],
	[
		"9180",
		"操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"
	],
	[
		"9240",
		"叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄"
	],
	[
		"9280",
		"逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"
	],
	[
		"9340",
		"邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬"
	],
	[
		"9380",
		"凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"
	],
	[
		"9440",
		"如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅"
	],
	[
		"9480",
		"楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"
	],
	[
		"9540",
		"鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷"
	],
	[
		"9580",
		"斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"
	],
	[
		"9640",
		"法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆"
	],
	[
		"9680",
		"摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"
	],
	[
		"9740",
		"諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲"
	],
	[
		"9780",
		"沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"
	],
	[
		"9840",
		"蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"
	],
	[
		"989f",
		"弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"
	],
	[
		"9940",
		"僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭"
	],
	[
		"9980",
		"凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"
	],
	[
		"9a40",
		"咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸"
	],
	[
		"9a80",
		"噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"
	],
	[
		"9b40",
		"奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀"
	],
	[
		"9b80",
		"它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"
	],
	[
		"9c40",
		"廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠"
	],
	[
		"9c80",
		"怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"
	],
	[
		"9d40",
		"戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫"
	],
	[
		"9d80",
		"捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"
	],
	[
		"9e40",
		"曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎"
	],
	[
		"9e80",
		"梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"
	],
	[
		"9f40",
		"檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯"
	],
	[
		"9f80",
		"麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"
	],
	[
		"e040",
		"漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝"
	],
	[
		"e080",
		"烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"
	],
	[
		"e140",
		"瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿"
	],
	[
		"e180",
		"痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"
	],
	[
		"e240",
		"磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰"
	],
	[
		"e280",
		"窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"
	],
	[
		"e340",
		"紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷"
	],
	[
		"e380",
		"縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"
	],
	[
		"e440",
		"隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤"
	],
	[
		"e480",
		"艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"
	],
	[
		"e540",
		"蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬"
	],
	[
		"e580",
		"蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"
	],
	[
		"e640",
		"襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧"
	],
	[
		"e680",
		"諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"
	],
	[
		"e740",
		"蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜"
	],
	[
		"e780",
		"轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"
	],
	[
		"e840",
		"錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙"
	],
	[
		"e880",
		"閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"
	],
	[
		"e940",
		"顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃"
	],
	[
		"e980",
		"騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"
	],
	[
		"ea40",
		"鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯"
	],
	[
		"ea80",
		"黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙"
	],
	[
		"ed40",
		"纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏"
	],
	[
		"ed80",
		"塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"
	],
	[
		"ee40",
		"犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙"
	],
	[
		"ee80",
		"蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"
	],
	[
		"eeef",
		"ⅰ",
		9,
		"￢￤＇＂"
	],
	[
		"f040",
		"",
		62
	],
	[
		"f080",
		"",
		124
	],
	[
		"f140",
		"",
		62
	],
	[
		"f180",
		"",
		124
	],
	[
		"f240",
		"",
		62
	],
	[
		"f280",
		"",
		124
	],
	[
		"f340",
		"",
		62
	],
	[
		"f380",
		"",
		124
	],
	[
		"f440",
		"",
		62
	],
	[
		"f480",
		"",
		124
	],
	[
		"f540",
		"",
		62
	],
	[
		"f580",
		"",
		124
	],
	[
		"f640",
		"",
		62
	],
	[
		"f680",
		"",
		124
	],
	[
		"f740",
		"",
		62
	],
	[
		"f780",
		"",
		124
	],
	[
		"f840",
		"",
		62
	],
	[
		"f880",
		"",
		124
	],
	[
		"f940",
		""
	],
	[
		"fa40",
		"ⅰ",
		9,
		"Ⅰ",
		9,
		"￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊"
	],
	[
		"fa80",
		"兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯"
	],
	[
		"fb40",
		"涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神"
	],
	[
		"fb80",
		"祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙"
	],
	[
		"fc40",
		"髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"
	]
];

var require$$1 = [
	[
		"0",
		"\u0000",
		127
	],
	[
		"8ea1",
		"｡",
		62
	],
	[
		"a1a1",
		"　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",
		9,
		"＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"
	],
	[
		"a2a1",
		"◆□■△▲▽▼※〒→←↑↓〓"
	],
	[
		"a2ba",
		"∈∋⊆⊇⊂⊃∪∩"
	],
	[
		"a2ca",
		"∧∨￢⇒⇔∀∃"
	],
	[
		"a2dc",
		"∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"
	],
	[
		"a2f2",
		"Å‰♯♭♪†‡¶"
	],
	[
		"a2fe",
		"◯"
	],
	[
		"a3b0",
		"０",
		9
	],
	[
		"a3c1",
		"Ａ",
		25
	],
	[
		"a3e1",
		"ａ",
		25
	],
	[
		"a4a1",
		"ぁ",
		82
	],
	[
		"a5a1",
		"ァ",
		85
	],
	[
		"a6a1",
		"Α",
		16,
		"Σ",
		6
	],
	[
		"a6c1",
		"α",
		16,
		"σ",
		6
	],
	[
		"a7a1",
		"А",
		5,
		"ЁЖ",
		25
	],
	[
		"a7d1",
		"а",
		5,
		"ёж",
		25
	],
	[
		"a8a1",
		"─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"
	],
	[
		"ada1",
		"①",
		19,
		"Ⅰ",
		9
	],
	[
		"adc0",
		"㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"
	],
	[
		"addf",
		"㍻〝〟№㏍℡㊤",
		4,
		"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"
	],
	[
		"b0a1",
		"亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"
	],
	[
		"b1a1",
		"院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応"
	],
	[
		"b2a1",
		"押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"
	],
	[
		"b3a1",
		"魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱"
	],
	[
		"b4a1",
		"粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"
	],
	[
		"b5a1",
		"機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京"
	],
	[
		"b6a1",
		"供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"
	],
	[
		"b7a1",
		"掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲"
	],
	[
		"b8a1",
		"検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"
	],
	[
		"b9a1",
		"后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込"
	],
	[
		"baa1",
		"此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"
	],
	[
		"bba1",
		"察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時"
	],
	[
		"bca1",
		"次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"
	],
	[
		"bda1",
		"宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償"
	],
	[
		"bea1",
		"勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"
	],
	[
		"bfa1",
		"拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾"
	],
	[
		"c0a1",
		"澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"
	],
	[
		"c1a1",
		"繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎"
	],
	[
		"c2a1",
		"臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"
	],
	[
		"c3a1",
		"叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵"
	],
	[
		"c4a1",
		"帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"
	],
	[
		"c5a1",
		"邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到"
	],
	[
		"c6a1",
		"董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"
	],
	[
		"c7a1",
		"如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦"
	],
	[
		"c8a1",
		"函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"
	],
	[
		"c9a1",
		"鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服"
	],
	[
		"caa1",
		"福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"
	],
	[
		"cba1",
		"法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満"
	],
	[
		"cca1",
		"漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"
	],
	[
		"cda1",
		"諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃"
	],
	[
		"cea1",
		"痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"
	],
	[
		"cfa1",
		"蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"
	],
	[
		"d0a1",
		"弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"
	],
	[
		"d1a1",
		"僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨"
	],
	[
		"d2a1",
		"辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"
	],
	[
		"d3a1",
		"咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉"
	],
	[
		"d4a1",
		"圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"
	],
	[
		"d5a1",
		"奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓"
	],
	[
		"d6a1",
		"屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"
	],
	[
		"d7a1",
		"廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚"
	],
	[
		"d8a1",
		"悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"
	],
	[
		"d9a1",
		"戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼"
	],
	[
		"daa1",
		"據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"
	],
	[
		"dba1",
		"曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍"
	],
	[
		"dca1",
		"棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"
	],
	[
		"dda1",
		"檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾"
	],
	[
		"dea1",
		"沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"
	],
	[
		"dfa1",
		"漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼"
	],
	[
		"e0a1",
		"燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"
	],
	[
		"e1a1",
		"瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰"
	],
	[
		"e2a1",
		"癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"
	],
	[
		"e3a1",
		"磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐"
	],
	[
		"e4a1",
		"筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"
	],
	[
		"e5a1",
		"紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺"
	],
	[
		"e6a1",
		"罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"
	],
	[
		"e7a1",
		"隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙"
	],
	[
		"e8a1",
		"茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"
	],
	[
		"e9a1",
		"蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙"
	],
	[
		"eaa1",
		"蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"
	],
	[
		"eba1",
		"襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫"
	],
	[
		"eca1",
		"譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"
	],
	[
		"eda1",
		"蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸"
	],
	[
		"eea1",
		"遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"
	],
	[
		"efa1",
		"錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞"
	],
	[
		"f0a1",
		"陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"
	],
	[
		"f1a1",
		"顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷"
	],
	[
		"f2a1",
		"髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"
	],
	[
		"f3a1",
		"鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠"
	],
	[
		"f4a1",
		"堯槇遙瑤凜熙"
	],
	[
		"f9a1",
		"纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德"
	],
	[
		"faa1",
		"忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"
	],
	[
		"fba1",
		"犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚"
	],
	[
		"fca1",
		"釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"
	],
	[
		"fcf1",
		"ⅰ",
		9,
		"￢￤＇＂"
	],
	[
		"8fa2af",
		"˘ˇ¸˙˝¯˛˚～΄΅"
	],
	[
		"8fa2c2",
		"¡¦¿"
	],
	[
		"8fa2eb",
		"ºª©®™¤№"
	],
	[
		"8fa6e1",
		"ΆΈΉΊΪ"
	],
	[
		"8fa6e7",
		"Ό"
	],
	[
		"8fa6e9",
		"ΎΫ"
	],
	[
		"8fa6ec",
		"Ώ"
	],
	[
		"8fa6f1",
		"άέήίϊΐόςύϋΰώ"
	],
	[
		"8fa7c2",
		"Ђ",
		10,
		"ЎЏ"
	],
	[
		"8fa7f2",
		"ђ",
		10,
		"ўџ"
	],
	[
		"8fa9a1",
		"ÆĐ"
	],
	[
		"8fa9a4",
		"Ħ"
	],
	[
		"8fa9a6",
		"Ĳ"
	],
	[
		"8fa9a8",
		"ŁĿ"
	],
	[
		"8fa9ab",
		"ŊØŒ"
	],
	[
		"8fa9af",
		"ŦÞ"
	],
	[
		"8fa9c1",
		"æđðħıĳĸłŀŉŋøœßŧþ"
	],
	[
		"8faaa1",
		"ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ"
	],
	[
		"8faaba",
		"ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ"
	],
	[
		"8faba1",
		"áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ"
	],
	[
		"8fabbd",
		"ġĥíìïîǐ"
	],
	[
		"8fabc5",
		"īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż"
	],
	[
		"8fb0a1",
		"丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄"
	],
	[
		"8fb1a1",
		"侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐"
	],
	[
		"8fb2a1",
		"傒傓傔傖傛傜傞",
		4,
		"傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂"
	],
	[
		"8fb3a1",
		"凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋"
	],
	[
		"8fb4a1",
		"匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿"
	],
	[
		"8fb5a1",
		"咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒"
	],
	[
		"8fb6a1",
		"嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍",
		5,
		"嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤",
		4,
		"囱囫园"
	],
	[
		"8fb7a1",
		"囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭",
		4,
		"坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡"
	],
	[
		"8fb8a1",
		"堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭"
	],
	[
		"8fb9a1",
		"奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿"
	],
	[
		"8fbaa1",
		"嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖",
		4,
		"寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩"
	],
	[
		"8fbba1",
		"屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤"
	],
	[
		"8fbca1",
		"巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪",
		4,
		"幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧"
	],
	[
		"8fbda1",
		"彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐",
		4,
		"忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷"
	],
	[
		"8fbea1",
		"悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐",
		4,
		"愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥"
	],
	[
		"8fbfa1",
		"懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵"
	],
	[
		"8fc0a1",
		"捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿"
	],
	[
		"8fc1a1",
		"擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝"
	],
	[
		"8fc2a1",
		"昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝"
	],
	[
		"8fc3a1",
		"杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮",
		4,
		"桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏"
	],
	[
		"8fc4a1",
		"棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲"
	],
	[
		"8fc5a1",
		"樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽"
	],
	[
		"8fc6a1",
		"歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖"
	],
	[
		"8fc7a1",
		"泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞"
	],
	[
		"8fc8a1",
		"湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊"
	],
	[
		"8fc9a1",
		"濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔",
		4,
		"炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃",
		4,
		"焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠"
	],
	[
		"8fcaa1",
		"煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻"
	],
	[
		"8fcba1",
		"狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽"
	],
	[
		"8fcca1",
		"珿琀琁琄琇琊琑琚琛琤琦琨",
		9,
		"琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆"
	],
	[
		"8fcda1",
		"甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹",
		5,
		"疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹"
	],
	[
		"8fcea1",
		"瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢",
		6,
		"皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢"
	],
	[
		"8fcfa1",
		"睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳"
	],
	[
		"8fd0a1",
		"碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞"
	],
	[
		"8fd1a1",
		"秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰"
	],
	[
		"8fd2a1",
		"笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙",
		5
	],
	[
		"8fd3a1",
		"籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝"
	],
	[
		"8fd4a1",
		"綞綦綧綪綳綶綷綹緂",
		4,
		"緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭"
	],
	[
		"8fd5a1",
		"罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮"
	],
	[
		"8fd6a1",
		"胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆"
	],
	[
		"8fd7a1",
		"艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸"
	],
	[
		"8fd8a1",
		"荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓"
	],
	[
		"8fd9a1",
		"蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏",
		4,
		"蕖蕙蕜",
		6,
		"蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼"
	],
	[
		"8fdaa1",
		"藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠",
		4,
		"虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣"
	],
	[
		"8fdba1",
		"蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃",
		6,
		"螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵"
	],
	[
		"8fdca1",
		"蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊",
		4,
		"裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺"
	],
	[
		"8fdda1",
		"襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔",
		4,
		"觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳"
	],
	[
		"8fdea1",
		"誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂",
		4,
		"譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆"
	],
	[
		"8fdfa1",
		"貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢"
	],
	[
		"8fe0a1",
		"踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁"
	],
	[
		"8fe1a1",
		"轃轇轏轑",
		4,
		"轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃"
	],
	[
		"8fe2a1",
		"郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿"
	],
	[
		"8fe3a1",
		"釂釃釅釓釔釗釙釚釞釤釥釩釪釬",
		5,
		"釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵",
		4,
		"鉻鉼鉽鉿銈銉銊銍銎銒銗"
	],
	[
		"8fe4a1",
		"銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿",
		4,
		"鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶"
	],
	[
		"8fe5a1",
		"鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉",
		4,
		"鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹"
	],
	[
		"8fe6a1",
		"镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂"
	],
	[
		"8fe7a1",
		"霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦"
	],
	[
		"8fe8a1",
		"頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱",
		4,
		"餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵"
	],
	[
		"8fe9a1",
		"馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿",
		4
	],
	[
		"8feaa1",
		"鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪",
		4,
		"魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸"
	],
	[
		"8feba1",
		"鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦",
		4,
		"鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻"
	],
	[
		"8feca1",
		"鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵"
	],
	[
		"8feda1",
		"黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃",
		4,
		"齓齕齖齗齘齚齝齞齨齩齭",
		4,
		"齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥"
	]
];

var require$$2$1 = [
	[
		"0",
		"\u0000",
		127,
		"€"
	],
	[
		"8140",
		"丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪",
		5,
		"乲乴",
		9,
		"乿",
		6,
		"亇亊"
	],
	[
		"8180",
		"亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂",
		6,
		"伋伌伒",
		4,
		"伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾",
		4,
		"佄佅佇",
		5,
		"佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢"
	],
	[
		"8240",
		"侤侫侭侰",
		4,
		"侶",
		8,
		"俀俁係俆俇俈俉俋俌俍俒",
		4,
		"俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿",
		11
	],
	[
		"8280",
		"個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯",
		10,
		"倻倽倿偀偁偂偄偅偆偉偊偋偍偐",
		4,
		"偖偗偘偙偛偝",
		7,
		"偦",
		5,
		"偭",
		8,
		"偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎",
		20,
		"傤傦傪傫傭",
		4,
		"傳",
		6,
		"傼"
	],
	[
		"8340",
		"傽",
		17,
		"僐",
		5,
		"僗僘僙僛",
		10,
		"僨僩僪僫僯僰僱僲僴僶",
		4,
		"僼",
		9,
		"儈"
	],
	[
		"8380",
		"儉儊儌",
		5,
		"儓",
		13,
		"儢",
		28,
		"兂兇兊兌兎兏児兒兓兗兘兙兛兝",
		4,
		"兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦",
		4,
		"冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒",
		5
	],
	[
		"8440",
		"凘凙凚凜凞凟凢凣凥",
		5,
		"凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄",
		5,
		"剋剎剏剒剓剕剗剘"
	],
	[
		"8480",
		"剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳",
		9,
		"剾劀劃",
		4,
		"劉",
		6,
		"劑劒劔",
		6,
		"劜劤劥劦劧劮劯劰労",
		9,
		"勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務",
		5,
		"勠勡勢勣勥",
		10,
		"勱",
		7,
		"勻勼勽匁匂匃匄匇匉匊匋匌匎"
	],
	[
		"8540",
		"匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯",
		9,
		"匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏"
	],
	[
		"8580",
		"厐",
		4,
		"厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯",
		6,
		"厷厸厹厺厼厽厾叀參",
		4,
		"収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝",
		4,
		"呣呥呧呩",
		7,
		"呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡"
	],
	[
		"8640",
		"咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠",
		4,
		"哫哬哯哰哱哴",
		5,
		"哻哾唀唂唃唄唅唈唊",
		4,
		"唒唓唕",
		5,
		"唜唝唞唟唡唥唦"
	],
	[
		"8680",
		"唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋",
		4,
		"啑啒啓啔啗",
		4,
		"啝啞啟啠啢啣啨啩啫啯",
		5,
		"啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠",
		6,
		"喨",
		8,
		"喲喴営喸喺喼喿",
		4,
		"嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗",
		4,
		"嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸",
		4,
		"嗿嘂嘃嘄嘅"
	],
	[
		"8740",
		"嘆嘇嘊嘋嘍嘐",
		7,
		"嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀",
		11,
		"噏",
		4,
		"噕噖噚噛噝",
		4
	],
	[
		"8780",
		"噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽",
		7,
		"嚇",
		6,
		"嚐嚑嚒嚔",
		14,
		"嚤",
		10,
		"嚰",
		6,
		"嚸嚹嚺嚻嚽",
		12,
		"囋",
		8,
		"囕囖囘囙囜団囥",
		5,
		"囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國",
		6
	],
	[
		"8840",
		"園",
		9,
		"圝圞圠圡圢圤圥圦圧圫圱圲圴",
		4,
		"圼圽圿坁坃坄坅坆坈坉坋坒",
		4,
		"坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀"
	],
	[
		"8880",
		"垁垇垈垉垊垍",
		4,
		"垔",
		6,
		"垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹",
		8,
		"埄",
		6,
		"埌埍埐埑埓埖埗埛埜埞埡埢埣埥",
		7,
		"埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥",
		4,
		"堫",
		4,
		"報堲堳場堶",
		7
	],
	[
		"8940",
		"堾",
		5,
		"塅",
		6,
		"塎塏塐塒塓塕塖塗塙",
		4,
		"塟",
		5,
		"塦",
		4,
		"塭",
		16,
		"塿墂墄墆墇墈墊墋墌"
	],
	[
		"8980",
		"墍",
		4,
		"墔",
		4,
		"墛墜墝墠",
		7,
		"墪",
		17,
		"墽墾墿壀壂壃壄壆",
		10,
		"壒壓壔壖",
		13,
		"壥",
		5,
		"壭壯壱売壴壵壷壸壺",
		7,
		"夃夅夆夈",
		4,
		"夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻"
	],
	[
		"8a40",
		"夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛",
		4,
		"奡奣奤奦",
		12,
		"奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦"
	],
	[
		"8a80",
		"妧妬妭妰妱妳",
		5,
		"妺妼妽妿",
		6,
		"姇姈姉姌姍姎姏姕姖姙姛姞",
		4,
		"姤姦姧姩姪姫姭",
		11,
		"姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪",
		6,
		"娳娵娷",
		4,
		"娽娾娿婁",
		4,
		"婇婈婋",
		9,
		"婖婗婘婙婛",
		5
	],
	[
		"8b40",
		"婡婣婤婥婦婨婩婫",
		8,
		"婸婹婻婼婽婾媀",
		17,
		"媓",
		6,
		"媜",
		13,
		"媫媬"
	],
	[
		"8b80",
		"媭",
		4,
		"媴媶媷媹",
		4,
		"媿嫀嫃",
		5,
		"嫊嫋嫍",
		4,
		"嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬",
		4,
		"嫲",
		22,
		"嬊",
		11,
		"嬘",
		25,
		"嬳嬵嬶嬸",
		7,
		"孁",
		6
	],
	[
		"8c40",
		"孈",
		7,
		"孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏"
	],
	[
		"8c80",
		"寑寔",
		8,
		"寠寢寣實寧審",
		4,
		"寯寱",
		6,
		"寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧",
		6,
		"屰屲",
		6,
		"屻屼屽屾岀岃",
		4,
		"岉岊岋岎岏岒岓岕岝",
		4,
		"岤",
		4
	],
	[
		"8d40",
		"岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅",
		5,
		"峌",
		5,
		"峓",
		5,
		"峚",
		6,
		"峢峣峧峩峫峬峮峯峱",
		9,
		"峼",
		4
	],
	[
		"8d80",
		"崁崄崅崈",
		5,
		"崏",
		4,
		"崕崗崘崙崚崜崝崟",
		4,
		"崥崨崪崫崬崯",
		4,
		"崵",
		7,
		"崿",
		7,
		"嵈嵉嵍",
		10,
		"嵙嵚嵜嵞",
		10,
		"嵪嵭嵮嵰嵱嵲嵳嵵",
		12,
		"嶃",
		21,
		"嶚嶛嶜嶞嶟嶠"
	],
	[
		"8e40",
		"嶡",
		21,
		"嶸",
		12,
		"巆",
		6,
		"巎",
		12,
		"巜巟巠巣巤巪巬巭"
	],
	[
		"8e80",
		"巰巵巶巸",
		4,
		"巿帀帄帇帉帊帋帍帎帒帓帗帞",
		7,
		"帨",
		4,
		"帯帰帲",
		4,
		"帹帺帾帿幀幁幃幆",
		5,
		"幍",
		6,
		"幖",
		4,
		"幜幝幟幠幣",
		14,
		"幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨",
		4,
		"庮",
		4,
		"庴庺庻庼庽庿",
		6
	],
	[
		"8f40",
		"廆廇廈廋",
		5,
		"廔廕廗廘廙廚廜",
		11,
		"廩廫",
		8,
		"廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤"
	],
	[
		"8f80",
		"弨弫弬弮弰弲",
		6,
		"弻弽弾弿彁",
		14,
		"彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢",
		5,
		"復徫徬徯",
		5,
		"徶徸徹徺徻徾",
		4,
		"忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇"
	],
	[
		"9040",
		"怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰",
		4,
		"怶",
		4,
		"怽怾恀恄",
		6,
		"恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀"
	],
	[
		"9080",
		"悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽",
		7,
		"惇惈惉惌",
		4,
		"惒惓惔惖惗惙惛惞惡",
		4,
		"惪惱惲惵惷惸惻",
		4,
		"愂愃愄愅愇愊愋愌愐",
		4,
		"愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬",
		18,
		"慀",
		6
	],
	[
		"9140",
		"慇慉態慍慏慐慒慓慔慖",
		6,
		"慞慟慠慡慣慤慥慦慩",
		6,
		"慱慲慳慴慶慸",
		18,
		"憌憍憏",
		4,
		"憕"
	],
	[
		"9180",
		"憖",
		6,
		"憞",
		8,
		"憪憫憭",
		9,
		"憸",
		5,
		"憿懀懁懃",
		4,
		"應懌",
		4,
		"懓懕",
		16,
		"懧",
		13,
		"懶",
		8,
		"戀",
		5,
		"戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸",
		4,
		"扂扄扅扆扊"
	],
	[
		"9240",
		"扏扐払扖扗扙扚扜",
		6,
		"扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋",
		5,
		"抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁"
	],
	[
		"9280",
		"拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳",
		5,
		"挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖",
		7,
		"捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙",
		6,
		"採掤掦掫掯掱掲掵掶掹掻掽掿揀"
	],
	[
		"9340",
		"揁揂揃揅揇揈揊揋揌揑揓揔揕揗",
		6,
		"揟揢揤",
		4,
		"揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆",
		4,
		"損搎搑搒搕",
		5,
		"搝搟搢搣搤"
	],
	[
		"9380",
		"搥搧搨搩搫搮",
		5,
		"搵",
		4,
		"搻搼搾摀摂摃摉摋",
		6,
		"摓摕摖摗摙",
		4,
		"摟",
		7,
		"摨摪摫摬摮",
		9,
		"摻",
		6,
		"撃撆撈",
		8,
		"撓撔撗撘撚撛撜撝撟",
		4,
		"撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆",
		6,
		"擏擑擓擔擕擖擙據"
	],
	[
		"9440",
		"擛擜擝擟擠擡擣擥擧",
		24,
		"攁",
		7,
		"攊",
		7,
		"攓",
		4,
		"攙",
		8
	],
	[
		"9480",
		"攢攣攤攦",
		4,
		"攬攭攰攱攲攳攷攺攼攽敀",
		4,
		"敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數",
		14,
		"斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱",
		7,
		"斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘",
		7,
		"旡旣旤旪旫"
	],
	[
		"9540",
		"旲旳旴旵旸旹旻",
		4,
		"昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷",
		4,
		"昽昿晀時晄",
		6,
		"晍晎晐晑晘"
	],
	[
		"9580",
		"晙晛晜晝晞晠晢晣晥晧晩",
		4,
		"晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘",
		4,
		"暞",
		8,
		"暩",
		4,
		"暯",
		4,
		"暵暶暷暸暺暻暼暽暿",
		25,
		"曚曞",
		7,
		"曧曨曪",
		5,
		"曱曵曶書曺曻曽朁朂會"
	],
	[
		"9640",
		"朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠",
		5,
		"朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗",
		4,
		"杝杢杣杤杦杧杫杬杮東杴杶"
	],
	[
		"9680",
		"杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹",
		7,
		"柂柅",
		9,
		"柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵",
		7,
		"柾栁栂栃栄栆栍栐栒栔栕栘",
		4,
		"栞栟栠栢",
		6,
		"栫",
		6,
		"栴栵栶栺栻栿桇桋桍桏桒桖",
		5
	],
	[
		"9740",
		"桜桝桞桟桪桬",
		7,
		"桵桸",
		8,
		"梂梄梇",
		7,
		"梐梑梒梔梕梖梘",
		9,
		"梣梤梥梩梪梫梬梮梱梲梴梶梷梸"
	],
	[
		"9780",
		"梹",
		6,
		"棁棃",
		5,
		"棊棌棎棏棐棑棓棔棖棗棙棛",
		4,
		"棡棢棤",
		9,
		"棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆",
		4,
		"椌椏椑椓",
		11,
		"椡椢椣椥",
		7,
		"椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃",
		16,
		"楕楖楘楙楛楜楟"
	],
	[
		"9840",
		"楡楢楤楥楧楨楩楪楬業楯楰楲",
		4,
		"楺楻楽楾楿榁榃榅榊榋榌榎",
		5,
		"榖榗榙榚榝",
		9,
		"榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽"
	],
	[
		"9880",
		"榾榿槀槂",
		7,
		"構槍槏槑槒槓槕",
		5,
		"槜槝槞槡",
		11,
		"槮槯槰槱槳",
		9,
		"槾樀",
		9,
		"樋",
		11,
		"標",
		5,
		"樠樢",
		5,
		"権樫樬樭樮樰樲樳樴樶",
		6,
		"樿",
		4,
		"橅橆橈",
		7,
		"橑",
		6,
		"橚"
	],
	[
		"9940",
		"橜",
		4,
		"橢橣橤橦",
		10,
		"橲",
		6,
		"橺橻橽橾橿檁檂檃檅",
		8,
		"檏檒",
		4,
		"檘",
		7,
		"檡",
		5
	],
	[
		"9980",
		"檧檨檪檭",
		114,
		"欥欦欨",
		6
	],
	[
		"9a40",
		"欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍",
		11,
		"歚",
		7,
		"歨歩歫",
		13,
		"歺歽歾歿殀殅殈"
	],
	[
		"9a80",
		"殌殎殏殐殑殔殕殗殘殙殜",
		4,
		"殢",
		7,
		"殫",
		7,
		"殶殸",
		6,
		"毀毃毄毆",
		4,
		"毌毎毐毑毘毚毜",
		4,
		"毢",
		7,
		"毬毭毮毰毱毲毴毶毷毸毺毻毼毾",
		6,
		"氈",
		4,
		"氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋",
		4,
		"汑汒汓汖汘"
	],
	[
		"9b40",
		"汙汚汢汣汥汦汧汫",
		4,
		"汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘"
	],
	[
		"9b80",
		"泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟",
		5,
		"洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽",
		4,
		"涃涄涆涇涊涋涍涏涐涒涖",
		4,
		"涜涢涥涬涭涰涱涳涴涶涷涹",
		5,
		"淁淂淃淈淉淊"
	],
	[
		"9c40",
		"淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽",
		7,
		"渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵"
	],
	[
		"9c80",
		"渶渷渹渻",
		7,
		"湅",
		7,
		"湏湐湑湒湕湗湙湚湜湝湞湠",
		10,
		"湬湭湯",
		14,
		"満溁溂溄溇溈溊",
		4,
		"溑",
		6,
		"溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪",
		5
	],
	[
		"9d40",
		"滰滱滲滳滵滶滷滸滺",
		7,
		"漃漄漅漇漈漊",
		4,
		"漐漑漒漖",
		9,
		"漡漢漣漥漦漧漨漬漮漰漲漴漵漷",
		6,
		"漿潀潁潂"
	],
	[
		"9d80",
		"潃潄潅潈潉潊潌潎",
		9,
		"潙潚潛潝潟潠潡潣潤潥潧",
		5,
		"潯潰潱潳潵潶潷潹潻潽",
		6,
		"澅澆澇澊澋澏",
		12,
		"澝澞澟澠澢",
		4,
		"澨",
		10,
		"澴澵澷澸澺",
		5,
		"濁濃",
		5,
		"濊",
		6,
		"濓",
		10,
		"濟濢濣濤濥"
	],
	[
		"9e40",
		"濦",
		7,
		"濰",
		32,
		"瀒",
		7,
		"瀜",
		6,
		"瀤",
		6
	],
	[
		"9e80",
		"瀫",
		9,
		"瀶瀷瀸瀺",
		17,
		"灍灎灐",
		13,
		"灟",
		11,
		"灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞",
		12,
		"炰炲炴炵炶為炾炿烄烅烆烇烉烋",
		12,
		"烚"
	],
	[
		"9f40",
		"烜烝烞烠烡烢烣烥烪烮烰",
		6,
		"烸烺烻烼烾",
		10,
		"焋",
		4,
		"焑焒焔焗焛",
		10,
		"焧",
		7,
		"焲焳焴"
	],
	[
		"9f80",
		"焵焷",
		13,
		"煆煇煈煉煋煍煏",
		12,
		"煝煟",
		4,
		"煥煩",
		4,
		"煯煰煱煴煵煶煷煹煻煼煾",
		5,
		"熅",
		4,
		"熋熌熍熎熐熑熒熓熕熖熗熚",
		4,
		"熡",
		6,
		"熩熪熫熭",
		5,
		"熴熶熷熸熺",
		8,
		"燄",
		9,
		"燏",
		4
	],
	[
		"a040",
		"燖",
		9,
		"燡燢燣燤燦燨",
		5,
		"燯",
		9,
		"燺",
		11,
		"爇",
		19
	],
	[
		"a080",
		"爛爜爞",
		9,
		"爩爫爭爮爯爲爳爴爺爼爾牀",
		6,
		"牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅",
		4,
		"犌犎犐犑犓",
		11,
		"犠",
		11,
		"犮犱犲犳犵犺",
		6,
		"狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛"
	],
	[
		"a1a1",
		"　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈",
		7,
		"〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓"
	],
	[
		"a2a1",
		"ⅰ",
		9
	],
	[
		"a2b1",
		"⒈",
		19,
		"⑴",
		19,
		"①",
		9
	],
	[
		"a2e5",
		"㈠",
		9
	],
	[
		"a2f1",
		"Ⅰ",
		11
	],
	[
		"a3a1",
		"！＂＃￥％",
		88,
		"￣"
	],
	[
		"a4a1",
		"ぁ",
		82
	],
	[
		"a5a1",
		"ァ",
		85
	],
	[
		"a6a1",
		"Α",
		16,
		"Σ",
		6
	],
	[
		"a6c1",
		"α",
		16,
		"σ",
		6
	],
	[
		"a6e0",
		"︵︶︹︺︿﹀︽︾﹁﹂﹃﹄"
	],
	[
		"a6ee",
		"︻︼︷︸︱"
	],
	[
		"a6f4",
		"︳︴"
	],
	[
		"a7a1",
		"А",
		5,
		"ЁЖ",
		25
	],
	[
		"a7d1",
		"а",
		5,
		"ёж",
		25
	],
	[
		"a840",
		"ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═",
		35,
		"▁",
		6
	],
	[
		"a880",
		"█",
		7,
		"▓▔▕▼▽◢◣◤◥☉⊕〒〝〞"
	],
	[
		"a8a1",
		"āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ"
	],
	[
		"a8bd",
		"ńň"
	],
	[
		"a8c0",
		"ɡ"
	],
	[
		"a8c5",
		"ㄅ",
		36
	],
	[
		"a940",
		"〡",
		8,
		"㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤"
	],
	[
		"a959",
		"℡㈱"
	],
	[
		"a95c",
		"‐"
	],
	[
		"a960",
		"ー゛゜ヽヾ〆ゝゞ﹉",
		9,
		"﹔﹕﹖﹗﹙",
		8
	],
	[
		"a980",
		"﹢",
		4,
		"﹨﹩﹪﹫"
	],
	[
		"a996",
		"〇"
	],
	[
		"a9a4",
		"─",
		75
	],
	[
		"aa40",
		"狜狝狟狢",
		5,
		"狪狫狵狶狹狽狾狿猀猂猄",
		5,
		"猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀",
		8
	],
	[
		"aa80",
		"獉獊獋獌獎獏獑獓獔獕獖獘",
		7,
		"獡",
		10,
		"獮獰獱"
	],
	[
		"ab40",
		"獲",
		11,
		"獿",
		4,
		"玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣",
		5,
		"玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃",
		4
	],
	[
		"ab80",
		"珋珌珎珒",
		6,
		"珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳",
		4
	],
	[
		"ac40",
		"珸",
		10,
		"琄琇琈琋琌琍琎琑",
		8,
		"琜",
		5,
		"琣琤琧琩琫琭琯琱琲琷",
		4,
		"琽琾琿瑀瑂",
		11
	],
	[
		"ac80",
		"瑎",
		6,
		"瑖瑘瑝瑠",
		12,
		"瑮瑯瑱",
		4,
		"瑸瑹瑺"
	],
	[
		"ad40",
		"瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑",
		10,
		"璝璟",
		7,
		"璪",
		15,
		"璻",
		12
	],
	[
		"ad80",
		"瓈",
		9,
		"瓓",
		8,
		"瓝瓟瓡瓥瓧",
		6,
		"瓰瓱瓲"
	],
	[
		"ae40",
		"瓳瓵瓸",
		6,
		"甀甁甂甃甅",
		7,
		"甎甐甒甔甕甖甗甛甝甞甠",
		4,
		"甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘"
	],
	[
		"ae80",
		"畝",
		7,
		"畧畨畩畫",
		6,
		"畳畵當畷畺",
		4,
		"疀疁疂疄疅疇"
	],
	[
		"af40",
		"疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦",
		4,
		"疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇"
	],
	[
		"af80",
		"瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄"
	],
	[
		"b040",
		"癅",
		6,
		"癎",
		5,
		"癕癗",
		4,
		"癝癟癠癡癢癤",
		6,
		"癬癭癮癰",
		7,
		"癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛"
	],
	[
		"b080",
		"皜",
		7,
		"皥",
		8,
		"皯皰皳皵",
		9,
		"盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥"
	],
	[
		"b140",
		"盄盇盉盋盌盓盕盙盚盜盝盞盠",
		4,
		"盦",
		7,
		"盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎",
		10,
		"眛眜眝眞眡眣眤眥眧眪眫"
	],
	[
		"b180",
		"眬眮眰",
		4,
		"眹眻眽眾眿睂睄睅睆睈",
		7,
		"睒",
		7,
		"睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳"
	],
	[
		"b240",
		"睝睞睟睠睤睧睩睪睭",
		11,
		"睺睻睼瞁瞂瞃瞆",
		5,
		"瞏瞐瞓",
		11,
		"瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶",
		4
	],
	[
		"b280",
		"瞼瞾矀",
		12,
		"矎",
		8,
		"矘矙矚矝",
		4,
		"矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖"
	],
	[
		"b340",
		"矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃",
		5,
		"砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚"
	],
	[
		"b380",
		"硛硜硞",
		11,
		"硯",
		7,
		"硸硹硺硻硽",
		6,
		"场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚"
	],
	[
		"b440",
		"碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨",
		7,
		"碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚",
		9
	],
	[
		"b480",
		"磤磥磦磧磩磪磫磭",
		4,
		"磳磵磶磸磹磻",
		5,
		"礂礃礄礆",
		6,
		"础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮"
	],
	[
		"b540",
		"礍",
		5,
		"礔",
		9,
		"礟",
		4,
		"礥",
		14,
		"礵",
		4,
		"礽礿祂祃祄祅祇祊",
		8,
		"祔祕祘祙祡祣"
	],
	[
		"b580",
		"祤祦祩祪祫祬祮祰",
		6,
		"祹祻",
		4,
		"禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠"
	],
	[
		"b640",
		"禓",
		6,
		"禛",
		11,
		"禨",
		10,
		"禴",
		4,
		"禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙",
		5,
		"秠秡秢秥秨秪"
	],
	[
		"b680",
		"秬秮秱",
		6,
		"秹秺秼秾秿稁稄稅稇稈稉稊稌稏",
		4,
		"稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二"
	],
	[
		"b740",
		"稝稟稡稢稤",
		14,
		"稴稵稶稸稺稾穀",
		5,
		"穇",
		9,
		"穒",
		4,
		"穘",
		16
	],
	[
		"b780",
		"穩",
		6,
		"穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服"
	],
	[
		"b840",
		"窣窤窧窩窪窫窮",
		4,
		"窴",
		10,
		"竀",
		10,
		"竌",
		9,
		"竗竘竚竛竜竝竡竢竤竧",
		5,
		"竮竰竱竲竳"
	],
	[
		"b880",
		"竴",
		4,
		"竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹"
	],
	[
		"b940",
		"笯笰笲笴笵笶笷笹笻笽笿",
		5,
		"筆筈筊筍筎筓筕筗筙筜筞筟筡筣",
		10,
		"筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆",
		6,
		"箎箏"
	],
	[
		"b980",
		"箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹",
		7,
		"篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈"
	],
	[
		"ba40",
		"篅篈築篊篋篍篎篏篐篒篔",
		4,
		"篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲",
		4,
		"篸篹篺篻篽篿",
		7,
		"簈簉簊簍簎簐",
		5,
		"簗簘簙"
	],
	[
		"ba80",
		"簚",
		4,
		"簠",
		5,
		"簨簩簫",
		12,
		"簹",
		5,
		"籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖"
	],
	[
		"bb40",
		"籃",
		9,
		"籎",
		36,
		"籵",
		5,
		"籾",
		9
	],
	[
		"bb80",
		"粈粊",
		6,
		"粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴",
		4,
		"粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕"
	],
	[
		"bc40",
		"粿糀糂糃糄糆糉糋糎",
		6,
		"糘糚糛糝糞糡",
		6,
		"糩",
		5,
		"糰",
		7,
		"糹糺糼",
		13,
		"紋",
		5
	],
	[
		"bc80",
		"紑",
		14,
		"紡紣紤紥紦紨紩紪紬紭紮細",
		6,
		"肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件"
	],
	[
		"bd40",
		"紷",
		54,
		"絯",
		7
	],
	[
		"bd80",
		"絸",
		32,
		"健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸"
	],
	[
		"be40",
		"継",
		12,
		"綧",
		6,
		"綯",
		42
	],
	[
		"be80",
		"線",
		32,
		"尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻"
	],
	[
		"bf40",
		"緻",
		62
	],
	[
		"bf80",
		"縺縼",
		4,
		"繂",
		4,
		"繈",
		21,
		"俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀"
	],
	[
		"c040",
		"繞",
		35,
		"纃",
		23,
		"纜纝纞"
	],
	[
		"c080",
		"纮纴纻纼绖绤绬绹缊缐缞缷缹缻",
		6,
		"罃罆",
		9,
		"罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐"
	],
	[
		"c140",
		"罖罙罛罜罝罞罠罣",
		4,
		"罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂",
		7,
		"羋羍羏",
		4,
		"羕",
		4,
		"羛羜羠羢羣羥羦羨",
		6,
		"羱"
	],
	[
		"c180",
		"羳",
		4,
		"羺羻羾翀翂翃翄翆翇翈翉翋翍翏",
		4,
		"翖翗翙",
		5,
		"翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿"
	],
	[
		"c240",
		"翤翧翨翪翫翬翭翯翲翴",
		6,
		"翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫",
		5,
		"耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗"
	],
	[
		"c280",
		"聙聛",
		13,
		"聫",
		5,
		"聲",
		11,
		"隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫"
	],
	[
		"c340",
		"聾肁肂肅肈肊肍",
		5,
		"肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇",
		4,
		"胏",
		6,
		"胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋"
	],
	[
		"c380",
		"脌脕脗脙脛脜脝脟",
		12,
		"脭脮脰脳脴脵脷脹",
		4,
		"脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸"
	],
	[
		"c440",
		"腀",
		5,
		"腇腉腍腎腏腒腖腗腘腛",
		4,
		"腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃",
		4,
		"膉膋膌膍膎膐膒",
		5,
		"膙膚膞",
		4,
		"膤膥"
	],
	[
		"c480",
		"膧膩膫",
		7,
		"膴",
		5,
		"膼膽膾膿臄臅臇臈臉臋臍",
		6,
		"摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁"
	],
	[
		"c540",
		"臔",
		14,
		"臤臥臦臨臩臫臮",
		4,
		"臵",
		5,
		"臽臿舃與",
		4,
		"舎舏舑舓舕",
		5,
		"舝舠舤舥舦舧舩舮舲舺舼舽舿"
	],
	[
		"c580",
		"艀艁艂艃艅艆艈艊艌艍艎艐",
		7,
		"艙艛艜艝艞艠",
		7,
		"艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗"
	],
	[
		"c640",
		"艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸"
	],
	[
		"c680",
		"苺苼",
		4,
		"茊茋茍茐茒茓茖茘茙茝",
		9,
		"茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐"
	],
	[
		"c740",
		"茾茿荁荂荄荅荈荊",
		4,
		"荓荕",
		4,
		"荝荢荰",
		6,
		"荹荺荾",
		6,
		"莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡",
		6,
		"莬莭莮"
	],
	[
		"c780",
		"莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠"
	],
	[
		"c840",
		"菮華菳",
		4,
		"菺菻菼菾菿萀萂萅萇萈萉萊萐萒",
		5,
		"萙萚萛萞",
		5,
		"萩",
		7,
		"萲",
		5,
		"萹萺萻萾",
		7,
		"葇葈葉"
	],
	[
		"c880",
		"葊",
		6,
		"葒",
		4,
		"葘葝葞葟葠葢葤",
		4,
		"葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁"
	],
	[
		"c940",
		"葽",
		4,
		"蒃蒄蒅蒆蒊蒍蒏",
		7,
		"蒘蒚蒛蒝蒞蒟蒠蒢",
		12,
		"蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗"
	],
	[
		"c980",
		"蓘",
		4,
		"蓞蓡蓢蓤蓧",
		4,
		"蓭蓮蓯蓱",
		10,
		"蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳"
	],
	[
		"ca40",
		"蔃",
		8,
		"蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢",
		8,
		"蔭",
		9,
		"蔾",
		4,
		"蕄蕅蕆蕇蕋",
		10
	],
	[
		"ca80",
		"蕗蕘蕚蕛蕜蕝蕟",
		4,
		"蕥蕦蕧蕩",
		8,
		"蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱"
	],
	[
		"cb40",
		"薂薃薆薈",
		6,
		"薐",
		10,
		"薝",
		6,
		"薥薦薧薩薫薬薭薱",
		5,
		"薸薺",
		6,
		"藂",
		6,
		"藊",
		4,
		"藑藒"
	],
	[
		"cb80",
		"藔藖",
		5,
		"藝",
		6,
		"藥藦藧藨藪",
		14,
		"恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔"
	],
	[
		"cc40",
		"藹藺藼藽藾蘀",
		4,
		"蘆",
		10,
		"蘒蘓蘔蘕蘗",
		15,
		"蘨蘪",
		13,
		"蘹蘺蘻蘽蘾蘿虀"
	],
	[
		"cc80",
		"虁",
		11,
		"虒虓處",
		4,
		"虛虜虝號虠虡虣",
		7,
		"獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃"
	],
	[
		"cd40",
		"虭虯虰虲",
		6,
		"蚃",
		6,
		"蚎",
		4,
		"蚔蚖",
		5,
		"蚞",
		4,
		"蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻",
		4,
		"蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜"
	],
	[
		"cd80",
		"蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威"
	],
	[
		"ce40",
		"蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀",
		6,
		"蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚",
		5,
		"蝡蝢蝦",
		7,
		"蝯蝱蝲蝳蝵"
	],
	[
		"ce80",
		"蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎",
		4,
		"螔螕螖螘",
		6,
		"螠",
		4,
		"巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺"
	],
	[
		"cf40",
		"螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁",
		4,
		"蟇蟈蟉蟌",
		4,
		"蟔",
		6,
		"蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯",
		9
	],
	[
		"cf80",
		"蟺蟻蟼蟽蟿蠀蠁蠂蠄",
		5,
		"蠋",
		7,
		"蠔蠗蠘蠙蠚蠜",
		4,
		"蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓"
	],
	[
		"d040",
		"蠤",
		13,
		"蠳",
		5,
		"蠺蠻蠽蠾蠿衁衂衃衆",
		5,
		"衎",
		5,
		"衕衖衘衚",
		6,
		"衦衧衪衭衯衱衳衴衵衶衸衹衺"
	],
	[
		"d080",
		"衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗",
		4,
		"袝",
		4,
		"袣袥",
		5,
		"小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄"
	],
	[
		"d140",
		"袬袮袯袰袲",
		4,
		"袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚",
		4,
		"裠裡裦裧裩",
		6,
		"裲裵裶裷裺裻製裿褀褁褃",
		5
	],
	[
		"d180",
		"褉褋",
		4,
		"褑褔",
		4,
		"褜",
		4,
		"褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶"
	],
	[
		"d240",
		"褸",
		8,
		"襂襃襅",
		24,
		"襠",
		5,
		"襧",
		19,
		"襼"
	],
	[
		"d280",
		"襽襾覀覂覄覅覇",
		26,
		"摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐"
	],
	[
		"d340",
		"覢",
		30,
		"觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴",
		6
	],
	[
		"d380",
		"觻",
		4,
		"訁",
		5,
		"計",
		21,
		"印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉"
	],
	[
		"d440",
		"訞",
		31,
		"訿",
		8,
		"詉",
		21
	],
	[
		"d480",
		"詟",
		25,
		"詺",
		6,
		"浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧"
	],
	[
		"d540",
		"誁",
		7,
		"誋",
		7,
		"誔",
		46
	],
	[
		"d580",
		"諃",
		32,
		"铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政"
	],
	[
		"d640",
		"諤",
		34,
		"謈",
		27
	],
	[
		"d680",
		"謤謥謧",
		30,
		"帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑"
	],
	[
		"d740",
		"譆",
		31,
		"譧",
		4,
		"譭",
		25
	],
	[
		"d780",
		"讇",
		24,
		"讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座"
	],
	[
		"d840",
		"谸",
		8,
		"豂豃豄豅豈豊豋豍",
		7,
		"豖豗豘豙豛",
		5,
		"豣",
		6,
		"豬",
		6,
		"豴豵豶豷豻",
		6,
		"貃貄貆貇"
	],
	[
		"d880",
		"貈貋貍",
		6,
		"貕貖貗貙",
		20,
		"亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝"
	],
	[
		"d940",
		"貮",
		62
	],
	[
		"d980",
		"賭",
		32,
		"佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼"
	],
	[
		"da40",
		"贎",
		14,
		"贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸",
		8,
		"趂趃趆趇趈趉趌",
		4,
		"趒趓趕",
		9,
		"趠趡"
	],
	[
		"da80",
		"趢趤",
		12,
		"趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺"
	],
	[
		"db40",
		"跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾",
		6,
		"踆踇踈踋踍踎踐踑踒踓踕",
		7,
		"踠踡踤",
		4,
		"踫踭踰踲踳踴踶踷踸踻踼踾"
	],
	[
		"db80",
		"踿蹃蹅蹆蹌",
		4,
		"蹓",
		5,
		"蹚",
		11,
		"蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝"
	],
	[
		"dc40",
		"蹳蹵蹷",
		4,
		"蹽蹾躀躂躃躄躆躈",
		6,
		"躑躒躓躕",
		6,
		"躝躟",
		11,
		"躭躮躰躱躳",
		6,
		"躻",
		7
	],
	[
		"dc80",
		"軃",
		10,
		"軏",
		21,
		"堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥"
	],
	[
		"dd40",
		"軥",
		62
	],
	[
		"dd80",
		"輤",
		32,
		"荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺"
	],
	[
		"de40",
		"轅",
		32,
		"轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆"
	],
	[
		"de80",
		"迉",
		4,
		"迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖"
	],
	[
		"df40",
		"這逜連逤逥逧",
		5,
		"逰",
		4,
		"逷逹逺逽逿遀遃遅遆遈",
		4,
		"過達違遖遙遚遜",
		5,
		"遤遦遧適遪遫遬遯",
		4,
		"遶",
		6,
		"遾邁"
	],
	[
		"df80",
		"還邅邆邇邉邊邌",
		4,
		"邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼"
	],
	[
		"e040",
		"郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅",
		19,
		"鄚鄛鄜"
	],
	[
		"e080",
		"鄝鄟鄠鄡鄤",
		10,
		"鄰鄲",
		6,
		"鄺",
		8,
		"酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼"
	],
	[
		"e140",
		"酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀",
		4,
		"醆醈醊醎醏醓",
		6,
		"醜",
		5,
		"醤",
		5,
		"醫醬醰醱醲醳醶醷醸醹醻"
	],
	[
		"e180",
		"醼",
		10,
		"釈釋釐釒",
		9,
		"針",
		8,
		"帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺"
	],
	[
		"e240",
		"釦",
		62
	],
	[
		"e280",
		"鈥",
		32,
		"狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧",
		5,
		"饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂"
	],
	[
		"e340",
		"鉆",
		45,
		"鉵",
		16
	],
	[
		"e380",
		"銆",
		7,
		"銏",
		24,
		"恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾"
	],
	[
		"e440",
		"銨",
		5,
		"銯",
		24,
		"鋉",
		31
	],
	[
		"e480",
		"鋩",
		32,
		"洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑"
	],
	[
		"e540",
		"錊",
		51,
		"錿",
		10
	],
	[
		"e580",
		"鍊",
		31,
		"鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣"
	],
	[
		"e640",
		"鍬",
		34,
		"鎐",
		27
	],
	[
		"e680",
		"鎬",
		29,
		"鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩"
	],
	[
		"e740",
		"鏎",
		7,
		"鏗",
		54
	],
	[
		"e780",
		"鐎",
		32,
		"纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡",
		6,
		"缪缫缬缭缯",
		4,
		"缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬"
	],
	[
		"e840",
		"鐯",
		14,
		"鐿",
		43,
		"鑬鑭鑮鑯"
	],
	[
		"e880",
		"鑰",
		20,
		"钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹"
	],
	[
		"e940",
		"锧锳锽镃镈镋镕镚镠镮镴镵長",
		7,
		"門",
		42
	],
	[
		"e980",
		"閫",
		32,
		"椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋"
	],
	[
		"ea40",
		"闌",
		27,
		"闬闿阇阓阘阛阞阠阣",
		6,
		"阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗"
	],
	[
		"ea80",
		"陘陙陚陜陝陞陠陣陥陦陫陭",
		4,
		"陳陸",
		12,
		"隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰"
	],
	[
		"eb40",
		"隌階隑隒隓隕隖隚際隝",
		9,
		"隨",
		7,
		"隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖",
		9,
		"雡",
		6,
		"雫"
	],
	[
		"eb80",
		"雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗",
		4,
		"霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻"
	],
	[
		"ec40",
		"霡",
		8,
		"霫霬霮霯霱霳",
		4,
		"霺霻霼霽霿",
		18,
		"靔靕靗靘靚靜靝靟靣靤靦靧靨靪",
		7
	],
	[
		"ec80",
		"靲靵靷",
		4,
		"靽",
		7,
		"鞆",
		4,
		"鞌鞎鞏鞐鞓鞕鞖鞗鞙",
		4,
		"臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐"
	],
	[
		"ed40",
		"鞞鞟鞡鞢鞤",
		6,
		"鞬鞮鞰鞱鞳鞵",
		46
	],
	[
		"ed80",
		"韤韥韨韮",
		4,
		"韴韷",
		23,
		"怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨"
	],
	[
		"ee40",
		"頏",
		62
	],
	[
		"ee80",
		"顎",
		32,
		"睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶",
		4,
		"钼钽钿铄铈",
		6,
		"铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪"
	],
	[
		"ef40",
		"顯",
		5,
		"颋颎颒颕颙颣風",
		37,
		"飏飐飔飖飗飛飜飝飠",
		4
	],
	[
		"ef80",
		"飥飦飩",
		30,
		"铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒",
		4,
		"锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤",
		8,
		"镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔"
	],
	[
		"f040",
		"餈",
		4,
		"餎餏餑",
		28,
		"餯",
		26
	],
	[
		"f080",
		"饊",
		9,
		"饖",
		12,
		"饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨",
		4,
		"鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦",
		6,
		"鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙"
	],
	[
		"f140",
		"馌馎馚",
		10,
		"馦馧馩",
		47
	],
	[
		"f180",
		"駙",
		32,
		"瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃"
	],
	[
		"f240",
		"駺",
		62
	],
	[
		"f280",
		"騹",
		32,
		"颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒"
	],
	[
		"f340",
		"驚",
		17,
		"驲骃骉骍骎骔骕骙骦骩",
		6,
		"骲骳骴骵骹骻骽骾骿髃髄髆",
		4,
		"髍髎髏髐髒體髕髖髗髙髚髛髜"
	],
	[
		"f380",
		"髝髞髠髢髣髤髥髧髨髩髪髬髮髰",
		8,
		"髺髼",
		6,
		"鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋"
	],
	[
		"f440",
		"鬇鬉",
		5,
		"鬐鬑鬒鬔",
		10,
		"鬠鬡鬢鬤",
		10,
		"鬰鬱鬳",
		7,
		"鬽鬾鬿魀魆魊魋魌魎魐魒魓魕",
		5
	],
	[
		"f480",
		"魛",
		32,
		"簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤"
	],
	[
		"f540",
		"魼",
		62
	],
	[
		"f580",
		"鮻",
		32,
		"酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜"
	],
	[
		"f640",
		"鯜",
		62
	],
	[
		"f680",
		"鰛",
		32,
		"觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅",
		5,
		"龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞",
		5,
		"鲥",
		4,
		"鲫鲭鲮鲰",
		7,
		"鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋"
	],
	[
		"f740",
		"鰼",
		62
	],
	[
		"f780",
		"鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾",
		4,
		"鳈鳉鳑鳒鳚鳛鳠鳡鳌",
		4,
		"鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄"
	],
	[
		"f840",
		"鳣",
		62
	],
	[
		"f880",
		"鴢",
		32
	],
	[
		"f940",
		"鵃",
		62
	],
	[
		"f980",
		"鶂",
		32
	],
	[
		"fa40",
		"鶣",
		62
	],
	[
		"fa80",
		"鷢",
		32
	],
	[
		"fb40",
		"鸃",
		27,
		"鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴",
		9,
		"麀"
	],
	[
		"fb80",
		"麁麃麄麅麆麉麊麌",
		5,
		"麔",
		8,
		"麞麠",
		5,
		"麧麨麩麪"
	],
	[
		"fc40",
		"麫",
		8,
		"麵麶麷麹麺麼麿",
		4,
		"黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰",
		8,
		"黺黽黿",
		6
	],
	[
		"fc80",
		"鼆",
		4,
		"鼌鼏鼑鼒鼔鼕鼖鼘鼚",
		5,
		"鼡鼣",
		8,
		"鼭鼮鼰鼱"
	],
	[
		"fd40",
		"鼲",
		4,
		"鼸鼺鼼鼿",
		4,
		"齅",
		10,
		"齒",
		38
	],
	[
		"fd80",
		"齹",
		5,
		"龁龂龍",
		11,
		"龜龝龞龡",
		4,
		"郎凉秊裏隣"
	],
	[
		"fe40",
		"兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩"
	]
];

var require$$3 = [
	[
		"a140",
		"",
		62
	],
	[
		"a180",
		"",
		32
	],
	[
		"a240",
		"",
		62
	],
	[
		"a280",
		"",
		32
	],
	[
		"a2ab",
		"",
		5
	],
	[
		"a2e3",
		"€"
	],
	[
		"a2ef",
		""
	],
	[
		"a2fd",
		""
	],
	[
		"a340",
		"",
		62
	],
	[
		"a380",
		"",
		31,
		"　"
	],
	[
		"a440",
		"",
		62
	],
	[
		"a480",
		"",
		32
	],
	[
		"a4f4",
		"",
		10
	],
	[
		"a540",
		"",
		62
	],
	[
		"a580",
		"",
		32
	],
	[
		"a5f7",
		"",
		7
	],
	[
		"a640",
		"",
		62
	],
	[
		"a680",
		"",
		32
	],
	[
		"a6b9",
		"",
		7
	],
	[
		"a6d9",
		"",
		6
	],
	[
		"a6ec",
		""
	],
	[
		"a6f3",
		""
	],
	[
		"a6f6",
		"",
		8
	],
	[
		"a740",
		"",
		62
	],
	[
		"a780",
		"",
		32
	],
	[
		"a7c2",
		"",
		14
	],
	[
		"a7f2",
		"",
		12
	],
	[
		"a896",
		"",
		10
	],
	[
		"a8bc",
		""
	],
	[
		"a8bf",
		"ǹ"
	],
	[
		"a8c1",
		""
	],
	[
		"a8ea",
		"",
		20
	],
	[
		"a958",
		""
	],
	[
		"a95b",
		""
	],
	[
		"a95d",
		""
	],
	[
		"a989",
		"〾⿰",
		11
	],
	[
		"a997",
		"",
		12
	],
	[
		"a9f0",
		"",
		14
	],
	[
		"aaa1",
		"",
		93
	],
	[
		"aba1",
		"",
		93
	],
	[
		"aca1",
		"",
		93
	],
	[
		"ada1",
		"",
		93
	],
	[
		"aea1",
		"",
		93
	],
	[
		"afa1",
		"",
		93
	],
	[
		"d7fa",
		"",
		4
	],
	[
		"f8a1",
		"",
		93
	],
	[
		"f9a1",
		"",
		93
	],
	[
		"faa1",
		"",
		93
	],
	[
		"fba1",
		"",
		93
	],
	[
		"fca1",
		"",
		93
	],
	[
		"fda1",
		"",
		93
	],
	[
		"fe50",
		"⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌"
	],
	[
		"fe80",
		"䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓",
		6,
		"䶮",
		93
	]
];

var uChars = [
	128,
	165,
	169,
	178,
	184,
	216,
	226,
	235,
	238,
	244,
	248,
	251,
	253,
	258,
	276,
	284,
	300,
	325,
	329,
	334,
	364,
	463,
	465,
	467,
	469,
	471,
	473,
	475,
	477,
	506,
	594,
	610,
	712,
	716,
	730,
	930,
	938,
	962,
	970,
	1026,
	1104,
	1106,
	8209,
	8215,
	8218,
	8222,
	8231,
	8241,
	8244,
	8246,
	8252,
	8365,
	8452,
	8454,
	8458,
	8471,
	8482,
	8556,
	8570,
	8596,
	8602,
	8713,
	8720,
	8722,
	8726,
	8731,
	8737,
	8740,
	8742,
	8748,
	8751,
	8760,
	8766,
	8777,
	8781,
	8787,
	8802,
	8808,
	8816,
	8854,
	8858,
	8870,
	8896,
	8979,
	9322,
	9372,
	9548,
	9588,
	9616,
	9622,
	9634,
	9652,
	9662,
	9672,
	9676,
	9680,
	9702,
	9735,
	9738,
	9793,
	9795,
	11906,
	11909,
	11913,
	11917,
	11928,
	11944,
	11947,
	11951,
	11956,
	11960,
	11964,
	11979,
	12284,
	12292,
	12312,
	12319,
	12330,
	12351,
	12436,
	12447,
	12535,
	12543,
	12586,
	12842,
	12850,
	12964,
	13200,
	13215,
	13218,
	13253,
	13263,
	13267,
	13270,
	13384,
	13428,
	13727,
	13839,
	13851,
	14617,
	14703,
	14801,
	14816,
	14964,
	15183,
	15471,
	15585,
	16471,
	16736,
	17208,
	17325,
	17330,
	17374,
	17623,
	17997,
	18018,
	18212,
	18218,
	18301,
	18318,
	18760,
	18811,
	18814,
	18820,
	18823,
	18844,
	18848,
	18872,
	19576,
	19620,
	19738,
	19887,
	40870,
	59244,
	59336,
	59367,
	59413,
	59417,
	59423,
	59431,
	59437,
	59443,
	59452,
	59460,
	59478,
	59493,
	63789,
	63866,
	63894,
	63976,
	63986,
	64016,
	64018,
	64021,
	64025,
	64034,
	64037,
	64042,
	65074,
	65093,
	65107,
	65112,
	65127,
	65132,
	65375,
	65510,
	65536
];
var gbChars = [
	0,
	36,
	38,
	45,
	50,
	81,
	89,
	95,
	96,
	100,
	103,
	104,
	105,
	109,
	126,
	133,
	148,
	172,
	175,
	179,
	208,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	341,
	428,
	443,
	544,
	545,
	558,
	741,
	742,
	749,
	750,
	805,
	819,
	820,
	7922,
	7924,
	7925,
	7927,
	7934,
	7943,
	7944,
	7945,
	7950,
	8062,
	8148,
	8149,
	8152,
	8164,
	8174,
	8236,
	8240,
	8262,
	8264,
	8374,
	8380,
	8381,
	8384,
	8388,
	8390,
	8392,
	8393,
	8394,
	8396,
	8401,
	8406,
	8416,
	8419,
	8424,
	8437,
	8439,
	8445,
	8482,
	8485,
	8496,
	8521,
	8603,
	8936,
	8946,
	9046,
	9050,
	9063,
	9066,
	9076,
	9092,
	9100,
	9108,
	9111,
	9113,
	9131,
	9162,
	9164,
	9218,
	9219,
	11329,
	11331,
	11334,
	11336,
	11346,
	11361,
	11363,
	11366,
	11370,
	11372,
	11375,
	11389,
	11682,
	11686,
	11687,
	11692,
	11694,
	11714,
	11716,
	11723,
	11725,
	11730,
	11736,
	11982,
	11989,
	12102,
	12336,
	12348,
	12350,
	12384,
	12393,
	12395,
	12397,
	12510,
	12553,
	12851,
	12962,
	12973,
	13738,
	13823,
	13919,
	13933,
	14080,
	14298,
	14585,
	14698,
	15583,
	15847,
	16318,
	16434,
	16438,
	16481,
	16729,
	17102,
	17122,
	17315,
	17320,
	17402,
	17418,
	17859,
	17909,
	17911,
	17915,
	17916,
	17936,
	17939,
	17961,
	18664,
	18703,
	18814,
	18962,
	19043,
	33469,
	33470,
	33471,
	33484,
	33485,
	33490,
	33497,
	33501,
	33505,
	33513,
	33520,
	33536,
	33550,
	37845,
	37921,
	37948,
	38029,
	38038,
	38064,
	38065,
	38066,
	38069,
	38075,
	38076,
	38078,
	39108,
	39109,
	39113,
	39114,
	39115,
	39116,
	39265,
	39394,
	189000
];
var require$$4 = {
	uChars: uChars,
	gbChars: gbChars
};

var require$$5 = [
	[
		"0",
		"\u0000",
		127
	],
	[
		"8141",
		"갂갃갅갆갋",
		4,
		"갘갞갟갡갢갣갥",
		6,
		"갮갲갳갴"
	],
	[
		"8161",
		"갵갶갷갺갻갽갾갿걁",
		9,
		"걌걎",
		5,
		"걕"
	],
	[
		"8181",
		"걖걗걙걚걛걝",
		18,
		"걲걳걵걶걹걻",
		4,
		"겂겇겈겍겎겏겑겒겓겕",
		6,
		"겞겢",
		5,
		"겫겭겮겱",
		6,
		"겺겾겿곀곂곃곅곆곇곉곊곋곍",
		7,
		"곖곘",
		7,
		"곢곣곥곦곩곫곭곮곲곴곷",
		4,
		"곾곿괁괂괃괅괇",
		4,
		"괎괐괒괓"
	],
	[
		"8241",
		"괔괕괖괗괙괚괛괝괞괟괡",
		7,
		"괪괫괮",
		5
	],
	[
		"8261",
		"괶괷괹괺괻괽",
		6,
		"굆굈굊",
		5,
		"굑굒굓굕굖굗"
	],
	[
		"8281",
		"굙",
		7,
		"굢굤",
		7,
		"굮굯굱굲굷굸굹굺굾궀궃",
		4,
		"궊궋궍궎궏궑",
		10,
		"궞",
		5,
		"궥",
		17,
		"궸",
		7,
		"귂귃귅귆귇귉",
		6,
		"귒귔",
		7,
		"귝귞귟귡귢귣귥",
		18
	],
	[
		"8341",
		"귺귻귽귾긂",
		5,
		"긊긌긎",
		5,
		"긕",
		7
	],
	[
		"8361",
		"긝",
		18,
		"긲긳긵긶긹긻긼"
	],
	[
		"8381",
		"긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗",
		4,
		"깞깢깣깤깦깧깪깫깭깮깯깱",
		6,
		"깺깾",
		5,
		"꺆",
		5,
		"꺍",
		46,
		"꺿껁껂껃껅",
		6,
		"껎껒",
		5,
		"껚껛껝",
		8
	],
	[
		"8441",
		"껦껧껩껪껬껮",
		5,
		"껵껶껷껹껺껻껽",
		8
	],
	[
		"8461",
		"꼆꼉꼊꼋꼌꼎꼏꼑",
		18
	],
	[
		"8481",
		"꼤",
		7,
		"꼮꼯꼱꼳꼵",
		6,
		"꼾꽀꽄꽅꽆꽇꽊",
		5,
		"꽑",
		10,
		"꽞",
		5,
		"꽦",
		18,
		"꽺",
		5,
		"꾁꾂꾃꾅꾆꾇꾉",
		6,
		"꾒꾓꾔꾖",
		5,
		"꾝",
		26,
		"꾺꾻꾽꾾"
	],
	[
		"8541",
		"꾿꿁",
		5,
		"꿊꿌꿏",
		4,
		"꿕",
		6,
		"꿝",
		4
	],
	[
		"8561",
		"꿢",
		5,
		"꿪",
		5,
		"꿲꿳꿵꿶꿷꿹",
		6,
		"뀂뀃"
	],
	[
		"8581",
		"뀅",
		6,
		"뀍뀎뀏뀑뀒뀓뀕",
		6,
		"뀞",
		9,
		"뀩",
		26,
		"끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞",
		29,
		"끾끿낁낂낃낅",
		6,
		"낎낐낒",
		5,
		"낛낝낞낣낤"
	],
	[
		"8641",
		"낥낦낧낪낰낲낶낷낹낺낻낽",
		6,
		"냆냊",
		5,
		"냒"
	],
	[
		"8661",
		"냓냕냖냗냙",
		6,
		"냡냢냣냤냦",
		10
	],
	[
		"8681",
		"냱",
		22,
		"넊넍넎넏넑넔넕넖넗넚넞",
		4,
		"넦넧넩넪넫넭",
		6,
		"넶넺",
		5,
		"녂녃녅녆녇녉",
		6,
		"녒녓녖녗녙녚녛녝녞녟녡",
		22,
		"녺녻녽녾녿놁놃",
		4,
		"놊놌놎놏놐놑놕놖놗놙놚놛놝"
	],
	[
		"8741",
		"놞",
		9,
		"놩",
		15
	],
	[
		"8761",
		"놹",
		18,
		"뇍뇎뇏뇑뇒뇓뇕"
	],
	[
		"8781",
		"뇖",
		5,
		"뇞뇠",
		7,
		"뇪뇫뇭뇮뇯뇱",
		7,
		"뇺뇼뇾",
		5,
		"눆눇눉눊눍",
		6,
		"눖눘눚",
		5,
		"눡",
		18,
		"눵",
		6,
		"눽",
		26,
		"뉙뉚뉛뉝뉞뉟뉡",
		6,
		"뉪",
		4
	],
	[
		"8841",
		"뉯",
		4,
		"뉶",
		5,
		"뉽",
		6,
		"늆늇늈늊",
		4
	],
	[
		"8861",
		"늏늒늓늕늖늗늛",
		4,
		"늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷"
	],
	[
		"8881",
		"늸",
		15,
		"닊닋닍닎닏닑닓",
		4,
		"닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉",
		6,
		"댒댖",
		5,
		"댝",
		54,
		"덗덙덚덝덠덡덢덣"
	],
	[
		"8941",
		"덦덨덪덬덭덯덲덳덵덶덷덹",
		6,
		"뎂뎆",
		5,
		"뎍"
	],
	[
		"8961",
		"뎎뎏뎑뎒뎓뎕",
		10,
		"뎢",
		5,
		"뎩뎪뎫뎭"
	],
	[
		"8981",
		"뎮",
		21,
		"돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩",
		18,
		"돽",
		18,
		"됑",
		6,
		"됙됚됛됝됞됟됡",
		6,
		"됪됬",
		7,
		"됵",
		15
	],
	[
		"8a41",
		"둅",
		10,
		"둒둓둕둖둗둙",
		6,
		"둢둤둦"
	],
	[
		"8a61",
		"둧",
		4,
		"둭",
		18,
		"뒁뒂"
	],
	[
		"8a81",
		"뒃",
		4,
		"뒉",
		19,
		"뒞",
		5,
		"뒥뒦뒧뒩뒪뒫뒭",
		7,
		"뒶뒸뒺",
		5,
		"듁듂듃듅듆듇듉",
		6,
		"듑듒듓듔듖",
		5,
		"듞듟듡듢듥듧",
		4,
		"듮듰듲",
		5,
		"듹",
		26,
		"딖딗딙딚딝"
	],
	[
		"8b41",
		"딞",
		5,
		"딦딫",
		4,
		"딲딳딵딶딷딹",
		6,
		"땂땆"
	],
	[
		"8b61",
		"땇땈땉땊땎땏땑땒땓땕",
		6,
		"땞땢",
		8
	],
	[
		"8b81",
		"땫",
		52,
		"떢떣떥떦떧떩떬떭떮떯떲떶",
		4,
		"떾떿뗁뗂뗃뗅",
		6,
		"뗎뗒",
		5,
		"뗙",
		18,
		"뗭",
		18
	],
	[
		"8c41",
		"똀",
		15,
		"똒똓똕똖똗똙",
		4
	],
	[
		"8c61",
		"똞",
		6,
		"똦",
		5,
		"똭",
		6,
		"똵",
		5
	],
	[
		"8c81",
		"똻",
		12,
		"뙉",
		26,
		"뙥뙦뙧뙩",
		50,
		"뚞뚟뚡뚢뚣뚥",
		5,
		"뚭뚮뚯뚰뚲",
		16
	],
	[
		"8d41",
		"뛃",
		16,
		"뛕",
		8
	],
	[
		"8d61",
		"뛞",
		17,
		"뛱뛲뛳뛵뛶뛷뛹뛺"
	],
	[
		"8d81",
		"뛻",
		4,
		"뜂뜃뜄뜆",
		33,
		"뜪뜫뜭뜮뜱",
		6,
		"뜺뜼",
		7,
		"띅띆띇띉띊띋띍",
		6,
		"띖",
		9,
		"띡띢띣띥띦띧띩",
		6,
		"띲띴띶",
		5,
		"띾띿랁랂랃랅",
		6,
		"랎랓랔랕랚랛랝랞"
	],
	[
		"8e41",
		"랟랡",
		6,
		"랪랮",
		5,
		"랶랷랹",
		8
	],
	[
		"8e61",
		"럂",
		4,
		"럈럊",
		19
	],
	[
		"8e81",
		"럞",
		13,
		"럮럯럱럲럳럵",
		6,
		"럾렂",
		4,
		"렊렋렍렎렏렑",
		6,
		"렚렜렞",
		5,
		"렦렧렩렪렫렭",
		6,
		"렶렺",
		5,
		"롁롂롃롅",
		11,
		"롒롔",
		7,
		"롞롟롡롢롣롥",
		6,
		"롮롰롲",
		5,
		"롹롺롻롽",
		7
	],
	[
		"8f41",
		"뢅",
		7,
		"뢎",
		17
	],
	[
		"8f61",
		"뢠",
		7,
		"뢩",
		6,
		"뢱뢲뢳뢵뢶뢷뢹",
		4
	],
	[
		"8f81",
		"뢾뢿룂룄룆",
		5,
		"룍룎룏룑룒룓룕",
		7,
		"룞룠룢",
		5,
		"룪룫룭룮룯룱",
		6,
		"룺룼룾",
		5,
		"뤅",
		18,
		"뤙",
		6,
		"뤡",
		26,
		"뤾뤿륁륂륃륅",
		6,
		"륍륎륐륒",
		5
	],
	[
		"9041",
		"륚륛륝륞륟륡",
		6,
		"륪륬륮",
		5,
		"륶륷륹륺륻륽"
	],
	[
		"9061",
		"륾",
		5,
		"릆릈릋릌릏",
		15
	],
	[
		"9081",
		"릟",
		12,
		"릮릯릱릲릳릵",
		6,
		"릾맀맂",
		5,
		"맊맋맍맓",
		4,
		"맚맜맟맠맢맦맧맩맪맫맭",
		6,
		"맶맻",
		4,
		"먂",
		5,
		"먉",
		11,
		"먖",
		33,
		"먺먻먽먾먿멁멃멄멅멆"
	],
	[
		"9141",
		"멇멊멌멏멐멑멒멖멗멙멚멛멝",
		6,
		"멦멪",
		5
	],
	[
		"9161",
		"멲멳멵멶멷멹",
		9,
		"몆몈몉몊몋몍",
		5
	],
	[
		"9181",
		"몓",
		20,
		"몪몭몮몯몱몳",
		4,
		"몺몼몾",
		5,
		"뫅뫆뫇뫉",
		14,
		"뫚",
		33,
		"뫽뫾뫿묁묂묃묅",
		7,
		"묎묐묒",
		5,
		"묙묚묛묝묞묟묡",
		6
	],
	[
		"9241",
		"묨묪묬",
		7,
		"묷묹묺묿",
		4,
		"뭆뭈뭊뭋뭌뭎뭑뭒"
	],
	[
		"9261",
		"뭓뭕뭖뭗뭙",
		7,
		"뭢뭤",
		7,
		"뭭",
		4
	],
	[
		"9281",
		"뭲",
		21,
		"뮉뮊뮋뮍뮎뮏뮑",
		18,
		"뮥뮦뮧뮩뮪뮫뮭",
		6,
		"뮵뮶뮸",
		7,
		"믁믂믃믅믆믇믉",
		6,
		"믑믒믔",
		35,
		"믺믻믽믾밁"
	],
	[
		"9341",
		"밃",
		4,
		"밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵"
	],
	[
		"9361",
		"밶밷밹",
		6,
		"뱂뱆뱇뱈뱊뱋뱎뱏뱑",
		8
	],
	[
		"9381",
		"뱚뱛뱜뱞",
		37,
		"벆벇벉벊벍벏",
		4,
		"벖벘벛",
		4,
		"벢벣벥벦벩",
		6,
		"벲벶",
		5,
		"벾벿볁볂볃볅",
		7,
		"볎볒볓볔볖볗볙볚볛볝",
		22,
		"볷볹볺볻볽"
	],
	[
		"9441",
		"볾",
		5,
		"봆봈봊",
		5,
		"봑봒봓봕",
		8
	],
	[
		"9461",
		"봞",
		5,
		"봥",
		6,
		"봭",
		12
	],
	[
		"9481",
		"봺",
		5,
		"뵁",
		6,
		"뵊뵋뵍뵎뵏뵑",
		6,
		"뵚",
		9,
		"뵥뵦뵧뵩",
		22,
		"붂붃붅붆붋",
		4,
		"붒붔붖붗붘붛붝",
		6,
		"붥",
		10,
		"붱",
		6,
		"붹",
		24
	],
	[
		"9541",
		"뷒뷓뷖뷗뷙뷚뷛뷝",
		11,
		"뷪",
		5,
		"뷱"
	],
	[
		"9561",
		"뷲뷳뷵뷶뷷뷹",
		6,
		"븁븂븄븆",
		5,
		"븎븏븑븒븓"
	],
	[
		"9581",
		"븕",
		6,
		"븞븠",
		35,
		"빆빇빉빊빋빍빏",
		4,
		"빖빘빜빝빞빟빢빣빥빦빧빩빫",
		4,
		"빲빶",
		4,
		"빾빿뺁뺂뺃뺅",
		6,
		"뺎뺒",
		5,
		"뺚",
		13,
		"뺩",
		14
	],
	[
		"9641",
		"뺸",
		23,
		"뻒뻓"
	],
	[
		"9661",
		"뻕뻖뻙",
		6,
		"뻡뻢뻦",
		5,
		"뻭",
		8
	],
	[
		"9681",
		"뻶",
		10,
		"뼂",
		5,
		"뼊",
		13,
		"뼚뼞",
		33,
		"뽂뽃뽅뽆뽇뽉",
		6,
		"뽒뽓뽔뽖",
		44
	],
	[
		"9741",
		"뾃",
		16,
		"뾕",
		8
	],
	[
		"9761",
		"뾞",
		17,
		"뾱",
		7
	],
	[
		"9781",
		"뾹",
		11,
		"뿆",
		5,
		"뿎뿏뿑뿒뿓뿕",
		6,
		"뿝뿞뿠뿢",
		89,
		"쀽쀾쀿"
	],
	[
		"9841",
		"쁀",
		16,
		"쁒",
		5,
		"쁙쁚쁛"
	],
	[
		"9861",
		"쁝쁞쁟쁡",
		6,
		"쁪",
		15
	],
	[
		"9881",
		"쁺",
		21,
		"삒삓삕삖삗삙",
		6,
		"삢삤삦",
		5,
		"삮삱삲삷",
		4,
		"삾샂샃샄샆샇샊샋샍샎샏샑",
		6,
		"샚샞",
		5,
		"샦샧샩샪샫샭",
		6,
		"샶샸샺",
		5,
		"섁섂섃섅섆섇섉",
		6,
		"섑섒섓섔섖",
		5,
		"섡섢섥섨섩섪섫섮"
	],
	[
		"9941",
		"섲섳섴섵섷섺섻섽섾섿셁",
		6,
		"셊셎",
		5,
		"셖셗"
	],
	[
		"9961",
		"셙셚셛셝",
		6,
		"셦셪",
		5,
		"셱셲셳셵셶셷셹셺셻"
	],
	[
		"9981",
		"셼",
		8,
		"솆",
		5,
		"솏솑솒솓솕솗",
		4,
		"솞솠솢솣솤솦솧솪솫솭솮솯솱",
		11,
		"솾",
		5,
		"쇅쇆쇇쇉쇊쇋쇍",
		6,
		"쇕쇖쇙",
		6,
		"쇡쇢쇣쇥쇦쇧쇩",
		6,
		"쇲쇴",
		7,
		"쇾쇿숁숂숃숅",
		6,
		"숎숐숒",
		5,
		"숚숛숝숞숡숢숣"
	],
	[
		"9a41",
		"숤숥숦숧숪숬숮숰숳숵",
		16
	],
	[
		"9a61",
		"쉆쉇쉉",
		6,
		"쉒쉓쉕쉖쉗쉙",
		6,
		"쉡쉢쉣쉤쉦"
	],
	[
		"9a81",
		"쉧",
		4,
		"쉮쉯쉱쉲쉳쉵",
		6,
		"쉾슀슂",
		5,
		"슊",
		5,
		"슑",
		6,
		"슙슚슜슞",
		5,
		"슦슧슩슪슫슮",
		5,
		"슶슸슺",
		33,
		"싞싟싡싢싥",
		5,
		"싮싰싲싳싴싵싷싺싽싾싿쌁",
		6,
		"쌊쌋쌎쌏"
	],
	[
		"9b41",
		"쌐쌑쌒쌖쌗쌙쌚쌛쌝",
		6,
		"쌦쌧쌪",
		8
	],
	[
		"9b61",
		"쌳",
		17,
		"썆",
		7
	],
	[
		"9b81",
		"썎",
		25,
		"썪썫썭썮썯썱썳",
		4,
		"썺썻썾",
		5,
		"쎅쎆쎇쎉쎊쎋쎍",
		50,
		"쏁",
		22,
		"쏚"
	],
	[
		"9c41",
		"쏛쏝쏞쏡쏣",
		4,
		"쏪쏫쏬쏮",
		5,
		"쏶쏷쏹",
		5
	],
	[
		"9c61",
		"쏿",
		8,
		"쐉",
		6,
		"쐑",
		9
	],
	[
		"9c81",
		"쐛",
		8,
		"쐥",
		6,
		"쐭쐮쐯쐱쐲쐳쐵",
		6,
		"쐾",
		9,
		"쑉",
		26,
		"쑦쑧쑩쑪쑫쑭",
		6,
		"쑶쑷쑸쑺",
		5,
		"쒁",
		18,
		"쒕",
		6,
		"쒝",
		12
	],
	[
		"9d41",
		"쒪",
		13,
		"쒹쒺쒻쒽",
		8
	],
	[
		"9d61",
		"쓆",
		25
	],
	[
		"9d81",
		"쓠",
		8,
		"쓪",
		5,
		"쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂",
		9,
		"씍씎씏씑씒씓씕",
		6,
		"씝",
		10,
		"씪씫씭씮씯씱",
		6,
		"씺씼씾",
		5,
		"앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩",
		6,
		"앲앶",
		5,
		"앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔"
	],
	[
		"9e41",
		"얖얙얚얛얝얞얟얡",
		7,
		"얪",
		9,
		"얶"
	],
	[
		"9e61",
		"얷얺얿",
		4,
		"엋엍엏엒엓엕엖엗엙",
		6,
		"엢엤엦엧"
	],
	[
		"9e81",
		"엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑",
		6,
		"옚옝",
		6,
		"옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉",
		6,
		"왒왖",
		5,
		"왞왟왡",
		10,
		"왭왮왰왲",
		5,
		"왺왻왽왾왿욁",
		6,
		"욊욌욎",
		5,
		"욖욗욙욚욛욝",
		6,
		"욦"
	],
	[
		"9f41",
		"욨욪",
		5,
		"욲욳욵욶욷욻",
		4,
		"웂웄웆",
		5,
		"웎"
	],
	[
		"9f61",
		"웏웑웒웓웕",
		6,
		"웞웟웢",
		5,
		"웪웫웭웮웯웱웲"
	],
	[
		"9f81",
		"웳",
		4,
		"웺웻웼웾",
		5,
		"윆윇윉윊윋윍",
		6,
		"윖윘윚",
		5,
		"윢윣윥윦윧윩",
		6,
		"윲윴윶윸윹윺윻윾윿읁읂읃읅",
		4,
		"읋읎읐읙읚읛읝읞읟읡",
		6,
		"읩읪읬",
		7,
		"읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛",
		4,
		"잢잧",
		4,
		"잮잯잱잲잳잵잶잷"
	],
	[
		"a041",
		"잸잹잺잻잾쟂",
		5,
		"쟊쟋쟍쟏쟑",
		6,
		"쟙쟚쟛쟜"
	],
	[
		"a061",
		"쟞",
		5,
		"쟥쟦쟧쟩쟪쟫쟭",
		13
	],
	[
		"a081",
		"쟻",
		4,
		"젂젃젅젆젇젉젋",
		4,
		"젒젔젗",
		4,
		"젞젟젡젢젣젥",
		6,
		"젮젰젲",
		5,
		"젹젺젻젽젾젿졁",
		6,
		"졊졋졎",
		5,
		"졕",
		26,
		"졲졳졵졶졷졹졻",
		4,
		"좂좄좈좉좊좎",
		5,
		"좕",
		7,
		"좞좠좢좣좤"
	],
	[
		"a141",
		"좥좦좧좩",
		18,
		"좾좿죀죁"
	],
	[
		"a161",
		"죂죃죅죆죇죉죊죋죍",
		6,
		"죖죘죚",
		5,
		"죢죣죥"
	],
	[
		"a181",
		"죦",
		14,
		"죶",
		5,
		"죾죿줁줂줃줇",
		4,
		"줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈",
		9,
		"±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢"
	],
	[
		"a241",
		"줐줒",
		5,
		"줙",
		18
	],
	[
		"a261",
		"줭",
		6,
		"줵",
		18
	],
	[
		"a281",
		"쥈",
		7,
		"쥒쥓쥕쥖쥗쥙",
		6,
		"쥢쥤",
		7,
		"쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®"
	],
	[
		"a341",
		"쥱쥲쥳쥵",
		6,
		"쥽",
		10,
		"즊즋즍즎즏"
	],
	[
		"a361",
		"즑",
		6,
		"즚즜즞",
		16
	],
	[
		"a381",
		"즯",
		16,
		"짂짃짅짆짉짋",
		4,
		"짒짔짗짘짛！",
		58,
		"￦］",
		32,
		"￣"
	],
	[
		"a441",
		"짞짟짡짣짥짦짨짩짪짫짮짲",
		5,
		"짺짻짽짾짿쨁쨂쨃쨄"
	],
	[
		"a461",
		"쨅쨆쨇쨊쨎",
		5,
		"쨕쨖쨗쨙",
		12
	],
	[
		"a481",
		"쨦쨧쨨쨪",
		28,
		"ㄱ",
		93
	],
	[
		"a541",
		"쩇",
		4,
		"쩎쩏쩑쩒쩓쩕",
		6,
		"쩞쩢",
		5,
		"쩩쩪"
	],
	[
		"a561",
		"쩫",
		17,
		"쩾",
		5,
		"쪅쪆"
	],
	[
		"a581",
		"쪇",
		16,
		"쪙",
		14,
		"ⅰ",
		9
	],
	[
		"a5b0",
		"Ⅰ",
		9
	],
	[
		"a5c1",
		"Α",
		16,
		"Σ",
		6
	],
	[
		"a5e1",
		"α",
		16,
		"σ",
		6
	],
	[
		"a641",
		"쪨",
		19,
		"쪾쪿쫁쫂쫃쫅"
	],
	[
		"a661",
		"쫆",
		5,
		"쫎쫐쫒쫔쫕쫖쫗쫚",
		5,
		"쫡",
		6
	],
	[
		"a681",
		"쫨쫩쫪쫫쫭",
		6,
		"쫵",
		18,
		"쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃",
		7
	],
	[
		"a741",
		"쬋",
		4,
		"쬑쬒쬓쬕쬖쬗쬙",
		6,
		"쬢",
		7
	],
	[
		"a761",
		"쬪",
		22,
		"쭂쭃쭄"
	],
	[
		"a781",
		"쭅쭆쭇쭊쭋쭍쭎쭏쭑",
		6,
		"쭚쭛쭜쭞",
		5,
		"쭥",
		7,
		"㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙",
		9,
		"㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰",
		9,
		"㎀",
		4,
		"㎺",
		5,
		"㎐",
		4,
		"Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆"
	],
	[
		"a841",
		"쭭",
		10,
		"쭺",
		14
	],
	[
		"a861",
		"쮉",
		18,
		"쮝",
		6
	],
	[
		"a881",
		"쮤",
		19,
		"쮹",
		11,
		"ÆÐªĦ"
	],
	[
		"a8a6",
		"Ĳ"
	],
	[
		"a8a8",
		"ĿŁØŒºÞŦŊ"
	],
	[
		"a8b1",
		"㉠",
		27,
		"ⓐ",
		25,
		"①",
		14,
		"½⅓⅔¼¾⅛⅜⅝⅞"
	],
	[
		"a941",
		"쯅",
		14,
		"쯕",
		10
	],
	[
		"a961",
		"쯠쯡쯢쯣쯥쯦쯨쯪",
		18
	],
	[
		"a981",
		"쯽",
		14,
		"찎찏찑찒찓찕",
		6,
		"찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀",
		27,
		"⒜",
		25,
		"⑴",
		14,
		"¹²³⁴ⁿ₁₂₃₄"
	],
	[
		"aa41",
		"찥찦찪찫찭찯찱",
		6,
		"찺찿",
		4,
		"챆챇챉챊챋챍챎"
	],
	[
		"aa61",
		"챏",
		4,
		"챖챚",
		5,
		"챡챢챣챥챧챩",
		6,
		"챱챲"
	],
	[
		"aa81",
		"챳챴챶",
		29,
		"ぁ",
		82
	],
	[
		"ab41",
		"첔첕첖첗첚첛첝첞첟첡",
		6,
		"첪첮",
		5,
		"첶첷첹"
	],
	[
		"ab61",
		"첺첻첽",
		6,
		"쳆쳈쳊",
		5,
		"쳑쳒쳓쳕",
		5
	],
	[
		"ab81",
		"쳛",
		8,
		"쳥",
		6,
		"쳭쳮쳯쳱",
		12,
		"ァ",
		85
	],
	[
		"ac41",
		"쳾쳿촀촂",
		5,
		"촊촋촍촎촏촑",
		6,
		"촚촜촞촟촠"
	],
	[
		"ac61",
		"촡촢촣촥촦촧촩촪촫촭",
		11,
		"촺",
		4
	],
	[
		"ac81",
		"촿",
		28,
		"쵝쵞쵟А",
		5,
		"ЁЖ",
		25
	],
	[
		"acd1",
		"а",
		5,
		"ёж",
		25
	],
	[
		"ad41",
		"쵡쵢쵣쵥",
		6,
		"쵮쵰쵲",
		5,
		"쵹",
		7
	],
	[
		"ad61",
		"춁",
		6,
		"춉",
		10,
		"춖춗춙춚춛춝춞춟"
	],
	[
		"ad81",
		"춠춡춢춣춦춨춪",
		5,
		"춱",
		18,
		"췅"
	],
	[
		"ae41",
		"췆",
		5,
		"췍췎췏췑",
		16
	],
	[
		"ae61",
		"췢",
		5,
		"췩췪췫췭췮췯췱",
		6,
		"췺췼췾",
		4
	],
	[
		"ae81",
		"츃츅츆츇츉츊츋츍",
		6,
		"츕츖츗츘츚",
		5,
		"츢츣츥츦츧츩츪츫"
	],
	[
		"af41",
		"츬츭츮츯츲츴츶",
		19
	],
	[
		"af61",
		"칊",
		13,
		"칚칛칝칞칢",
		5,
		"칪칬"
	],
	[
		"af81",
		"칮",
		5,
		"칶칷칹칺칻칽",
		6,
		"캆캈캊",
		5,
		"캒캓캕캖캗캙"
	],
	[
		"b041",
		"캚",
		5,
		"캢캦",
		5,
		"캮",
		12
	],
	[
		"b061",
		"캻",
		5,
		"컂",
		19
	],
	[
		"b081",
		"컖",
		13,
		"컦컧컩컪컭",
		6,
		"컶컺",
		5,
		"가각간갇갈갉갊감",
		7,
		"같",
		4,
		"갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆"
	],
	[
		"b141",
		"켂켃켅켆켇켉",
		6,
		"켒켔켖",
		5,
		"켝켞켟켡켢켣"
	],
	[
		"b161",
		"켥",
		6,
		"켮켲",
		5,
		"켹",
		11
	],
	[
		"b181",
		"콅",
		14,
		"콖콗콙콚콛콝",
		6,
		"콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸"
	],
	[
		"b241",
		"콭콮콯콲콳콵콶콷콹",
		6,
		"쾁쾂쾃쾄쾆",
		5,
		"쾍"
	],
	[
		"b261",
		"쾎",
		18,
		"쾢",
		5,
		"쾩"
	],
	[
		"b281",
		"쾪",
		5,
		"쾱",
		18,
		"쿅",
		6,
		"깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙"
	],
	[
		"b341",
		"쿌",
		19,
		"쿢쿣쿥쿦쿧쿩"
	],
	[
		"b361",
		"쿪",
		5,
		"쿲쿴쿶",
		5,
		"쿽쿾쿿퀁퀂퀃퀅",
		5
	],
	[
		"b381",
		"퀋",
		5,
		"퀒",
		5,
		"퀙",
		19,
		"끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫",
		4,
		"낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝"
	],
	[
		"b441",
		"퀮",
		5,
		"퀶퀷퀹퀺퀻퀽",
		6,
		"큆큈큊",
		5
	],
	[
		"b461",
		"큑큒큓큕큖큗큙",
		6,
		"큡",
		10,
		"큮큯"
	],
	[
		"b481",
		"큱큲큳큵",
		6,
		"큾큿킀킂",
		18,
		"뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫",
		4,
		"닳담답닷",
		4,
		"닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥"
	],
	[
		"b541",
		"킕",
		14,
		"킦킧킩킪킫킭",
		5
	],
	[
		"b561",
		"킳킶킸킺",
		5,
		"탂탃탅탆탇탊",
		5,
		"탒탖",
		4
	],
	[
		"b581",
		"탛탞탟탡탢탣탥",
		6,
		"탮탲",
		5,
		"탹",
		11,
		"덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸"
	],
	[
		"b641",
		"턅",
		7,
		"턎",
		17
	],
	[
		"b661",
		"턠",
		15,
		"턲턳턵턶턷턹턻턼턽턾"
	],
	[
		"b681",
		"턿텂텆",
		5,
		"텎텏텑텒텓텕",
		6,
		"텞텠텢",
		5,
		"텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗"
	],
	[
		"b741",
		"텮",
		13,
		"텽",
		6,
		"톅톆톇톉톊"
	],
	[
		"b761",
		"톋",
		20,
		"톢톣톥톦톧"
	],
	[
		"b781",
		"톩",
		6,
		"톲톴톶톷톸톹톻톽톾톿퇁",
		14,
		"래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩"
	],
	[
		"b841",
		"퇐",
		7,
		"퇙",
		17
	],
	[
		"b861",
		"퇫",
		8,
		"퇵퇶퇷퇹",
		13
	],
	[
		"b881",
		"툈툊",
		5,
		"툑",
		24,
		"륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많",
		4,
		"맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼"
	],
	[
		"b941",
		"툪툫툮툯툱툲툳툵",
		6,
		"툾퉀퉂",
		5,
		"퉉퉊퉋퉌"
	],
	[
		"b961",
		"퉍",
		14,
		"퉝",
		6,
		"퉥퉦퉧퉨"
	],
	[
		"b981",
		"퉩",
		22,
		"튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바",
		4,
		"받",
		4,
		"밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗"
	],
	[
		"ba41",
		"튍튎튏튒튓튔튖",
		5,
		"튝튞튟튡튢튣튥",
		6,
		"튭"
	],
	[
		"ba61",
		"튮튯튰튲",
		5,
		"튺튻튽튾틁틃",
		4,
		"틊틌",
		5
	],
	[
		"ba81",
		"틒틓틕틖틗틙틚틛틝",
		6,
		"틦",
		9,
		"틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤"
	],
	[
		"bb41",
		"틻",
		4,
		"팂팄팆",
		5,
		"팏팑팒팓팕팗",
		4,
		"팞팢팣"
	],
	[
		"bb61",
		"팤팦팧팪팫팭팮팯팱",
		6,
		"팺팾",
		5,
		"퍆퍇퍈퍉"
	],
	[
		"bb81",
		"퍊",
		31,
		"빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤"
	],
	[
		"bc41",
		"퍪",
		17,
		"퍾퍿펁펂펃펅펆펇"
	],
	[
		"bc61",
		"펈펉펊펋펎펒",
		5,
		"펚펛펝펞펟펡",
		6,
		"펪펬펮"
	],
	[
		"bc81",
		"펯",
		4,
		"펵펶펷펹펺펻펽",
		6,
		"폆폇폊",
		5,
		"폑",
		5,
		"샥샨샬샴샵샷샹섀섄섈섐섕서",
		4,
		"섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭"
	],
	[
		"bd41",
		"폗폙",
		7,
		"폢폤",
		7,
		"폮폯폱폲폳폵폶폷"
	],
	[
		"bd61",
		"폸폹폺폻폾퐀퐂",
		5,
		"퐉",
		13
	],
	[
		"bd81",
		"퐗",
		5,
		"퐞",
		25,
		"숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰"
	],
	[
		"be41",
		"퐸",
		7,
		"푁푂푃푅",
		14
	],
	[
		"be61",
		"푔",
		7,
		"푝푞푟푡푢푣푥",
		7,
		"푮푰푱푲"
	],
	[
		"be81",
		"푳",
		4,
		"푺푻푽푾풁풃",
		4,
		"풊풌풎",
		5,
		"풕",
		8,
		"쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄",
		6,
		"엌엎"
	],
	[
		"bf41",
		"풞",
		10,
		"풪",
		14
	],
	[
		"bf61",
		"풹",
		18,
		"퓍퓎퓏퓑퓒퓓퓕"
	],
	[
		"bf81",
		"퓖",
		5,
		"퓝퓞퓠",
		7,
		"퓩퓪퓫퓭퓮퓯퓱",
		6,
		"퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염",
		5,
		"옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨"
	],
	[
		"c041",
		"퓾",
		5,
		"픅픆픇픉픊픋픍",
		6,
		"픖픘",
		5
	],
	[
		"c061",
		"픞",
		25
	],
	[
		"c081",
		"픸픹픺픻픾픿핁핂핃핅",
		6,
		"핎핐핒",
		5,
		"핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응",
		7,
		"읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊"
	],
	[
		"c141",
		"핤핦핧핪핬핮",
		5,
		"핶핷핹핺핻핽",
		6,
		"햆햊햋"
	],
	[
		"c161",
		"햌햍햎햏햑",
		19,
		"햦햧"
	],
	[
		"c181",
		"햨",
		31,
		"점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓"
	],
	[
		"c241",
		"헊헋헍헎헏헑헓",
		4,
		"헚헜헞",
		5,
		"헦헧헩헪헫헭헮"
	],
	[
		"c261",
		"헯",
		4,
		"헶헸헺",
		5,
		"혂혃혅혆혇혉",
		6,
		"혒"
	],
	[
		"c281",
		"혖",
		5,
		"혝혞혟혡혢혣혥",
		7,
		"혮",
		9,
		"혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻"
	],
	[
		"c341",
		"혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝",
		4
	],
	[
		"c361",
		"홢",
		4,
		"홨홪",
		5,
		"홲홳홵",
		11
	],
	[
		"c381",
		"횁횂횄횆",
		5,
		"횎횏횑횒횓횕",
		7,
		"횞횠횢",
		5,
		"횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층"
	],
	[
		"c441",
		"횫횭횮횯횱",
		7,
		"횺횼",
		7,
		"훆훇훉훊훋"
	],
	[
		"c461",
		"훍훎훏훐훒훓훕훖훘훚",
		5,
		"훡훢훣훥훦훧훩",
		4
	],
	[
		"c481",
		"훮훯훱훲훳훴훶",
		5,
		"훾훿휁휂휃휅",
		11,
		"휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼"
	],
	[
		"c541",
		"휕휖휗휚휛휝휞휟휡",
		6,
		"휪휬휮",
		5,
		"휶휷휹"
	],
	[
		"c561",
		"휺휻휽",
		6,
		"흅흆흈흊",
		5,
		"흒흓흕흚",
		4
	],
	[
		"c581",
		"흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵",
		6,
		"흾흿힀힂",
		5,
		"힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜"
	],
	[
		"c641",
		"힍힎힏힑",
		6,
		"힚힜힞",
		5
	],
	[
		"c6a1",
		"퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁"
	],
	[
		"c7a1",
		"퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠"
	],
	[
		"c8a1",
		"혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝"
	],
	[
		"caa1",
		"伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕"
	],
	[
		"cba1",
		"匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢"
	],
	[
		"cca1",
		"瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械"
	],
	[
		"cda1",
		"棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜"
	],
	[
		"cea1",
		"科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾"
	],
	[
		"cfa1",
		"區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴"
	],
	[
		"d0a1",
		"鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣"
	],
	[
		"d1a1",
		"朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩",
		5,
		"那樂",
		4,
		"諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉"
	],
	[
		"d2a1",
		"納臘蠟衲囊娘廊",
		4,
		"乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧",
		5,
		"駑魯",
		10,
		"濃籠聾膿農惱牢磊腦賂雷尿壘",
		7,
		"嫩訥杻紐勒",
		5,
		"能菱陵尼泥匿溺多茶"
	],
	[
		"d3a1",
		"丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃"
	],
	[
		"d4a1",
		"棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅"
	],
	[
		"d5a1",
		"蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣"
	],
	[
		"d6a1",
		"煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼"
	],
	[
		"d7a1",
		"遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬"
	],
	[
		"d8a1",
		"立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅"
	],
	[
		"d9a1",
		"蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文"
	],
	[
		"daa1",
		"汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑"
	],
	[
		"dba1",
		"發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖"
	],
	[
		"dca1",
		"碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦"
	],
	[
		"dda1",
		"孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥"
	],
	[
		"dea1",
		"脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索"
	],
	[
		"dfa1",
		"傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署"
	],
	[
		"e0a1",
		"胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬"
	],
	[
		"e1a1",
		"聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁"
	],
	[
		"e2a1",
		"戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧"
	],
	[
		"e3a1",
		"嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁"
	],
	[
		"e4a1",
		"沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額"
	],
	[
		"e5a1",
		"櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬"
	],
	[
		"e6a1",
		"旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒"
	],
	[
		"e7a1",
		"簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳"
	],
	[
		"e8a1",
		"烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療"
	],
	[
		"e9a1",
		"窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓"
	],
	[
		"eaa1",
		"運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜"
	],
	[
		"eba1",
		"濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼"
	],
	[
		"eca1",
		"議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄"
	],
	[
		"eda1",
		"立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長"
	],
	[
		"eea1",
		"障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱"
	],
	[
		"efa1",
		"煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖"
	],
	[
		"f0a1",
		"靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫"
	],
	[
		"f1a1",
		"踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只"
	],
	[
		"f2a1",
		"咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯"
	],
	[
		"f3a1",
		"鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策"
	],
	[
		"f4a1",
		"責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢"
	],
	[
		"f5a1",
		"椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃"
	],
	[
		"f6a1",
		"贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託"
	],
	[
		"f7a1",
		"鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑"
	],
	[
		"f8a1",
		"阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃"
	],
	[
		"f9a1",
		"品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航"
	],
	[
		"faa1",
		"行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型"
	],
	[
		"fba1",
		"形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵"
	],
	[
		"fca1",
		"禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆"
	],
	[
		"fda1",
		"爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰"
	]
];

var require$$6 = [
	[
		"0",
		"\u0000",
		127
	],
	[
		"a140",
		"　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚"
	],
	[
		"a1a1",
		"﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢",
		4,
		"～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／"
	],
	[
		"a240",
		"＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁",
		7,
		"▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭"
	],
	[
		"a2a1",
		"╮╰╯═╞╪╡◢◣◥◤╱╲╳０",
		9,
		"Ⅰ",
		9,
		"〡",
		8,
		"十卄卅Ａ",
		25,
		"ａ",
		21
	],
	[
		"a340",
		"ｗｘｙｚΑ",
		16,
		"Σ",
		6,
		"α",
		16,
		"σ",
		6,
		"ㄅ",
		10
	],
	[
		"a3a1",
		"ㄐ",
		25,
		"˙ˉˊˇˋ"
	],
	[
		"a3e1",
		"€"
	],
	[
		"a440",
		"一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才"
	],
	[
		"a4a1",
		"丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙"
	],
	[
		"a540",
		"世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外"
	],
	[
		"a5a1",
		"央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全"
	],
	[
		"a640",
		"共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年"
	],
	[
		"a6a1",
		"式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣"
	],
	[
		"a740",
		"作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍"
	],
	[
		"a7a1",
		"均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠"
	],
	[
		"a840",
		"杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒"
	],
	[
		"a8a1",
		"芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵"
	],
	[
		"a940",
		"咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居"
	],
	[
		"a9a1",
		"屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊"
	],
	[
		"aa40",
		"昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠"
	],
	[
		"aaa1",
		"炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附"
	],
	[
		"ab40",
		"陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品"
	],
	[
		"aba1",
		"哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷"
	],
	[
		"ac40",
		"拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗"
	],
	[
		"aca1",
		"活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄"
	],
	[
		"ad40",
		"耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥"
	],
	[
		"ada1",
		"迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪"
	],
	[
		"ae40",
		"哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙"
	],
	[
		"aea1",
		"恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓"
	],
	[
		"af40",
		"浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷"
	],
	[
		"afa1",
		"砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃"
	],
	[
		"b040",
		"虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡"
	],
	[
		"b0a1",
		"陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀"
	],
	[
		"b140",
		"娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽"
	],
	[
		"b1a1",
		"情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺"
	],
	[
		"b240",
		"毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶"
	],
	[
		"b2a1",
		"瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼"
	],
	[
		"b340",
		"莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途"
	],
	[
		"b3a1",
		"部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠"
	],
	[
		"b440",
		"婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍"
	],
	[
		"b4a1",
		"插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋"
	],
	[
		"b540",
		"溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘"
	],
	[
		"b5a1",
		"窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁"
	],
	[
		"b640",
		"詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑"
	],
	[
		"b6a1",
		"間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼"
	],
	[
		"b740",
		"媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業"
	],
	[
		"b7a1",
		"楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督"
	],
	[
		"b840",
		"睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫"
	],
	[
		"b8a1",
		"腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊"
	],
	[
		"b940",
		"辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴"
	],
	[
		"b9a1",
		"飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇"
	],
	[
		"ba40",
		"愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢"
	],
	[
		"baa1",
		"滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬"
	],
	[
		"bb40",
		"罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤"
	],
	[
		"bba1",
		"說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜"
	],
	[
		"bc40",
		"劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂"
	],
	[
		"bca1",
		"慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃"
	],
	[
		"bd40",
		"瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯"
	],
	[
		"bda1",
		"翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞"
	],
	[
		"be40",
		"輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉"
	],
	[
		"bea1",
		"鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡"
	],
	[
		"bf40",
		"濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊"
	],
	[
		"bfa1",
		"縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚"
	],
	[
		"c040",
		"錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇"
	],
	[
		"c0a1",
		"嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬"
	],
	[
		"c140",
		"瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪"
	],
	[
		"c1a1",
		"薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁"
	],
	[
		"c240",
		"駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘"
	],
	[
		"c2a1",
		"癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦"
	],
	[
		"c340",
		"鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸"
	],
	[
		"c3a1",
		"獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類"
	],
	[
		"c440",
		"願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼"
	],
	[
		"c4a1",
		"纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴"
	],
	[
		"c540",
		"護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬"
	],
	[
		"c5a1",
		"禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒"
	],
	[
		"c640",
		"讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲"
	],
	[
		"c940",
		"乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕"
	],
	[
		"c9a1",
		"氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋"
	],
	[
		"ca40",
		"汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘"
	],
	[
		"caa1",
		"吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇"
	],
	[
		"cb40",
		"杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓"
	],
	[
		"cba1",
		"芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢"
	],
	[
		"cc40",
		"坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋"
	],
	[
		"cca1",
		"怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲"
	],
	[
		"cd40",
		"泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺"
	],
	[
		"cda1",
		"矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏"
	],
	[
		"ce40",
		"哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛"
	],
	[
		"cea1",
		"峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺"
	],
	[
		"cf40",
		"柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂"
	],
	[
		"cfa1",
		"洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀"
	],
	[
		"d040",
		"穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪"
	],
	[
		"d0a1",
		"苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱"
	],
	[
		"d140",
		"唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧"
	],
	[
		"d1a1",
		"恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤"
	],
	[
		"d240",
		"毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸"
	],
	[
		"d2a1",
		"牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐"
	],
	[
		"d340",
		"笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢"
	],
	[
		"d3a1",
		"荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐"
	],
	[
		"d440",
		"酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅"
	],
	[
		"d4a1",
		"唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏"
	],
	[
		"d540",
		"崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟"
	],
	[
		"d5a1",
		"捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉"
	],
	[
		"d640",
		"淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏"
	],
	[
		"d6a1",
		"痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟"
	],
	[
		"d740",
		"耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷"
	],
	[
		"d7a1",
		"蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪"
	],
	[
		"d840",
		"釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷"
	],
	[
		"d8a1",
		"堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔"
	],
	[
		"d940",
		"惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒"
	],
	[
		"d9a1",
		"晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞"
	],
	[
		"da40",
		"湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖"
	],
	[
		"daa1",
		"琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥"
	],
	[
		"db40",
		"罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳"
	],
	[
		"dba1",
		"菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺"
	],
	[
		"dc40",
		"軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈"
	],
	[
		"dca1",
		"隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆"
	],
	[
		"dd40",
		"媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤"
	],
	[
		"dda1",
		"搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼"
	],
	[
		"de40",
		"毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓"
	],
	[
		"dea1",
		"煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓"
	],
	[
		"df40",
		"稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯"
	],
	[
		"dfa1",
		"腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤"
	],
	[
		"e040",
		"觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿"
	],
	[
		"e0a1",
		"遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠"
	],
	[
		"e140",
		"凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠"
	],
	[
		"e1a1",
		"寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉"
	],
	[
		"e240",
		"榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊"
	],
	[
		"e2a1",
		"漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓"
	],
	[
		"e340",
		"禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞"
	],
	[
		"e3a1",
		"耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻"
	],
	[
		"e440",
		"裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍"
	],
	[
		"e4a1",
		"銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘"
	],
	[
		"e540",
		"噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉"
	],
	[
		"e5a1",
		"憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒"
	],
	[
		"e640",
		"澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙"
	],
	[
		"e6a1",
		"獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟"
	],
	[
		"e740",
		"膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢"
	],
	[
		"e7a1",
		"蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧"
	],
	[
		"e840",
		"踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓"
	],
	[
		"e8a1",
		"銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮"
	],
	[
		"e940",
		"噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺"
	],
	[
		"e9a1",
		"憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸"
	],
	[
		"ea40",
		"澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙"
	],
	[
		"eaa1",
		"瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘"
	],
	[
		"eb40",
		"蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠"
	],
	[
		"eba1",
		"諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌"
	],
	[
		"ec40",
		"錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕"
	],
	[
		"eca1",
		"魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎"
	],
	[
		"ed40",
		"檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶"
	],
	[
		"eda1",
		"瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞"
	],
	[
		"ee40",
		"蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞"
	],
	[
		"eea1",
		"謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜"
	],
	[
		"ef40",
		"鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰"
	],
	[
		"efa1",
		"鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶"
	],
	[
		"f040",
		"璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒"
	],
	[
		"f0a1",
		"臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧"
	],
	[
		"f140",
		"蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪"
	],
	[
		"f1a1",
		"鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰"
	],
	[
		"f240",
		"徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛"
	],
	[
		"f2a1",
		"礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕"
	],
	[
		"f340",
		"譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦"
	],
	[
		"f3a1",
		"鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲"
	],
	[
		"f440",
		"嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩"
	],
	[
		"f4a1",
		"禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿"
	],
	[
		"f540",
		"鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛"
	],
	[
		"f5a1",
		"鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥"
	],
	[
		"f640",
		"蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺"
	],
	[
		"f6a1",
		"騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚"
	],
	[
		"f740",
		"糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊"
	],
	[
		"f7a1",
		"驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾"
	],
	[
		"f840",
		"讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏"
	],
	[
		"f8a1",
		"齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚"
	],
	[
		"f940",
		"纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊"
	],
	[
		"f9a1",
		"龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓"
	]
];

var require$$7 = [
	[
		"8740",
		"䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻"
	],
	[
		"8767",
		"綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬"
	],
	[
		"87a1",
		"𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋"
	],
	[
		"8840",
		"㇀",
		4,
		"𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ"
	],
	[
		"88a1",
		"ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛"
	],
	[
		"8940",
		"𪎩𡅅"
	],
	[
		"8943",
		"攊"
	],
	[
		"8946",
		"丽滝鵎釟"
	],
	[
		"894c",
		"𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮"
	],
	[
		"89a1",
		"琑糼緍楆竉刧"
	],
	[
		"89ab",
		"醌碸酞肼"
	],
	[
		"89b0",
		"贋胶𠧧"
	],
	[
		"89b5",
		"肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁"
	],
	[
		"89c1",
		"溚舾甙"
	],
	[
		"89c5",
		"䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅"
	],
	[
		"8a40",
		"𧶄唥"
	],
	[
		"8a43",
		"𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓"
	],
	[
		"8a64",
		"𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕"
	],
	[
		"8a76",
		"䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯"
	],
	[
		"8aa1",
		"𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱"
	],
	[
		"8aac",
		"䠋𠆩㿺塳𢶍"
	],
	[
		"8ab2",
		"𤗈𠓼𦂗𠽌𠶖啹䂻䎺"
	],
	[
		"8abb",
		"䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃"
	],
	[
		"8ac9",
		"𪘁𠸉𢫏𢳉"
	],
	[
		"8ace",
		"𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻"
	],
	[
		"8adf",
		"𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌"
	],
	[
		"8af6",
		"𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭"
	],
	[
		"8b40",
		"𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹"
	],
	[
		"8b55",
		"𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑"
	],
	[
		"8ba1",
		"𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁"
	],
	[
		"8bde",
		"𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢"
	],
	[
		"8c40",
		"倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋"
	],
	[
		"8ca1",
		"𣏹椙橃𣱣泿"
	],
	[
		"8ca7",
		"爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚"
	],
	[
		"8cc9",
		"顨杫䉶圽"
	],
	[
		"8cce",
		"藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶"
	],
	[
		"8ce6",
		"峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻"
	],
	[
		"8d40",
		"𠮟"
	],
	[
		"8d42",
		"𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱"
	],
	[
		"8da1",
		"㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘"
	],
	[
		"8e40",
		"𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎"
	],
	[
		"8ea1",
		"繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛"
	],
	[
		"8f40",
		"蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖"
	],
	[
		"8fa1",
		"𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起"
	],
	[
		"9040",
		"趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛"
	],
	[
		"90a1",
		"𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜"
	],
	[
		"9140",
		"𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈"
	],
	[
		"91a1",
		"鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨"
	],
	[
		"9240",
		"𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘"
	],
	[
		"92a1",
		"働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃"
	],
	[
		"9340",
		"媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍"
	],
	[
		"93a1",
		"摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋"
	],
	[
		"9440",
		"銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻"
	],
	[
		"94a1",
		"㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡"
	],
	[
		"9540",
		"𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂"
	],
	[
		"95a1",
		"衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰"
	],
	[
		"9640",
		"桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸"
	],
	[
		"96a1",
		"𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉"
	],
	[
		"9740",
		"愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫"
	],
	[
		"97a1",
		"𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎"
	],
	[
		"9840",
		"𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦"
	],
	[
		"98a1",
		"咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃"
	],
	[
		"9940",
		"䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚"
	],
	[
		"99a1",
		"䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿"
	],
	[
		"9a40",
		"鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺"
	],
	[
		"9aa1",
		"黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪"
	],
	[
		"9b40",
		"𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌"
	],
	[
		"9b62",
		"𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎"
	],
	[
		"9ba1",
		"椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊"
	],
	[
		"9c40",
		"嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶"
	],
	[
		"9ca1",
		"㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏"
	],
	[
		"9d40",
		"𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁"
	],
	[
		"9da1",
		"辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢"
	],
	[
		"9e40",
		"𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺"
	],
	[
		"9ea1",
		"鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭"
	],
	[
		"9ead",
		"𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹"
	],
	[
		"9ec5",
		"㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲"
	],
	[
		"9ef5",
		"噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼"
	],
	[
		"9f40",
		"籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱"
	],
	[
		"9f4f",
		"凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰"
	],
	[
		"9fa1",
		"椬叚鰊鴂䰻陁榀傦畆𡝭駚剳"
	],
	[
		"9fae",
		"酙隁酜"
	],
	[
		"9fb2",
		"酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽"
	],
	[
		"9fc1",
		"𤤙盖鮝个𠳔莾衂"
	],
	[
		"9fc9",
		"届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳"
	],
	[
		"9fdb",
		"歒酼龥鮗頮颴骺麨麄煺笔"
	],
	[
		"9fe7",
		"毺蠘罸"
	],
	[
		"9feb",
		"嘠𪙊蹷齓"
	],
	[
		"9ff0",
		"跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇"
	],
	[
		"a040",
		"𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷"
	],
	[
		"a055",
		"𡠻𦸅"
	],
	[
		"a058",
		"詾𢔛"
	],
	[
		"a05b",
		"惽癧髗鵄鍮鮏蟵"
	],
	[
		"a063",
		"蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽"
	],
	[
		"a073",
		"坟慯抦戹拎㩜懢厪𣏵捤栂㗒"
	],
	[
		"a0a1",
		"嵗𨯂迚𨸹"
	],
	[
		"a0a6",
		"僙𡵆礆匲阸𠼻䁥"
	],
	[
		"a0ae",
		"矾"
	],
	[
		"a0b0",
		"糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦"
	],
	[
		"a0d4",
		"覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷"
	],
	[
		"a0e2",
		"罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫"
	],
	[
		"a3c0",
		"␀",
		31,
		"␡"
	],
	[
		"c6a1",
		"①",
		9,
		"⑴",
		9,
		"ⅰ",
		9,
		"丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ",
		23
	],
	[
		"c740",
		"す",
		58,
		"ァアィイ"
	],
	[
		"c7a1",
		"ゥ",
		81,
		"А",
		5,
		"ЁЖ",
		4
	],
	[
		"c840",
		"Л",
		26,
		"ёж",
		25,
		"⇧↸↹㇏𠃌乚𠂊刂䒑"
	],
	[
		"c8a1",
		"龰冈龱𧘇"
	],
	[
		"c8cd",
		"￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣"
	],
	[
		"c8f5",
		"ʃɐɛɔɵœøŋʊɪ"
	],
	[
		"f9fe",
		"￭"
	],
	[
		"fa40",
		"𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸"
	],
	[
		"faa1",
		"鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍"
	],
	[
		"fb40",
		"𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙"
	],
	[
		"fba1",
		"𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂"
	],
	[
		"fc40",
		"廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷"
	],
	[
		"fca1",
		"𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝"
	],
	[
		"fd40",
		"𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀"
	],
	[
		"fda1",
		"𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎"
	],
	[
		"fe40",
		"鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌"
	],
	[
		"fea1",
		"𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔"
	]
];

var dbcsData;
var hasRequiredDbcsData;

function requireDbcsData () {
	if (hasRequiredDbcsData) return dbcsData;
	hasRequiredDbcsData = 1;

	// Description of supported double byte encodings and aliases.
	// Tables are not require()-d until they are needed to speed up library load.
	// require()-s are direct to support Browserify.

	dbcsData = {
	    
	    // == Japanese/ShiftJIS ====================================================
	    // All japanese encodings are based on JIS X set of standards:
	    // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.
	    // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. 
	    //              Has several variations in 1978, 1983, 1990 and 1997.
	    // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.
	    // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.
	    //              2 planes, first is superset of 0208, second - revised 0212.
	    //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)

	    // Byte encodings are:
	    //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte
	    //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.
	    //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.
	    //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.
	    //               0x00-0x7F       - lower part of 0201
	    //               0x8E, 0xA1-0xDF - upper part of 0201
	    //               (0xA1-0xFE)x2   - 0208 plane (94x94).
	    //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).
	    //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.
	    //               Used as-is in ISO2022 family.
	    //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, 
	    //                0201-1976 Roman, 0208-1978, 0208-1983.
	    //  * ISO2022-JP-1: Adds esc seq for 0212-1990.
	    //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.
	    //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.
	    //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.
	    //
	    // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.
	    //
	    // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html

	    'shiftjis': {
	        type: '_dbcs',
	        table: function() { return require$$0$1 },
	        encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
	        encodeSkipVals: [{from: 0xED40, to: 0xF940}],
	    },
	    'csshiftjis': 'shiftjis',
	    'mskanji': 'shiftjis',
	    'sjis': 'shiftjis',
	    'windows31j': 'shiftjis',
	    'ms31j': 'shiftjis',
	    'xsjis': 'shiftjis',
	    'windows932': 'shiftjis',
	    'ms932': 'shiftjis',
	    '932': 'shiftjis',
	    'cp932': 'shiftjis',

	    'eucjp': {
	        type: '_dbcs',
	        table: function() { return require$$1 },
	        encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
	    },

	    // TODO: KDDI extension to Shift_JIS
	    // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.
	    // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.


	    // == Chinese/GBK ==========================================================
	    // http://en.wikipedia.org/wiki/GBK
	    // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder

	    // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936
	    'gb2312': 'cp936',
	    'gb231280': 'cp936',
	    'gb23121980': 'cp936',
	    'csgb2312': 'cp936',
	    'csiso58gb231280': 'cp936',
	    'euccn': 'cp936',

	    // Microsoft's CP936 is a subset and approximation of GBK.
	    'windows936': 'cp936',
	    'ms936': 'cp936',
	    '936': 'cp936',
	    'cp936': {
	        type: '_dbcs',
	        table: function() { return require$$2$1 },
	    },

	    // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.
	    'gbk': {
	        type: '_dbcs',
	        table: function() { return require$$2$1.concat(require$$3) },
	    },
	    'xgbk': 'gbk',
	    'isoir58': 'gbk',

	    // GB18030 is an algorithmic extension of GBK.
	    // Main source: https://www.w3.org/TR/encoding/#gbk-encoder
	    // http://icu-project.org/docs/papers/gb18030.html
	    // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml
	    // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0
	    'gb18030': {
	        type: '_dbcs',
	        table: function() { return require$$2$1.concat(require$$3) },
	        gb18030: function() { return require$$4 },
	        encodeSkipVals: [0x80],
	        encodeAdd: {'€': 0xA2E3},
	    },

	    'chinese': 'gb18030',


	    // == Korean ===============================================================
	    // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.
	    'windows949': 'cp949',
	    'ms949': 'cp949',
	    '949': 'cp949',
	    'cp949': {
	        type: '_dbcs',
	        table: function() { return require$$5 },
	    },

	    'cseuckr': 'cp949',
	    'csksc56011987': 'cp949',
	    'euckr': 'cp949',
	    'isoir149': 'cp949',
	    'korean': 'cp949',
	    'ksc56011987': 'cp949',
	    'ksc56011989': 'cp949',
	    'ksc5601': 'cp949',


	    // == Big5/Taiwan/Hong Kong ================================================
	    // There are lots of tables for Big5 and cp950. Please see the following links for history:
	    // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html
	    // Variations, in roughly number of defined chars:
	    //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
	    //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/
	    //  * Big5-2003 (Taiwan standard) almost superset of cp950.
	    //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.
	    //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. 
	    //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.
	    //    Plus, it has 4 combining sequences.
	    //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299
	    //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.
	    //    Implementations are not consistent within browsers; sometimes labeled as just big5.
	    //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.
	    //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31
	    //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.
	    //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt
	    //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt
	    // 
	    // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder
	    // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.

	    'windows950': 'cp950',
	    'ms950': 'cp950',
	    '950': 'cp950',
	    'cp950': {
	        type: '_dbcs',
	        table: function() { return require$$6 },
	    },

	    // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.
	    'big5': 'big5hkscs',
	    'big5hkscs': {
	        type: '_dbcs',
	        table: function() { return require$$6.concat(require$$7) },
	        encodeSkipVals: [0xa2cc],
	    },

	    'cnbig5': 'big5hkscs',
	    'csbig5': 'big5hkscs',
	    'xxbig5': 'big5hkscs',
	};
	return dbcsData;
}

var hasRequiredEncodings;

function requireEncodings () {
	if (hasRequiredEncodings) return encodings;
	hasRequiredEncodings = 1;
	(function (exports) {

		// Update this array if you add/rename/remove files in this directory.
		// We support Browserify by skipping automatic module discovery and requiring modules directly.
		var modules = [
		    requireInternal(),
		    requireUtf16(),
		    requireUtf7(),
		    requireSbcsCodec(),
		    requireSbcsData(),
		    requireSbcsDataGenerated(),
		    requireDbcsCodec(),
		    requireDbcsData(),
		];

		// Put all encoding/alias/codec definitions to single object and export it. 
		for (var i = 0; i < modules.length; i++) {
		    var module = modules[i];
		    for (var enc in module)
		        if (Object.prototype.hasOwnProperty.call(module, enc))
		            exports[enc] = module[enc];
		} 
	} (encodings));
	return encodings;
}

var streams;
var hasRequiredStreams;

function requireStreams () {
	if (hasRequiredStreams) return streams;
	hasRequiredStreams = 1;

	var Buffer = require$$0$5.Buffer,
	    Transform = require$$1$3.Transform;


	// == Exports ==================================================================
	streams = function(iconv) {
	    
	    // Additional Public API.
	    iconv.encodeStream = function encodeStream(encoding, options) {
	        return new IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
	    };

	    iconv.decodeStream = function decodeStream(encoding, options) {
	        return new IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
	    };

	    iconv.supportsStreams = true;


	    // Not published yet.
	    iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;
	    iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;
	    iconv._collect = IconvLiteDecoderStream.prototype.collect;
	};


	// == Encoder stream =======================================================
	function IconvLiteEncoderStream(conv, options) {
	    this.conv = conv;
	    options = options || {};
	    options.decodeStrings = false; // We accept only strings, so we don't need to decode them.
	    Transform.call(this, options);
	}

	IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
	    constructor: { value: IconvLiteEncoderStream }
	});

	IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {
	    if (typeof chunk != 'string')
	        return done(new Error("Iconv encoding stream needs strings as its input."));
	    try {
	        var res = this.conv.write(chunk);
	        if (res && res.length) this.push(res);
	        done();
	    }
	    catch (e) {
	        done(e);
	    }
	};

	IconvLiteEncoderStream.prototype._flush = function(done) {
	    try {
	        var res = this.conv.end();
	        if (res && res.length) this.push(res);
	        done();
	    }
	    catch (e) {
	        done(e);
	    }
	};

	IconvLiteEncoderStream.prototype.collect = function(cb) {
	    var chunks = [];
	    this.on('error', cb);
	    this.on('data', function(chunk) { chunks.push(chunk); });
	    this.on('end', function() {
	        cb(null, Buffer.concat(chunks));
	    });
	    return this;
	};


	// == Decoder stream =======================================================
	function IconvLiteDecoderStream(conv, options) {
	    this.conv = conv;
	    options = options || {};
	    options.encoding = this.encoding = 'utf8'; // We output strings.
	    Transform.call(this, options);
	}

	IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
	    constructor: { value: IconvLiteDecoderStream }
	});

	IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {
	    if (!Buffer.isBuffer(chunk))
	        return done(new Error("Iconv decoding stream needs buffers as its input."));
	    try {
	        var res = this.conv.write(chunk);
	        if (res && res.length) this.push(res, this.encoding);
	        done();
	    }
	    catch (e) {
	        done(e);
	    }
	};

	IconvLiteDecoderStream.prototype._flush = function(done) {
	    try {
	        var res = this.conv.end();
	        if (res && res.length) this.push(res, this.encoding);                
	        done();
	    }
	    catch (e) {
	        done(e);
	    }
	};

	IconvLiteDecoderStream.prototype.collect = function(cb) {
	    var res = '';
	    this.on('error', cb);
	    this.on('data', function(chunk) { res += chunk; });
	    this.on('end', function() {
	        cb(null, res);
	    });
	    return this;
	};
	return streams;
}

var extendNode;
var hasRequiredExtendNode;

function requireExtendNode () {
	if (hasRequiredExtendNode) return extendNode;
	hasRequiredExtendNode = 1;
	var Buffer = require$$0$5.Buffer;
	// Note: not polyfilled with safer-buffer on a purpose, as overrides Buffer

	// == Extend Node primitives to use iconv-lite =================================

	extendNode = function (iconv) {
	    var original = undefined; // Place to keep original methods.

	    // Node authors rewrote Buffer internals to make it compatible with
	    // Uint8Array and we cannot patch key functions since then.
	    // Note: this does use older Buffer API on a purpose
	    iconv.supportsNodeEncodingsExtension = !(Buffer.from || new Buffer(0) instanceof Uint8Array);

	    iconv.extendNodeEncodings = function extendNodeEncodings() {
	        if (original) return;
	        original = {};

	        if (!iconv.supportsNodeEncodingsExtension) {
	            console.error("ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node");
	            console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");
	            return;
	        }

	        var nodeNativeEncodings = {
	            'hex': true, 'utf8': true, 'utf-8': true, 'ascii': true, 'binary': true, 
	            'base64': true, 'ucs2': true, 'ucs-2': true, 'utf16le': true, 'utf-16le': true,
	        };

	        Buffer.isNativeEncoding = function(enc) {
	            return enc && nodeNativeEncodings[enc.toLowerCase()];
	        };

	        // -- SlowBuffer -----------------------------------------------------------
	        var SlowBuffer = require$$0$5.SlowBuffer;

	        original.SlowBufferToString = SlowBuffer.prototype.toString;
	        SlowBuffer.prototype.toString = function(encoding, start, end) {
	            encoding = String(encoding || 'utf8').toLowerCase();

	            // Use native conversion when possible
	            if (Buffer.isNativeEncoding(encoding))
	                return original.SlowBufferToString.call(this, encoding, start, end);

	            // Otherwise, use our decoding method.
	            if (typeof start == 'undefined') start = 0;
	            if (typeof end == 'undefined') end = this.length;
	            return iconv.decode(this.slice(start, end), encoding);
	        };

	        original.SlowBufferWrite = SlowBuffer.prototype.write;
	        SlowBuffer.prototype.write = function(string, offset, length, encoding) {
	            // Support both (string, offset, length, encoding)
	            // and the legacy (string, encoding, offset, length)
	            if (isFinite(offset)) {
	                if (!isFinite(length)) {
	                    encoding = length;
	                    length = undefined;
	                }
	            } else {  // legacy
	                var swap = encoding;
	                encoding = offset;
	                offset = length;
	                length = swap;
	            }

	            offset = +offset || 0;
	            var remaining = this.length - offset;
	            if (!length) {
	                length = remaining;
	            } else {
	                length = +length;
	                if (length > remaining) {
	                    length = remaining;
	                }
	            }
	            encoding = String(encoding || 'utf8').toLowerCase();

	            // Use native conversion when possible
	            if (Buffer.isNativeEncoding(encoding))
	                return original.SlowBufferWrite.call(this, string, offset, length, encoding);

	            if (string.length > 0 && (length < 0 || offset < 0))
	                throw new RangeError('attempt to write beyond buffer bounds');

	            // Otherwise, use our encoding method.
	            var buf = iconv.encode(string, encoding);
	            if (buf.length < length) length = buf.length;
	            buf.copy(this, offset, 0, length);
	            return length;
	        };

	        // -- Buffer ---------------------------------------------------------------

	        original.BufferIsEncoding = Buffer.isEncoding;
	        Buffer.isEncoding = function(encoding) {
	            return Buffer.isNativeEncoding(encoding) || iconv.encodingExists(encoding);
	        };

	        original.BufferByteLength = Buffer.byteLength;
	        Buffer.byteLength = SlowBuffer.byteLength = function(str, encoding) {
	            encoding = String(encoding || 'utf8').toLowerCase();

	            // Use native conversion when possible
	            if (Buffer.isNativeEncoding(encoding))
	                return original.BufferByteLength.call(this, str, encoding);

	            // Slow, I know, but we don't have a better way yet.
	            return iconv.encode(str, encoding).length;
	        };

	        original.BufferToString = Buffer.prototype.toString;
	        Buffer.prototype.toString = function(encoding, start, end) {
	            encoding = String(encoding || 'utf8').toLowerCase();

	            // Use native conversion when possible
	            if (Buffer.isNativeEncoding(encoding))
	                return original.BufferToString.call(this, encoding, start, end);

	            // Otherwise, use our decoding method.
	            if (typeof start == 'undefined') start = 0;
	            if (typeof end == 'undefined') end = this.length;
	            return iconv.decode(this.slice(start, end), encoding);
	        };

	        original.BufferWrite = Buffer.prototype.write;
	        Buffer.prototype.write = function(string, offset, length, encoding) {
	            var _offset = offset, _length = length, _encoding = encoding;
	            // Support both (string, offset, length, encoding)
	            // and the legacy (string, encoding, offset, length)
	            if (isFinite(offset)) {
	                if (!isFinite(length)) {
	                    encoding = length;
	                    length = undefined;
	                }
	            } else {  // legacy
	                var swap = encoding;
	                encoding = offset;
	                offset = length;
	                length = swap;
	            }

	            encoding = String(encoding || 'utf8').toLowerCase();

	            // Use native conversion when possible
	            if (Buffer.isNativeEncoding(encoding))
	                return original.BufferWrite.call(this, string, _offset, _length, _encoding);

	            offset = +offset || 0;
	            var remaining = this.length - offset;
	            if (!length) {
	                length = remaining;
	            } else {
	                length = +length;
	                if (length > remaining) {
	                    length = remaining;
	                }
	            }

	            if (string.length > 0 && (length < 0 || offset < 0))
	                throw new RangeError('attempt to write beyond buffer bounds');

	            // Otherwise, use our encoding method.
	            var buf = iconv.encode(string, encoding);
	            if (buf.length < length) length = buf.length;
	            buf.copy(this, offset, 0, length);
	            return length;

	            // TODO: Set _charsWritten.
	        };


	        // -- Readable -------------------------------------------------------------
	        if (iconv.supportsStreams) {
	            var Readable = require$$1$3.Readable;

	            original.ReadableSetEncoding = Readable.prototype.setEncoding;
	            Readable.prototype.setEncoding = function setEncoding(enc, options) {
	                // Use our own decoder, it has the same interface.
	                // We cannot use original function as it doesn't handle BOM-s.
	                this._readableState.decoder = iconv.getDecoder(enc, options);
	                this._readableState.encoding = enc;
	            };

	            Readable.prototype.collect = iconv._collect;
	        }
	    };

	    // Remove iconv-lite Node primitive extensions.
	    iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {
	        if (!iconv.supportsNodeEncodingsExtension)
	            return;
	        if (!original)
	            throw new Error("require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.")

	        delete Buffer.isNativeEncoding;

	        var SlowBuffer = require$$0$5.SlowBuffer;

	        SlowBuffer.prototype.toString = original.SlowBufferToString;
	        SlowBuffer.prototype.write = original.SlowBufferWrite;

	        Buffer.isEncoding = original.BufferIsEncoding;
	        Buffer.byteLength = original.BufferByteLength;
	        Buffer.prototype.toString = original.BufferToString;
	        Buffer.prototype.write = original.BufferWrite;

	        if (iconv.supportsStreams) {
	            var Readable = require$$1$3.Readable;

	            Readable.prototype.setEncoding = original.ReadableSetEncoding;
	            delete Readable.prototype.collect;
	        }

	        original = undefined;
	    };
	};
	return extendNode;
}

var hasRequiredLib$1;

function requireLib$1 () {
	if (hasRequiredLib$1) return lib$4.exports;
	hasRequiredLib$1 = 1;
	(function (module) {

		// Some environments don't have global Buffer (e.g. React Native).
		// Solution would be installing npm modules "buffer" and "stream" explicitly.
		var Buffer = requireSafer().Buffer;

		var bomHandling = requireBomHandling(),
		    iconv = module.exports;

		// All codecs and aliases are kept here, keyed by encoding name/alias.
		// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.
		iconv.encodings = null;

		// Characters emitted in case of error.
		iconv.defaultCharUnicode = '�';
		iconv.defaultCharSingleByte = '?';

		// Public API.
		iconv.encode = function encode(str, encoding, options) {
		    str = "" + (str || ""); // Ensure string.

		    var encoder = iconv.getEncoder(encoding, options);

		    var res = encoder.write(str);
		    var trail = encoder.end();
		    
		    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;
		};

		iconv.decode = function decode(buf, encoding, options) {
		    if (typeof buf === 'string') {
		        if (!iconv.skipDecodeWarning) {
		            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');
		            iconv.skipDecodeWarning = true;
		        }

		        buf = Buffer.from("" + (buf || ""), "binary"); // Ensure buffer.
		    }

		    var decoder = iconv.getDecoder(encoding, options);

		    var res = decoder.write(buf);
		    var trail = decoder.end();

		    return trail ? (res + trail) : res;
		};

		iconv.encodingExists = function encodingExists(enc) {
		    try {
		        iconv.getCodec(enc);
		        return true;
		    } catch (e) {
		        return false;
		    }
		};

		// Legacy aliases to convert functions
		iconv.toEncoding = iconv.encode;
		iconv.fromEncoding = iconv.decode;

		// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.
		iconv._codecDataCache = {};
		iconv.getCodec = function getCodec(encoding) {
		    if (!iconv.encodings)
		        iconv.encodings = requireEncodings(); // Lazy load all encoding definitions.
		    
		    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
		    var enc = iconv._canonicalizeEncoding(encoding);

		    // Traverse iconv.encodings to find actual codec.
		    var codecOptions = {};
		    while (true) {
		        var codec = iconv._codecDataCache[enc];
		        if (codec)
		            return codec;

		        var codecDef = iconv.encodings[enc];

		        switch (typeof codecDef) {
		            case "string": // Direct alias to other encoding.
		                enc = codecDef;
		                break;

		            case "object": // Alias with options. Can be layered.
		                for (var key in codecDef)
		                    codecOptions[key] = codecDef[key];

		                if (!codecOptions.encodingName)
		                    codecOptions.encodingName = enc;
		                
		                enc = codecDef.type;
		                break;

		            case "function": // Codec itself.
		                if (!codecOptions.encodingName)
		                    codecOptions.encodingName = enc;

		                // The codec function must load all tables and return object with .encoder and .decoder methods.
		                // It'll be called only once (for each different options object).
		                codec = new codecDef(codecOptions, iconv);

		                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.
		                return codec;

		            default:
		                throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '"+enc+"')");
		        }
		    }
		};

		iconv._canonicalizeEncoding = function(encoding) {
		    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
		    return (''+encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "");
		};

		iconv.getEncoder = function getEncoder(encoding, options) {
		    var codec = iconv.getCodec(encoding),
		        encoder = new codec.encoder(options, codec);

		    if (codec.bomAware && options && options.addBOM)
		        encoder = new bomHandling.PrependBOM(encoder, options);

		    return encoder;
		};

		iconv.getDecoder = function getDecoder(encoding, options) {
		    var codec = iconv.getCodec(encoding),
		        decoder = new codec.decoder(options, codec);

		    if (codec.bomAware && !(options && options.stripBOM === false))
		        decoder = new bomHandling.StripBOM(decoder, options);

		    return decoder;
		};


		// Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.
		var nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;
		if (nodeVer) {

		    // Load streaming support in Node v0.10+
		    var nodeVerArr = nodeVer.split(".").map(Number);
		    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {
		        requireStreams()(iconv);
		    }

		    // Load Node primitive extensions.
		    requireExtendNode()(iconv);
		}
	} (lib$4));
	return lib$4.exports;
}

/*!
 * unpipe
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var _package$H = unpipe$1;

/**
 * Determine if there are Node.js pipe-like data listeners.
 * @private
 */

function hasPipeDataListeners(stream) {
  var listeners = stream.listeners('data');

  for (var i = 0; i < listeners.length; i++) {
    if (listeners[i].name === 'ondata') {
      return true
    }
  }

  return false
}

/**
 * Unpipe a stream from all destinations.
 *
 * @param {object} stream
 * @public
 */

function unpipe$1(stream) {
  if (!stream) {
    throw new TypeError('argument stream is required')
  }

  if (typeof stream.unpipe === 'function') {
    // new-style
    stream.unpipe();
    return
  }

  // Node.js 0.8 hack
  if (!hasPipeDataListeners(stream)) {
    return
  }

  var listener;
  var listeners = stream.listeners('close');

  for (var i = 0; i < listeners.length; i++) {
    listener = listeners[i];

    if (listener.name !== 'cleanup' && listener.name !== 'onclose') {
      continue
    }

    // invoke the listener
    listener.call(stream);
  }
}

/*!
 * raw-body
 * Copyright(c) 2013-2014 Jonathan Ong
 * Copyright(c) 2014-2022 Douglas Christopher Wilson
 * MIT Licensed
 */

var _package$G;
var hasRequired_package$d;

function require_package$d () {
	if (hasRequired_package$d) return _package$G;
	hasRequired_package$d = 1;

	/**
	 * Module dependencies.
	 * @private
	 */

	var asyncHooks = tryRequireAsyncHooks();
	var bytes = require_package$f();
	var createError = _packageExports$b;
	var iconv = requireLib$1();
	var unpipe = _package$H;

	/**
	 * Module exports.
	 * @public
	 */

	_package$G = getRawBody;

	/**
	 * Module variables.
	 * @private
	 */

	var ICONV_ENCODING_MESSAGE_REGEXP = /^Encoding not recognized: /;

	/**
	 * Get the decoder for a given encoding.
	 *
	 * @param {string} encoding
	 * @private
	 */

	function getDecoder (encoding) {
	  if (!encoding) return null

	  try {
	    return iconv.getDecoder(encoding)
	  } catch (e) {
	    // error getting decoder
	    if (!ICONV_ENCODING_MESSAGE_REGEXP.test(e.message)) throw e

	    // the encoding was not found
	    throw createError(415, 'specified encoding unsupported', {
	      encoding: encoding,
	      type: 'encoding.unsupported'
	    })
	  }
	}

	/**
	 * Get the raw body of a stream (typically HTTP).
	 *
	 * @param {object} stream
	 * @param {object|string|function} [options]
	 * @param {function} [callback]
	 * @public
	 */

	function getRawBody (stream, options, callback) {
	  var done = callback;
	  var opts = options || {};

	  if (options === true || typeof options === 'string') {
	    // short cut for encoding
	    opts = {
	      encoding: options
	    };
	  }

	  if (typeof options === 'function') {
	    done = options;
	    opts = {};
	  }

	  // validate callback is a function, if provided
	  if (done !== undefined && typeof done !== 'function') {
	    throw new TypeError('argument callback must be a function')
	  }

	  // require the callback without promises
	  if (!done && !commonjsGlobal.Promise) {
	    throw new TypeError('argument callback is required')
	  }

	  // get encoding
	  var encoding = opts.encoding !== true
	    ? opts.encoding
	    : 'utf-8';

	  // convert the limit to an integer
	  var limit = bytes.parse(opts.limit);

	  // convert the expected length to an integer
	  var length = opts.length != null && !isNaN(opts.length)
	    ? parseInt(opts.length, 10)
	    : null;

	  if (done) {
	    // classic callback style
	    return readStream(stream, encoding, length, limit, wrap(done))
	  }

	  return new Promise(function executor (resolve, reject) {
	    readStream(stream, encoding, length, limit, function onRead (err, buf) {
	      if (err) return reject(err)
	      resolve(buf);
	    });
	  })
	}

	/**
	 * Halt a stream.
	 *
	 * @param {Object} stream
	 * @private
	 */

	function halt (stream) {
	  // unpipe everything from the stream
	  unpipe(stream);

	  // pause stream
	  if (typeof stream.pause === 'function') {
	    stream.pause();
	  }
	}

	/**
	 * Read the data from the stream.
	 *
	 * @param {object} stream
	 * @param {string} encoding
	 * @param {number} length
	 * @param {number} limit
	 * @param {function} callback
	 * @public
	 */

	function readStream (stream, encoding, length, limit, callback) {
	  var complete = false;
	  var sync = true;

	  // check the length and limit options.
	  // note: we intentionally leave the stream paused,
	  // so users should handle the stream themselves.
	  if (limit !== null && length !== null && length > limit) {
	    return done(createError(413, 'request entity too large', {
	      expected: length,
	      length: length,
	      limit: limit,
	      type: 'entity.too.large'
	    }))
	  }

	  // streams1: assert request encoding is buffer.
	  // streams2+: assert the stream encoding is buffer.
	  //   stream._decoder: streams1
	  //   state.encoding: streams2
	  //   state.decoder: streams2, specifically < 0.10.6
	  var state = stream._readableState;
	  if (stream._decoder || (state && (state.encoding || state.decoder))) {
	    // developer error
	    return done(createError(500, 'stream encoding should not be set', {
	      type: 'stream.encoding.set'
	    }))
	  }

	  if (typeof stream.readable !== 'undefined' && !stream.readable) {
	    return done(createError(500, 'stream is not readable', {
	      type: 'stream.not.readable'
	    }))
	  }

	  var received = 0;
	  var decoder;

	  try {
	    decoder = getDecoder(encoding);
	  } catch (err) {
	    return done(err)
	  }

	  var buffer = decoder
	    ? ''
	    : [];

	  // attach listeners
	  stream.on('aborted', onAborted);
	  stream.on('close', cleanup);
	  stream.on('data', onData);
	  stream.on('end', onEnd);
	  stream.on('error', onEnd);

	  // mark sync section complete
	  sync = false;

	  function done () {
	    var args = new Array(arguments.length);

	    // copy arguments
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }

	    // mark complete
	    complete = true;

	    if (sync) {
	      process.nextTick(invokeCallback);
	    } else {
	      invokeCallback();
	    }

	    function invokeCallback () {
	      cleanup();

	      if (args[0]) {
	        // halt the stream on error
	        halt(stream);
	      }

	      callback.apply(null, args);
	    }
	  }

	  function onAborted () {
	    if (complete) return

	    done(createError(400, 'request aborted', {
	      code: 'ECONNABORTED',
	      expected: length,
	      length: length,
	      received: received,
	      type: 'request.aborted'
	    }));
	  }

	  function onData (chunk) {
	    if (complete) return

	    received += chunk.length;

	    if (limit !== null && received > limit) {
	      done(createError(413, 'request entity too large', {
	        limit: limit,
	        received: received,
	        type: 'entity.too.large'
	      }));
	    } else if (decoder) {
	      buffer += decoder.write(chunk);
	    } else {
	      buffer.push(chunk);
	    }
	  }

	  function onEnd (err) {
	    if (complete) return
	    if (err) return done(err)

	    if (length !== null && received !== length) {
	      done(createError(400, 'request size did not match content length', {
	        expected: length,
	        length: length,
	        received: received,
	        type: 'request.size.invalid'
	      }));
	    } else {
	      var string = decoder
	        ? buffer + (decoder.end() || '')
	        : Buffer.concat(buffer);
	      done(null, string);
	    }
	  }

	  function cleanup () {
	    buffer = null;

	    stream.removeListener('aborted', onAborted);
	    stream.removeListener('data', onData);
	    stream.removeListener('end', onEnd);
	    stream.removeListener('error', onEnd);
	    stream.removeListener('close', cleanup);
	  }
	}

	/**
	 * Try to require async_hooks
	 * @private
	 */

	function tryRequireAsyncHooks () {
	  try {
	    return require('async_hooks')
	  } catch (e) {
	    return {}
	  }
	}

	/**
	 * Wrap function with async resource, if possible.
	 * AsyncResource.bind static method backported.
	 * @private
	 */

	function wrap (fn) {
	  var res;

	  // create anonymous resource
	  if (asyncHooks.AsyncResource) {
	    res = new asyncHooks.AsyncResource(fn.name || 'bound-anonymous-fn');
	  }

	  // incompatible node.js
	  if (!res || !res.runInAsyncScope) {
	    return fn
	  }

	  // return bound function
	  return res.runInAsyncScope.bind(res, fn, null)
	}
	return _package$G;
}

var _package$F = {exports: {}};

/*!
 * ee-first
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var _package$E = first$1;

/**
 * Get the first event in a set of event emitters and event pairs.
 *
 * @param {array} stuff
 * @param {function} done
 * @public
 */

function first$1(stuff, done) {
  if (!Array.isArray(stuff))
    throw new TypeError('arg must be an array of [ee, events...] arrays')

  var cleanups = [];

  for (var i = 0; i < stuff.length; i++) {
    var arr = stuff[i];

    if (!Array.isArray(arr) || arr.length < 2)
      throw new TypeError('each array member must be [ee, events...]')

    var ee = arr[0];

    for (var j = 1; j < arr.length; j++) {
      var event = arr[j];
      var fn = listener(event, callback);

      // listen to the event
      ee.on(event, fn);
      // push this listener to the list of cleanups
      cleanups.push({
        ee: ee,
        event: event,
        fn: fn,
      });
    }
  }

  function callback() {
    cleanup();
    done.apply(null, arguments);
  }

  function cleanup() {
    var x;
    for (var i = 0; i < cleanups.length; i++) {
      x = cleanups[i];
      x.ee.removeListener(x.event, x.fn);
    }
  }

  function thunk(fn) {
    done = fn;
  }

  thunk.cancel = cleanup;

  return thunk
}

/**
 * Create the event listener.
 * @private
 */

function listener(event, done) {
  return function onevent(arg1) {
    var args = new Array(arguments.length);
    var ee = this;
    var err = event === 'error'
      ? arg1
      : null;

    // copy args to prevent arguments escaping scope
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    done(err, ee, event, args);
  }
}

/*!
 * on-finished
 * Copyright(c) 2013 Jonathan Ong
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

_package$F.exports = onFinished$3;
_package$F.exports.isFinished = isFinished$1;

/**
 * Module dependencies.
 * @private
 */

var asyncHooks = tryRequireAsyncHooks();
var first = _package$E;

/**
 * Variables.
 * @private
 */

/* istanbul ignore next */
var defer$1 = typeof setImmediate === 'function'
  ? setImmediate
  : function (fn) { process.nextTick(fn.bind.apply(fn, arguments)); };

/**
 * Invoke callback when the response has finished, useful for
 * cleaning up resources afterwards.
 *
 * @param {object} msg
 * @param {function} listener
 * @return {object}
 * @public
 */

function onFinished$3 (msg, listener) {
  if (isFinished$1(msg) !== false) {
    defer$1(listener, null, msg);
    return msg
  }

  // attach the listener to the message
  attachListener(msg, wrap$1(listener));

  return msg
}

/**
 * Determine if message is already finished.
 *
 * @param {object} msg
 * @return {boolean}
 * @public
 */

function isFinished$1 (msg) {
  var socket = msg.socket;

  if (typeof msg.finished === 'boolean') {
    // OutgoingMessage
    return Boolean(msg.finished || (socket && !socket.writable))
  }

  if (typeof msg.complete === 'boolean') {
    // IncomingMessage
    return Boolean(msg.upgrade || !socket || !socket.readable || (msg.complete && !msg.readable))
  }

  // don't know
  return undefined
}

/**
 * Attach a finished listener to the message.
 *
 * @param {object} msg
 * @param {function} callback
 * @private
 */

function attachFinishedListener (msg, callback) {
  var eeMsg;
  var eeSocket;
  var finished = false;

  function onFinish (error) {
    eeMsg.cancel();
    eeSocket.cancel();

    finished = true;
    callback(error);
  }

  // finished on first message event
  eeMsg = eeSocket = first([[msg, 'end', 'finish']], onFinish);

  function onSocket (socket) {
    // remove listener
    msg.removeListener('socket', onSocket);

    if (finished) return
    if (eeMsg !== eeSocket) return

    // finished on first socket event
    eeSocket = first([[socket, 'error', 'close']], onFinish);
  }

  if (msg.socket) {
    // socket already assigned
    onSocket(msg.socket);
    return
  }

  // wait for socket to be assigned
  msg.on('socket', onSocket);

  if (msg.socket === undefined) {
    // istanbul ignore next: node.js 0.8 patch
    patchAssignSocket(msg, onSocket);
  }
}

/**
 * Attach the listener to the message.
 *
 * @param {object} msg
 * @return {function}
 * @private
 */

function attachListener (msg, listener) {
  var attached = msg.__onFinished;

  // create a private single listener with queue
  if (!attached || !attached.queue) {
    attached = msg.__onFinished = createListener(msg);
    attachFinishedListener(msg, attached);
  }

  attached.queue.push(listener);
}

/**
 * Create listener on message.
 *
 * @param {object} msg
 * @return {function}
 * @private
 */

function createListener (msg) {
  function listener (err) {
    if (msg.__onFinished === listener) msg.__onFinished = null;
    if (!listener.queue) return

    var queue = listener.queue;
    listener.queue = null;

    for (var i = 0; i < queue.length; i++) {
      queue[i](err, msg);
    }
  }

  listener.queue = [];

  return listener
}

/**
 * Patch ServerResponse.prototype.assignSocket for node.js 0.8.
 *
 * @param {ServerResponse} res
 * @param {function} callback
 * @private
 */

// istanbul ignore next: node.js 0.8 patch
function patchAssignSocket (res, callback) {
  var assignSocket = res.assignSocket;

  if (typeof assignSocket !== 'function') return

  // res.on('socket', callback) is broken in 0.8
  res.assignSocket = function _assignSocket (socket) {
    assignSocket.call(this, socket);
    callback(socket);
  };
}

/**
 * Try to require async_hooks
 * @private
 */

function tryRequireAsyncHooks () {
  try {
    return require('async_hooks')
  } catch (e) {
    return {}
  }
}

/**
 * Wrap function with async resource, if possible.
 * AsyncResource.bind static method backported.
 * @private
 */

function wrap$1 (fn) {
  var res;

  // create anonymous resource
  if (asyncHooks.AsyncResource) {
    res = new asyncHooks.AsyncResource(fn.name || 'bound-anonymous-fn');
  }

  // incompatible node.js
  if (!res || !res.runInAsyncScope) {
    return fn
  }

  // return bound function
  return res.runInAsyncScope.bind(res, fn, null)
}

var _packageExports$a = _package$F.exports;

/*!
 * body-parser
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

var read_1;
var hasRequiredRead;

function requireRead () {
	if (hasRequiredRead) return read_1;
	hasRequiredRead = 1;

	/**
	 * Module dependencies.
	 * @private
	 */

	var createError = _packageExports$b;
	var destroy = _package$I;
	var getBody = require_package$d();
	var iconv = requireLib$1();
	var onFinished = _packageExports$a;
	var unpipe = _package$H;
	var zlib = require$$3$1;

	/**
	 * Module exports.
	 */

	read_1 = read;

	/**
	 * Read a request into a buffer and parse.
	 *
	 * @param {object} req
	 * @param {object} res
	 * @param {function} next
	 * @param {function} parse
	 * @param {function} debug
	 * @param {object} options
	 * @private
	 */

	function read (req, res, next, parse, debug, options) {
	  var length;
	  var opts = options;
	  var stream;

	  // flag as parsed
	  req._body = true;

	  // read options
	  var encoding = opts.encoding !== null
	    ? opts.encoding
	    : null;
	  var verify = opts.verify;

	  try {
	    // get the content stream
	    stream = contentstream(req, debug, opts.inflate);
	    length = stream.length;
	    stream.length = undefined;
	  } catch (err) {
	    return next(err)
	  }

	  // set raw-body options
	  opts.length = length;
	  opts.encoding = verify
	    ? null
	    : encoding;

	  // assert charset is supported
	  if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {
	    return next(createError(415, 'unsupported charset "' + encoding.toUpperCase() + '"', {
	      charset: encoding.toLowerCase(),
	      type: 'charset.unsupported'
	    }))
	  }

	  // read body
	  debug('read body');
	  getBody(stream, opts, function (error, body) {
	    if (error) {
	      var _error;

	      if (error.type === 'encoding.unsupported') {
	        // echo back charset
	        _error = createError(415, 'unsupported charset "' + encoding.toUpperCase() + '"', {
	          charset: encoding.toLowerCase(),
	          type: 'charset.unsupported'
	        });
	      } else {
	        // set status code on error
	        _error = createError(400, error);
	      }

	      // unpipe from stream and destroy
	      if (stream !== req) {
	        unpipe(req);
	        destroy(stream, true);
	      }

	      // read off entire request
	      dump(req, function onfinished () {
	        next(createError(400, _error));
	      });
	      return
	    }

	    // verify
	    if (verify) {
	      try {
	        debug('verify body');
	        verify(req, res, body, encoding);
	      } catch (err) {
	        next(createError(403, err, {
	          body: body,
	          type: err.type || 'entity.verify.failed'
	        }));
	        return
	      }
	    }

	    // parse
	    var str = body;
	    try {
	      debug('parse body');
	      str = typeof body !== 'string' && encoding !== null
	        ? iconv.decode(body, encoding)
	        : body;
	      req.body = parse(str);
	    } catch (err) {
	      next(createError(400, err, {
	        body: str,
	        type: err.type || 'entity.parse.failed'
	      }));
	      return
	    }

	    next();
	  });
	}

	/**
	 * Get the content stream of the request.
	 *
	 * @param {object} req
	 * @param {function} debug
	 * @param {boolean} [inflate=true]
	 * @return {object}
	 * @api private
	 */

	function contentstream (req, debug, inflate) {
	  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase();
	  var length = req.headers['content-length'];
	  var stream;

	  debug('content-encoding "%s"', encoding);

	  if (inflate === false && encoding !== 'identity') {
	    throw createError(415, 'content encoding unsupported', {
	      encoding: encoding,
	      type: 'encoding.unsupported'
	    })
	  }

	  switch (encoding) {
	    case 'deflate':
	      stream = zlib.createInflate();
	      debug('inflate body');
	      req.pipe(stream);
	      break
	    case 'gzip':
	      stream = zlib.createGunzip();
	      debug('gunzip body');
	      req.pipe(stream);
	      break
	    case 'identity':
	      stream = req;
	      stream.length = length;
	      break
	    default:
	      throw createError(415, 'unsupported content encoding "' + encoding + '"', {
	        encoding: encoding,
	        type: 'encoding.unsupported'
	      })
	  }

	  return stream
	}

	/**
	 * Dump the contents of a request.
	 *
	 * @param {object} req
	 * @param {function} callback
	 * @api private
	 */

	function dump (req, callback) {
	  if (onFinished.isFinished(req)) {
	    callback(null);
	  } else {
	    onFinished(req, callback);
	    req.resume();
	  }
	}
	return read_1;
}

var _package$D = {exports: {}};

var _package$C = {};

/*!
 * media-typer
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * RegExp to match *( ";" parameter ) in RFC 2616 sec 3.7
 *
 * parameter     = token "=" ( token | quoted-string )
 * token         = 1*<any CHAR except CTLs or separators>
 * separators    = "(" | ")" | "<" | ">" | "@"
 *               | "," | ";" | ":" | "\" | <">
 *               | "/" | "[" | "]" | "?" | "="
 *               | "{" | "}" | SP | HT
 * quoted-string = ( <"> *(qdtext | quoted-pair ) <"> )
 * qdtext        = <any TEXT except <">>
 * quoted-pair   = "\" CHAR
 * CHAR          = <any US-ASCII character (octets 0 - 127)>
 * TEXT          = <any OCTET except CTLs, but including LWS>
 * LWS           = [CRLF] 1*( SP | HT )
 * CRLF          = CR LF
 * CR            = <US-ASCII CR, carriage return (13)>
 * LF            = <US-ASCII LF, linefeed (10)>
 * SP            = <US-ASCII SP, space (32)>
 * SHT           = <US-ASCII HT, horizontal-tab (9)>
 * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>
 * OCTET         = <any 8-bit sequence of data>
 */
var paramRegExp = /; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u0020-\u007e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g;
var textRegExp = /^[\u0020-\u007e\u0080-\u00ff]+$/;
var tokenRegExp = /^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/;

/**
 * RegExp to match quoted-pair in RFC 2616
 *
 * quoted-pair = "\" CHAR
 * CHAR        = <any US-ASCII character (octets 0 - 127)>
 */
var qescRegExp = /\\([\u0000-\u007f])/g;

/**
 * RegExp to match chars that must be quoted-pair in RFC 2616
 */
var quoteRegExp = /([\\"])/g;

/**
 * RegExp to match type in RFC 6838
 *
 * type-name = restricted-name
 * subtype-name = restricted-name
 * restricted-name = restricted-name-first *126restricted-name-chars
 * restricted-name-first  = ALPHA / DIGIT
 * restricted-name-chars  = ALPHA / DIGIT / "!" / "#" /
 *                          "$" / "&" / "-" / "^" / "_"
 * restricted-name-chars =/ "." ; Characters before first dot always
 *                              ; specify a facet name
 * restricted-name-chars =/ "+" ; Characters after last plus always
 *                              ; specify a structured syntax suffix
 * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z
 * DIGIT =  %x30-39             ; 0-9
 */
var subtypeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/;
var typeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/;
var typeRegExp = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;

/**
 * Module exports.
 */

_package$C.format = format$1;
_package$C.parse = parse$8;

/**
 * Format object to media type.
 *
 * @param {object} obj
 * @return {string}
 * @api public
 */

function format$1(obj) {
  if (!obj || typeof obj !== 'object') {
    throw new TypeError('argument obj is required')
  }

  var parameters = obj.parameters;
  var subtype = obj.subtype;
  var suffix = obj.suffix;
  var type = obj.type;

  if (!type || !typeNameRegExp.test(type)) {
    throw new TypeError('invalid type')
  }

  if (!subtype || !subtypeNameRegExp.test(subtype)) {
    throw new TypeError('invalid subtype')
  }

  // format as type/subtype
  var string = type + '/' + subtype;

  // append +suffix
  if (suffix) {
    if (!typeNameRegExp.test(suffix)) {
      throw new TypeError('invalid suffix')
    }

    string += '+' + suffix;
  }

  // append parameters
  if (parameters && typeof parameters === 'object') {
    var param;
    var params = Object.keys(parameters).sort();

    for (var i = 0; i < params.length; i++) {
      param = params[i];

      if (!tokenRegExp.test(param)) {
        throw new TypeError('invalid parameter name')
      }

      string += '; ' + param + '=' + qstring$1(parameters[param]);
    }
  }

  return string
}

/**
 * Parse media type to object.
 *
 * @param {string|object} string
 * @return {Object}
 * @api public
 */

function parse$8(string) {
  if (!string) {
    throw new TypeError('argument string is required')
  }

  // support req/res-like objects as argument
  if (typeof string === 'object') {
    string = getcontenttype(string);
  }

  if (typeof string !== 'string') {
    throw new TypeError('argument string is required to be a string')
  }

  var index = string.indexOf(';');
  var type = index !== -1
    ? string.substr(0, index)
    : string;

  var key;
  var match;
  var obj = splitType(type);
  var params = {};
  var value;

  paramRegExp.lastIndex = index;

  while (match = paramRegExp.exec(string)) {
    if (match.index !== index) {
      throw new TypeError('invalid parameter format')
    }

    index += match[0].length;
    key = match[1].toLowerCase();
    value = match[2];

    if (value[0] === '"') {
      // remove quotes and escapes
      value = value
        .substr(1, value.length - 2)
        .replace(qescRegExp, '$1');
    }

    params[key] = value;
  }

  if (index !== -1 && index !== string.length) {
    throw new TypeError('invalid parameter format')
  }

  obj.parameters = params;

  return obj
}

/**
 * Get content-type from req/res objects.
 *
 * @param {object}
 * @return {Object}
 * @api private
 */

function getcontenttype(obj) {
  if (typeof obj.getHeader === 'function') {
    // res-like
    return obj.getHeader('content-type')
  }

  if (typeof obj.headers === 'object') {
    // req-like
    return obj.headers && obj.headers['content-type']
  }
}

/**
 * Quote a string if necessary.
 *
 * @param {string} val
 * @return {string}
 * @api private
 */

function qstring$1(val) {
  var str = String(val);

  // no need to quote tokens
  if (tokenRegExp.test(str)) {
    return str
  }

  if (str.length > 0 && !textRegExp.test(str)) {
    throw new TypeError('invalid parameter value')
  }

  return '"' + str.replace(quoteRegExp, '\\$1') + '"'
}

/**
 * Simply "type/subtype+siffx" into parts.
 *
 * @param {string} string
 * @return {Object}
 * @api private
 */

function splitType(string) {
  var match = typeRegExp.exec(string.toLowerCase());

  if (!match) {
    throw new TypeError('invalid media type')
  }

  var type = match[1];
  var subtype = match[2];
  var suffix;

  // suffix after last +
  var index = subtype.lastIndexOf('+');
  if (index !== -1) {
    suffix = subtype.substr(index + 1);
    subtype = subtype.substr(0, index);
  }

  var obj = {
    type: type,
    subtype: subtype,
    suffix: suffix
  };

  return obj
}

var _package$B = {};

var require$$0 = {
	"application/1d-interleaved-parityfec": {
	source: "iana"
},
	"application/3gpdash-qoe-report+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/3gpp-ims+xml": {
	source: "iana",
	compressible: true
},
	"application/3gpphal+json": {
	source: "iana",
	compressible: true
},
	"application/3gpphalforms+json": {
	source: "iana",
	compressible: true
},
	"application/a2l": {
	source: "iana"
},
	"application/ace+cbor": {
	source: "iana"
},
	"application/activemessage": {
	source: "iana"
},
	"application/activity+json": {
	source: "iana",
	compressible: true
},
	"application/alto-costmap+json": {
	source: "iana",
	compressible: true
},
	"application/alto-costmapfilter+json": {
	source: "iana",
	compressible: true
},
	"application/alto-directory+json": {
	source: "iana",
	compressible: true
},
	"application/alto-endpointcost+json": {
	source: "iana",
	compressible: true
},
	"application/alto-endpointcostparams+json": {
	source: "iana",
	compressible: true
},
	"application/alto-endpointprop+json": {
	source: "iana",
	compressible: true
},
	"application/alto-endpointpropparams+json": {
	source: "iana",
	compressible: true
},
	"application/alto-error+json": {
	source: "iana",
	compressible: true
},
	"application/alto-networkmap+json": {
	source: "iana",
	compressible: true
},
	"application/alto-networkmapfilter+json": {
	source: "iana",
	compressible: true
},
	"application/alto-updatestreamcontrol+json": {
	source: "iana",
	compressible: true
},
	"application/alto-updatestreamparams+json": {
	source: "iana",
	compressible: true
},
	"application/aml": {
	source: "iana"
},
	"application/andrew-inset": {
	source: "iana",
	extensions: [
		"ez"
	]
},
	"application/applefile": {
	source: "iana"
},
	"application/applixware": {
	source: "apache",
	extensions: [
		"aw"
	]
},
	"application/at+jwt": {
	source: "iana"
},
	"application/atf": {
	source: "iana"
},
	"application/atfx": {
	source: "iana"
},
	"application/atom+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"atom"
	]
},
	"application/atomcat+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"atomcat"
	]
},
	"application/atomdeleted+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"atomdeleted"
	]
},
	"application/atomicmail": {
	source: "iana"
},
	"application/atomsvc+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"atomsvc"
	]
},
	"application/atsc-dwd+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"dwd"
	]
},
	"application/atsc-dynamic-event-message": {
	source: "iana"
},
	"application/atsc-held+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"held"
	]
},
	"application/atsc-rdt+json": {
	source: "iana",
	compressible: true
},
	"application/atsc-rsat+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rsat"
	]
},
	"application/atxml": {
	source: "iana"
},
	"application/auth-policy+xml": {
	source: "iana",
	compressible: true
},
	"application/bacnet-xdd+zip": {
	source: "iana",
	compressible: false
},
	"application/batch-smtp": {
	source: "iana"
},
	"application/bdoc": {
	compressible: false,
	extensions: [
		"bdoc"
	]
},
	"application/beep+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/calendar+json": {
	source: "iana",
	compressible: true
},
	"application/calendar+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xcs"
	]
},
	"application/call-completion": {
	source: "iana"
},
	"application/cals-1840": {
	source: "iana"
},
	"application/captive+json": {
	source: "iana",
	compressible: true
},
	"application/cbor": {
	source: "iana"
},
	"application/cbor-seq": {
	source: "iana"
},
	"application/cccex": {
	source: "iana"
},
	"application/ccmp+xml": {
	source: "iana",
	compressible: true
},
	"application/ccxml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"ccxml"
	]
},
	"application/cdfx+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"cdfx"
	]
},
	"application/cdmi-capability": {
	source: "iana",
	extensions: [
		"cdmia"
	]
},
	"application/cdmi-container": {
	source: "iana",
	extensions: [
		"cdmic"
	]
},
	"application/cdmi-domain": {
	source: "iana",
	extensions: [
		"cdmid"
	]
},
	"application/cdmi-object": {
	source: "iana",
	extensions: [
		"cdmio"
	]
},
	"application/cdmi-queue": {
	source: "iana",
	extensions: [
		"cdmiq"
	]
},
	"application/cdni": {
	source: "iana"
},
	"application/cea": {
	source: "iana"
},
	"application/cea-2018+xml": {
	source: "iana",
	compressible: true
},
	"application/cellml+xml": {
	source: "iana",
	compressible: true
},
	"application/cfw": {
	source: "iana"
},
	"application/city+json": {
	source: "iana",
	compressible: true
},
	"application/clr": {
	source: "iana"
},
	"application/clue+xml": {
	source: "iana",
	compressible: true
},
	"application/clue_info+xml": {
	source: "iana",
	compressible: true
},
	"application/cms": {
	source: "iana"
},
	"application/cnrp+xml": {
	source: "iana",
	compressible: true
},
	"application/coap-group+json": {
	source: "iana",
	compressible: true
},
	"application/coap-payload": {
	source: "iana"
},
	"application/commonground": {
	source: "iana"
},
	"application/conference-info+xml": {
	source: "iana",
	compressible: true
},
	"application/cose": {
	source: "iana"
},
	"application/cose-key": {
	source: "iana"
},
	"application/cose-key-set": {
	source: "iana"
},
	"application/cpl+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"cpl"
	]
},
	"application/csrattrs": {
	source: "iana"
},
	"application/csta+xml": {
	source: "iana",
	compressible: true
},
	"application/cstadata+xml": {
	source: "iana",
	compressible: true
},
	"application/csvm+json": {
	source: "iana",
	compressible: true
},
	"application/cu-seeme": {
	source: "apache",
	extensions: [
		"cu"
	]
},
	"application/cwt": {
	source: "iana"
},
	"application/cybercash": {
	source: "iana"
},
	"application/dart": {
	compressible: true
},
	"application/dash+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mpd"
	]
},
	"application/dash-patch+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mpp"
	]
},
	"application/dashdelta": {
	source: "iana"
},
	"application/davmount+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"davmount"
	]
},
	"application/dca-rft": {
	source: "iana"
},
	"application/dcd": {
	source: "iana"
},
	"application/dec-dx": {
	source: "iana"
},
	"application/dialog-info+xml": {
	source: "iana",
	compressible: true
},
	"application/dicom": {
	source: "iana"
},
	"application/dicom+json": {
	source: "iana",
	compressible: true
},
	"application/dicom+xml": {
	source: "iana",
	compressible: true
},
	"application/dii": {
	source: "iana"
},
	"application/dit": {
	source: "iana"
},
	"application/dns": {
	source: "iana"
},
	"application/dns+json": {
	source: "iana",
	compressible: true
},
	"application/dns-message": {
	source: "iana"
},
	"application/docbook+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"dbk"
	]
},
	"application/dots+cbor": {
	source: "iana"
},
	"application/dskpp+xml": {
	source: "iana",
	compressible: true
},
	"application/dssc+der": {
	source: "iana",
	extensions: [
		"dssc"
	]
},
	"application/dssc+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xdssc"
	]
},
	"application/dvcs": {
	source: "iana"
},
	"application/ecmascript": {
	source: "iana",
	compressible: true,
	extensions: [
		"es",
		"ecma"
	]
},
	"application/edi-consent": {
	source: "iana"
},
	"application/edi-x12": {
	source: "iana",
	compressible: false
},
	"application/edifact": {
	source: "iana",
	compressible: false
},
	"application/efi": {
	source: "iana"
},
	"application/elm+json": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/elm+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.cap+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/emergencycalldata.comment+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.control+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.deviceinfo+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.ecall.msd": {
	source: "iana"
},
	"application/emergencycalldata.providerinfo+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.serviceinfo+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.subscriberinfo+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.veds+xml": {
	source: "iana",
	compressible: true
},
	"application/emma+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"emma"
	]
},
	"application/emotionml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"emotionml"
	]
},
	"application/encaprtp": {
	source: "iana"
},
	"application/epp+xml": {
	source: "iana",
	compressible: true
},
	"application/epub+zip": {
	source: "iana",
	compressible: false,
	extensions: [
		"epub"
	]
},
	"application/eshop": {
	source: "iana"
},
	"application/exi": {
	source: "iana",
	extensions: [
		"exi"
	]
},
	"application/expect-ct-report+json": {
	source: "iana",
	compressible: true
},
	"application/express": {
	source: "iana",
	extensions: [
		"exp"
	]
},
	"application/fastinfoset": {
	source: "iana"
},
	"application/fastsoap": {
	source: "iana"
},
	"application/fdt+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"fdt"
	]
},
	"application/fhir+json": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/fhir+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/fido.trusted-apps+json": {
	compressible: true
},
	"application/fits": {
	source: "iana"
},
	"application/flexfec": {
	source: "iana"
},
	"application/font-sfnt": {
	source: "iana"
},
	"application/font-tdpfr": {
	source: "iana",
	extensions: [
		"pfr"
	]
},
	"application/font-woff": {
	source: "iana",
	compressible: false
},
	"application/framework-attributes+xml": {
	source: "iana",
	compressible: true
},
	"application/geo+json": {
	source: "iana",
	compressible: true,
	extensions: [
		"geojson"
	]
},
	"application/geo+json-seq": {
	source: "iana"
},
	"application/geopackage+sqlite3": {
	source: "iana"
},
	"application/geoxacml+xml": {
	source: "iana",
	compressible: true
},
	"application/gltf-buffer": {
	source: "iana"
},
	"application/gml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"gml"
	]
},
	"application/gpx+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"gpx"
	]
},
	"application/gxf": {
	source: "apache",
	extensions: [
		"gxf"
	]
},
	"application/gzip": {
	source: "iana",
	compressible: false,
	extensions: [
		"gz"
	]
},
	"application/h224": {
	source: "iana"
},
	"application/held+xml": {
	source: "iana",
	compressible: true
},
	"application/hjson": {
	extensions: [
		"hjson"
	]
},
	"application/http": {
	source: "iana"
},
	"application/hyperstudio": {
	source: "iana",
	extensions: [
		"stk"
	]
},
	"application/ibe-key-request+xml": {
	source: "iana",
	compressible: true
},
	"application/ibe-pkg-reply+xml": {
	source: "iana",
	compressible: true
},
	"application/ibe-pp-data": {
	source: "iana"
},
	"application/iges": {
	source: "iana"
},
	"application/im-iscomposing+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/index": {
	source: "iana"
},
	"application/index.cmd": {
	source: "iana"
},
	"application/index.obj": {
	source: "iana"
},
	"application/index.response": {
	source: "iana"
},
	"application/index.vnd": {
	source: "iana"
},
	"application/inkml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"ink",
		"inkml"
	]
},
	"application/iotp": {
	source: "iana"
},
	"application/ipfix": {
	source: "iana",
	extensions: [
		"ipfix"
	]
},
	"application/ipp": {
	source: "iana"
},
	"application/isup": {
	source: "iana"
},
	"application/its+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"its"
	]
},
	"application/java-archive": {
	source: "apache",
	compressible: false,
	extensions: [
		"jar",
		"war",
		"ear"
	]
},
	"application/java-serialized-object": {
	source: "apache",
	compressible: false,
	extensions: [
		"ser"
	]
},
	"application/java-vm": {
	source: "apache",
	compressible: false,
	extensions: [
		"class"
	]
},
	"application/javascript": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"js",
		"mjs"
	]
},
	"application/jf2feed+json": {
	source: "iana",
	compressible: true
},
	"application/jose": {
	source: "iana"
},
	"application/jose+json": {
	source: "iana",
	compressible: true
},
	"application/jrd+json": {
	source: "iana",
	compressible: true
},
	"application/jscalendar+json": {
	source: "iana",
	compressible: true
},
	"application/json": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"json",
		"map"
	]
},
	"application/json-patch+json": {
	source: "iana",
	compressible: true
},
	"application/json-seq": {
	source: "iana"
},
	"application/json5": {
	extensions: [
		"json5"
	]
},
	"application/jsonml+json": {
	source: "apache",
	compressible: true,
	extensions: [
		"jsonml"
	]
},
	"application/jwk+json": {
	source: "iana",
	compressible: true
},
	"application/jwk-set+json": {
	source: "iana",
	compressible: true
},
	"application/jwt": {
	source: "iana"
},
	"application/kpml-request+xml": {
	source: "iana",
	compressible: true
},
	"application/kpml-response+xml": {
	source: "iana",
	compressible: true
},
	"application/ld+json": {
	source: "iana",
	compressible: true,
	extensions: [
		"jsonld"
	]
},
	"application/lgr+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"lgr"
	]
},
	"application/link-format": {
	source: "iana"
},
	"application/load-control+xml": {
	source: "iana",
	compressible: true
},
	"application/lost+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"lostxml"
	]
},
	"application/lostsync+xml": {
	source: "iana",
	compressible: true
},
	"application/lpf+zip": {
	source: "iana",
	compressible: false
},
	"application/lxf": {
	source: "iana"
},
	"application/mac-binhex40": {
	source: "iana",
	extensions: [
		"hqx"
	]
},
	"application/mac-compactpro": {
	source: "apache",
	extensions: [
		"cpt"
	]
},
	"application/macwriteii": {
	source: "iana"
},
	"application/mads+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mads"
	]
},
	"application/manifest+json": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"webmanifest"
	]
},
	"application/marc": {
	source: "iana",
	extensions: [
		"mrc"
	]
},
	"application/marcxml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mrcx"
	]
},
	"application/mathematica": {
	source: "iana",
	extensions: [
		"ma",
		"nb",
		"mb"
	]
},
	"application/mathml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mathml"
	]
},
	"application/mathml-content+xml": {
	source: "iana",
	compressible: true
},
	"application/mathml-presentation+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-associated-procedure-description+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-deregister+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-envelope+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-msk+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-msk-response+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-protection-description+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-reception-report+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-register+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-register-response+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-schedule+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-user-service-description+xml": {
	source: "iana",
	compressible: true
},
	"application/mbox": {
	source: "iana",
	extensions: [
		"mbox"
	]
},
	"application/media-policy-dataset+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mpf"
	]
},
	"application/media_control+xml": {
	source: "iana",
	compressible: true
},
	"application/mediaservercontrol+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mscml"
	]
},
	"application/merge-patch+json": {
	source: "iana",
	compressible: true
},
	"application/metalink+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"metalink"
	]
},
	"application/metalink4+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"meta4"
	]
},
	"application/mets+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mets"
	]
},
	"application/mf4": {
	source: "iana"
},
	"application/mikey": {
	source: "iana"
},
	"application/mipc": {
	source: "iana"
},
	"application/missing-blocks+cbor-seq": {
	source: "iana"
},
	"application/mmt-aei+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"maei"
	]
},
	"application/mmt-usd+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"musd"
	]
},
	"application/mods+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mods"
	]
},
	"application/moss-keys": {
	source: "iana"
},
	"application/moss-signature": {
	source: "iana"
},
	"application/mosskey-data": {
	source: "iana"
},
	"application/mosskey-request": {
	source: "iana"
},
	"application/mp21": {
	source: "iana",
	extensions: [
		"m21",
		"mp21"
	]
},
	"application/mp4": {
	source: "iana",
	extensions: [
		"mp4s",
		"m4p"
	]
},
	"application/mpeg4-generic": {
	source: "iana"
},
	"application/mpeg4-iod": {
	source: "iana"
},
	"application/mpeg4-iod-xmt": {
	source: "iana"
},
	"application/mrb-consumer+xml": {
	source: "iana",
	compressible: true
},
	"application/mrb-publish+xml": {
	source: "iana",
	compressible: true
},
	"application/msc-ivr+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/msc-mixer+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/msword": {
	source: "iana",
	compressible: false,
	extensions: [
		"doc",
		"dot"
	]
},
	"application/mud+json": {
	source: "iana",
	compressible: true
},
	"application/multipart-core": {
	source: "iana"
},
	"application/mxf": {
	source: "iana",
	extensions: [
		"mxf"
	]
},
	"application/n-quads": {
	source: "iana",
	extensions: [
		"nq"
	]
},
	"application/n-triples": {
	source: "iana",
	extensions: [
		"nt"
	]
},
	"application/nasdata": {
	source: "iana"
},
	"application/news-checkgroups": {
	source: "iana",
	charset: "US-ASCII"
},
	"application/news-groupinfo": {
	source: "iana",
	charset: "US-ASCII"
},
	"application/news-transmission": {
	source: "iana"
},
	"application/nlsml+xml": {
	source: "iana",
	compressible: true
},
	"application/node": {
	source: "iana",
	extensions: [
		"cjs"
	]
},
	"application/nss": {
	source: "iana"
},
	"application/oauth-authz-req+jwt": {
	source: "iana"
},
	"application/oblivious-dns-message": {
	source: "iana"
},
	"application/ocsp-request": {
	source: "iana"
},
	"application/ocsp-response": {
	source: "iana"
},
	"application/octet-stream": {
	source: "iana",
	compressible: false,
	extensions: [
		"bin",
		"dms",
		"lrf",
		"mar",
		"so",
		"dist",
		"distz",
		"pkg",
		"bpk",
		"dump",
		"elc",
		"deploy",
		"exe",
		"dll",
		"deb",
		"dmg",
		"iso",
		"img",
		"msi",
		"msp",
		"msm",
		"buffer"
	]
},
	"application/oda": {
	source: "iana",
	extensions: [
		"oda"
	]
},
	"application/odm+xml": {
	source: "iana",
	compressible: true
},
	"application/odx": {
	source: "iana"
},
	"application/oebps-package+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"opf"
	]
},
	"application/ogg": {
	source: "iana",
	compressible: false,
	extensions: [
		"ogx"
	]
},
	"application/omdoc+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"omdoc"
	]
},
	"application/onenote": {
	source: "apache",
	extensions: [
		"onetoc",
		"onetoc2",
		"onetmp",
		"onepkg"
	]
},
	"application/opc-nodeset+xml": {
	source: "iana",
	compressible: true
},
	"application/oscore": {
	source: "iana"
},
	"application/oxps": {
	source: "iana",
	extensions: [
		"oxps"
	]
},
	"application/p21": {
	source: "iana"
},
	"application/p21+zip": {
	source: "iana",
	compressible: false
},
	"application/p2p-overlay+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"relo"
	]
},
	"application/parityfec": {
	source: "iana"
},
	"application/passport": {
	source: "iana"
},
	"application/patch-ops-error+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xer"
	]
},
	"application/pdf": {
	source: "iana",
	compressible: false,
	extensions: [
		"pdf"
	]
},
	"application/pdx": {
	source: "iana"
},
	"application/pem-certificate-chain": {
	source: "iana"
},
	"application/pgp-encrypted": {
	source: "iana",
	compressible: false,
	extensions: [
		"pgp"
	]
},
	"application/pgp-keys": {
	source: "iana",
	extensions: [
		"asc"
	]
},
	"application/pgp-signature": {
	source: "iana",
	extensions: [
		"asc",
		"sig"
	]
},
	"application/pics-rules": {
	source: "apache",
	extensions: [
		"prf"
	]
},
	"application/pidf+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/pidf-diff+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/pkcs10": {
	source: "iana",
	extensions: [
		"p10"
	]
},
	"application/pkcs12": {
	source: "iana"
},
	"application/pkcs7-mime": {
	source: "iana",
	extensions: [
		"p7m",
		"p7c"
	]
},
	"application/pkcs7-signature": {
	source: "iana",
	extensions: [
		"p7s"
	]
},
	"application/pkcs8": {
	source: "iana",
	extensions: [
		"p8"
	]
},
	"application/pkcs8-encrypted": {
	source: "iana"
},
	"application/pkix-attr-cert": {
	source: "iana",
	extensions: [
		"ac"
	]
},
	"application/pkix-cert": {
	source: "iana",
	extensions: [
		"cer"
	]
},
	"application/pkix-crl": {
	source: "iana",
	extensions: [
		"crl"
	]
},
	"application/pkix-pkipath": {
	source: "iana",
	extensions: [
		"pkipath"
	]
},
	"application/pkixcmp": {
	source: "iana",
	extensions: [
		"pki"
	]
},
	"application/pls+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"pls"
	]
},
	"application/poc-settings+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/postscript": {
	source: "iana",
	compressible: true,
	extensions: [
		"ai",
		"eps",
		"ps"
	]
},
	"application/ppsp-tracker+json": {
	source: "iana",
	compressible: true
},
	"application/problem+json": {
	source: "iana",
	compressible: true
},
	"application/problem+xml": {
	source: "iana",
	compressible: true
},
	"application/provenance+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"provx"
	]
},
	"application/prs.alvestrand.titrax-sheet": {
	source: "iana"
},
	"application/prs.cww": {
	source: "iana",
	extensions: [
		"cww"
	]
},
	"application/prs.cyn": {
	source: "iana",
	charset: "7-BIT"
},
	"application/prs.hpub+zip": {
	source: "iana",
	compressible: false
},
	"application/prs.nprend": {
	source: "iana"
},
	"application/prs.plucker": {
	source: "iana"
},
	"application/prs.rdf-xml-crypt": {
	source: "iana"
},
	"application/prs.xsf+xml": {
	source: "iana",
	compressible: true
},
	"application/pskc+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"pskcxml"
	]
},
	"application/pvd+json": {
	source: "iana",
	compressible: true
},
	"application/qsig": {
	source: "iana"
},
	"application/raml+yaml": {
	compressible: true,
	extensions: [
		"raml"
	]
},
	"application/raptorfec": {
	source: "iana"
},
	"application/rdap+json": {
	source: "iana",
	compressible: true
},
	"application/rdf+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rdf",
		"owl"
	]
},
	"application/reginfo+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rif"
	]
},
	"application/relax-ng-compact-syntax": {
	source: "iana",
	extensions: [
		"rnc"
	]
},
	"application/remote-printing": {
	source: "iana"
},
	"application/reputon+json": {
	source: "iana",
	compressible: true
},
	"application/resource-lists+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rl"
	]
},
	"application/resource-lists-diff+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rld"
	]
},
	"application/rfc+xml": {
	source: "iana",
	compressible: true
},
	"application/riscos": {
	source: "iana"
},
	"application/rlmi+xml": {
	source: "iana",
	compressible: true
},
	"application/rls-services+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rs"
	]
},
	"application/route-apd+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rapd"
	]
},
	"application/route-s-tsid+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"sls"
	]
},
	"application/route-usd+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rusd"
	]
},
	"application/rpki-ghostbusters": {
	source: "iana",
	extensions: [
		"gbr"
	]
},
	"application/rpki-manifest": {
	source: "iana",
	extensions: [
		"mft"
	]
},
	"application/rpki-publication": {
	source: "iana"
},
	"application/rpki-roa": {
	source: "iana",
	extensions: [
		"roa"
	]
},
	"application/rpki-updown": {
	source: "iana"
},
	"application/rsd+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"rsd"
	]
},
	"application/rss+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"rss"
	]
},
	"application/rtf": {
	source: "iana",
	compressible: true,
	extensions: [
		"rtf"
	]
},
	"application/rtploopback": {
	source: "iana"
},
	"application/rtx": {
	source: "iana"
},
	"application/samlassertion+xml": {
	source: "iana",
	compressible: true
},
	"application/samlmetadata+xml": {
	source: "iana",
	compressible: true
},
	"application/sarif+json": {
	source: "iana",
	compressible: true
},
	"application/sarif-external-properties+json": {
	source: "iana",
	compressible: true
},
	"application/sbe": {
	source: "iana"
},
	"application/sbml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"sbml"
	]
},
	"application/scaip+xml": {
	source: "iana",
	compressible: true
},
	"application/scim+json": {
	source: "iana",
	compressible: true
},
	"application/scvp-cv-request": {
	source: "iana",
	extensions: [
		"scq"
	]
},
	"application/scvp-cv-response": {
	source: "iana",
	extensions: [
		"scs"
	]
},
	"application/scvp-vp-request": {
	source: "iana",
	extensions: [
		"spq"
	]
},
	"application/scvp-vp-response": {
	source: "iana",
	extensions: [
		"spp"
	]
},
	"application/sdp": {
	source: "iana",
	extensions: [
		"sdp"
	]
},
	"application/secevent+jwt": {
	source: "iana"
},
	"application/senml+cbor": {
	source: "iana"
},
	"application/senml+json": {
	source: "iana",
	compressible: true
},
	"application/senml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"senmlx"
	]
},
	"application/senml-etch+cbor": {
	source: "iana"
},
	"application/senml-etch+json": {
	source: "iana",
	compressible: true
},
	"application/senml-exi": {
	source: "iana"
},
	"application/sensml+cbor": {
	source: "iana"
},
	"application/sensml+json": {
	source: "iana",
	compressible: true
},
	"application/sensml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"sensmlx"
	]
},
	"application/sensml-exi": {
	source: "iana"
},
	"application/sep+xml": {
	source: "iana",
	compressible: true
},
	"application/sep-exi": {
	source: "iana"
},
	"application/session-info": {
	source: "iana"
},
	"application/set-payment": {
	source: "iana"
},
	"application/set-payment-initiation": {
	source: "iana",
	extensions: [
		"setpay"
	]
},
	"application/set-registration": {
	source: "iana"
},
	"application/set-registration-initiation": {
	source: "iana",
	extensions: [
		"setreg"
	]
},
	"application/sgml": {
	source: "iana"
},
	"application/sgml-open-catalog": {
	source: "iana"
},
	"application/shf+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"shf"
	]
},
	"application/sieve": {
	source: "iana",
	extensions: [
		"siv",
		"sieve"
	]
},
	"application/simple-filter+xml": {
	source: "iana",
	compressible: true
},
	"application/simple-message-summary": {
	source: "iana"
},
	"application/simplesymbolcontainer": {
	source: "iana"
},
	"application/sipc": {
	source: "iana"
},
	"application/slate": {
	source: "iana"
},
	"application/smil": {
	source: "iana"
},
	"application/smil+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"smi",
		"smil"
	]
},
	"application/smpte336m": {
	source: "iana"
},
	"application/soap+fastinfoset": {
	source: "iana"
},
	"application/soap+xml": {
	source: "iana",
	compressible: true
},
	"application/sparql-query": {
	source: "iana",
	extensions: [
		"rq"
	]
},
	"application/sparql-results+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"srx"
	]
},
	"application/spdx+json": {
	source: "iana",
	compressible: true
},
	"application/spirits-event+xml": {
	source: "iana",
	compressible: true
},
	"application/sql": {
	source: "iana"
},
	"application/srgs": {
	source: "iana",
	extensions: [
		"gram"
	]
},
	"application/srgs+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"grxml"
	]
},
	"application/sru+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"sru"
	]
},
	"application/ssdl+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"ssdl"
	]
},
	"application/ssml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"ssml"
	]
},
	"application/stix+json": {
	source: "iana",
	compressible: true
},
	"application/swid+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"swidtag"
	]
},
	"application/tamp-apex-update": {
	source: "iana"
},
	"application/tamp-apex-update-confirm": {
	source: "iana"
},
	"application/tamp-community-update": {
	source: "iana"
},
	"application/tamp-community-update-confirm": {
	source: "iana"
},
	"application/tamp-error": {
	source: "iana"
},
	"application/tamp-sequence-adjust": {
	source: "iana"
},
	"application/tamp-sequence-adjust-confirm": {
	source: "iana"
},
	"application/tamp-status-query": {
	source: "iana"
},
	"application/tamp-status-response": {
	source: "iana"
},
	"application/tamp-update": {
	source: "iana"
},
	"application/tamp-update-confirm": {
	source: "iana"
},
	"application/tar": {
	compressible: true
},
	"application/taxii+json": {
	source: "iana",
	compressible: true
},
	"application/td+json": {
	source: "iana",
	compressible: true
},
	"application/tei+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"tei",
		"teicorpus"
	]
},
	"application/tetra_isi": {
	source: "iana"
},
	"application/thraud+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"tfi"
	]
},
	"application/timestamp-query": {
	source: "iana"
},
	"application/timestamp-reply": {
	source: "iana"
},
	"application/timestamped-data": {
	source: "iana",
	extensions: [
		"tsd"
	]
},
	"application/tlsrpt+gzip": {
	source: "iana"
},
	"application/tlsrpt+json": {
	source: "iana",
	compressible: true
},
	"application/tnauthlist": {
	source: "iana"
},
	"application/token-introspection+jwt": {
	source: "iana"
},
	"application/toml": {
	compressible: true,
	extensions: [
		"toml"
	]
},
	"application/trickle-ice-sdpfrag": {
	source: "iana"
},
	"application/trig": {
	source: "iana",
	extensions: [
		"trig"
	]
},
	"application/ttml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"ttml"
	]
},
	"application/tve-trigger": {
	source: "iana"
},
	"application/tzif": {
	source: "iana"
},
	"application/tzif-leap": {
	source: "iana"
},
	"application/ubjson": {
	compressible: false,
	extensions: [
		"ubj"
	]
},
	"application/ulpfec": {
	source: "iana"
},
	"application/urc-grpsheet+xml": {
	source: "iana",
	compressible: true
},
	"application/urc-ressheet+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rsheet"
	]
},
	"application/urc-targetdesc+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"td"
	]
},
	"application/urc-uisocketdesc+xml": {
	source: "iana",
	compressible: true
},
	"application/vcard+json": {
	source: "iana",
	compressible: true
},
	"application/vcard+xml": {
	source: "iana",
	compressible: true
},
	"application/vemmi": {
	source: "iana"
},
	"application/vividence.scriptfile": {
	source: "apache"
},
	"application/vnd.1000minds.decision-model+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"1km"
	]
},
	"application/vnd.3gpp-prose+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp-prose-pc3ch+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp-v2x-local-service-information": {
	source: "iana"
},
	"application/vnd.3gpp.5gnas": {
	source: "iana"
},
	"application/vnd.3gpp.access-transfer-events+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.bsf+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.gmop+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.gtpc": {
	source: "iana"
},
	"application/vnd.3gpp.interworking-data": {
	source: "iana"
},
	"application/vnd.3gpp.lpp": {
	source: "iana"
},
	"application/vnd.3gpp.mc-signalling-ear": {
	source: "iana"
},
	"application/vnd.3gpp.mcdata-affiliation-command+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcdata-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcdata-payload": {
	source: "iana"
},
	"application/vnd.3gpp.mcdata-service-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcdata-signalling": {
	source: "iana"
},
	"application/vnd.3gpp.mcdata-ue-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcdata-user-profile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-affiliation-command+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-floor-request+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-location-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-service-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-signed+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-ue-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-ue-init-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-user-profile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-affiliation-command+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-affiliation-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-location-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-service-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-transmission-request+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-ue-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-user-profile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mid-call+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.ngap": {
	source: "iana"
},
	"application/vnd.3gpp.pfcp": {
	source: "iana"
},
	"application/vnd.3gpp.pic-bw-large": {
	source: "iana",
	extensions: [
		"plb"
	]
},
	"application/vnd.3gpp.pic-bw-small": {
	source: "iana",
	extensions: [
		"psb"
	]
},
	"application/vnd.3gpp.pic-bw-var": {
	source: "iana",
	extensions: [
		"pvb"
	]
},
	"application/vnd.3gpp.s1ap": {
	source: "iana"
},
	"application/vnd.3gpp.sms": {
	source: "iana"
},
	"application/vnd.3gpp.sms+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.srvcc-ext+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.srvcc-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.state-and-event-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.ussd+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp2.bcmcsinfo+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp2.sms": {
	source: "iana"
},
	"application/vnd.3gpp2.tcap": {
	source: "iana",
	extensions: [
		"tcap"
	]
},
	"application/vnd.3lightssoftware.imagescal": {
	source: "iana"
},
	"application/vnd.3m.post-it-notes": {
	source: "iana",
	extensions: [
		"pwn"
	]
},
	"application/vnd.accpac.simply.aso": {
	source: "iana",
	extensions: [
		"aso"
	]
},
	"application/vnd.accpac.simply.imp": {
	source: "iana",
	extensions: [
		"imp"
	]
},
	"application/vnd.acucobol": {
	source: "iana",
	extensions: [
		"acu"
	]
},
	"application/vnd.acucorp": {
	source: "iana",
	extensions: [
		"atc",
		"acutc"
	]
},
	"application/vnd.adobe.air-application-installer-package+zip": {
	source: "apache",
	compressible: false,
	extensions: [
		"air"
	]
},
	"application/vnd.adobe.flash.movie": {
	source: "iana"
},
	"application/vnd.adobe.formscentral.fcdt": {
	source: "iana",
	extensions: [
		"fcdt"
	]
},
	"application/vnd.adobe.fxp": {
	source: "iana",
	extensions: [
		"fxp",
		"fxpl"
	]
},
	"application/vnd.adobe.partial-upload": {
	source: "iana"
},
	"application/vnd.adobe.xdp+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xdp"
	]
},
	"application/vnd.adobe.xfdf": {
	source: "iana",
	extensions: [
		"xfdf"
	]
},
	"application/vnd.aether.imp": {
	source: "iana"
},
	"application/vnd.afpc.afplinedata": {
	source: "iana"
},
	"application/vnd.afpc.afplinedata-pagedef": {
	source: "iana"
},
	"application/vnd.afpc.cmoca-cmresource": {
	source: "iana"
},
	"application/vnd.afpc.foca-charset": {
	source: "iana"
},
	"application/vnd.afpc.foca-codedfont": {
	source: "iana"
},
	"application/vnd.afpc.foca-codepage": {
	source: "iana"
},
	"application/vnd.afpc.modca": {
	source: "iana"
},
	"application/vnd.afpc.modca-cmtable": {
	source: "iana"
},
	"application/vnd.afpc.modca-formdef": {
	source: "iana"
},
	"application/vnd.afpc.modca-mediummap": {
	source: "iana"
},
	"application/vnd.afpc.modca-objectcontainer": {
	source: "iana"
},
	"application/vnd.afpc.modca-overlay": {
	source: "iana"
},
	"application/vnd.afpc.modca-pagesegment": {
	source: "iana"
},
	"application/vnd.age": {
	source: "iana",
	extensions: [
		"age"
	]
},
	"application/vnd.ah-barcode": {
	source: "iana"
},
	"application/vnd.ahead.space": {
	source: "iana",
	extensions: [
		"ahead"
	]
},
	"application/vnd.airzip.filesecure.azf": {
	source: "iana",
	extensions: [
		"azf"
	]
},
	"application/vnd.airzip.filesecure.azs": {
	source: "iana",
	extensions: [
		"azs"
	]
},
	"application/vnd.amadeus+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.amazon.ebook": {
	source: "apache",
	extensions: [
		"azw"
	]
},
	"application/vnd.amazon.mobi8-ebook": {
	source: "iana"
},
	"application/vnd.americandynamics.acc": {
	source: "iana",
	extensions: [
		"acc"
	]
},
	"application/vnd.amiga.ami": {
	source: "iana",
	extensions: [
		"ami"
	]
},
	"application/vnd.amundsen.maze+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.android.ota": {
	source: "iana"
},
	"application/vnd.android.package-archive": {
	source: "apache",
	compressible: false,
	extensions: [
		"apk"
	]
},
	"application/vnd.anki": {
	source: "iana"
},
	"application/vnd.anser-web-certificate-issue-initiation": {
	source: "iana",
	extensions: [
		"cii"
	]
},
	"application/vnd.anser-web-funds-transfer-initiation": {
	source: "apache",
	extensions: [
		"fti"
	]
},
	"application/vnd.antix.game-component": {
	source: "iana",
	extensions: [
		"atx"
	]
},
	"application/vnd.apache.arrow.file": {
	source: "iana"
},
	"application/vnd.apache.arrow.stream": {
	source: "iana"
},
	"application/vnd.apache.thrift.binary": {
	source: "iana"
},
	"application/vnd.apache.thrift.compact": {
	source: "iana"
},
	"application/vnd.apache.thrift.json": {
	source: "iana"
},
	"application/vnd.api+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.aplextor.warrp+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.apothekende.reservation+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.apple.installer+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mpkg"
	]
},
	"application/vnd.apple.keynote": {
	source: "iana",
	extensions: [
		"key"
	]
},
	"application/vnd.apple.mpegurl": {
	source: "iana",
	extensions: [
		"m3u8"
	]
},
	"application/vnd.apple.numbers": {
	source: "iana",
	extensions: [
		"numbers"
	]
},
	"application/vnd.apple.pages": {
	source: "iana",
	extensions: [
		"pages"
	]
},
	"application/vnd.apple.pkpass": {
	compressible: false,
	extensions: [
		"pkpass"
	]
},
	"application/vnd.arastra.swi": {
	source: "iana"
},
	"application/vnd.aristanetworks.swi": {
	source: "iana",
	extensions: [
		"swi"
	]
},
	"application/vnd.artisan+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.artsquare": {
	source: "iana"
},
	"application/vnd.astraea-software.iota": {
	source: "iana",
	extensions: [
		"iota"
	]
},
	"application/vnd.audiograph": {
	source: "iana",
	extensions: [
		"aep"
	]
},
	"application/vnd.autopackage": {
	source: "iana"
},
	"application/vnd.avalon+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.avistar+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.balsamiq.bmml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"bmml"
	]
},
	"application/vnd.balsamiq.bmpr": {
	source: "iana"
},
	"application/vnd.banana-accounting": {
	source: "iana"
},
	"application/vnd.bbf.usp.error": {
	source: "iana"
},
	"application/vnd.bbf.usp.msg": {
	source: "iana"
},
	"application/vnd.bbf.usp.msg+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.bekitzur-stech+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.bint.med-content": {
	source: "iana"
},
	"application/vnd.biopax.rdf+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.blink-idb-value-wrapper": {
	source: "iana"
},
	"application/vnd.blueice.multipass": {
	source: "iana",
	extensions: [
		"mpm"
	]
},
	"application/vnd.bluetooth.ep.oob": {
	source: "iana"
},
	"application/vnd.bluetooth.le.oob": {
	source: "iana"
},
	"application/vnd.bmi": {
	source: "iana",
	extensions: [
		"bmi"
	]
},
	"application/vnd.bpf": {
	source: "iana"
},
	"application/vnd.bpf3": {
	source: "iana"
},
	"application/vnd.businessobjects": {
	source: "iana",
	extensions: [
		"rep"
	]
},
	"application/vnd.byu.uapi+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.cab-jscript": {
	source: "iana"
},
	"application/vnd.canon-cpdl": {
	source: "iana"
},
	"application/vnd.canon-lips": {
	source: "iana"
},
	"application/vnd.capasystems-pg+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.cendio.thinlinc.clientconf": {
	source: "iana"
},
	"application/vnd.century-systems.tcp_stream": {
	source: "iana"
},
	"application/vnd.chemdraw+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"cdxml"
	]
},
	"application/vnd.chess-pgn": {
	source: "iana"
},
	"application/vnd.chipnuts.karaoke-mmd": {
	source: "iana",
	extensions: [
		"mmd"
	]
},
	"application/vnd.ciedi": {
	source: "iana"
},
	"application/vnd.cinderella": {
	source: "iana",
	extensions: [
		"cdy"
	]
},
	"application/vnd.cirpack.isdn-ext": {
	source: "iana"
},
	"application/vnd.citationstyles.style+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"csl"
	]
},
	"application/vnd.claymore": {
	source: "iana",
	extensions: [
		"cla"
	]
},
	"application/vnd.cloanto.rp9": {
	source: "iana",
	extensions: [
		"rp9"
	]
},
	"application/vnd.clonk.c4group": {
	source: "iana",
	extensions: [
		"c4g",
		"c4d",
		"c4f",
		"c4p",
		"c4u"
	]
},
	"application/vnd.cluetrust.cartomobile-config": {
	source: "iana",
	extensions: [
		"c11amc"
	]
},
	"application/vnd.cluetrust.cartomobile-config-pkg": {
	source: "iana",
	extensions: [
		"c11amz"
	]
},
	"application/vnd.coffeescript": {
	source: "iana"
},
	"application/vnd.collabio.xodocuments.document": {
	source: "iana"
},
	"application/vnd.collabio.xodocuments.document-template": {
	source: "iana"
},
	"application/vnd.collabio.xodocuments.presentation": {
	source: "iana"
},
	"application/vnd.collabio.xodocuments.presentation-template": {
	source: "iana"
},
	"application/vnd.collabio.xodocuments.spreadsheet": {
	source: "iana"
},
	"application/vnd.collabio.xodocuments.spreadsheet-template": {
	source: "iana"
},
	"application/vnd.collection+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.collection.doc+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.collection.next+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.comicbook+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.comicbook-rar": {
	source: "iana"
},
	"application/vnd.commerce-battelle": {
	source: "iana"
},
	"application/vnd.commonspace": {
	source: "iana",
	extensions: [
		"csp"
	]
},
	"application/vnd.contact.cmsg": {
	source: "iana",
	extensions: [
		"cdbcmsg"
	]
},
	"application/vnd.coreos.ignition+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.cosmocaller": {
	source: "iana",
	extensions: [
		"cmc"
	]
},
	"application/vnd.crick.clicker": {
	source: "iana",
	extensions: [
		"clkx"
	]
},
	"application/vnd.crick.clicker.keyboard": {
	source: "iana",
	extensions: [
		"clkk"
	]
},
	"application/vnd.crick.clicker.palette": {
	source: "iana",
	extensions: [
		"clkp"
	]
},
	"application/vnd.crick.clicker.template": {
	source: "iana",
	extensions: [
		"clkt"
	]
},
	"application/vnd.crick.clicker.wordbank": {
	source: "iana",
	extensions: [
		"clkw"
	]
},
	"application/vnd.criticaltools.wbs+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"wbs"
	]
},
	"application/vnd.cryptii.pipe+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.crypto-shade-file": {
	source: "iana"
},
	"application/vnd.cryptomator.encrypted": {
	source: "iana"
},
	"application/vnd.cryptomator.vault": {
	source: "iana"
},
	"application/vnd.ctc-posml": {
	source: "iana",
	extensions: [
		"pml"
	]
},
	"application/vnd.ctct.ws+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.cups-pdf": {
	source: "iana"
},
	"application/vnd.cups-postscript": {
	source: "iana"
},
	"application/vnd.cups-ppd": {
	source: "iana",
	extensions: [
		"ppd"
	]
},
	"application/vnd.cups-raster": {
	source: "iana"
},
	"application/vnd.cups-raw": {
	source: "iana"
},
	"application/vnd.curl": {
	source: "iana"
},
	"application/vnd.curl.car": {
	source: "apache",
	extensions: [
		"car"
	]
},
	"application/vnd.curl.pcurl": {
	source: "apache",
	extensions: [
		"pcurl"
	]
},
	"application/vnd.cyan.dean.root+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.cybank": {
	source: "iana"
},
	"application/vnd.cyclonedx+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.cyclonedx+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.d2l.coursepackage1p0+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.d3m-dataset": {
	source: "iana"
},
	"application/vnd.d3m-problem": {
	source: "iana"
},
	"application/vnd.dart": {
	source: "iana",
	compressible: true,
	extensions: [
		"dart"
	]
},
	"application/vnd.data-vision.rdz": {
	source: "iana",
	extensions: [
		"rdz"
	]
},
	"application/vnd.datapackage+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.dataresource+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.dbf": {
	source: "iana",
	extensions: [
		"dbf"
	]
},
	"application/vnd.debian.binary-package": {
	source: "iana"
},
	"application/vnd.dece.data": {
	source: "iana",
	extensions: [
		"uvf",
		"uvvf",
		"uvd",
		"uvvd"
	]
},
	"application/vnd.dece.ttml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"uvt",
		"uvvt"
	]
},
	"application/vnd.dece.unspecified": {
	source: "iana",
	extensions: [
		"uvx",
		"uvvx"
	]
},
	"application/vnd.dece.zip": {
	source: "iana",
	extensions: [
		"uvz",
		"uvvz"
	]
},
	"application/vnd.denovo.fcselayout-link": {
	source: "iana",
	extensions: [
		"fe_launch"
	]
},
	"application/vnd.desmume.movie": {
	source: "iana"
},
	"application/vnd.dir-bi.plate-dl-nosuffix": {
	source: "iana"
},
	"application/vnd.dm.delegation+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dna": {
	source: "iana",
	extensions: [
		"dna"
	]
},
	"application/vnd.document+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.dolby.mlp": {
	source: "apache",
	extensions: [
		"mlp"
	]
},
	"application/vnd.dolby.mobile.1": {
	source: "iana"
},
	"application/vnd.dolby.mobile.2": {
	source: "iana"
},
	"application/vnd.doremir.scorecloud-binary-document": {
	source: "iana"
},
	"application/vnd.dpgraph": {
	source: "iana",
	extensions: [
		"dpg"
	]
},
	"application/vnd.dreamfactory": {
	source: "iana",
	extensions: [
		"dfac"
	]
},
	"application/vnd.drive+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ds-keypoint": {
	source: "apache",
	extensions: [
		"kpxx"
	]
},
	"application/vnd.dtg.local": {
	source: "iana"
},
	"application/vnd.dtg.local.flash": {
	source: "iana"
},
	"application/vnd.dtg.local.html": {
	source: "iana"
},
	"application/vnd.dvb.ait": {
	source: "iana",
	extensions: [
		"ait"
	]
},
	"application/vnd.dvb.dvbisl+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.dvbj": {
	source: "iana"
},
	"application/vnd.dvb.esgcontainer": {
	source: "iana"
},
	"application/vnd.dvb.ipdcdftnotifaccess": {
	source: "iana"
},
	"application/vnd.dvb.ipdcesgaccess": {
	source: "iana"
},
	"application/vnd.dvb.ipdcesgaccess2": {
	source: "iana"
},
	"application/vnd.dvb.ipdcesgpdd": {
	source: "iana"
},
	"application/vnd.dvb.ipdcroaming": {
	source: "iana"
},
	"application/vnd.dvb.iptv.alfec-base": {
	source: "iana"
},
	"application/vnd.dvb.iptv.alfec-enhancement": {
	source: "iana"
},
	"application/vnd.dvb.notif-aggregate-root+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.notif-container+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.notif-generic+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.notif-ia-msglist+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.notif-ia-registration-request+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.notif-ia-registration-response+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.notif-init+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.pfr": {
	source: "iana"
},
	"application/vnd.dvb.service": {
	source: "iana",
	extensions: [
		"svc"
	]
},
	"application/vnd.dxr": {
	source: "iana"
},
	"application/vnd.dynageo": {
	source: "iana",
	extensions: [
		"geo"
	]
},
	"application/vnd.dzr": {
	source: "iana"
},
	"application/vnd.easykaraoke.cdgdownload": {
	source: "iana"
},
	"application/vnd.ecdis-update": {
	source: "iana"
},
	"application/vnd.ecip.rlp": {
	source: "iana"
},
	"application/vnd.eclipse.ditto+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ecowin.chart": {
	source: "iana",
	extensions: [
		"mag"
	]
},
	"application/vnd.ecowin.filerequest": {
	source: "iana"
},
	"application/vnd.ecowin.fileupdate": {
	source: "iana"
},
	"application/vnd.ecowin.series": {
	source: "iana"
},
	"application/vnd.ecowin.seriesrequest": {
	source: "iana"
},
	"application/vnd.ecowin.seriesupdate": {
	source: "iana"
},
	"application/vnd.efi.img": {
	source: "iana"
},
	"application/vnd.efi.iso": {
	source: "iana"
},
	"application/vnd.emclient.accessrequest+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.enliven": {
	source: "iana",
	extensions: [
		"nml"
	]
},
	"application/vnd.enphase.envoy": {
	source: "iana"
},
	"application/vnd.eprints.data+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.epson.esf": {
	source: "iana",
	extensions: [
		"esf"
	]
},
	"application/vnd.epson.msf": {
	source: "iana",
	extensions: [
		"msf"
	]
},
	"application/vnd.epson.quickanime": {
	source: "iana",
	extensions: [
		"qam"
	]
},
	"application/vnd.epson.salt": {
	source: "iana",
	extensions: [
		"slt"
	]
},
	"application/vnd.epson.ssf": {
	source: "iana",
	extensions: [
		"ssf"
	]
},
	"application/vnd.ericsson.quickcall": {
	source: "iana"
},
	"application/vnd.espass-espass+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.eszigno3+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"es3",
		"et3"
	]
},
	"application/vnd.etsi.aoc+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.asic-e+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.etsi.asic-s+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.etsi.cug+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvcommand+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvdiscovery+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvprofile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvsad-bc+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvsad-cod+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvsad-npvr+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvservice+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvsync+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvueprofile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.mcid+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.mheg5": {
	source: "iana"
},
	"application/vnd.etsi.overload-control-policy-dataset+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.pstn+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.sci+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.simservs+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.timestamp-token": {
	source: "iana"
},
	"application/vnd.etsi.tsl+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.tsl.der": {
	source: "iana"
},
	"application/vnd.eu.kasparian.car+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.eudora.data": {
	source: "iana"
},
	"application/vnd.evolv.ecig.profile": {
	source: "iana"
},
	"application/vnd.evolv.ecig.settings": {
	source: "iana"
},
	"application/vnd.evolv.ecig.theme": {
	source: "iana"
},
	"application/vnd.exstream-empower+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.exstream-package": {
	source: "iana"
},
	"application/vnd.ezpix-album": {
	source: "iana",
	extensions: [
		"ez2"
	]
},
	"application/vnd.ezpix-package": {
	source: "iana",
	extensions: [
		"ez3"
	]
},
	"application/vnd.f-secure.mobile": {
	source: "iana"
},
	"application/vnd.familysearch.gedcom+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.fastcopy-disk-image": {
	source: "iana"
},
	"application/vnd.fdf": {
	source: "iana",
	extensions: [
		"fdf"
	]
},
	"application/vnd.fdsn.mseed": {
	source: "iana",
	extensions: [
		"mseed"
	]
},
	"application/vnd.fdsn.seed": {
	source: "iana",
	extensions: [
		"seed",
		"dataless"
	]
},
	"application/vnd.ffsns": {
	source: "iana"
},
	"application/vnd.ficlab.flb+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.filmit.zfc": {
	source: "iana"
},
	"application/vnd.fints": {
	source: "iana"
},
	"application/vnd.firemonkeys.cloudcell": {
	source: "iana"
},
	"application/vnd.flographit": {
	source: "iana",
	extensions: [
		"gph"
	]
},
	"application/vnd.fluxtime.clip": {
	source: "iana",
	extensions: [
		"ftc"
	]
},
	"application/vnd.font-fontforge-sfd": {
	source: "iana"
},
	"application/vnd.framemaker": {
	source: "iana",
	extensions: [
		"fm",
		"frame",
		"maker",
		"book"
	]
},
	"application/vnd.frogans.fnc": {
	source: "iana",
	extensions: [
		"fnc"
	]
},
	"application/vnd.frogans.ltf": {
	source: "iana",
	extensions: [
		"ltf"
	]
},
	"application/vnd.fsc.weblaunch": {
	source: "iana",
	extensions: [
		"fsc"
	]
},
	"application/vnd.fujifilm.fb.docuworks": {
	source: "iana"
},
	"application/vnd.fujifilm.fb.docuworks.binder": {
	source: "iana"
},
	"application/vnd.fujifilm.fb.docuworks.container": {
	source: "iana"
},
	"application/vnd.fujifilm.fb.jfi+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.fujitsu.oasys": {
	source: "iana",
	extensions: [
		"oas"
	]
},
	"application/vnd.fujitsu.oasys2": {
	source: "iana",
	extensions: [
		"oa2"
	]
},
	"application/vnd.fujitsu.oasys3": {
	source: "iana",
	extensions: [
		"oa3"
	]
},
	"application/vnd.fujitsu.oasysgp": {
	source: "iana",
	extensions: [
		"fg5"
	]
},
	"application/vnd.fujitsu.oasysprs": {
	source: "iana",
	extensions: [
		"bh2"
	]
},
	"application/vnd.fujixerox.art-ex": {
	source: "iana"
},
	"application/vnd.fujixerox.art4": {
	source: "iana"
},
	"application/vnd.fujixerox.ddd": {
	source: "iana",
	extensions: [
		"ddd"
	]
},
	"application/vnd.fujixerox.docuworks": {
	source: "iana",
	extensions: [
		"xdw"
	]
},
	"application/vnd.fujixerox.docuworks.binder": {
	source: "iana",
	extensions: [
		"xbd"
	]
},
	"application/vnd.fujixerox.docuworks.container": {
	source: "iana"
},
	"application/vnd.fujixerox.hbpl": {
	source: "iana"
},
	"application/vnd.fut-misnet": {
	source: "iana"
},
	"application/vnd.futoin+cbor": {
	source: "iana"
},
	"application/vnd.futoin+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.fuzzysheet": {
	source: "iana",
	extensions: [
		"fzs"
	]
},
	"application/vnd.genomatix.tuxedo": {
	source: "iana",
	extensions: [
		"txd"
	]
},
	"application/vnd.gentics.grd+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.geo+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.geocube+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.geogebra.file": {
	source: "iana",
	extensions: [
		"ggb"
	]
},
	"application/vnd.geogebra.slides": {
	source: "iana"
},
	"application/vnd.geogebra.tool": {
	source: "iana",
	extensions: [
		"ggt"
	]
},
	"application/vnd.geometry-explorer": {
	source: "iana",
	extensions: [
		"gex",
		"gre"
	]
},
	"application/vnd.geonext": {
	source: "iana",
	extensions: [
		"gxt"
	]
},
	"application/vnd.geoplan": {
	source: "iana",
	extensions: [
		"g2w"
	]
},
	"application/vnd.geospace": {
	source: "iana",
	extensions: [
		"g3w"
	]
},
	"application/vnd.gerber": {
	source: "iana"
},
	"application/vnd.globalplatform.card-content-mgt": {
	source: "iana"
},
	"application/vnd.globalplatform.card-content-mgt-response": {
	source: "iana"
},
	"application/vnd.gmx": {
	source: "iana",
	extensions: [
		"gmx"
	]
},
	"application/vnd.google-apps.document": {
	compressible: false,
	extensions: [
		"gdoc"
	]
},
	"application/vnd.google-apps.presentation": {
	compressible: false,
	extensions: [
		"gslides"
	]
},
	"application/vnd.google-apps.spreadsheet": {
	compressible: false,
	extensions: [
		"gsheet"
	]
},
	"application/vnd.google-earth.kml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"kml"
	]
},
	"application/vnd.google-earth.kmz": {
	source: "iana",
	compressible: false,
	extensions: [
		"kmz"
	]
},
	"application/vnd.gov.sk.e-form+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.gov.sk.e-form+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.gov.sk.xmldatacontainer+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.grafeq": {
	source: "iana",
	extensions: [
		"gqf",
		"gqs"
	]
},
	"application/vnd.gridmp": {
	source: "iana"
},
	"application/vnd.groove-account": {
	source: "iana",
	extensions: [
		"gac"
	]
},
	"application/vnd.groove-help": {
	source: "iana",
	extensions: [
		"ghf"
	]
},
	"application/vnd.groove-identity-message": {
	source: "iana",
	extensions: [
		"gim"
	]
},
	"application/vnd.groove-injector": {
	source: "iana",
	extensions: [
		"grv"
	]
},
	"application/vnd.groove-tool-message": {
	source: "iana",
	extensions: [
		"gtm"
	]
},
	"application/vnd.groove-tool-template": {
	source: "iana",
	extensions: [
		"tpl"
	]
},
	"application/vnd.groove-vcard": {
	source: "iana",
	extensions: [
		"vcg"
	]
},
	"application/vnd.hal+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.hal+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"hal"
	]
},
	"application/vnd.handheld-entertainment+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"zmm"
	]
},
	"application/vnd.hbci": {
	source: "iana",
	extensions: [
		"hbci"
	]
},
	"application/vnd.hc+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.hcl-bireports": {
	source: "iana"
},
	"application/vnd.hdt": {
	source: "iana"
},
	"application/vnd.heroku+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.hhe.lesson-player": {
	source: "iana",
	extensions: [
		"les"
	]
},
	"application/vnd.hl7cda+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/vnd.hl7v2+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/vnd.hp-hpgl": {
	source: "iana",
	extensions: [
		"hpgl"
	]
},
	"application/vnd.hp-hpid": {
	source: "iana",
	extensions: [
		"hpid"
	]
},
	"application/vnd.hp-hps": {
	source: "iana",
	extensions: [
		"hps"
	]
},
	"application/vnd.hp-jlyt": {
	source: "iana",
	extensions: [
		"jlt"
	]
},
	"application/vnd.hp-pcl": {
	source: "iana",
	extensions: [
		"pcl"
	]
},
	"application/vnd.hp-pclxl": {
	source: "iana",
	extensions: [
		"pclxl"
	]
},
	"application/vnd.httphone": {
	source: "iana"
},
	"application/vnd.hydrostatix.sof-data": {
	source: "iana",
	extensions: [
		"sfd-hdstx"
	]
},
	"application/vnd.hyper+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.hyper-item+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.hyperdrive+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.hzn-3d-crossword": {
	source: "iana"
},
	"application/vnd.ibm.afplinedata": {
	source: "iana"
},
	"application/vnd.ibm.electronic-media": {
	source: "iana"
},
	"application/vnd.ibm.minipay": {
	source: "iana",
	extensions: [
		"mpy"
	]
},
	"application/vnd.ibm.modcap": {
	source: "iana",
	extensions: [
		"afp",
		"listafp",
		"list3820"
	]
},
	"application/vnd.ibm.rights-management": {
	source: "iana",
	extensions: [
		"irm"
	]
},
	"application/vnd.ibm.secure-container": {
	source: "iana",
	extensions: [
		"sc"
	]
},
	"application/vnd.iccprofile": {
	source: "iana",
	extensions: [
		"icc",
		"icm"
	]
},
	"application/vnd.ieee.1905": {
	source: "iana"
},
	"application/vnd.igloader": {
	source: "iana",
	extensions: [
		"igl"
	]
},
	"application/vnd.imagemeter.folder+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.imagemeter.image+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.immervision-ivp": {
	source: "iana",
	extensions: [
		"ivp"
	]
},
	"application/vnd.immervision-ivu": {
	source: "iana",
	extensions: [
		"ivu"
	]
},
	"application/vnd.ims.imsccv1p1": {
	source: "iana"
},
	"application/vnd.ims.imsccv1p2": {
	source: "iana"
},
	"application/vnd.ims.imsccv1p3": {
	source: "iana"
},
	"application/vnd.ims.lis.v2.result+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ims.lti.v2.toolconsumerprofile+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ims.lti.v2.toolproxy+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ims.lti.v2.toolproxy.id+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ims.lti.v2.toolsettings+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ims.lti.v2.toolsettings.simple+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.informedcontrol.rms+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.informix-visionary": {
	source: "iana"
},
	"application/vnd.infotech.project": {
	source: "iana"
},
	"application/vnd.infotech.project+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.innopath.wamp.notification": {
	source: "iana"
},
	"application/vnd.insors.igm": {
	source: "iana",
	extensions: [
		"igm"
	]
},
	"application/vnd.intercon.formnet": {
	source: "iana",
	extensions: [
		"xpw",
		"xpx"
	]
},
	"application/vnd.intergeo": {
	source: "iana",
	extensions: [
		"i2g"
	]
},
	"application/vnd.intertrust.digibox": {
	source: "iana"
},
	"application/vnd.intertrust.nncp": {
	source: "iana"
},
	"application/vnd.intu.qbo": {
	source: "iana",
	extensions: [
		"qbo"
	]
},
	"application/vnd.intu.qfx": {
	source: "iana",
	extensions: [
		"qfx"
	]
},
	"application/vnd.iptc.g2.catalogitem+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.iptc.g2.conceptitem+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.iptc.g2.knowledgeitem+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.iptc.g2.newsitem+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.iptc.g2.newsmessage+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.iptc.g2.packageitem+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.iptc.g2.planningitem+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.ipunplugged.rcprofile": {
	source: "iana",
	extensions: [
		"rcprofile"
	]
},
	"application/vnd.irepository.package+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"irp"
	]
},
	"application/vnd.is-xpr": {
	source: "iana",
	extensions: [
		"xpr"
	]
},
	"application/vnd.isac.fcs": {
	source: "iana",
	extensions: [
		"fcs"
	]
},
	"application/vnd.iso11783-10+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.jam": {
	source: "iana",
	extensions: [
		"jam"
	]
},
	"application/vnd.japannet-directory-service": {
	source: "iana"
},
	"application/vnd.japannet-jpnstore-wakeup": {
	source: "iana"
},
	"application/vnd.japannet-payment-wakeup": {
	source: "iana"
},
	"application/vnd.japannet-registration": {
	source: "iana"
},
	"application/vnd.japannet-registration-wakeup": {
	source: "iana"
},
	"application/vnd.japannet-setstore-wakeup": {
	source: "iana"
},
	"application/vnd.japannet-verification": {
	source: "iana"
},
	"application/vnd.japannet-verification-wakeup": {
	source: "iana"
},
	"application/vnd.jcp.javame.midlet-rms": {
	source: "iana",
	extensions: [
		"rms"
	]
},
	"application/vnd.jisp": {
	source: "iana",
	extensions: [
		"jisp"
	]
},
	"application/vnd.joost.joda-archive": {
	source: "iana",
	extensions: [
		"joda"
	]
},
	"application/vnd.jsk.isdn-ngn": {
	source: "iana"
},
	"application/vnd.kahootz": {
	source: "iana",
	extensions: [
		"ktz",
		"ktr"
	]
},
	"application/vnd.kde.karbon": {
	source: "iana",
	extensions: [
		"karbon"
	]
},
	"application/vnd.kde.kchart": {
	source: "iana",
	extensions: [
		"chrt"
	]
},
	"application/vnd.kde.kformula": {
	source: "iana",
	extensions: [
		"kfo"
	]
},
	"application/vnd.kde.kivio": {
	source: "iana",
	extensions: [
		"flw"
	]
},
	"application/vnd.kde.kontour": {
	source: "iana",
	extensions: [
		"kon"
	]
},
	"application/vnd.kde.kpresenter": {
	source: "iana",
	extensions: [
		"kpr",
		"kpt"
	]
},
	"application/vnd.kde.kspread": {
	source: "iana",
	extensions: [
		"ksp"
	]
},
	"application/vnd.kde.kword": {
	source: "iana",
	extensions: [
		"kwd",
		"kwt"
	]
},
	"application/vnd.kenameaapp": {
	source: "iana",
	extensions: [
		"htke"
	]
},
	"application/vnd.kidspiration": {
	source: "iana",
	extensions: [
		"kia"
	]
},
	"application/vnd.kinar": {
	source: "iana",
	extensions: [
		"kne",
		"knp"
	]
},
	"application/vnd.koan": {
	source: "iana",
	extensions: [
		"skp",
		"skd",
		"skt",
		"skm"
	]
},
	"application/vnd.kodak-descriptor": {
	source: "iana",
	extensions: [
		"sse"
	]
},
	"application/vnd.las": {
	source: "iana"
},
	"application/vnd.las.las+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.las.las+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"lasxml"
	]
},
	"application/vnd.laszip": {
	source: "iana"
},
	"application/vnd.leap+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.liberty-request+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.llamagraphics.life-balance.desktop": {
	source: "iana",
	extensions: [
		"lbd"
	]
},
	"application/vnd.llamagraphics.life-balance.exchange+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"lbe"
	]
},
	"application/vnd.logipipe.circuit+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.loom": {
	source: "iana"
},
	"application/vnd.lotus-1-2-3": {
	source: "iana",
	extensions: [
		"123"
	]
},
	"application/vnd.lotus-approach": {
	source: "iana",
	extensions: [
		"apr"
	]
},
	"application/vnd.lotus-freelance": {
	source: "iana",
	extensions: [
		"pre"
	]
},
	"application/vnd.lotus-notes": {
	source: "iana",
	extensions: [
		"nsf"
	]
},
	"application/vnd.lotus-organizer": {
	source: "iana",
	extensions: [
		"org"
	]
},
	"application/vnd.lotus-screencam": {
	source: "iana",
	extensions: [
		"scm"
	]
},
	"application/vnd.lotus-wordpro": {
	source: "iana",
	extensions: [
		"lwp"
	]
},
	"application/vnd.macports.portpkg": {
	source: "iana",
	extensions: [
		"portpkg"
	]
},
	"application/vnd.mapbox-vector-tile": {
	source: "iana",
	extensions: [
		"mvt"
	]
},
	"application/vnd.marlin.drm.actiontoken+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.marlin.drm.conftoken+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.marlin.drm.license+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.marlin.drm.mdcf": {
	source: "iana"
},
	"application/vnd.mason+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.maxar.archive.3tz+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.maxmind.maxmind-db": {
	source: "iana"
},
	"application/vnd.mcd": {
	source: "iana",
	extensions: [
		"mcd"
	]
},
	"application/vnd.medcalcdata": {
	source: "iana",
	extensions: [
		"mc1"
	]
},
	"application/vnd.mediastation.cdkey": {
	source: "iana",
	extensions: [
		"cdkey"
	]
},
	"application/vnd.meridian-slingshot": {
	source: "iana"
},
	"application/vnd.mfer": {
	source: "iana",
	extensions: [
		"mwf"
	]
},
	"application/vnd.mfmp": {
	source: "iana",
	extensions: [
		"mfm"
	]
},
	"application/vnd.micro+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.micrografx.flo": {
	source: "iana",
	extensions: [
		"flo"
	]
},
	"application/vnd.micrografx.igx": {
	source: "iana",
	extensions: [
		"igx"
	]
},
	"application/vnd.microsoft.portable-executable": {
	source: "iana"
},
	"application/vnd.microsoft.windows.thumbnail-cache": {
	source: "iana"
},
	"application/vnd.miele+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.mif": {
	source: "iana",
	extensions: [
		"mif"
	]
},
	"application/vnd.minisoft-hp3000-save": {
	source: "iana"
},
	"application/vnd.mitsubishi.misty-guard.trustweb": {
	source: "iana"
},
	"application/vnd.mobius.daf": {
	source: "iana",
	extensions: [
		"daf"
	]
},
	"application/vnd.mobius.dis": {
	source: "iana",
	extensions: [
		"dis"
	]
},
	"application/vnd.mobius.mbk": {
	source: "iana",
	extensions: [
		"mbk"
	]
},
	"application/vnd.mobius.mqy": {
	source: "iana",
	extensions: [
		"mqy"
	]
},
	"application/vnd.mobius.msl": {
	source: "iana",
	extensions: [
		"msl"
	]
},
	"application/vnd.mobius.plc": {
	source: "iana",
	extensions: [
		"plc"
	]
},
	"application/vnd.mobius.txf": {
	source: "iana",
	extensions: [
		"txf"
	]
},
	"application/vnd.mophun.application": {
	source: "iana",
	extensions: [
		"mpn"
	]
},
	"application/vnd.mophun.certificate": {
	source: "iana",
	extensions: [
		"mpc"
	]
},
	"application/vnd.motorola.flexsuite": {
	source: "iana"
},
	"application/vnd.motorola.flexsuite.adsi": {
	source: "iana"
},
	"application/vnd.motorola.flexsuite.fis": {
	source: "iana"
},
	"application/vnd.motorola.flexsuite.gotap": {
	source: "iana"
},
	"application/vnd.motorola.flexsuite.kmr": {
	source: "iana"
},
	"application/vnd.motorola.flexsuite.ttc": {
	source: "iana"
},
	"application/vnd.motorola.flexsuite.wem": {
	source: "iana"
},
	"application/vnd.motorola.iprm": {
	source: "iana"
},
	"application/vnd.mozilla.xul+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xul"
	]
},
	"application/vnd.ms-3mfdocument": {
	source: "iana"
},
	"application/vnd.ms-artgalry": {
	source: "iana",
	extensions: [
		"cil"
	]
},
	"application/vnd.ms-asf": {
	source: "iana"
},
	"application/vnd.ms-cab-compressed": {
	source: "iana",
	extensions: [
		"cab"
	]
},
	"application/vnd.ms-color.iccprofile": {
	source: "apache"
},
	"application/vnd.ms-excel": {
	source: "iana",
	compressible: false,
	extensions: [
		"xls",
		"xlm",
		"xla",
		"xlc",
		"xlt",
		"xlw"
	]
},
	"application/vnd.ms-excel.addin.macroenabled.12": {
	source: "iana",
	extensions: [
		"xlam"
	]
},
	"application/vnd.ms-excel.sheet.binary.macroenabled.12": {
	source: "iana",
	extensions: [
		"xlsb"
	]
},
	"application/vnd.ms-excel.sheet.macroenabled.12": {
	source: "iana",
	extensions: [
		"xlsm"
	]
},
	"application/vnd.ms-excel.template.macroenabled.12": {
	source: "iana",
	extensions: [
		"xltm"
	]
},
	"application/vnd.ms-fontobject": {
	source: "iana",
	compressible: true,
	extensions: [
		"eot"
	]
},
	"application/vnd.ms-htmlhelp": {
	source: "iana",
	extensions: [
		"chm"
	]
},
	"application/vnd.ms-ims": {
	source: "iana",
	extensions: [
		"ims"
	]
},
	"application/vnd.ms-lrm": {
	source: "iana",
	extensions: [
		"lrm"
	]
},
	"application/vnd.ms-office.activex+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.ms-officetheme": {
	source: "iana",
	extensions: [
		"thmx"
	]
},
	"application/vnd.ms-opentype": {
	source: "apache",
	compressible: true
},
	"application/vnd.ms-outlook": {
	compressible: false,
	extensions: [
		"msg"
	]
},
	"application/vnd.ms-package.obfuscated-opentype": {
	source: "apache"
},
	"application/vnd.ms-pki.seccat": {
	source: "apache",
	extensions: [
		"cat"
	]
},
	"application/vnd.ms-pki.stl": {
	source: "apache",
	extensions: [
		"stl"
	]
},
	"application/vnd.ms-playready.initiator+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.ms-powerpoint": {
	source: "iana",
	compressible: false,
	extensions: [
		"ppt",
		"pps",
		"pot"
	]
},
	"application/vnd.ms-powerpoint.addin.macroenabled.12": {
	source: "iana",
	extensions: [
		"ppam"
	]
},
	"application/vnd.ms-powerpoint.presentation.macroenabled.12": {
	source: "iana",
	extensions: [
		"pptm"
	]
},
	"application/vnd.ms-powerpoint.slide.macroenabled.12": {
	source: "iana",
	extensions: [
		"sldm"
	]
},
	"application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
	source: "iana",
	extensions: [
		"ppsm"
	]
},
	"application/vnd.ms-powerpoint.template.macroenabled.12": {
	source: "iana",
	extensions: [
		"potm"
	]
},
	"application/vnd.ms-printdevicecapabilities+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.ms-printing.printticket+xml": {
	source: "apache",
	compressible: true
},
	"application/vnd.ms-printschematicket+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.ms-project": {
	source: "iana",
	extensions: [
		"mpp",
		"mpt"
	]
},
	"application/vnd.ms-tnef": {
	source: "iana"
},
	"application/vnd.ms-windows.devicepairing": {
	source: "iana"
},
	"application/vnd.ms-windows.nwprinting.oob": {
	source: "iana"
},
	"application/vnd.ms-windows.printerpairing": {
	source: "iana"
},
	"application/vnd.ms-windows.wsd.oob": {
	source: "iana"
},
	"application/vnd.ms-wmdrm.lic-chlg-req": {
	source: "iana"
},
	"application/vnd.ms-wmdrm.lic-resp": {
	source: "iana"
},
	"application/vnd.ms-wmdrm.meter-chlg-req": {
	source: "iana"
},
	"application/vnd.ms-wmdrm.meter-resp": {
	source: "iana"
},
	"application/vnd.ms-word.document.macroenabled.12": {
	source: "iana",
	extensions: [
		"docm"
	]
},
	"application/vnd.ms-word.template.macroenabled.12": {
	source: "iana",
	extensions: [
		"dotm"
	]
},
	"application/vnd.ms-works": {
	source: "iana",
	extensions: [
		"wps",
		"wks",
		"wcm",
		"wdb"
	]
},
	"application/vnd.ms-wpl": {
	source: "iana",
	extensions: [
		"wpl"
	]
},
	"application/vnd.ms-xpsdocument": {
	source: "iana",
	compressible: false,
	extensions: [
		"xps"
	]
},
	"application/vnd.msa-disk-image": {
	source: "iana"
},
	"application/vnd.mseq": {
	source: "iana",
	extensions: [
		"mseq"
	]
},
	"application/vnd.msign": {
	source: "iana"
},
	"application/vnd.multiad.creator": {
	source: "iana"
},
	"application/vnd.multiad.creator.cif": {
	source: "iana"
},
	"application/vnd.music-niff": {
	source: "iana"
},
	"application/vnd.musician": {
	source: "iana",
	extensions: [
		"mus"
	]
},
	"application/vnd.muvee.style": {
	source: "iana",
	extensions: [
		"msty"
	]
},
	"application/vnd.mynfc": {
	source: "iana",
	extensions: [
		"taglet"
	]
},
	"application/vnd.nacamar.ybrid+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ncd.control": {
	source: "iana"
},
	"application/vnd.ncd.reference": {
	source: "iana"
},
	"application/vnd.nearst.inv+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.nebumind.line": {
	source: "iana"
},
	"application/vnd.nervana": {
	source: "iana"
},
	"application/vnd.netfpx": {
	source: "iana"
},
	"application/vnd.neurolanguage.nlu": {
	source: "iana",
	extensions: [
		"nlu"
	]
},
	"application/vnd.nimn": {
	source: "iana"
},
	"application/vnd.nintendo.nitro.rom": {
	source: "iana"
},
	"application/vnd.nintendo.snes.rom": {
	source: "iana"
},
	"application/vnd.nitf": {
	source: "iana",
	extensions: [
		"ntf",
		"nitf"
	]
},
	"application/vnd.noblenet-directory": {
	source: "iana",
	extensions: [
		"nnd"
	]
},
	"application/vnd.noblenet-sealer": {
	source: "iana",
	extensions: [
		"nns"
	]
},
	"application/vnd.noblenet-web": {
	source: "iana",
	extensions: [
		"nnw"
	]
},
	"application/vnd.nokia.catalogs": {
	source: "iana"
},
	"application/vnd.nokia.conml+wbxml": {
	source: "iana"
},
	"application/vnd.nokia.conml+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.nokia.iptv.config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.nokia.isds-radio-presets": {
	source: "iana"
},
	"application/vnd.nokia.landmark+wbxml": {
	source: "iana"
},
	"application/vnd.nokia.landmark+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.nokia.landmarkcollection+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.nokia.n-gage.ac+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"ac"
	]
},
	"application/vnd.nokia.n-gage.data": {
	source: "iana",
	extensions: [
		"ngdat"
	]
},
	"application/vnd.nokia.n-gage.symbian.install": {
	source: "iana",
	extensions: [
		"n-gage"
	]
},
	"application/vnd.nokia.ncd": {
	source: "iana"
},
	"application/vnd.nokia.pcd+wbxml": {
	source: "iana"
},
	"application/vnd.nokia.pcd+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.nokia.radio-preset": {
	source: "iana",
	extensions: [
		"rpst"
	]
},
	"application/vnd.nokia.radio-presets": {
	source: "iana",
	extensions: [
		"rpss"
	]
},
	"application/vnd.novadigm.edm": {
	source: "iana",
	extensions: [
		"edm"
	]
},
	"application/vnd.novadigm.edx": {
	source: "iana",
	extensions: [
		"edx"
	]
},
	"application/vnd.novadigm.ext": {
	source: "iana",
	extensions: [
		"ext"
	]
},
	"application/vnd.ntt-local.content-share": {
	source: "iana"
},
	"application/vnd.ntt-local.file-transfer": {
	source: "iana"
},
	"application/vnd.ntt-local.ogw_remote-access": {
	source: "iana"
},
	"application/vnd.ntt-local.sip-ta_remote": {
	source: "iana"
},
	"application/vnd.ntt-local.sip-ta_tcp_stream": {
	source: "iana"
},
	"application/vnd.oasis.opendocument.chart": {
	source: "iana",
	extensions: [
		"odc"
	]
},
	"application/vnd.oasis.opendocument.chart-template": {
	source: "iana",
	extensions: [
		"otc"
	]
},
	"application/vnd.oasis.opendocument.database": {
	source: "iana",
	extensions: [
		"odb"
	]
},
	"application/vnd.oasis.opendocument.formula": {
	source: "iana",
	extensions: [
		"odf"
	]
},
	"application/vnd.oasis.opendocument.formula-template": {
	source: "iana",
	extensions: [
		"odft"
	]
},
	"application/vnd.oasis.opendocument.graphics": {
	source: "iana",
	compressible: false,
	extensions: [
		"odg"
	]
},
	"application/vnd.oasis.opendocument.graphics-template": {
	source: "iana",
	extensions: [
		"otg"
	]
},
	"application/vnd.oasis.opendocument.image": {
	source: "iana",
	extensions: [
		"odi"
	]
},
	"application/vnd.oasis.opendocument.image-template": {
	source: "iana",
	extensions: [
		"oti"
	]
},
	"application/vnd.oasis.opendocument.presentation": {
	source: "iana",
	compressible: false,
	extensions: [
		"odp"
	]
},
	"application/vnd.oasis.opendocument.presentation-template": {
	source: "iana",
	extensions: [
		"otp"
	]
},
	"application/vnd.oasis.opendocument.spreadsheet": {
	source: "iana",
	compressible: false,
	extensions: [
		"ods"
	]
},
	"application/vnd.oasis.opendocument.spreadsheet-template": {
	source: "iana",
	extensions: [
		"ots"
	]
},
	"application/vnd.oasis.opendocument.text": {
	source: "iana",
	compressible: false,
	extensions: [
		"odt"
	]
},
	"application/vnd.oasis.opendocument.text-master": {
	source: "iana",
	extensions: [
		"odm"
	]
},
	"application/vnd.oasis.opendocument.text-template": {
	source: "iana",
	extensions: [
		"ott"
	]
},
	"application/vnd.oasis.opendocument.text-web": {
	source: "iana",
	extensions: [
		"oth"
	]
},
	"application/vnd.obn": {
	source: "iana"
},
	"application/vnd.ocf+cbor": {
	source: "iana"
},
	"application/vnd.oci.image.manifest.v1+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.oftn.l10n+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.contentaccessdownload+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.contentaccessstreaming+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.cspg-hexbinary": {
	source: "iana"
},
	"application/vnd.oipf.dae.svg+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.dae.xhtml+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.mippvcontrolmessage+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.pae.gem": {
	source: "iana"
},
	"application/vnd.oipf.spdiscovery+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.spdlist+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.ueprofile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.userprofile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.olpc-sugar": {
	source: "iana",
	extensions: [
		"xo"
	]
},
	"application/vnd.oma-scws-config": {
	source: "iana"
},
	"application/vnd.oma-scws-http-request": {
	source: "iana"
},
	"application/vnd.oma-scws-http-response": {
	source: "iana"
},
	"application/vnd.oma.bcast.associated-procedure-parameter+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.drm-trigger+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.imd+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.ltkm": {
	source: "iana"
},
	"application/vnd.oma.bcast.notification+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.provisioningtrigger": {
	source: "iana"
},
	"application/vnd.oma.bcast.sgboot": {
	source: "iana"
},
	"application/vnd.oma.bcast.sgdd+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.sgdu": {
	source: "iana"
},
	"application/vnd.oma.bcast.simple-symbol-container": {
	source: "iana"
},
	"application/vnd.oma.bcast.smartcard-trigger+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.sprov+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.stkm": {
	source: "iana"
},
	"application/vnd.oma.cab-address-book+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.cab-feature-handler+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.cab-pcc+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.cab-subs-invite+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.cab-user-prefs+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.dcd": {
	source: "iana"
},
	"application/vnd.oma.dcdc": {
	source: "iana"
},
	"application/vnd.oma.dd2+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"dd2"
	]
},
	"application/vnd.oma.drm.risd+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.group-usage-list+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.lwm2m+cbor": {
	source: "iana"
},
	"application/vnd.oma.lwm2m+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.lwm2m+tlv": {
	source: "iana"
},
	"application/vnd.oma.pal+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.poc.detailed-progress-report+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.poc.final-report+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.poc.groups+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.poc.invocation-descriptor+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.poc.optimized-progress-report+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.push": {
	source: "iana"
},
	"application/vnd.oma.scidm.messages+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.xcap-directory+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.omads-email+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/vnd.omads-file+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/vnd.omads-folder+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/vnd.omaloc-supl-init": {
	source: "iana"
},
	"application/vnd.onepager": {
	source: "iana"
},
	"application/vnd.onepagertamp": {
	source: "iana"
},
	"application/vnd.onepagertamx": {
	source: "iana"
},
	"application/vnd.onepagertat": {
	source: "iana"
},
	"application/vnd.onepagertatp": {
	source: "iana"
},
	"application/vnd.onepagertatx": {
	source: "iana"
},
	"application/vnd.openblox.game+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"obgx"
	]
},
	"application/vnd.openblox.game-binary": {
	source: "iana"
},
	"application/vnd.openeye.oeb": {
	source: "iana"
},
	"application/vnd.openofficeorg.extension": {
	source: "apache",
	extensions: [
		"oxt"
	]
},
	"application/vnd.openstreetmap.data+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"osm"
	]
},
	"application/vnd.opentimestamps.ots": {
	source: "iana"
},
	"application/vnd.openxmlformats-officedocument.custom-properties+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawing+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.extended-properties+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.presentation": {
	source: "iana",
	compressible: false,
	extensions: [
		"pptx"
	]
},
	"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.slide": {
	source: "iana",
	extensions: [
		"sldx"
	]
},
	"application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
	source: "iana",
	extensions: [
		"ppsx"
	]
},
	"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.template": {
	source: "iana",
	extensions: [
		"potx"
	]
},
	"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
	source: "iana",
	compressible: false,
	extensions: [
		"xlsx"
	]
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
	source: "iana",
	extensions: [
		"xltx"
	]
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.theme+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.themeoverride+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.vmldrawing": {
	source: "iana"
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
	source: "iana",
	compressible: false,
	extensions: [
		"docx"
	]
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
	source: "iana",
	extensions: [
		"dotx"
	]
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-package.core-properties+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-package.relationships+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oracle.resource+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.orange.indata": {
	source: "iana"
},
	"application/vnd.osa.netdeploy": {
	source: "iana"
},
	"application/vnd.osgeo.mapguide.package": {
	source: "iana",
	extensions: [
		"mgp"
	]
},
	"application/vnd.osgi.bundle": {
	source: "iana"
},
	"application/vnd.osgi.dp": {
	source: "iana",
	extensions: [
		"dp"
	]
},
	"application/vnd.osgi.subsystem": {
	source: "iana",
	extensions: [
		"esa"
	]
},
	"application/vnd.otps.ct-kip+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oxli.countgraph": {
	source: "iana"
},
	"application/vnd.pagerduty+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.palm": {
	source: "iana",
	extensions: [
		"pdb",
		"pqa",
		"oprc"
	]
},
	"application/vnd.panoply": {
	source: "iana"
},
	"application/vnd.paos.xml": {
	source: "iana"
},
	"application/vnd.patentdive": {
	source: "iana"
},
	"application/vnd.patientecommsdoc": {
	source: "iana"
},
	"application/vnd.pawaafile": {
	source: "iana",
	extensions: [
		"paw"
	]
},
	"application/vnd.pcos": {
	source: "iana"
},
	"application/vnd.pg.format": {
	source: "iana",
	extensions: [
		"str"
	]
},
	"application/vnd.pg.osasli": {
	source: "iana",
	extensions: [
		"ei6"
	]
},
	"application/vnd.piaccess.application-licence": {
	source: "iana"
},
	"application/vnd.picsel": {
	source: "iana",
	extensions: [
		"efif"
	]
},
	"application/vnd.pmi.widget": {
	source: "iana",
	extensions: [
		"wg"
	]
},
	"application/vnd.poc.group-advertisement+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.pocketlearn": {
	source: "iana",
	extensions: [
		"plf"
	]
},
	"application/vnd.powerbuilder6": {
	source: "iana",
	extensions: [
		"pbd"
	]
},
	"application/vnd.powerbuilder6-s": {
	source: "iana"
},
	"application/vnd.powerbuilder7": {
	source: "iana"
},
	"application/vnd.powerbuilder7-s": {
	source: "iana"
},
	"application/vnd.powerbuilder75": {
	source: "iana"
},
	"application/vnd.powerbuilder75-s": {
	source: "iana"
},
	"application/vnd.preminet": {
	source: "iana"
},
	"application/vnd.previewsystems.box": {
	source: "iana",
	extensions: [
		"box"
	]
},
	"application/vnd.proteus.magazine": {
	source: "iana",
	extensions: [
		"mgz"
	]
},
	"application/vnd.psfs": {
	source: "iana"
},
	"application/vnd.publishare-delta-tree": {
	source: "iana",
	extensions: [
		"qps"
	]
},
	"application/vnd.pvi.ptid1": {
	source: "iana",
	extensions: [
		"ptid"
	]
},
	"application/vnd.pwg-multiplexed": {
	source: "iana"
},
	"application/vnd.pwg-xhtml-print+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.qualcomm.brew-app-res": {
	source: "iana"
},
	"application/vnd.quarantainenet": {
	source: "iana"
},
	"application/vnd.quark.quarkxpress": {
	source: "iana",
	extensions: [
		"qxd",
		"qxt",
		"qwd",
		"qwt",
		"qxl",
		"qxb"
	]
},
	"application/vnd.quobject-quoxdocument": {
	source: "iana"
},
	"application/vnd.radisys.moml+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-audit+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-audit-conf+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-audit-conn+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-audit-dialog+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-audit-stream+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-conf+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog-base+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog-fax-detect+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog-group+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog-speech+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog-transform+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.rainstor.data": {
	source: "iana"
},
	"application/vnd.rapid": {
	source: "iana"
},
	"application/vnd.rar": {
	source: "iana",
	extensions: [
		"rar"
	]
},
	"application/vnd.realvnc.bed": {
	source: "iana",
	extensions: [
		"bed"
	]
},
	"application/vnd.recordare.musicxml": {
	source: "iana",
	extensions: [
		"mxl"
	]
},
	"application/vnd.recordare.musicxml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"musicxml"
	]
},
	"application/vnd.renlearn.rlprint": {
	source: "iana"
},
	"application/vnd.resilient.logic": {
	source: "iana"
},
	"application/vnd.restful+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.rig.cryptonote": {
	source: "iana",
	extensions: [
		"cryptonote"
	]
},
	"application/vnd.rim.cod": {
	source: "apache",
	extensions: [
		"cod"
	]
},
	"application/vnd.rn-realmedia": {
	source: "apache",
	extensions: [
		"rm"
	]
},
	"application/vnd.rn-realmedia-vbr": {
	source: "apache",
	extensions: [
		"rmvb"
	]
},
	"application/vnd.route66.link66+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"link66"
	]
},
	"application/vnd.rs-274x": {
	source: "iana"
},
	"application/vnd.ruckus.download": {
	source: "iana"
},
	"application/vnd.s3sms": {
	source: "iana"
},
	"application/vnd.sailingtracker.track": {
	source: "iana",
	extensions: [
		"st"
	]
},
	"application/vnd.sar": {
	source: "iana"
},
	"application/vnd.sbm.cid": {
	source: "iana"
},
	"application/vnd.sbm.mid2": {
	source: "iana"
},
	"application/vnd.scribus": {
	source: "iana"
},
	"application/vnd.sealed.3df": {
	source: "iana"
},
	"application/vnd.sealed.csf": {
	source: "iana"
},
	"application/vnd.sealed.doc": {
	source: "iana"
},
	"application/vnd.sealed.eml": {
	source: "iana"
},
	"application/vnd.sealed.mht": {
	source: "iana"
},
	"application/vnd.sealed.net": {
	source: "iana"
},
	"application/vnd.sealed.ppt": {
	source: "iana"
},
	"application/vnd.sealed.tiff": {
	source: "iana"
},
	"application/vnd.sealed.xls": {
	source: "iana"
},
	"application/vnd.sealedmedia.softseal.html": {
	source: "iana"
},
	"application/vnd.sealedmedia.softseal.pdf": {
	source: "iana"
},
	"application/vnd.seemail": {
	source: "iana",
	extensions: [
		"see"
	]
},
	"application/vnd.seis+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.sema": {
	source: "iana",
	extensions: [
		"sema"
	]
},
	"application/vnd.semd": {
	source: "iana",
	extensions: [
		"semd"
	]
},
	"application/vnd.semf": {
	source: "iana",
	extensions: [
		"semf"
	]
},
	"application/vnd.shade-save-file": {
	source: "iana"
},
	"application/vnd.shana.informed.formdata": {
	source: "iana",
	extensions: [
		"ifm"
	]
},
	"application/vnd.shana.informed.formtemplate": {
	source: "iana",
	extensions: [
		"itp"
	]
},
	"application/vnd.shana.informed.interchange": {
	source: "iana",
	extensions: [
		"iif"
	]
},
	"application/vnd.shana.informed.package": {
	source: "iana",
	extensions: [
		"ipk"
	]
},
	"application/vnd.shootproof+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.shopkick+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.shp": {
	source: "iana"
},
	"application/vnd.shx": {
	source: "iana"
},
	"application/vnd.sigrok.session": {
	source: "iana"
},
	"application/vnd.simtech-mindmapper": {
	source: "iana",
	extensions: [
		"twd",
		"twds"
	]
},
	"application/vnd.siren+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.smaf": {
	source: "iana",
	extensions: [
		"mmf"
	]
},
	"application/vnd.smart.notebook": {
	source: "iana"
},
	"application/vnd.smart.teacher": {
	source: "iana",
	extensions: [
		"teacher"
	]
},
	"application/vnd.snesdev-page-table": {
	source: "iana"
},
	"application/vnd.software602.filler.form+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"fo"
	]
},
	"application/vnd.software602.filler.form-xml-zip": {
	source: "iana"
},
	"application/vnd.solent.sdkm+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"sdkm",
		"sdkd"
	]
},
	"application/vnd.spotfire.dxp": {
	source: "iana",
	extensions: [
		"dxp"
	]
},
	"application/vnd.spotfire.sfs": {
	source: "iana",
	extensions: [
		"sfs"
	]
},
	"application/vnd.sqlite3": {
	source: "iana"
},
	"application/vnd.sss-cod": {
	source: "iana"
},
	"application/vnd.sss-dtf": {
	source: "iana"
},
	"application/vnd.sss-ntf": {
	source: "iana"
},
	"application/vnd.stardivision.calc": {
	source: "apache",
	extensions: [
		"sdc"
	]
},
	"application/vnd.stardivision.draw": {
	source: "apache",
	extensions: [
		"sda"
	]
},
	"application/vnd.stardivision.impress": {
	source: "apache",
	extensions: [
		"sdd"
	]
},
	"application/vnd.stardivision.math": {
	source: "apache",
	extensions: [
		"smf"
	]
},
	"application/vnd.stardivision.writer": {
	source: "apache",
	extensions: [
		"sdw",
		"vor"
	]
},
	"application/vnd.stardivision.writer-global": {
	source: "apache",
	extensions: [
		"sgl"
	]
},
	"application/vnd.stepmania.package": {
	source: "iana",
	extensions: [
		"smzip"
	]
},
	"application/vnd.stepmania.stepchart": {
	source: "iana",
	extensions: [
		"sm"
	]
},
	"application/vnd.street-stream": {
	source: "iana"
},
	"application/vnd.sun.wadl+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"wadl"
	]
},
	"application/vnd.sun.xml.calc": {
	source: "apache",
	extensions: [
		"sxc"
	]
},
	"application/vnd.sun.xml.calc.template": {
	source: "apache",
	extensions: [
		"stc"
	]
},
	"application/vnd.sun.xml.draw": {
	source: "apache",
	extensions: [
		"sxd"
	]
},
	"application/vnd.sun.xml.draw.template": {
	source: "apache",
	extensions: [
		"std"
	]
},
	"application/vnd.sun.xml.impress": {
	source: "apache",
	extensions: [
		"sxi"
	]
},
	"application/vnd.sun.xml.impress.template": {
	source: "apache",
	extensions: [
		"sti"
	]
},
	"application/vnd.sun.xml.math": {
	source: "apache",
	extensions: [
		"sxm"
	]
},
	"application/vnd.sun.xml.writer": {
	source: "apache",
	extensions: [
		"sxw"
	]
},
	"application/vnd.sun.xml.writer.global": {
	source: "apache",
	extensions: [
		"sxg"
	]
},
	"application/vnd.sun.xml.writer.template": {
	source: "apache",
	extensions: [
		"stw"
	]
},
	"application/vnd.sus-calendar": {
	source: "iana",
	extensions: [
		"sus",
		"susp"
	]
},
	"application/vnd.svd": {
	source: "iana",
	extensions: [
		"svd"
	]
},
	"application/vnd.swiftview-ics": {
	source: "iana"
},
	"application/vnd.sycle+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.syft+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.symbian.install": {
	source: "apache",
	extensions: [
		"sis",
		"sisx"
	]
},
	"application/vnd.syncml+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"xsm"
	]
},
	"application/vnd.syncml.dm+wbxml": {
	source: "iana",
	charset: "UTF-8",
	extensions: [
		"bdm"
	]
},
	"application/vnd.syncml.dm+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"xdm"
	]
},
	"application/vnd.syncml.dm.notification": {
	source: "iana"
},
	"application/vnd.syncml.dmddf+wbxml": {
	source: "iana"
},
	"application/vnd.syncml.dmddf+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"ddf"
	]
},
	"application/vnd.syncml.dmtnds+wbxml": {
	source: "iana"
},
	"application/vnd.syncml.dmtnds+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/vnd.syncml.ds.notification": {
	source: "iana"
},
	"application/vnd.tableschema+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.tao.intent-module-archive": {
	source: "iana",
	extensions: [
		"tao"
	]
},
	"application/vnd.tcpdump.pcap": {
	source: "iana",
	extensions: [
		"pcap",
		"cap",
		"dmp"
	]
},
	"application/vnd.think-cell.ppttc+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.tmd.mediaflex.api+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.tml": {
	source: "iana"
},
	"application/vnd.tmobile-livetv": {
	source: "iana",
	extensions: [
		"tmo"
	]
},
	"application/vnd.tri.onesource": {
	source: "iana"
},
	"application/vnd.trid.tpt": {
	source: "iana",
	extensions: [
		"tpt"
	]
},
	"application/vnd.triscape.mxs": {
	source: "iana",
	extensions: [
		"mxs"
	]
},
	"application/vnd.trueapp": {
	source: "iana",
	extensions: [
		"tra"
	]
},
	"application/vnd.truedoc": {
	source: "iana"
},
	"application/vnd.ubisoft.webplayer": {
	source: "iana"
},
	"application/vnd.ufdl": {
	source: "iana",
	extensions: [
		"ufd",
		"ufdl"
	]
},
	"application/vnd.uiq.theme": {
	source: "iana",
	extensions: [
		"utz"
	]
},
	"application/vnd.umajin": {
	source: "iana",
	extensions: [
		"umj"
	]
},
	"application/vnd.unity": {
	source: "iana",
	extensions: [
		"unityweb"
	]
},
	"application/vnd.uoml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"uoml"
	]
},
	"application/vnd.uplanet.alert": {
	source: "iana"
},
	"application/vnd.uplanet.alert-wbxml": {
	source: "iana"
},
	"application/vnd.uplanet.bearer-choice": {
	source: "iana"
},
	"application/vnd.uplanet.bearer-choice-wbxml": {
	source: "iana"
},
	"application/vnd.uplanet.cacheop": {
	source: "iana"
},
	"application/vnd.uplanet.cacheop-wbxml": {
	source: "iana"
},
	"application/vnd.uplanet.channel": {
	source: "iana"
},
	"application/vnd.uplanet.channel-wbxml": {
	source: "iana"
},
	"application/vnd.uplanet.list": {
	source: "iana"
},
	"application/vnd.uplanet.list-wbxml": {
	source: "iana"
},
	"application/vnd.uplanet.listcmd": {
	source: "iana"
},
	"application/vnd.uplanet.listcmd-wbxml": {
	source: "iana"
},
	"application/vnd.uplanet.signal": {
	source: "iana"
},
	"application/vnd.uri-map": {
	source: "iana"
},
	"application/vnd.valve.source.material": {
	source: "iana"
},
	"application/vnd.vcx": {
	source: "iana",
	extensions: [
		"vcx"
	]
},
	"application/vnd.vd-study": {
	source: "iana"
},
	"application/vnd.vectorworks": {
	source: "iana"
},
	"application/vnd.vel+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.verimatrix.vcas": {
	source: "iana"
},
	"application/vnd.veritone.aion+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.veryant.thin": {
	source: "iana"
},
	"application/vnd.ves.encrypted": {
	source: "iana"
},
	"application/vnd.vidsoft.vidconference": {
	source: "iana"
},
	"application/vnd.visio": {
	source: "iana",
	extensions: [
		"vsd",
		"vst",
		"vss",
		"vsw"
	]
},
	"application/vnd.visionary": {
	source: "iana",
	extensions: [
		"vis"
	]
},
	"application/vnd.vividence.scriptfile": {
	source: "iana"
},
	"application/vnd.vsf": {
	source: "iana",
	extensions: [
		"vsf"
	]
},
	"application/vnd.wap.sic": {
	source: "iana"
},
	"application/vnd.wap.slc": {
	source: "iana"
},
	"application/vnd.wap.wbxml": {
	source: "iana",
	charset: "UTF-8",
	extensions: [
		"wbxml"
	]
},
	"application/vnd.wap.wmlc": {
	source: "iana",
	extensions: [
		"wmlc"
	]
},
	"application/vnd.wap.wmlscriptc": {
	source: "iana",
	extensions: [
		"wmlsc"
	]
},
	"application/vnd.webturbo": {
	source: "iana",
	extensions: [
		"wtb"
	]
},
	"application/vnd.wfa.dpp": {
	source: "iana"
},
	"application/vnd.wfa.p2p": {
	source: "iana"
},
	"application/vnd.wfa.wsc": {
	source: "iana"
},
	"application/vnd.windows.devicepairing": {
	source: "iana"
},
	"application/vnd.wmc": {
	source: "iana"
},
	"application/vnd.wmf.bootstrap": {
	source: "iana"
},
	"application/vnd.wolfram.mathematica": {
	source: "iana"
},
	"application/vnd.wolfram.mathematica.package": {
	source: "iana"
},
	"application/vnd.wolfram.player": {
	source: "iana",
	extensions: [
		"nbp"
	]
},
	"application/vnd.wordperfect": {
	source: "iana",
	extensions: [
		"wpd"
	]
},
	"application/vnd.wqd": {
	source: "iana",
	extensions: [
		"wqd"
	]
},
	"application/vnd.wrq-hp3000-labelled": {
	source: "iana"
},
	"application/vnd.wt.stf": {
	source: "iana",
	extensions: [
		"stf"
	]
},
	"application/vnd.wv.csp+wbxml": {
	source: "iana"
},
	"application/vnd.wv.csp+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.wv.ssp+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.xacml+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.xara": {
	source: "iana",
	extensions: [
		"xar"
	]
},
	"application/vnd.xfdl": {
	source: "iana",
	extensions: [
		"xfdl"
	]
},
	"application/vnd.xfdl.webform": {
	source: "iana"
},
	"application/vnd.xmi+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.xmpie.cpkg": {
	source: "iana"
},
	"application/vnd.xmpie.dpkg": {
	source: "iana"
},
	"application/vnd.xmpie.plan": {
	source: "iana"
},
	"application/vnd.xmpie.ppkg": {
	source: "iana"
},
	"application/vnd.xmpie.xlim": {
	source: "iana"
},
	"application/vnd.yamaha.hv-dic": {
	source: "iana",
	extensions: [
		"hvd"
	]
},
	"application/vnd.yamaha.hv-script": {
	source: "iana",
	extensions: [
		"hvs"
	]
},
	"application/vnd.yamaha.hv-voice": {
	source: "iana",
	extensions: [
		"hvp"
	]
},
	"application/vnd.yamaha.openscoreformat": {
	source: "iana",
	extensions: [
		"osf"
	]
},
	"application/vnd.yamaha.openscoreformat.osfpvg+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"osfpvg"
	]
},
	"application/vnd.yamaha.remote-setup": {
	source: "iana"
},
	"application/vnd.yamaha.smaf-audio": {
	source: "iana",
	extensions: [
		"saf"
	]
},
	"application/vnd.yamaha.smaf-phrase": {
	source: "iana",
	extensions: [
		"spf"
	]
},
	"application/vnd.yamaha.through-ngn": {
	source: "iana"
},
	"application/vnd.yamaha.tunnel-udpencap": {
	source: "iana"
},
	"application/vnd.yaoweme": {
	source: "iana"
},
	"application/vnd.yellowriver-custom-menu": {
	source: "iana",
	extensions: [
		"cmp"
	]
},
	"application/vnd.youtube.yt": {
	source: "iana"
},
	"application/vnd.zul": {
	source: "iana",
	extensions: [
		"zir",
		"zirz"
	]
},
	"application/vnd.zzazz.deck+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"zaz"
	]
},
	"application/voicexml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"vxml"
	]
},
	"application/voucher-cms+json": {
	source: "iana",
	compressible: true
},
	"application/vq-rtcpxr": {
	source: "iana"
},
	"application/wasm": {
	source: "iana",
	compressible: true,
	extensions: [
		"wasm"
	]
},
	"application/watcherinfo+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"wif"
	]
},
	"application/webpush-options+json": {
	source: "iana",
	compressible: true
},
	"application/whoispp-query": {
	source: "iana"
},
	"application/whoispp-response": {
	source: "iana"
},
	"application/widget": {
	source: "iana",
	extensions: [
		"wgt"
	]
},
	"application/winhlp": {
	source: "apache",
	extensions: [
		"hlp"
	]
},
	"application/wita": {
	source: "iana"
},
	"application/wordperfect5.1": {
	source: "iana"
},
	"application/wsdl+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"wsdl"
	]
},
	"application/wspolicy+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"wspolicy"
	]
},
	"application/x-7z-compressed": {
	source: "apache",
	compressible: false,
	extensions: [
		"7z"
	]
},
	"application/x-abiword": {
	source: "apache",
	extensions: [
		"abw"
	]
},
	"application/x-ace-compressed": {
	source: "apache",
	extensions: [
		"ace"
	]
},
	"application/x-amf": {
	source: "apache"
},
	"application/x-apple-diskimage": {
	source: "apache",
	extensions: [
		"dmg"
	]
},
	"application/x-arj": {
	compressible: false,
	extensions: [
		"arj"
	]
},
	"application/x-authorware-bin": {
	source: "apache",
	extensions: [
		"aab",
		"x32",
		"u32",
		"vox"
	]
},
	"application/x-authorware-map": {
	source: "apache",
	extensions: [
		"aam"
	]
},
	"application/x-authorware-seg": {
	source: "apache",
	extensions: [
		"aas"
	]
},
	"application/x-bcpio": {
	source: "apache",
	extensions: [
		"bcpio"
	]
},
	"application/x-bdoc": {
	compressible: false,
	extensions: [
		"bdoc"
	]
},
	"application/x-bittorrent": {
	source: "apache",
	extensions: [
		"torrent"
	]
},
	"application/x-blorb": {
	source: "apache",
	extensions: [
		"blb",
		"blorb"
	]
},
	"application/x-bzip": {
	source: "apache",
	compressible: false,
	extensions: [
		"bz"
	]
},
	"application/x-bzip2": {
	source: "apache",
	compressible: false,
	extensions: [
		"bz2",
		"boz"
	]
},
	"application/x-cbr": {
	source: "apache",
	extensions: [
		"cbr",
		"cba",
		"cbt",
		"cbz",
		"cb7"
	]
},
	"application/x-cdlink": {
	source: "apache",
	extensions: [
		"vcd"
	]
},
	"application/x-cfs-compressed": {
	source: "apache",
	extensions: [
		"cfs"
	]
},
	"application/x-chat": {
	source: "apache",
	extensions: [
		"chat"
	]
},
	"application/x-chess-pgn": {
	source: "apache",
	extensions: [
		"pgn"
	]
},
	"application/x-chrome-extension": {
	extensions: [
		"crx"
	]
},
	"application/x-cocoa": {
	source: "nginx",
	extensions: [
		"cco"
	]
},
	"application/x-compress": {
	source: "apache"
},
	"application/x-conference": {
	source: "apache",
	extensions: [
		"nsc"
	]
},
	"application/x-cpio": {
	source: "apache",
	extensions: [
		"cpio"
	]
},
	"application/x-csh": {
	source: "apache",
	extensions: [
		"csh"
	]
},
	"application/x-deb": {
	compressible: false
},
	"application/x-debian-package": {
	source: "apache",
	extensions: [
		"deb",
		"udeb"
	]
},
	"application/x-dgc-compressed": {
	source: "apache",
	extensions: [
		"dgc"
	]
},
	"application/x-director": {
	source: "apache",
	extensions: [
		"dir",
		"dcr",
		"dxr",
		"cst",
		"cct",
		"cxt",
		"w3d",
		"fgd",
		"swa"
	]
},
	"application/x-doom": {
	source: "apache",
	extensions: [
		"wad"
	]
},
	"application/x-dtbncx+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"ncx"
	]
},
	"application/x-dtbook+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"dtb"
	]
},
	"application/x-dtbresource+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"res"
	]
},
	"application/x-dvi": {
	source: "apache",
	compressible: false,
	extensions: [
		"dvi"
	]
},
	"application/x-envoy": {
	source: "apache",
	extensions: [
		"evy"
	]
},
	"application/x-eva": {
	source: "apache",
	extensions: [
		"eva"
	]
},
	"application/x-font-bdf": {
	source: "apache",
	extensions: [
		"bdf"
	]
},
	"application/x-font-dos": {
	source: "apache"
},
	"application/x-font-framemaker": {
	source: "apache"
},
	"application/x-font-ghostscript": {
	source: "apache",
	extensions: [
		"gsf"
	]
},
	"application/x-font-libgrx": {
	source: "apache"
},
	"application/x-font-linux-psf": {
	source: "apache",
	extensions: [
		"psf"
	]
},
	"application/x-font-pcf": {
	source: "apache",
	extensions: [
		"pcf"
	]
},
	"application/x-font-snf": {
	source: "apache",
	extensions: [
		"snf"
	]
},
	"application/x-font-speedo": {
	source: "apache"
},
	"application/x-font-sunos-news": {
	source: "apache"
},
	"application/x-font-type1": {
	source: "apache",
	extensions: [
		"pfa",
		"pfb",
		"pfm",
		"afm"
	]
},
	"application/x-font-vfont": {
	source: "apache"
},
	"application/x-freearc": {
	source: "apache",
	extensions: [
		"arc"
	]
},
	"application/x-futuresplash": {
	source: "apache",
	extensions: [
		"spl"
	]
},
	"application/x-gca-compressed": {
	source: "apache",
	extensions: [
		"gca"
	]
},
	"application/x-glulx": {
	source: "apache",
	extensions: [
		"ulx"
	]
},
	"application/x-gnumeric": {
	source: "apache",
	extensions: [
		"gnumeric"
	]
},
	"application/x-gramps-xml": {
	source: "apache",
	extensions: [
		"gramps"
	]
},
	"application/x-gtar": {
	source: "apache",
	extensions: [
		"gtar"
	]
},
	"application/x-gzip": {
	source: "apache"
},
	"application/x-hdf": {
	source: "apache",
	extensions: [
		"hdf"
	]
},
	"application/x-httpd-php": {
	compressible: true,
	extensions: [
		"php"
	]
},
	"application/x-install-instructions": {
	source: "apache",
	extensions: [
		"install"
	]
},
	"application/x-iso9660-image": {
	source: "apache",
	extensions: [
		"iso"
	]
},
	"application/x-iwork-keynote-sffkey": {
	extensions: [
		"key"
	]
},
	"application/x-iwork-numbers-sffnumbers": {
	extensions: [
		"numbers"
	]
},
	"application/x-iwork-pages-sffpages": {
	extensions: [
		"pages"
	]
},
	"application/x-java-archive-diff": {
	source: "nginx",
	extensions: [
		"jardiff"
	]
},
	"application/x-java-jnlp-file": {
	source: "apache",
	compressible: false,
	extensions: [
		"jnlp"
	]
},
	"application/x-javascript": {
	compressible: true
},
	"application/x-keepass2": {
	extensions: [
		"kdbx"
	]
},
	"application/x-latex": {
	source: "apache",
	compressible: false,
	extensions: [
		"latex"
	]
},
	"application/x-lua-bytecode": {
	extensions: [
		"luac"
	]
},
	"application/x-lzh-compressed": {
	source: "apache",
	extensions: [
		"lzh",
		"lha"
	]
},
	"application/x-makeself": {
	source: "nginx",
	extensions: [
		"run"
	]
},
	"application/x-mie": {
	source: "apache",
	extensions: [
		"mie"
	]
},
	"application/x-mobipocket-ebook": {
	source: "apache",
	extensions: [
		"prc",
		"mobi"
	]
},
	"application/x-mpegurl": {
	compressible: false
},
	"application/x-ms-application": {
	source: "apache",
	extensions: [
		"application"
	]
},
	"application/x-ms-shortcut": {
	source: "apache",
	extensions: [
		"lnk"
	]
},
	"application/x-ms-wmd": {
	source: "apache",
	extensions: [
		"wmd"
	]
},
	"application/x-ms-wmz": {
	source: "apache",
	extensions: [
		"wmz"
	]
},
	"application/x-ms-xbap": {
	source: "apache",
	extensions: [
		"xbap"
	]
},
	"application/x-msaccess": {
	source: "apache",
	extensions: [
		"mdb"
	]
},
	"application/x-msbinder": {
	source: "apache",
	extensions: [
		"obd"
	]
},
	"application/x-mscardfile": {
	source: "apache",
	extensions: [
		"crd"
	]
},
	"application/x-msclip": {
	source: "apache",
	extensions: [
		"clp"
	]
},
	"application/x-msdos-program": {
	extensions: [
		"exe"
	]
},
	"application/x-msdownload": {
	source: "apache",
	extensions: [
		"exe",
		"dll",
		"com",
		"bat",
		"msi"
	]
},
	"application/x-msmediaview": {
	source: "apache",
	extensions: [
		"mvb",
		"m13",
		"m14"
	]
},
	"application/x-msmetafile": {
	source: "apache",
	extensions: [
		"wmf",
		"wmz",
		"emf",
		"emz"
	]
},
	"application/x-msmoney": {
	source: "apache",
	extensions: [
		"mny"
	]
},
	"application/x-mspublisher": {
	source: "apache",
	extensions: [
		"pub"
	]
},
	"application/x-msschedule": {
	source: "apache",
	extensions: [
		"scd"
	]
},
	"application/x-msterminal": {
	source: "apache",
	extensions: [
		"trm"
	]
},
	"application/x-mswrite": {
	source: "apache",
	extensions: [
		"wri"
	]
},
	"application/x-netcdf": {
	source: "apache",
	extensions: [
		"nc",
		"cdf"
	]
},
	"application/x-ns-proxy-autoconfig": {
	compressible: true,
	extensions: [
		"pac"
	]
},
	"application/x-nzb": {
	source: "apache",
	extensions: [
		"nzb"
	]
},
	"application/x-perl": {
	source: "nginx",
	extensions: [
		"pl",
		"pm"
	]
},
	"application/x-pilot": {
	source: "nginx",
	extensions: [
		"prc",
		"pdb"
	]
},
	"application/x-pkcs12": {
	source: "apache",
	compressible: false,
	extensions: [
		"p12",
		"pfx"
	]
},
	"application/x-pkcs7-certificates": {
	source: "apache",
	extensions: [
		"p7b",
		"spc"
	]
},
	"application/x-pkcs7-certreqresp": {
	source: "apache",
	extensions: [
		"p7r"
	]
},
	"application/x-pki-message": {
	source: "iana"
},
	"application/x-rar-compressed": {
	source: "apache",
	compressible: false,
	extensions: [
		"rar"
	]
},
	"application/x-redhat-package-manager": {
	source: "nginx",
	extensions: [
		"rpm"
	]
},
	"application/x-research-info-systems": {
	source: "apache",
	extensions: [
		"ris"
	]
},
	"application/x-sea": {
	source: "nginx",
	extensions: [
		"sea"
	]
},
	"application/x-sh": {
	source: "apache",
	compressible: true,
	extensions: [
		"sh"
	]
},
	"application/x-shar": {
	source: "apache",
	extensions: [
		"shar"
	]
},
	"application/x-shockwave-flash": {
	source: "apache",
	compressible: false,
	extensions: [
		"swf"
	]
},
	"application/x-silverlight-app": {
	source: "apache",
	extensions: [
		"xap"
	]
},
	"application/x-sql": {
	source: "apache",
	extensions: [
		"sql"
	]
},
	"application/x-stuffit": {
	source: "apache",
	compressible: false,
	extensions: [
		"sit"
	]
},
	"application/x-stuffitx": {
	source: "apache",
	extensions: [
		"sitx"
	]
},
	"application/x-subrip": {
	source: "apache",
	extensions: [
		"srt"
	]
},
	"application/x-sv4cpio": {
	source: "apache",
	extensions: [
		"sv4cpio"
	]
},
	"application/x-sv4crc": {
	source: "apache",
	extensions: [
		"sv4crc"
	]
},
	"application/x-t3vm-image": {
	source: "apache",
	extensions: [
		"t3"
	]
},
	"application/x-tads": {
	source: "apache",
	extensions: [
		"gam"
	]
},
	"application/x-tar": {
	source: "apache",
	compressible: true,
	extensions: [
		"tar"
	]
},
	"application/x-tcl": {
	source: "apache",
	extensions: [
		"tcl",
		"tk"
	]
},
	"application/x-tex": {
	source: "apache",
	extensions: [
		"tex"
	]
},
	"application/x-tex-tfm": {
	source: "apache",
	extensions: [
		"tfm"
	]
},
	"application/x-texinfo": {
	source: "apache",
	extensions: [
		"texinfo",
		"texi"
	]
},
	"application/x-tgif": {
	source: "apache",
	extensions: [
		"obj"
	]
},
	"application/x-ustar": {
	source: "apache",
	extensions: [
		"ustar"
	]
},
	"application/x-virtualbox-hdd": {
	compressible: true,
	extensions: [
		"hdd"
	]
},
	"application/x-virtualbox-ova": {
	compressible: true,
	extensions: [
		"ova"
	]
},
	"application/x-virtualbox-ovf": {
	compressible: true,
	extensions: [
		"ovf"
	]
},
	"application/x-virtualbox-vbox": {
	compressible: true,
	extensions: [
		"vbox"
	]
},
	"application/x-virtualbox-vbox-extpack": {
	compressible: false,
	extensions: [
		"vbox-extpack"
	]
},
	"application/x-virtualbox-vdi": {
	compressible: true,
	extensions: [
		"vdi"
	]
},
	"application/x-virtualbox-vhd": {
	compressible: true,
	extensions: [
		"vhd"
	]
},
	"application/x-virtualbox-vmdk": {
	compressible: true,
	extensions: [
		"vmdk"
	]
},
	"application/x-wais-source": {
	source: "apache",
	extensions: [
		"src"
	]
},
	"application/x-web-app-manifest+json": {
	compressible: true,
	extensions: [
		"webapp"
	]
},
	"application/x-www-form-urlencoded": {
	source: "iana",
	compressible: true
},
	"application/x-x509-ca-cert": {
	source: "iana",
	extensions: [
		"der",
		"crt",
		"pem"
	]
},
	"application/x-x509-ca-ra-cert": {
	source: "iana"
},
	"application/x-x509-next-ca-cert": {
	source: "iana"
},
	"application/x-xfig": {
	source: "apache",
	extensions: [
		"fig"
	]
},
	"application/x-xliff+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"xlf"
	]
},
	"application/x-xpinstall": {
	source: "apache",
	compressible: false,
	extensions: [
		"xpi"
	]
},
	"application/x-xz": {
	source: "apache",
	extensions: [
		"xz"
	]
},
	"application/x-zmachine": {
	source: "apache",
	extensions: [
		"z1",
		"z2",
		"z3",
		"z4",
		"z5",
		"z6",
		"z7",
		"z8"
	]
},
	"application/x400-bp": {
	source: "iana"
},
	"application/xacml+xml": {
	source: "iana",
	compressible: true
},
	"application/xaml+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"xaml"
	]
},
	"application/xcap-att+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xav"
	]
},
	"application/xcap-caps+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xca"
	]
},
	"application/xcap-diff+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xdf"
	]
},
	"application/xcap-el+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xel"
	]
},
	"application/xcap-error+xml": {
	source: "iana",
	compressible: true
},
	"application/xcap-ns+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xns"
	]
},
	"application/xcon-conference-info+xml": {
	source: "iana",
	compressible: true
},
	"application/xcon-conference-info-diff+xml": {
	source: "iana",
	compressible: true
},
	"application/xenc+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xenc"
	]
},
	"application/xhtml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xhtml",
		"xht"
	]
},
	"application/xhtml-voice+xml": {
	source: "apache",
	compressible: true
},
	"application/xliff+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xlf"
	]
},
	"application/xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xml",
		"xsl",
		"xsd",
		"rng"
	]
},
	"application/xml-dtd": {
	source: "iana",
	compressible: true,
	extensions: [
		"dtd"
	]
},
	"application/xml-external-parsed-entity": {
	source: "iana"
},
	"application/xml-patch+xml": {
	source: "iana",
	compressible: true
},
	"application/xmpp+xml": {
	source: "iana",
	compressible: true
},
	"application/xop+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xop"
	]
},
	"application/xproc+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"xpl"
	]
},
	"application/xslt+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xsl",
		"xslt"
	]
},
	"application/xspf+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"xspf"
	]
},
	"application/xv+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mxml",
		"xhvml",
		"xvml",
		"xvm"
	]
},
	"application/yang": {
	source: "iana",
	extensions: [
		"yang"
	]
},
	"application/yang-data+json": {
	source: "iana",
	compressible: true
},
	"application/yang-data+xml": {
	source: "iana",
	compressible: true
},
	"application/yang-patch+json": {
	source: "iana",
	compressible: true
},
	"application/yang-patch+xml": {
	source: "iana",
	compressible: true
},
	"application/yin+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"yin"
	]
},
	"application/zip": {
	source: "iana",
	compressible: false,
	extensions: [
		"zip"
	]
},
	"application/zlib": {
	source: "iana"
},
	"application/zstd": {
	source: "iana"
},
	"audio/1d-interleaved-parityfec": {
	source: "iana"
},
	"audio/32kadpcm": {
	source: "iana"
},
	"audio/3gpp": {
	source: "iana",
	compressible: false,
	extensions: [
		"3gpp"
	]
},
	"audio/3gpp2": {
	source: "iana"
},
	"audio/aac": {
	source: "iana"
},
	"audio/ac3": {
	source: "iana"
},
	"audio/adpcm": {
	source: "apache",
	extensions: [
		"adp"
	]
},
	"audio/amr": {
	source: "iana",
	extensions: [
		"amr"
	]
},
	"audio/amr-wb": {
	source: "iana"
},
	"audio/amr-wb+": {
	source: "iana"
},
	"audio/aptx": {
	source: "iana"
},
	"audio/asc": {
	source: "iana"
},
	"audio/atrac-advanced-lossless": {
	source: "iana"
},
	"audio/atrac-x": {
	source: "iana"
},
	"audio/atrac3": {
	source: "iana"
},
	"audio/basic": {
	source: "iana",
	compressible: false,
	extensions: [
		"au",
		"snd"
	]
},
	"audio/bv16": {
	source: "iana"
},
	"audio/bv32": {
	source: "iana"
},
	"audio/clearmode": {
	source: "iana"
},
	"audio/cn": {
	source: "iana"
},
	"audio/dat12": {
	source: "iana"
},
	"audio/dls": {
	source: "iana"
},
	"audio/dsr-es201108": {
	source: "iana"
},
	"audio/dsr-es202050": {
	source: "iana"
},
	"audio/dsr-es202211": {
	source: "iana"
},
	"audio/dsr-es202212": {
	source: "iana"
},
	"audio/dv": {
	source: "iana"
},
	"audio/dvi4": {
	source: "iana"
},
	"audio/eac3": {
	source: "iana"
},
	"audio/encaprtp": {
	source: "iana"
},
	"audio/evrc": {
	source: "iana"
},
	"audio/evrc-qcp": {
	source: "iana"
},
	"audio/evrc0": {
	source: "iana"
},
	"audio/evrc1": {
	source: "iana"
},
	"audio/evrcb": {
	source: "iana"
},
	"audio/evrcb0": {
	source: "iana"
},
	"audio/evrcb1": {
	source: "iana"
},
	"audio/evrcnw": {
	source: "iana"
},
	"audio/evrcnw0": {
	source: "iana"
},
	"audio/evrcnw1": {
	source: "iana"
},
	"audio/evrcwb": {
	source: "iana"
},
	"audio/evrcwb0": {
	source: "iana"
},
	"audio/evrcwb1": {
	source: "iana"
},
	"audio/evs": {
	source: "iana"
},
	"audio/flexfec": {
	source: "iana"
},
	"audio/fwdred": {
	source: "iana"
},
	"audio/g711-0": {
	source: "iana"
},
	"audio/g719": {
	source: "iana"
},
	"audio/g722": {
	source: "iana"
},
	"audio/g7221": {
	source: "iana"
},
	"audio/g723": {
	source: "iana"
},
	"audio/g726-16": {
	source: "iana"
},
	"audio/g726-24": {
	source: "iana"
},
	"audio/g726-32": {
	source: "iana"
},
	"audio/g726-40": {
	source: "iana"
},
	"audio/g728": {
	source: "iana"
},
	"audio/g729": {
	source: "iana"
},
	"audio/g7291": {
	source: "iana"
},
	"audio/g729d": {
	source: "iana"
},
	"audio/g729e": {
	source: "iana"
},
	"audio/gsm": {
	source: "iana"
},
	"audio/gsm-efr": {
	source: "iana"
},
	"audio/gsm-hr-08": {
	source: "iana"
},
	"audio/ilbc": {
	source: "iana"
},
	"audio/ip-mr_v2.5": {
	source: "iana"
},
	"audio/isac": {
	source: "apache"
},
	"audio/l16": {
	source: "iana"
},
	"audio/l20": {
	source: "iana"
},
	"audio/l24": {
	source: "iana",
	compressible: false
},
	"audio/l8": {
	source: "iana"
},
	"audio/lpc": {
	source: "iana"
},
	"audio/melp": {
	source: "iana"
},
	"audio/melp1200": {
	source: "iana"
},
	"audio/melp2400": {
	source: "iana"
},
	"audio/melp600": {
	source: "iana"
},
	"audio/mhas": {
	source: "iana"
},
	"audio/midi": {
	source: "apache",
	extensions: [
		"mid",
		"midi",
		"kar",
		"rmi"
	]
},
	"audio/mobile-xmf": {
	source: "iana",
	extensions: [
		"mxmf"
	]
},
	"audio/mp3": {
	compressible: false,
	extensions: [
		"mp3"
	]
},
	"audio/mp4": {
	source: "iana",
	compressible: false,
	extensions: [
		"m4a",
		"mp4a"
	]
},
	"audio/mp4a-latm": {
	source: "iana"
},
	"audio/mpa": {
	source: "iana"
},
	"audio/mpa-robust": {
	source: "iana"
},
	"audio/mpeg": {
	source: "iana",
	compressible: false,
	extensions: [
		"mpga",
		"mp2",
		"mp2a",
		"mp3",
		"m2a",
		"m3a"
	]
},
	"audio/mpeg4-generic": {
	source: "iana"
},
	"audio/musepack": {
	source: "apache"
},
	"audio/ogg": {
	source: "iana",
	compressible: false,
	extensions: [
		"oga",
		"ogg",
		"spx",
		"opus"
	]
},
	"audio/opus": {
	source: "iana"
},
	"audio/parityfec": {
	source: "iana"
},
	"audio/pcma": {
	source: "iana"
},
	"audio/pcma-wb": {
	source: "iana"
},
	"audio/pcmu": {
	source: "iana"
},
	"audio/pcmu-wb": {
	source: "iana"
},
	"audio/prs.sid": {
	source: "iana"
},
	"audio/qcelp": {
	source: "iana"
},
	"audio/raptorfec": {
	source: "iana"
},
	"audio/red": {
	source: "iana"
},
	"audio/rtp-enc-aescm128": {
	source: "iana"
},
	"audio/rtp-midi": {
	source: "iana"
},
	"audio/rtploopback": {
	source: "iana"
},
	"audio/rtx": {
	source: "iana"
},
	"audio/s3m": {
	source: "apache",
	extensions: [
		"s3m"
	]
},
	"audio/scip": {
	source: "iana"
},
	"audio/silk": {
	source: "apache",
	extensions: [
		"sil"
	]
},
	"audio/smv": {
	source: "iana"
},
	"audio/smv-qcp": {
	source: "iana"
},
	"audio/smv0": {
	source: "iana"
},
	"audio/sofa": {
	source: "iana"
},
	"audio/sp-midi": {
	source: "iana"
},
	"audio/speex": {
	source: "iana"
},
	"audio/t140c": {
	source: "iana"
},
	"audio/t38": {
	source: "iana"
},
	"audio/telephone-event": {
	source: "iana"
},
	"audio/tetra_acelp": {
	source: "iana"
},
	"audio/tetra_acelp_bb": {
	source: "iana"
},
	"audio/tone": {
	source: "iana"
},
	"audio/tsvcis": {
	source: "iana"
},
	"audio/uemclip": {
	source: "iana"
},
	"audio/ulpfec": {
	source: "iana"
},
	"audio/usac": {
	source: "iana"
},
	"audio/vdvi": {
	source: "iana"
},
	"audio/vmr-wb": {
	source: "iana"
},
	"audio/vnd.3gpp.iufp": {
	source: "iana"
},
	"audio/vnd.4sb": {
	source: "iana"
},
	"audio/vnd.audiokoz": {
	source: "iana"
},
	"audio/vnd.celp": {
	source: "iana"
},
	"audio/vnd.cisco.nse": {
	source: "iana"
},
	"audio/vnd.cmles.radio-events": {
	source: "iana"
},
	"audio/vnd.cns.anp1": {
	source: "iana"
},
	"audio/vnd.cns.inf1": {
	source: "iana"
},
	"audio/vnd.dece.audio": {
	source: "iana",
	extensions: [
		"uva",
		"uvva"
	]
},
	"audio/vnd.digital-winds": {
	source: "iana",
	extensions: [
		"eol"
	]
},
	"audio/vnd.dlna.adts": {
	source: "iana"
},
	"audio/vnd.dolby.heaac.1": {
	source: "iana"
},
	"audio/vnd.dolby.heaac.2": {
	source: "iana"
},
	"audio/vnd.dolby.mlp": {
	source: "iana"
},
	"audio/vnd.dolby.mps": {
	source: "iana"
},
	"audio/vnd.dolby.pl2": {
	source: "iana"
},
	"audio/vnd.dolby.pl2x": {
	source: "iana"
},
	"audio/vnd.dolby.pl2z": {
	source: "iana"
},
	"audio/vnd.dolby.pulse.1": {
	source: "iana"
},
	"audio/vnd.dra": {
	source: "iana",
	extensions: [
		"dra"
	]
},
	"audio/vnd.dts": {
	source: "iana",
	extensions: [
		"dts"
	]
},
	"audio/vnd.dts.hd": {
	source: "iana",
	extensions: [
		"dtshd"
	]
},
	"audio/vnd.dts.uhd": {
	source: "iana"
},
	"audio/vnd.dvb.file": {
	source: "iana"
},
	"audio/vnd.everad.plj": {
	source: "iana"
},
	"audio/vnd.hns.audio": {
	source: "iana"
},
	"audio/vnd.lucent.voice": {
	source: "iana",
	extensions: [
		"lvp"
	]
},
	"audio/vnd.ms-playready.media.pya": {
	source: "iana",
	extensions: [
		"pya"
	]
},
	"audio/vnd.nokia.mobile-xmf": {
	source: "iana"
},
	"audio/vnd.nortel.vbk": {
	source: "iana"
},
	"audio/vnd.nuera.ecelp4800": {
	source: "iana",
	extensions: [
		"ecelp4800"
	]
},
	"audio/vnd.nuera.ecelp7470": {
	source: "iana",
	extensions: [
		"ecelp7470"
	]
},
	"audio/vnd.nuera.ecelp9600": {
	source: "iana",
	extensions: [
		"ecelp9600"
	]
},
	"audio/vnd.octel.sbc": {
	source: "iana"
},
	"audio/vnd.presonus.multitrack": {
	source: "iana"
},
	"audio/vnd.qcelp": {
	source: "iana"
},
	"audio/vnd.rhetorex.32kadpcm": {
	source: "iana"
},
	"audio/vnd.rip": {
	source: "iana",
	extensions: [
		"rip"
	]
},
	"audio/vnd.rn-realaudio": {
	compressible: false
},
	"audio/vnd.sealedmedia.softseal.mpeg": {
	source: "iana"
},
	"audio/vnd.vmx.cvsd": {
	source: "iana"
},
	"audio/vnd.wave": {
	compressible: false
},
	"audio/vorbis": {
	source: "iana",
	compressible: false
},
	"audio/vorbis-config": {
	source: "iana"
},
	"audio/wav": {
	compressible: false,
	extensions: [
		"wav"
	]
},
	"audio/wave": {
	compressible: false,
	extensions: [
		"wav"
	]
},
	"audio/webm": {
	source: "apache",
	compressible: false,
	extensions: [
		"weba"
	]
},
	"audio/x-aac": {
	source: "apache",
	compressible: false,
	extensions: [
		"aac"
	]
},
	"audio/x-aiff": {
	source: "apache",
	extensions: [
		"aif",
		"aiff",
		"aifc"
	]
},
	"audio/x-caf": {
	source: "apache",
	compressible: false,
	extensions: [
		"caf"
	]
},
	"audio/x-flac": {
	source: "apache",
	extensions: [
		"flac"
	]
},
	"audio/x-m4a": {
	source: "nginx",
	extensions: [
		"m4a"
	]
},
	"audio/x-matroska": {
	source: "apache",
	extensions: [
		"mka"
	]
},
	"audio/x-mpegurl": {
	source: "apache",
	extensions: [
		"m3u"
	]
},
	"audio/x-ms-wax": {
	source: "apache",
	extensions: [
		"wax"
	]
},
	"audio/x-ms-wma": {
	source: "apache",
	extensions: [
		"wma"
	]
},
	"audio/x-pn-realaudio": {
	source: "apache",
	extensions: [
		"ram",
		"ra"
	]
},
	"audio/x-pn-realaudio-plugin": {
	source: "apache",
	extensions: [
		"rmp"
	]
},
	"audio/x-realaudio": {
	source: "nginx",
	extensions: [
		"ra"
	]
},
	"audio/x-tta": {
	source: "apache"
},
	"audio/x-wav": {
	source: "apache",
	extensions: [
		"wav"
	]
},
	"audio/xm": {
	source: "apache",
	extensions: [
		"xm"
	]
},
	"chemical/x-cdx": {
	source: "apache",
	extensions: [
		"cdx"
	]
},
	"chemical/x-cif": {
	source: "apache",
	extensions: [
		"cif"
	]
},
	"chemical/x-cmdf": {
	source: "apache",
	extensions: [
		"cmdf"
	]
},
	"chemical/x-cml": {
	source: "apache",
	extensions: [
		"cml"
	]
},
	"chemical/x-csml": {
	source: "apache",
	extensions: [
		"csml"
	]
},
	"chemical/x-pdb": {
	source: "apache"
},
	"chemical/x-xyz": {
	source: "apache",
	extensions: [
		"xyz"
	]
},
	"font/collection": {
	source: "iana",
	extensions: [
		"ttc"
	]
},
	"font/otf": {
	source: "iana",
	compressible: true,
	extensions: [
		"otf"
	]
},
	"font/sfnt": {
	source: "iana"
},
	"font/ttf": {
	source: "iana",
	compressible: true,
	extensions: [
		"ttf"
	]
},
	"font/woff": {
	source: "iana",
	extensions: [
		"woff"
	]
},
	"font/woff2": {
	source: "iana",
	extensions: [
		"woff2"
	]
},
	"image/aces": {
	source: "iana",
	extensions: [
		"exr"
	]
},
	"image/apng": {
	compressible: false,
	extensions: [
		"apng"
	]
},
	"image/avci": {
	source: "iana",
	extensions: [
		"avci"
	]
},
	"image/avcs": {
	source: "iana",
	extensions: [
		"avcs"
	]
},
	"image/avif": {
	source: "iana",
	compressible: false,
	extensions: [
		"avif"
	]
},
	"image/bmp": {
	source: "iana",
	compressible: true,
	extensions: [
		"bmp"
	]
},
	"image/cgm": {
	source: "iana",
	extensions: [
		"cgm"
	]
},
	"image/dicom-rle": {
	source: "iana",
	extensions: [
		"drle"
	]
},
	"image/emf": {
	source: "iana",
	extensions: [
		"emf"
	]
},
	"image/fits": {
	source: "iana",
	extensions: [
		"fits"
	]
},
	"image/g3fax": {
	source: "iana",
	extensions: [
		"g3"
	]
},
	"image/gif": {
	source: "iana",
	compressible: false,
	extensions: [
		"gif"
	]
},
	"image/heic": {
	source: "iana",
	extensions: [
		"heic"
	]
},
	"image/heic-sequence": {
	source: "iana",
	extensions: [
		"heics"
	]
},
	"image/heif": {
	source: "iana",
	extensions: [
		"heif"
	]
},
	"image/heif-sequence": {
	source: "iana",
	extensions: [
		"heifs"
	]
},
	"image/hej2k": {
	source: "iana",
	extensions: [
		"hej2"
	]
},
	"image/hsj2": {
	source: "iana",
	extensions: [
		"hsj2"
	]
},
	"image/ief": {
	source: "iana",
	extensions: [
		"ief"
	]
},
	"image/jls": {
	source: "iana",
	extensions: [
		"jls"
	]
},
	"image/jp2": {
	source: "iana",
	compressible: false,
	extensions: [
		"jp2",
		"jpg2"
	]
},
	"image/jpeg": {
	source: "iana",
	compressible: false,
	extensions: [
		"jpeg",
		"jpg",
		"jpe"
	]
},
	"image/jph": {
	source: "iana",
	extensions: [
		"jph"
	]
},
	"image/jphc": {
	source: "iana",
	extensions: [
		"jhc"
	]
},
	"image/jpm": {
	source: "iana",
	compressible: false,
	extensions: [
		"jpm"
	]
},
	"image/jpx": {
	source: "iana",
	compressible: false,
	extensions: [
		"jpx",
		"jpf"
	]
},
	"image/jxr": {
	source: "iana",
	extensions: [
		"jxr"
	]
},
	"image/jxra": {
	source: "iana",
	extensions: [
		"jxra"
	]
},
	"image/jxrs": {
	source: "iana",
	extensions: [
		"jxrs"
	]
},
	"image/jxs": {
	source: "iana",
	extensions: [
		"jxs"
	]
},
	"image/jxsc": {
	source: "iana",
	extensions: [
		"jxsc"
	]
},
	"image/jxsi": {
	source: "iana",
	extensions: [
		"jxsi"
	]
},
	"image/jxss": {
	source: "iana",
	extensions: [
		"jxss"
	]
},
	"image/ktx": {
	source: "iana",
	extensions: [
		"ktx"
	]
},
	"image/ktx2": {
	source: "iana",
	extensions: [
		"ktx2"
	]
},
	"image/naplps": {
	source: "iana"
},
	"image/pjpeg": {
	compressible: false
},
	"image/png": {
	source: "iana",
	compressible: false,
	extensions: [
		"png"
	]
},
	"image/prs.btif": {
	source: "iana",
	extensions: [
		"btif"
	]
},
	"image/prs.pti": {
	source: "iana",
	extensions: [
		"pti"
	]
},
	"image/pwg-raster": {
	source: "iana"
},
	"image/sgi": {
	source: "apache",
	extensions: [
		"sgi"
	]
},
	"image/svg+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"svg",
		"svgz"
	]
},
	"image/t38": {
	source: "iana",
	extensions: [
		"t38"
	]
},
	"image/tiff": {
	source: "iana",
	compressible: false,
	extensions: [
		"tif",
		"tiff"
	]
},
	"image/tiff-fx": {
	source: "iana",
	extensions: [
		"tfx"
	]
},
	"image/vnd.adobe.photoshop": {
	source: "iana",
	compressible: true,
	extensions: [
		"psd"
	]
},
	"image/vnd.airzip.accelerator.azv": {
	source: "iana",
	extensions: [
		"azv"
	]
},
	"image/vnd.cns.inf2": {
	source: "iana"
},
	"image/vnd.dece.graphic": {
	source: "iana",
	extensions: [
		"uvi",
		"uvvi",
		"uvg",
		"uvvg"
	]
},
	"image/vnd.djvu": {
	source: "iana",
	extensions: [
		"djvu",
		"djv"
	]
},
	"image/vnd.dvb.subtitle": {
	source: "iana",
	extensions: [
		"sub"
	]
},
	"image/vnd.dwg": {
	source: "iana",
	extensions: [
		"dwg"
	]
},
	"image/vnd.dxf": {
	source: "iana",
	extensions: [
		"dxf"
	]
},
	"image/vnd.fastbidsheet": {
	source: "iana",
	extensions: [
		"fbs"
	]
},
	"image/vnd.fpx": {
	source: "iana",
	extensions: [
		"fpx"
	]
},
	"image/vnd.fst": {
	source: "iana",
	extensions: [
		"fst"
	]
},
	"image/vnd.fujixerox.edmics-mmr": {
	source: "iana",
	extensions: [
		"mmr"
	]
},
	"image/vnd.fujixerox.edmics-rlc": {
	source: "iana",
	extensions: [
		"rlc"
	]
},
	"image/vnd.globalgraphics.pgb": {
	source: "iana"
},
	"image/vnd.microsoft.icon": {
	source: "iana",
	compressible: true,
	extensions: [
		"ico"
	]
},
	"image/vnd.mix": {
	source: "iana"
},
	"image/vnd.mozilla.apng": {
	source: "iana"
},
	"image/vnd.ms-dds": {
	compressible: true,
	extensions: [
		"dds"
	]
},
	"image/vnd.ms-modi": {
	source: "iana",
	extensions: [
		"mdi"
	]
},
	"image/vnd.ms-photo": {
	source: "apache",
	extensions: [
		"wdp"
	]
},
	"image/vnd.net-fpx": {
	source: "iana",
	extensions: [
		"npx"
	]
},
	"image/vnd.pco.b16": {
	source: "iana",
	extensions: [
		"b16"
	]
},
	"image/vnd.radiance": {
	source: "iana"
},
	"image/vnd.sealed.png": {
	source: "iana"
},
	"image/vnd.sealedmedia.softseal.gif": {
	source: "iana"
},
	"image/vnd.sealedmedia.softseal.jpg": {
	source: "iana"
},
	"image/vnd.svf": {
	source: "iana"
},
	"image/vnd.tencent.tap": {
	source: "iana",
	extensions: [
		"tap"
	]
},
	"image/vnd.valve.source.texture": {
	source: "iana",
	extensions: [
		"vtf"
	]
},
	"image/vnd.wap.wbmp": {
	source: "iana",
	extensions: [
		"wbmp"
	]
},
	"image/vnd.xiff": {
	source: "iana",
	extensions: [
		"xif"
	]
},
	"image/vnd.zbrush.pcx": {
	source: "iana",
	extensions: [
		"pcx"
	]
},
	"image/webp": {
	source: "apache",
	extensions: [
		"webp"
	]
},
	"image/wmf": {
	source: "iana",
	extensions: [
		"wmf"
	]
},
	"image/x-3ds": {
	source: "apache",
	extensions: [
		"3ds"
	]
},
	"image/x-cmu-raster": {
	source: "apache",
	extensions: [
		"ras"
	]
},
	"image/x-cmx": {
	source: "apache",
	extensions: [
		"cmx"
	]
},
	"image/x-freehand": {
	source: "apache",
	extensions: [
		"fh",
		"fhc",
		"fh4",
		"fh5",
		"fh7"
	]
},
	"image/x-icon": {
	source: "apache",
	compressible: true,
	extensions: [
		"ico"
	]
},
	"image/x-jng": {
	source: "nginx",
	extensions: [
		"jng"
	]
},
	"image/x-mrsid-image": {
	source: "apache",
	extensions: [
		"sid"
	]
},
	"image/x-ms-bmp": {
	source: "nginx",
	compressible: true,
	extensions: [
		"bmp"
	]
},
	"image/x-pcx": {
	source: "apache",
	extensions: [
		"pcx"
	]
},
	"image/x-pict": {
	source: "apache",
	extensions: [
		"pic",
		"pct"
	]
},
	"image/x-portable-anymap": {
	source: "apache",
	extensions: [
		"pnm"
	]
},
	"image/x-portable-bitmap": {
	source: "apache",
	extensions: [
		"pbm"
	]
},
	"image/x-portable-graymap": {
	source: "apache",
	extensions: [
		"pgm"
	]
},
	"image/x-portable-pixmap": {
	source: "apache",
	extensions: [
		"ppm"
	]
},
	"image/x-rgb": {
	source: "apache",
	extensions: [
		"rgb"
	]
},
	"image/x-tga": {
	source: "apache",
	extensions: [
		"tga"
	]
},
	"image/x-xbitmap": {
	source: "apache",
	extensions: [
		"xbm"
	]
},
	"image/x-xcf": {
	compressible: false
},
	"image/x-xpixmap": {
	source: "apache",
	extensions: [
		"xpm"
	]
},
	"image/x-xwindowdump": {
	source: "apache",
	extensions: [
		"xwd"
	]
},
	"message/cpim": {
	source: "iana"
},
	"message/delivery-status": {
	source: "iana"
},
	"message/disposition-notification": {
	source: "iana",
	extensions: [
		"disposition-notification"
	]
},
	"message/external-body": {
	source: "iana"
},
	"message/feedback-report": {
	source: "iana"
},
	"message/global": {
	source: "iana",
	extensions: [
		"u8msg"
	]
},
	"message/global-delivery-status": {
	source: "iana",
	extensions: [
		"u8dsn"
	]
},
	"message/global-disposition-notification": {
	source: "iana",
	extensions: [
		"u8mdn"
	]
},
	"message/global-headers": {
	source: "iana",
	extensions: [
		"u8hdr"
	]
},
	"message/http": {
	source: "iana",
	compressible: false
},
	"message/imdn+xml": {
	source: "iana",
	compressible: true
},
	"message/news": {
	source: "iana"
},
	"message/partial": {
	source: "iana",
	compressible: false
},
	"message/rfc822": {
	source: "iana",
	compressible: true,
	extensions: [
		"eml",
		"mime"
	]
},
	"message/s-http": {
	source: "iana"
},
	"message/sip": {
	source: "iana"
},
	"message/sipfrag": {
	source: "iana"
},
	"message/tracking-status": {
	source: "iana"
},
	"message/vnd.si.simp": {
	source: "iana"
},
	"message/vnd.wfa.wsc": {
	source: "iana",
	extensions: [
		"wsc"
	]
},
	"model/3mf": {
	source: "iana",
	extensions: [
		"3mf"
	]
},
	"model/e57": {
	source: "iana"
},
	"model/gltf+json": {
	source: "iana",
	compressible: true,
	extensions: [
		"gltf"
	]
},
	"model/gltf-binary": {
	source: "iana",
	compressible: true,
	extensions: [
		"glb"
	]
},
	"model/iges": {
	source: "iana",
	compressible: false,
	extensions: [
		"igs",
		"iges"
	]
},
	"model/mesh": {
	source: "iana",
	compressible: false,
	extensions: [
		"msh",
		"mesh",
		"silo"
	]
},
	"model/mtl": {
	source: "iana",
	extensions: [
		"mtl"
	]
},
	"model/obj": {
	source: "iana",
	extensions: [
		"obj"
	]
},
	"model/step": {
	source: "iana"
},
	"model/step+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"stpx"
	]
},
	"model/step+zip": {
	source: "iana",
	compressible: false,
	extensions: [
		"stpz"
	]
},
	"model/step-xml+zip": {
	source: "iana",
	compressible: false,
	extensions: [
		"stpxz"
	]
},
	"model/stl": {
	source: "iana",
	extensions: [
		"stl"
	]
},
	"model/vnd.collada+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"dae"
	]
},
	"model/vnd.dwf": {
	source: "iana",
	extensions: [
		"dwf"
	]
},
	"model/vnd.flatland.3dml": {
	source: "iana"
},
	"model/vnd.gdl": {
	source: "iana",
	extensions: [
		"gdl"
	]
},
	"model/vnd.gs-gdl": {
	source: "apache"
},
	"model/vnd.gs.gdl": {
	source: "iana"
},
	"model/vnd.gtw": {
	source: "iana",
	extensions: [
		"gtw"
	]
},
	"model/vnd.moml+xml": {
	source: "iana",
	compressible: true
},
	"model/vnd.mts": {
	source: "iana",
	extensions: [
		"mts"
	]
},
	"model/vnd.opengex": {
	source: "iana",
	extensions: [
		"ogex"
	]
},
	"model/vnd.parasolid.transmit.binary": {
	source: "iana",
	extensions: [
		"x_b"
	]
},
	"model/vnd.parasolid.transmit.text": {
	source: "iana",
	extensions: [
		"x_t"
	]
},
	"model/vnd.pytha.pyox": {
	source: "iana"
},
	"model/vnd.rosette.annotated-data-model": {
	source: "iana"
},
	"model/vnd.sap.vds": {
	source: "iana",
	extensions: [
		"vds"
	]
},
	"model/vnd.usdz+zip": {
	source: "iana",
	compressible: false,
	extensions: [
		"usdz"
	]
},
	"model/vnd.valve.source.compiled-map": {
	source: "iana",
	extensions: [
		"bsp"
	]
},
	"model/vnd.vtu": {
	source: "iana",
	extensions: [
		"vtu"
	]
},
	"model/vrml": {
	source: "iana",
	compressible: false,
	extensions: [
		"wrl",
		"vrml"
	]
},
	"model/x3d+binary": {
	source: "apache",
	compressible: false,
	extensions: [
		"x3db",
		"x3dbz"
	]
},
	"model/x3d+fastinfoset": {
	source: "iana",
	extensions: [
		"x3db"
	]
},
	"model/x3d+vrml": {
	source: "apache",
	compressible: false,
	extensions: [
		"x3dv",
		"x3dvz"
	]
},
	"model/x3d+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"x3d",
		"x3dz"
	]
},
	"model/x3d-vrml": {
	source: "iana",
	extensions: [
		"x3dv"
	]
},
	"multipart/alternative": {
	source: "iana",
	compressible: false
},
	"multipart/appledouble": {
	source: "iana"
},
	"multipart/byteranges": {
	source: "iana"
},
	"multipart/digest": {
	source: "iana"
},
	"multipart/encrypted": {
	source: "iana",
	compressible: false
},
	"multipart/form-data": {
	source: "iana",
	compressible: false
},
	"multipart/header-set": {
	source: "iana"
},
	"multipart/mixed": {
	source: "iana"
},
	"multipart/multilingual": {
	source: "iana"
},
	"multipart/parallel": {
	source: "iana"
},
	"multipart/related": {
	source: "iana",
	compressible: false
},
	"multipart/report": {
	source: "iana"
},
	"multipart/signed": {
	source: "iana",
	compressible: false
},
	"multipart/vnd.bint.med-plus": {
	source: "iana"
},
	"multipart/voice-message": {
	source: "iana"
},
	"multipart/x-mixed-replace": {
	source: "iana"
},
	"text/1d-interleaved-parityfec": {
	source: "iana"
},
	"text/cache-manifest": {
	source: "iana",
	compressible: true,
	extensions: [
		"appcache",
		"manifest"
	]
},
	"text/calendar": {
	source: "iana",
	extensions: [
		"ics",
		"ifb"
	]
},
	"text/calender": {
	compressible: true
},
	"text/cmd": {
	compressible: true
},
	"text/coffeescript": {
	extensions: [
		"coffee",
		"litcoffee"
	]
},
	"text/cql": {
	source: "iana"
},
	"text/cql-expression": {
	source: "iana"
},
	"text/cql-identifier": {
	source: "iana"
},
	"text/css": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"css"
	]
},
	"text/csv": {
	source: "iana",
	compressible: true,
	extensions: [
		"csv"
	]
},
	"text/csv-schema": {
	source: "iana"
},
	"text/directory": {
	source: "iana"
},
	"text/dns": {
	source: "iana"
},
	"text/ecmascript": {
	source: "iana"
},
	"text/encaprtp": {
	source: "iana"
},
	"text/enriched": {
	source: "iana"
},
	"text/fhirpath": {
	source: "iana"
},
	"text/flexfec": {
	source: "iana"
},
	"text/fwdred": {
	source: "iana"
},
	"text/gff3": {
	source: "iana"
},
	"text/grammar-ref-list": {
	source: "iana"
},
	"text/html": {
	source: "iana",
	compressible: true,
	extensions: [
		"html",
		"htm",
		"shtml"
	]
},
	"text/jade": {
	extensions: [
		"jade"
	]
},
	"text/javascript": {
	source: "iana",
	compressible: true
},
	"text/jcr-cnd": {
	source: "iana"
},
	"text/jsx": {
	compressible: true,
	extensions: [
		"jsx"
	]
},
	"text/less": {
	compressible: true,
	extensions: [
		"less"
	]
},
	"text/markdown": {
	source: "iana",
	compressible: true,
	extensions: [
		"markdown",
		"md"
	]
},
	"text/mathml": {
	source: "nginx",
	extensions: [
		"mml"
	]
},
	"text/mdx": {
	compressible: true,
	extensions: [
		"mdx"
	]
},
	"text/mizar": {
	source: "iana"
},
	"text/n3": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"n3"
	]
},
	"text/parameters": {
	source: "iana",
	charset: "UTF-8"
},
	"text/parityfec": {
	source: "iana"
},
	"text/plain": {
	source: "iana",
	compressible: true,
	extensions: [
		"txt",
		"text",
		"conf",
		"def",
		"list",
		"log",
		"in",
		"ini"
	]
},
	"text/provenance-notation": {
	source: "iana",
	charset: "UTF-8"
},
	"text/prs.fallenstein.rst": {
	source: "iana"
},
	"text/prs.lines.tag": {
	source: "iana",
	extensions: [
		"dsc"
	]
},
	"text/prs.prop.logic": {
	source: "iana"
},
	"text/raptorfec": {
	source: "iana"
},
	"text/red": {
	source: "iana"
},
	"text/rfc822-headers": {
	source: "iana"
},
	"text/richtext": {
	source: "iana",
	compressible: true,
	extensions: [
		"rtx"
	]
},
	"text/rtf": {
	source: "iana",
	compressible: true,
	extensions: [
		"rtf"
	]
},
	"text/rtp-enc-aescm128": {
	source: "iana"
},
	"text/rtploopback": {
	source: "iana"
},
	"text/rtx": {
	source: "iana"
},
	"text/sgml": {
	source: "iana",
	extensions: [
		"sgml",
		"sgm"
	]
},
	"text/shaclc": {
	source: "iana"
},
	"text/shex": {
	source: "iana",
	extensions: [
		"shex"
	]
},
	"text/slim": {
	extensions: [
		"slim",
		"slm"
	]
},
	"text/spdx": {
	source: "iana",
	extensions: [
		"spdx"
	]
},
	"text/strings": {
	source: "iana"
},
	"text/stylus": {
	extensions: [
		"stylus",
		"styl"
	]
},
	"text/t140": {
	source: "iana"
},
	"text/tab-separated-values": {
	source: "iana",
	compressible: true,
	extensions: [
		"tsv"
	]
},
	"text/troff": {
	source: "iana",
	extensions: [
		"t",
		"tr",
		"roff",
		"man",
		"me",
		"ms"
	]
},
	"text/turtle": {
	source: "iana",
	charset: "UTF-8",
	extensions: [
		"ttl"
	]
},
	"text/ulpfec": {
	source: "iana"
},
	"text/uri-list": {
	source: "iana",
	compressible: true,
	extensions: [
		"uri",
		"uris",
		"urls"
	]
},
	"text/vcard": {
	source: "iana",
	compressible: true,
	extensions: [
		"vcard"
	]
},
	"text/vnd.a": {
	source: "iana"
},
	"text/vnd.abc": {
	source: "iana"
},
	"text/vnd.ascii-art": {
	source: "iana"
},
	"text/vnd.curl": {
	source: "iana",
	extensions: [
		"curl"
	]
},
	"text/vnd.curl.dcurl": {
	source: "apache",
	extensions: [
		"dcurl"
	]
},
	"text/vnd.curl.mcurl": {
	source: "apache",
	extensions: [
		"mcurl"
	]
},
	"text/vnd.curl.scurl": {
	source: "apache",
	extensions: [
		"scurl"
	]
},
	"text/vnd.debian.copyright": {
	source: "iana",
	charset: "UTF-8"
},
	"text/vnd.dmclientscript": {
	source: "iana"
},
	"text/vnd.dvb.subtitle": {
	source: "iana",
	extensions: [
		"sub"
	]
},
	"text/vnd.esmertec.theme-descriptor": {
	source: "iana",
	charset: "UTF-8"
},
	"text/vnd.familysearch.gedcom": {
	source: "iana",
	extensions: [
		"ged"
	]
},
	"text/vnd.ficlab.flt": {
	source: "iana"
},
	"text/vnd.fly": {
	source: "iana",
	extensions: [
		"fly"
	]
},
	"text/vnd.fmi.flexstor": {
	source: "iana",
	extensions: [
		"flx"
	]
},
	"text/vnd.gml": {
	source: "iana"
},
	"text/vnd.graphviz": {
	source: "iana",
	extensions: [
		"gv"
	]
},
	"text/vnd.hans": {
	source: "iana"
},
	"text/vnd.hgl": {
	source: "iana"
},
	"text/vnd.in3d.3dml": {
	source: "iana",
	extensions: [
		"3dml"
	]
},
	"text/vnd.in3d.spot": {
	source: "iana",
	extensions: [
		"spot"
	]
},
	"text/vnd.iptc.newsml": {
	source: "iana"
},
	"text/vnd.iptc.nitf": {
	source: "iana"
},
	"text/vnd.latex-z": {
	source: "iana"
},
	"text/vnd.motorola.reflex": {
	source: "iana"
},
	"text/vnd.ms-mediapackage": {
	source: "iana"
},
	"text/vnd.net2phone.commcenter.command": {
	source: "iana"
},
	"text/vnd.radisys.msml-basic-layout": {
	source: "iana"
},
	"text/vnd.senx.warpscript": {
	source: "iana"
},
	"text/vnd.si.uricatalogue": {
	source: "iana"
},
	"text/vnd.sosi": {
	source: "iana"
},
	"text/vnd.sun.j2me.app-descriptor": {
	source: "iana",
	charset: "UTF-8",
	extensions: [
		"jad"
	]
},
	"text/vnd.trolltech.linguist": {
	source: "iana",
	charset: "UTF-8"
},
	"text/vnd.wap.si": {
	source: "iana"
},
	"text/vnd.wap.sl": {
	source: "iana"
},
	"text/vnd.wap.wml": {
	source: "iana",
	extensions: [
		"wml"
	]
},
	"text/vnd.wap.wmlscript": {
	source: "iana",
	extensions: [
		"wmls"
	]
},
	"text/vtt": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"vtt"
	]
},
	"text/x-asm": {
	source: "apache",
	extensions: [
		"s",
		"asm"
	]
},
	"text/x-c": {
	source: "apache",
	extensions: [
		"c",
		"cc",
		"cxx",
		"cpp",
		"h",
		"hh",
		"dic"
	]
},
	"text/x-component": {
	source: "nginx",
	extensions: [
		"htc"
	]
},
	"text/x-fortran": {
	source: "apache",
	extensions: [
		"f",
		"for",
		"f77",
		"f90"
	]
},
	"text/x-gwt-rpc": {
	compressible: true
},
	"text/x-handlebars-template": {
	extensions: [
		"hbs"
	]
},
	"text/x-java-source": {
	source: "apache",
	extensions: [
		"java"
	]
},
	"text/x-jquery-tmpl": {
	compressible: true
},
	"text/x-lua": {
	extensions: [
		"lua"
	]
},
	"text/x-markdown": {
	compressible: true,
	extensions: [
		"mkd"
	]
},
	"text/x-nfo": {
	source: "apache",
	extensions: [
		"nfo"
	]
},
	"text/x-opml": {
	source: "apache",
	extensions: [
		"opml"
	]
},
	"text/x-org": {
	compressible: true,
	extensions: [
		"org"
	]
},
	"text/x-pascal": {
	source: "apache",
	extensions: [
		"p",
		"pas"
	]
},
	"text/x-processing": {
	compressible: true,
	extensions: [
		"pde"
	]
},
	"text/x-sass": {
	extensions: [
		"sass"
	]
},
	"text/x-scss": {
	extensions: [
		"scss"
	]
},
	"text/x-setext": {
	source: "apache",
	extensions: [
		"etx"
	]
},
	"text/x-sfv": {
	source: "apache",
	extensions: [
		"sfv"
	]
},
	"text/x-suse-ymp": {
	compressible: true,
	extensions: [
		"ymp"
	]
},
	"text/x-uuencode": {
	source: "apache",
	extensions: [
		"uu"
	]
},
	"text/x-vcalendar": {
	source: "apache",
	extensions: [
		"vcs"
	]
},
	"text/x-vcard": {
	source: "apache",
	extensions: [
		"vcf"
	]
},
	"text/xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xml"
	]
},
	"text/xml-external-parsed-entity": {
	source: "iana"
},
	"text/yaml": {
	compressible: true,
	extensions: [
		"yaml",
		"yml"
	]
},
	"video/1d-interleaved-parityfec": {
	source: "iana"
},
	"video/3gpp": {
	source: "iana",
	extensions: [
		"3gp",
		"3gpp"
	]
},
	"video/3gpp-tt": {
	source: "iana"
},
	"video/3gpp2": {
	source: "iana",
	extensions: [
		"3g2"
	]
},
	"video/av1": {
	source: "iana"
},
	"video/bmpeg": {
	source: "iana"
},
	"video/bt656": {
	source: "iana"
},
	"video/celb": {
	source: "iana"
},
	"video/dv": {
	source: "iana"
},
	"video/encaprtp": {
	source: "iana"
},
	"video/ffv1": {
	source: "iana"
},
	"video/flexfec": {
	source: "iana"
},
	"video/h261": {
	source: "iana",
	extensions: [
		"h261"
	]
},
	"video/h263": {
	source: "iana",
	extensions: [
		"h263"
	]
},
	"video/h263-1998": {
	source: "iana"
},
	"video/h263-2000": {
	source: "iana"
},
	"video/h264": {
	source: "iana",
	extensions: [
		"h264"
	]
},
	"video/h264-rcdo": {
	source: "iana"
},
	"video/h264-svc": {
	source: "iana"
},
	"video/h265": {
	source: "iana"
},
	"video/iso.segment": {
	source: "iana",
	extensions: [
		"m4s"
	]
},
	"video/jpeg": {
	source: "iana",
	extensions: [
		"jpgv"
	]
},
	"video/jpeg2000": {
	source: "iana"
},
	"video/jpm": {
	source: "apache",
	extensions: [
		"jpm",
		"jpgm"
	]
},
	"video/jxsv": {
	source: "iana"
},
	"video/mj2": {
	source: "iana",
	extensions: [
		"mj2",
		"mjp2"
	]
},
	"video/mp1s": {
	source: "iana"
},
	"video/mp2p": {
	source: "iana"
},
	"video/mp2t": {
	source: "iana",
	extensions: [
		"ts"
	]
},
	"video/mp4": {
	source: "iana",
	compressible: false,
	extensions: [
		"mp4",
		"mp4v",
		"mpg4"
	]
},
	"video/mp4v-es": {
	source: "iana"
},
	"video/mpeg": {
	source: "iana",
	compressible: false,
	extensions: [
		"mpeg",
		"mpg",
		"mpe",
		"m1v",
		"m2v"
	]
},
	"video/mpeg4-generic": {
	source: "iana"
},
	"video/mpv": {
	source: "iana"
},
	"video/nv": {
	source: "iana"
},
	"video/ogg": {
	source: "iana",
	compressible: false,
	extensions: [
		"ogv"
	]
},
	"video/parityfec": {
	source: "iana"
},
	"video/pointer": {
	source: "iana"
},
	"video/quicktime": {
	source: "iana",
	compressible: false,
	extensions: [
		"qt",
		"mov"
	]
},
	"video/raptorfec": {
	source: "iana"
},
	"video/raw": {
	source: "iana"
},
	"video/rtp-enc-aescm128": {
	source: "iana"
},
	"video/rtploopback": {
	source: "iana"
},
	"video/rtx": {
	source: "iana"
},
	"video/scip": {
	source: "iana"
},
	"video/smpte291": {
	source: "iana"
},
	"video/smpte292m": {
	source: "iana"
},
	"video/ulpfec": {
	source: "iana"
},
	"video/vc1": {
	source: "iana"
},
	"video/vc2": {
	source: "iana"
},
	"video/vnd.cctv": {
	source: "iana"
},
	"video/vnd.dece.hd": {
	source: "iana",
	extensions: [
		"uvh",
		"uvvh"
	]
},
	"video/vnd.dece.mobile": {
	source: "iana",
	extensions: [
		"uvm",
		"uvvm"
	]
},
	"video/vnd.dece.mp4": {
	source: "iana"
},
	"video/vnd.dece.pd": {
	source: "iana",
	extensions: [
		"uvp",
		"uvvp"
	]
},
	"video/vnd.dece.sd": {
	source: "iana",
	extensions: [
		"uvs",
		"uvvs"
	]
},
	"video/vnd.dece.video": {
	source: "iana",
	extensions: [
		"uvv",
		"uvvv"
	]
},
	"video/vnd.directv.mpeg": {
	source: "iana"
},
	"video/vnd.directv.mpeg-tts": {
	source: "iana"
},
	"video/vnd.dlna.mpeg-tts": {
	source: "iana"
},
	"video/vnd.dvb.file": {
	source: "iana",
	extensions: [
		"dvb"
	]
},
	"video/vnd.fvt": {
	source: "iana",
	extensions: [
		"fvt"
	]
},
	"video/vnd.hns.video": {
	source: "iana"
},
	"video/vnd.iptvforum.1dparityfec-1010": {
	source: "iana"
},
	"video/vnd.iptvforum.1dparityfec-2005": {
	source: "iana"
},
	"video/vnd.iptvforum.2dparityfec-1010": {
	source: "iana"
},
	"video/vnd.iptvforum.2dparityfec-2005": {
	source: "iana"
},
	"video/vnd.iptvforum.ttsavc": {
	source: "iana"
},
	"video/vnd.iptvforum.ttsmpeg2": {
	source: "iana"
},
	"video/vnd.motorola.video": {
	source: "iana"
},
	"video/vnd.motorola.videop": {
	source: "iana"
},
	"video/vnd.mpegurl": {
	source: "iana",
	extensions: [
		"mxu",
		"m4u"
	]
},
	"video/vnd.ms-playready.media.pyv": {
	source: "iana",
	extensions: [
		"pyv"
	]
},
	"video/vnd.nokia.interleaved-multimedia": {
	source: "iana"
},
	"video/vnd.nokia.mp4vr": {
	source: "iana"
},
	"video/vnd.nokia.videovoip": {
	source: "iana"
},
	"video/vnd.objectvideo": {
	source: "iana"
},
	"video/vnd.radgamettools.bink": {
	source: "iana"
},
	"video/vnd.radgamettools.smacker": {
	source: "iana"
},
	"video/vnd.sealed.mpeg1": {
	source: "iana"
},
	"video/vnd.sealed.mpeg4": {
	source: "iana"
},
	"video/vnd.sealed.swf": {
	source: "iana"
},
	"video/vnd.sealedmedia.softseal.mov": {
	source: "iana"
},
	"video/vnd.uvvu.mp4": {
	source: "iana",
	extensions: [
		"uvu",
		"uvvu"
	]
},
	"video/vnd.vivo": {
	source: "iana",
	extensions: [
		"viv"
	]
},
	"video/vnd.youtube.yt": {
	source: "iana"
},
	"video/vp8": {
	source: "iana"
},
	"video/vp9": {
	source: "iana"
},
	"video/webm": {
	source: "apache",
	compressible: false,
	extensions: [
		"webm"
	]
},
	"video/x-f4v": {
	source: "apache",
	extensions: [
		"f4v"
	]
},
	"video/x-fli": {
	source: "apache",
	extensions: [
		"fli"
	]
},
	"video/x-flv": {
	source: "apache",
	compressible: false,
	extensions: [
		"flv"
	]
},
	"video/x-m4v": {
	source: "apache",
	extensions: [
		"m4v"
	]
},
	"video/x-matroska": {
	source: "apache",
	compressible: false,
	extensions: [
		"mkv",
		"mk3d",
		"mks"
	]
},
	"video/x-mng": {
	source: "apache",
	extensions: [
		"mng"
	]
},
	"video/x-ms-asf": {
	source: "apache",
	extensions: [
		"asf",
		"asx"
	]
},
	"video/x-ms-vob": {
	source: "apache",
	extensions: [
		"vob"
	]
},
	"video/x-ms-wm": {
	source: "apache",
	extensions: [
		"wm"
	]
},
	"video/x-ms-wmv": {
	source: "apache",
	compressible: false,
	extensions: [
		"wmv"
	]
},
	"video/x-ms-wmx": {
	source: "apache",
	extensions: [
		"wmx"
	]
},
	"video/x-ms-wvx": {
	source: "apache",
	extensions: [
		"wvx"
	]
},
	"video/x-msvideo": {
	source: "apache",
	extensions: [
		"avi"
	]
},
	"video/x-sgi-movie": {
	source: "apache",
	extensions: [
		"movie"
	]
},
	"video/x-smv": {
	source: "apache",
	extensions: [
		"smv"
	]
},
	"x-conference/x-cooltalk": {
	source: "apache",
	extensions: [
		"ice"
	]
},
	"x-shader/x-fragment": {
	compressible: true
},
	"x-shader/x-vertex": {
	compressible: true
}
};

/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015-2022 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 */

var _package$A = require$$0;

/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

(function (exports) {

	/**
	 * Module dependencies.
	 * @private
	 */

	var db = _package$A;
	var extname = path$6.extname;

	/**
	 * Module variables.
	 * @private
	 */

	var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
	var TEXT_TYPE_REGEXP = /^text\//i;

	/**
	 * Module exports.
	 * @public
	 */

	exports.charset = charset;
	exports.charsets = { lookup: charset };
	exports.contentType = contentType;
	exports.extension = extension;
	exports.extensions = Object.create(null);
	exports.lookup = lookup;
	exports.types = Object.create(null);

	// Populate the extensions/types maps
	populateMaps(exports.extensions, exports.types);

	/**
	 * Get the default charset for a MIME type.
	 *
	 * @param {string} type
	 * @return {boolean|string}
	 */

	function charset (type) {
	  if (!type || typeof type !== 'string') {
	    return false
	  }

	  // TODO: use media-typer
	  var match = EXTRACT_TYPE_REGEXP.exec(type);
	  var mime = match && db[match[1].toLowerCase()];

	  if (mime && mime.charset) {
	    return mime.charset
	  }

	  // default text/* to utf-8
	  if (match && TEXT_TYPE_REGEXP.test(match[1])) {
	    return 'UTF-8'
	  }

	  return false
	}

	/**
	 * Create a full Content-Type header given a MIME type or extension.
	 *
	 * @param {string} str
	 * @return {boolean|string}
	 */

	function contentType (str) {
	  // TODO: should this even be in this module?
	  if (!str || typeof str !== 'string') {
	    return false
	  }

	  var mime = str.indexOf('/') === -1
	    ? exports.lookup(str)
	    : str;

	  if (!mime) {
	    return false
	  }

	  // TODO: use content-type or other module
	  if (mime.indexOf('charset') === -1) {
	    var charset = exports.charset(mime);
	    if (charset) mime += '; charset=' + charset.toLowerCase();
	  }

	  return mime
	}

	/**
	 * Get the default extension for a MIME type.
	 *
	 * @param {string} type
	 * @return {boolean|string}
	 */

	function extension (type) {
	  if (!type || typeof type !== 'string') {
	    return false
	  }

	  // TODO: use media-typer
	  var match = EXTRACT_TYPE_REGEXP.exec(type);

	  // get extensions
	  var exts = match && exports.extensions[match[1].toLowerCase()];

	  if (!exts || !exts.length) {
	    return false
	  }

	  return exts[0]
	}

	/**
	 * Lookup the MIME type for a file path/extension.
	 *
	 * @param {string} path
	 * @return {boolean|string}
	 */

	function lookup (path) {
	  if (!path || typeof path !== 'string') {
	    return false
	  }

	  // get the extension ("ext" or ".ext" or full path)
	  var extension = extname('x.' + path)
	    .toLowerCase()
	    .substr(1);

	  if (!extension) {
	    return false
	  }

	  return exports.types[extension] || false
	}

	/**
	 * Populate the extensions and types maps.
	 * @private
	 */

	function populateMaps (extensions, types) {
	  // source preference (least -> most)
	  var preference = ['nginx', 'apache', undefined, 'iana'];

	  Object.keys(db).forEach(function forEachMimeType (type) {
	    var mime = db[type];
	    var exts = mime.extensions;

	    if (!exts || !exts.length) {
	      return
	    }

	    // mime -> extensions
	    extensions[type] = exts;

	    // extension -> mime
	    for (var i = 0; i < exts.length; i++) {
	      var extension = exts[i];

	      if (types[extension]) {
	        var from = preference.indexOf(db[types[extension]].source);
	        var to = preference.indexOf(mime.source);

	        if (types[extension] !== 'application/octet-stream' &&
	          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {
	          // skip the remapping
	          continue
	        }
	      }

	      // set the extension -> mime
	      types[extension] = type;
	    }
	  });
	} 
} (_package$B));

/*!
 * type-is
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 * @private
 */

var typer = _package$C;
var mime$4 = _package$B;

/**
 * Module exports.
 * @public
 */

_package$D.exports = typeofrequest;
_package$D.exports.is = typeis$1;
_package$D.exports.hasBody = hasbody;
_package$D.exports.normalize = normalize$1;
_package$D.exports.match = mimeMatch;

/**
 * Compare a `value` content-type with `types`.
 * Each `type` can be an extension like `html`,
 * a special shortcut like `multipart` or `urlencoded`,
 * or a mime type.
 *
 * If no types match, `false` is returned.
 * Otherwise, the first `type` that matches is returned.
 *
 * @param {String} value
 * @param {Array} types
 * @public
 */

function typeis$1 (value, types_) {
  var i;
  var types = types_;

  // remove parameters and normalize
  var val = tryNormalizeType(value);

  // no type or invalid
  if (!val) {
    return false
  }

  // support flattened arguments
  if (types && !Array.isArray(types)) {
    types = new Array(arguments.length - 1);
    for (i = 0; i < types.length; i++) {
      types[i] = arguments[i + 1];
    }
  }

  // no types, return the content type
  if (!types || !types.length) {
    return val
  }

  var type;
  for (i = 0; i < types.length; i++) {
    if (mimeMatch(normalize$1(type = types[i]), val)) {
      return type[0] === '+' || type.indexOf('*') !== -1
        ? val
        : type
    }
  }

  // no matches
  return false
}

/**
 * Check if a request has a request body.
 * A request with a body __must__ either have `transfer-encoding`
 * or `content-length` headers set.
 * http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3
 *
 * @param {Object} request
 * @return {Boolean}
 * @public
 */

function hasbody (req) {
  return req.headers['transfer-encoding'] !== undefined ||
    !isNaN(req.headers['content-length'])
}

/**
 * Check if the incoming request contains the "Content-Type"
 * header field, and it contains any of the give mime `type`s.
 * If there is no request body, `null` is returned.
 * If there is no content type, `false` is returned.
 * Otherwise, it returns the first `type` that matches.
 *
 * Examples:
 *
 *     // With Content-Type: text/html; charset=utf-8
 *     this.is('html'); // => 'html'
 *     this.is('text/html'); // => 'text/html'
 *     this.is('text/*', 'application/json'); // => 'text/html'
 *
 *     // When Content-Type is application/json
 *     this.is('json', 'urlencoded'); // => 'json'
 *     this.is('application/json'); // => 'application/json'
 *     this.is('html', 'application/*'); // => 'application/json'
 *
 *     this.is('html'); // => false
 *
 * @param {String|Array} types...
 * @return {String|false|null}
 * @public
 */

function typeofrequest (req, types_) {
  var types = types_;

  // no body
  if (!hasbody(req)) {
    return null
  }

  // support flattened arguments
  if (arguments.length > 2) {
    types = new Array(arguments.length - 1);
    for (var i = 0; i < types.length; i++) {
      types[i] = arguments[i + 1];
    }
  }

  // request content type
  var value = req.headers['content-type'];

  return typeis$1(value, types)
}

/**
 * Normalize a mime type.
 * If it's a shorthand, expand it to a valid mime type.
 *
 * In general, you probably want:
 *
 *   var type = is(req, ['urlencoded', 'json', 'multipart']);
 *
 * Then use the appropriate body parsers.
 * These three are the most common request body types
 * and are thus ensured to work.
 *
 * @param {String} type
 * @private
 */

function normalize$1 (type) {
  if (typeof type !== 'string') {
    // invalid type
    return false
  }

  switch (type) {
    case 'urlencoded':
      return 'application/x-www-form-urlencoded'
    case 'multipart':
      return 'multipart/*'
  }

  if (type[0] === '+') {
    // "+json" -> "*/*+json" expando
    return '*/*' + type
  }

  return type.indexOf('/') === -1
    ? mime$4.lookup(type)
    : type
}

/**
 * Check if `expected` mime type
 * matches `actual` mime type with
 * wildcard and +suffix support.
 *
 * @param {String} expected
 * @param {String} actual
 * @return {Boolean}
 * @private
 */

function mimeMatch (expected, actual) {
  // invalid type
  if (expected === false) {
    return false
  }

  // split types
  var actualParts = actual.split('/');
  var expectedParts = expected.split('/');

  // invalid format
  if (actualParts.length !== 2 || expectedParts.length !== 2) {
    return false
  }

  // validate type
  if (expectedParts[0] !== '*' && expectedParts[0] !== actualParts[0]) {
    return false
  }

  // validate suffix wildcard
  if (expectedParts[1].substr(0, 2) === '*+') {
    return expectedParts[1].length <= actualParts[1].length + 1 &&
      expectedParts[1].substr(1) === actualParts[1].substr(1 - expectedParts[1].length)
  }

  // validate subtype
  if (expectedParts[1] !== '*' && expectedParts[1] !== actualParts[1]) {
    return false
  }

  return true
}

/**
 * Normalize a type and remove parameters.
 *
 * @param {string} value
 * @return {string}
 * @private
 */

function normalizeType$1 (value) {
  // parse the type
  var type = typer.parse(value);

  // remove the parameters
  type.parameters = undefined;

  // reformat it
  return typer.format(type)
}

/**
 * Try to normalize a type and remove parameters.
 *
 * @param {string} value
 * @return {string}
 * @private
 */

function tryNormalizeType (value) {
  if (!value) {
    return null
  }

  try {
    return normalizeType$1(value)
  } catch (err) {
    return null
  }
}

var _packageExports$9 = _package$D.exports;

/*!
 * body-parser
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

var json_1$1;
var hasRequiredJson$1;

function requireJson$1 () {
	if (hasRequiredJson$1) return json_1$1;
	hasRequiredJson$1 = 1;

	/**
	 * Module dependencies.
	 * @private
	 */

	var bytes = require_package$f();
	var contentType = _package$O;
	var createError = _packageExports$b;
	var debug = srcExports('body-parser:json');
	var read = requireRead();
	var typeis = _packageExports$9;

	/**
	 * Module exports.
	 */

	json_1$1 = json;

	/**
	 * RegExp to match the first non-space in a string.
	 *
	 * Allowed whitespace is defined in RFC 7159:
	 *
	 *    ws = *(
	 *            %x20 /              ; Space
	 *            %x09 /              ; Horizontal tab
	 *            %x0A /              ; Line feed or New line
	 *            %x0D )              ; Carriage return
	 */

	var FIRST_CHAR_REGEXP = /^[\x20\x09\x0a\x0d]*([^\x20\x09\x0a\x0d])/; // eslint-disable-line no-control-regex

	/**
	 * Create a middleware to parse JSON bodies.
	 *
	 * @param {object} [options]
	 * @return {function}
	 * @public
	 */

	function json (options) {
	  var opts = options || {};

	  var limit = typeof opts.limit !== 'number'
	    ? bytes.parse(opts.limit || '100kb')
	    : opts.limit;
	  var inflate = opts.inflate !== false;
	  var reviver = opts.reviver;
	  var strict = opts.strict !== false;
	  var type = opts.type || 'application/json';
	  var verify = opts.verify || false;

	  if (verify !== false && typeof verify !== 'function') {
	    throw new TypeError('option verify must be function')
	  }

	  // create the appropriate type checking function
	  var shouldParse = typeof type !== 'function'
	    ? typeChecker(type)
	    : type;

	  function parse (body) {
	    if (body.length === 0) {
	      // special-case empty json body, as it's a common client-side mistake
	      // TODO: maybe make this configurable or part of "strict" option
	      return {}
	    }

	    if (strict) {
	      var first = firstchar(body);

	      if (first !== '{' && first !== '[') {
	        debug('strict violation');
	        throw createStrictSyntaxError(body, first)
	      }
	    }

	    try {
	      debug('parse json');
	      return JSON.parse(body, reviver)
	    } catch (e) {
	      throw normalizeJsonSyntaxError(e, {
	        message: e.message,
	        stack: e.stack
	      })
	    }
	  }

	  return function jsonParser (req, res, next) {
	    if (req._body) {
	      debug('body already parsed');
	      next();
	      return
	    }

	    req.body = req.body || {};

	    // skip requests without bodies
	    if (!typeis.hasBody(req)) {
	      debug('skip empty body');
	      next();
	      return
	    }

	    debug('content-type %j', req.headers['content-type']);

	    // determine if request should be parsed
	    if (!shouldParse(req)) {
	      debug('skip parsing');
	      next();
	      return
	    }

	    // assert charset per RFC 7159 sec 8.1
	    var charset = getCharset(req) || 'utf-8';
	    if (charset.slice(0, 4) !== 'utf-') {
	      debug('invalid charset');
	      next(createError(415, 'unsupported charset "' + charset.toUpperCase() + '"', {
	        charset: charset,
	        type: 'charset.unsupported'
	      }));
	      return
	    }

	    // read
	    read(req, res, next, parse, debug, {
	      encoding: charset,
	      inflate: inflate,
	      limit: limit,
	      verify: verify
	    });
	  }
	}

	/**
	 * Create strict violation syntax error matching native error.
	 *
	 * @param {string} str
	 * @param {string} char
	 * @return {Error}
	 * @private
	 */

	function createStrictSyntaxError (str, char) {
	  var index = str.indexOf(char);
	  var partial = index !== -1
	    ? str.substring(0, index) + '#'
	    : '';

	  try {
	    JSON.parse(partial); /* istanbul ignore next */ throw new SyntaxError('strict violation')
	  } catch (e) {
	    return normalizeJsonSyntaxError(e, {
	      message: e.message.replace('#', char),
	      stack: e.stack
	    })
	  }
	}

	/**
	 * Get the first non-whitespace character in a string.
	 *
	 * @param {string} str
	 * @return {function}
	 * @private
	 */

	function firstchar (str) {
	  var match = FIRST_CHAR_REGEXP.exec(str);

	  return match
	    ? match[1]
	    : undefined
	}

	/**
	 * Get the charset of a request.
	 *
	 * @param {object} req
	 * @api private
	 */

	function getCharset (req) {
	  try {
	    return (contentType.parse(req).parameters.charset || '').toLowerCase()
	  } catch (e) {
	    return undefined
	  }
	}

	/**
	 * Normalize a SyntaxError for JSON.parse.
	 *
	 * @param {SyntaxError} error
	 * @param {object} obj
	 * @return {SyntaxError}
	 */

	function normalizeJsonSyntaxError (error, obj) {
	  var keys = Object.getOwnPropertyNames(error);

	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (key !== 'stack' && key !== 'message') {
	      delete error[key];
	    }
	  }

	  // replace stack before message for Node.js 0.10 and below
	  error.stack = obj.stack.replace(error.message, obj.message);
	  error.message = obj.message;

	  return error
	}

	/**
	 * Get the simple type checker.
	 *
	 * @param {string} type
	 * @return {function}
	 */

	function typeChecker (type) {
	  return function checkType (req) {
	    return Boolean(typeis(req, type))
	  }
	}
	return json_1$1;
}

/*!
 * body-parser
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

var raw_1;
var hasRequiredRaw;

function requireRaw () {
	if (hasRequiredRaw) return raw_1;
	hasRequiredRaw = 1;

	/**
	 * Module dependencies.
	 */

	var bytes = require_package$f();
	var debug = srcExports('body-parser:raw');
	var read = requireRead();
	var typeis = _packageExports$9;

	/**
	 * Module exports.
	 */

	raw_1 = raw;

	/**
	 * Create a middleware to parse raw bodies.
	 *
	 * @param {object} [options]
	 * @return {function}
	 * @api public
	 */

	function raw (options) {
	  var opts = options || {};

	  var inflate = opts.inflate !== false;
	  var limit = typeof opts.limit !== 'number'
	    ? bytes.parse(opts.limit || '100kb')
	    : opts.limit;
	  var type = opts.type || 'application/octet-stream';
	  var verify = opts.verify || false;

	  if (verify !== false && typeof verify !== 'function') {
	    throw new TypeError('option verify must be function')
	  }

	  // create the appropriate type checking function
	  var shouldParse = typeof type !== 'function'
	    ? typeChecker(type)
	    : type;

	  function parse (buf) {
	    return buf
	  }

	  return function rawParser (req, res, next) {
	    if (req._body) {
	      debug('body already parsed');
	      next();
	      return
	    }

	    req.body = req.body || {};

	    // skip requests without bodies
	    if (!typeis.hasBody(req)) {
	      debug('skip empty body');
	      next();
	      return
	    }

	    debug('content-type %j', req.headers['content-type']);

	    // determine if request should be parsed
	    if (!shouldParse(req)) {
	      debug('skip parsing');
	      next();
	      return
	    }

	    // read
	    read(req, res, next, parse, debug, {
	      encoding: null,
	      inflate: inflate,
	      limit: limit,
	      verify: verify
	    });
	  }
	}

	/**
	 * Get the simple type checker.
	 *
	 * @param {string} type
	 * @return {function}
	 */

	function typeChecker (type) {
	  return function checkType (req) {
	    return Boolean(typeis(req, type))
	  }
	}
	return raw_1;
}

/*!
 * body-parser
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

var text_1;
var hasRequiredText;

function requireText () {
	if (hasRequiredText) return text_1;
	hasRequiredText = 1;

	/**
	 * Module dependencies.
	 */

	var bytes = require_package$f();
	var contentType = _package$O;
	var debug = srcExports('body-parser:text');
	var read = requireRead();
	var typeis = _packageExports$9;

	/**
	 * Module exports.
	 */

	text_1 = text;

	/**
	 * Create a middleware to parse text bodies.
	 *
	 * @param {object} [options]
	 * @return {function}
	 * @api public
	 */

	function text (options) {
	  var opts = options || {};

	  var defaultCharset = opts.defaultCharset || 'utf-8';
	  var inflate = opts.inflate !== false;
	  var limit = typeof opts.limit !== 'number'
	    ? bytes.parse(opts.limit || '100kb')
	    : opts.limit;
	  var type = opts.type || 'text/plain';
	  var verify = opts.verify || false;

	  if (verify !== false && typeof verify !== 'function') {
	    throw new TypeError('option verify must be function')
	  }

	  // create the appropriate type checking function
	  var shouldParse = typeof type !== 'function'
	    ? typeChecker(type)
	    : type;

	  function parse (buf) {
	    return buf
	  }

	  return function textParser (req, res, next) {
	    if (req._body) {
	      debug('body already parsed');
	      next();
	      return
	    }

	    req.body = req.body || {};

	    // skip requests without bodies
	    if (!typeis.hasBody(req)) {
	      debug('skip empty body');
	      next();
	      return
	    }

	    debug('content-type %j', req.headers['content-type']);

	    // determine if request should be parsed
	    if (!shouldParse(req)) {
	      debug('skip parsing');
	      next();
	      return
	    }

	    // get charset
	    var charset = getCharset(req) || defaultCharset;

	    // read
	    read(req, res, next, parse, debug, {
	      encoding: charset,
	      inflate: inflate,
	      limit: limit,
	      verify: verify
	    });
	  }
	}

	/**
	 * Get the charset of a request.
	 *
	 * @param {object} req
	 * @api private
	 */

	function getCharset (req) {
	  try {
	    return (contentType.parse(req).parameters.charset || '').toLowerCase()
	  } catch (e) {
	    return undefined
	  }
	}

	/**
	 * Get the simple type checker.
	 *
	 * @param {string} type
	 * @return {function}
	 */

	function typeChecker (type) {
	  return function checkType (req) {
	    return Boolean(typeis(req, type))
	  }
	}
	return text_1;
}

var shams;
var hasRequiredShams;

function requireShams () {
	if (hasRequiredShams) return shams;
	hasRequiredShams = 1;

	/* eslint complexity: [2, 18], max-statements: [2, 33] */
	shams = function hasSymbols() {
		if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
		if (typeof Symbol.iterator === 'symbol') { return true; }

		var obj = {};
		var sym = Symbol('test');
		var symObj = Object(sym);
		if (typeof sym === 'string') { return false; }

		if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
		if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

		// temp disabled per https://github.com/ljharb/object.assign/issues/17
		// if (sym instanceof Symbol) { return false; }
		// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
		// if (!(symObj instanceof Symbol)) { return false; }

		// if (typeof Symbol.prototype.toString !== 'function') { return false; }
		// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

		var symVal = 42;
		obj[sym] = symVal;
		for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
		if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

		if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

		var syms = Object.getOwnPropertySymbols(obj);
		if (syms.length !== 1 || syms[0] !== sym) { return false; }

		if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

		if (typeof Object.getOwnPropertyDescriptor === 'function') {
			var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
			if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
		}

		return true;
	};
	return shams;
}

var _package$z;
var hasRequired_package$c;

function require_package$c () {
	if (hasRequired_package$c) return _package$z;
	hasRequired_package$c = 1;

	var origSymbol = typeof Symbol !== 'undefined' && Symbol;
	var hasSymbolSham = requireShams();

	_package$z = function hasNativeSymbols() {
		if (typeof origSymbol !== 'function') { return false; }
		if (typeof Symbol !== 'function') { return false; }
		if (typeof origSymbol('foo') !== 'symbol') { return false; }
		if (typeof Symbol('bar') !== 'symbol') { return false; }

		return hasSymbolSham();
	};
	return _package$z;
}

var _package$y;
var hasRequired_package$b;

function require_package$b () {
	if (hasRequired_package$b) return _package$y;
	hasRequired_package$b = 1;

	var test = {
		foo: {}
	};

	var $Object = Object;

	_package$y = function hasProto() {
		return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
	};
	return _package$y;
}

var implementation;
var hasRequiredImplementation;

function requireImplementation () {
	if (hasRequiredImplementation) return implementation;
	hasRequiredImplementation = 1;

	/* eslint no-invalid-this: 1 */

	var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
	var toStr = Object.prototype.toString;
	var max = Math.max;
	var funcType = '[object Function]';

	var concatty = function concatty(a, b) {
	    var arr = [];

	    for (var i = 0; i < a.length; i += 1) {
	        arr[i] = a[i];
	    }
	    for (var j = 0; j < b.length; j += 1) {
	        arr[j + a.length] = b[j];
	    }

	    return arr;
	};

	var slicy = function slicy(arrLike, offset) {
	    var arr = [];
	    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
	        arr[j] = arrLike[i];
	    }
	    return arr;
	};

	var joiny = function (arr, joiner) {
	    var str = '';
	    for (var i = 0; i < arr.length; i += 1) {
	        str += arr[i];
	        if (i + 1 < arr.length) {
	            str += joiner;
	        }
	    }
	    return str;
	};

	implementation = function bind(that) {
	    var target = this;
	    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
	        throw new TypeError(ERROR_MESSAGE + target);
	    }
	    var args = slicy(arguments, 1);

	    var bound;
	    var binder = function () {
	        if (this instanceof bound) {
	            var result = target.apply(
	                this,
	                concatty(args, arguments)
	            );
	            if (Object(result) === result) {
	                return result;
	            }
	            return this;
	        }
	        return target.apply(
	            that,
	            concatty(args, arguments)
	        );

	    };

	    var boundLength = max(0, target.length - args.length);
	    var boundArgs = [];
	    for (var i = 0; i < boundLength; i++) {
	        boundArgs[i] = '$' + i;
	    }

	    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

	    if (target.prototype) {
	        var Empty = function Empty() {};
	        Empty.prototype = target.prototype;
	        bound.prototype = new Empty();
	        Empty.prototype = null;
	    }

	    return bound;
	};
	return implementation;
}

var _package$x;
var hasRequired_package$a;

function require_package$a () {
	if (hasRequired_package$a) return _package$x;
	hasRequired_package$a = 1;

	var implementation = requireImplementation();

	_package$x = Function.prototype.bind || implementation;
	return _package$x;
}

var _package$w;
var hasRequired_package$9;

function require_package$9 () {
	if (hasRequired_package$9) return _package$w;
	hasRequired_package$9 = 1;

	var call = Function.prototype.call;
	var $hasOwn = Object.prototype.hasOwnProperty;
	var bind = require_package$a();

	/** @type {(o: {}, p: PropertyKey) => p is keyof o} */
	_package$w = bind.call(call, $hasOwn);
	return _package$w;
}

var _package$v;
var hasRequired_package$8;

function require_package$8 () {
	if (hasRequired_package$8) return _package$v;
	hasRequired_package$8 = 1;

	var undefined$1;

	var $SyntaxError = SyntaxError;
	var $Function = Function;
	var $TypeError = TypeError;

	// eslint-disable-next-line consistent-return
	var getEvalledConstructor = function (expressionSyntax) {
		try {
			return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
		} catch (e) {}
	};

	var $gOPD = Object.getOwnPropertyDescriptor;
	if ($gOPD) {
		try {
			$gOPD({}, '');
		} catch (e) {
			$gOPD = null; // this is IE 8, which has a broken gOPD
		}
	}

	var throwTypeError = function () {
		throw new $TypeError();
	};
	var ThrowTypeError = $gOPD
		? (function () {
			try {
				// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
				arguments.callee; // IE 8 does not throw here
				return throwTypeError;
			} catch (calleeThrows) {
				try {
					// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
					return $gOPD(arguments, 'callee').get;
				} catch (gOPDthrows) {
					return throwTypeError;
				}
			}
		}())
		: throwTypeError;

	var hasSymbols = require_package$c()();
	var hasProto = require_package$b()();

	var getProto = Object.getPrototypeOf || (
		hasProto
			? function (x) { return x.__proto__; } // eslint-disable-line no-proto
			: null
	);

	var needsEval = {};

	var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined$1 : getProto(Uint8Array);

	var INTRINSICS = {
		'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
		'%Array%': Array,
		'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
		'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined$1,
		'%AsyncFromSyncIteratorPrototype%': undefined$1,
		'%AsyncFunction%': needsEval,
		'%AsyncGenerator%': needsEval,
		'%AsyncGeneratorFunction%': needsEval,
		'%AsyncIteratorPrototype%': needsEval,
		'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
		'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
		'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined$1 : BigInt64Array,
		'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined$1 : BigUint64Array,
		'%Boolean%': Boolean,
		'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
		'%Date%': Date,
		'%decodeURI%': decodeURI,
		'%decodeURIComponent%': decodeURIComponent,
		'%encodeURI%': encodeURI,
		'%encodeURIComponent%': encodeURIComponent,
		'%Error%': Error,
		'%eval%': eval, // eslint-disable-line no-eval
		'%EvalError%': EvalError,
		'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
		'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
		'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
		'%Function%': $Function,
		'%GeneratorFunction%': needsEval,
		'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
		'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
		'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
		'%isFinite%': isFinite,
		'%isNaN%': isNaN,
		'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
		'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
		'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
		'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
		'%Math%': Math,
		'%Number%': Number,
		'%Object%': Object,
		'%parseFloat%': parseFloat,
		'%parseInt%': parseInt,
		'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
		'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
		'%RangeError%': RangeError,
		'%ReferenceError%': ReferenceError,
		'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
		'%RegExp%': RegExp,
		'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
		'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
		'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
		'%String%': String,
		'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined$1,
		'%Symbol%': hasSymbols ? Symbol : undefined$1,
		'%SyntaxError%': $SyntaxError,
		'%ThrowTypeError%': ThrowTypeError,
		'%TypedArray%': TypedArray,
		'%TypeError%': $TypeError,
		'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
		'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
		'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
		'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
		'%URIError%': URIError,
		'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
		'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
		'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
	};

	if (getProto) {
		try {
			null.error; // eslint-disable-line no-unused-expressions
		} catch (e) {
			// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
			var errorProto = getProto(getProto(e));
			INTRINSICS['%Error.prototype%'] = errorProto;
		}
	}

	var doEval = function doEval(name) {
		var value;
		if (name === '%AsyncFunction%') {
			value = getEvalledConstructor('async function () {}');
		} else if (name === '%GeneratorFunction%') {
			value = getEvalledConstructor('function* () {}');
		} else if (name === '%AsyncGeneratorFunction%') {
			value = getEvalledConstructor('async function* () {}');
		} else if (name === '%AsyncGenerator%') {
			var fn = doEval('%AsyncGeneratorFunction%');
			if (fn) {
				value = fn.prototype;
			}
		} else if (name === '%AsyncIteratorPrototype%') {
			var gen = doEval('%AsyncGenerator%');
			if (gen && getProto) {
				value = getProto(gen.prototype);
			}
		}

		INTRINSICS[name] = value;

		return value;
	};

	var LEGACY_ALIASES = {
		'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
		'%ArrayPrototype%': ['Array', 'prototype'],
		'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
		'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
		'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
		'%ArrayProto_values%': ['Array', 'prototype', 'values'],
		'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
		'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
		'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
		'%BooleanPrototype%': ['Boolean', 'prototype'],
		'%DataViewPrototype%': ['DataView', 'prototype'],
		'%DatePrototype%': ['Date', 'prototype'],
		'%ErrorPrototype%': ['Error', 'prototype'],
		'%EvalErrorPrototype%': ['EvalError', 'prototype'],
		'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
		'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
		'%FunctionPrototype%': ['Function', 'prototype'],
		'%Generator%': ['GeneratorFunction', 'prototype'],
		'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
		'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
		'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
		'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
		'%JSONParse%': ['JSON', 'parse'],
		'%JSONStringify%': ['JSON', 'stringify'],
		'%MapPrototype%': ['Map', 'prototype'],
		'%NumberPrototype%': ['Number', 'prototype'],
		'%ObjectPrototype%': ['Object', 'prototype'],
		'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
		'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
		'%PromisePrototype%': ['Promise', 'prototype'],
		'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
		'%Promise_all%': ['Promise', 'all'],
		'%Promise_reject%': ['Promise', 'reject'],
		'%Promise_resolve%': ['Promise', 'resolve'],
		'%RangeErrorPrototype%': ['RangeError', 'prototype'],
		'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
		'%RegExpPrototype%': ['RegExp', 'prototype'],
		'%SetPrototype%': ['Set', 'prototype'],
		'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
		'%StringPrototype%': ['String', 'prototype'],
		'%SymbolPrototype%': ['Symbol', 'prototype'],
		'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
		'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
		'%TypeErrorPrototype%': ['TypeError', 'prototype'],
		'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
		'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
		'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
		'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
		'%URIErrorPrototype%': ['URIError', 'prototype'],
		'%WeakMapPrototype%': ['WeakMap', 'prototype'],
		'%WeakSetPrototype%': ['WeakSet', 'prototype']
	};

	var bind = require_package$a();
	var hasOwn = require_package$9();
	var $concat = bind.call(Function.call, Array.prototype.concat);
	var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
	var $replace = bind.call(Function.call, String.prototype.replace);
	var $strSlice = bind.call(Function.call, String.prototype.slice);
	var $exec = bind.call(Function.call, RegExp.prototype.exec);

	/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
	var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
	var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
	var stringToPath = function stringToPath(string) {
		var first = $strSlice(string, 0, 1);
		var last = $strSlice(string, -1);
		if (first === '%' && last !== '%') {
			throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
		} else if (last === '%' && first !== '%') {
			throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
		}
		var result = [];
		$replace(string, rePropName, function (match, number, quote, subString) {
			result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
		});
		return result;
	};
	/* end adaptation */

	var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
		var intrinsicName = name;
		var alias;
		if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
			alias = LEGACY_ALIASES[intrinsicName];
			intrinsicName = '%' + alias[0] + '%';
		}

		if (hasOwn(INTRINSICS, intrinsicName)) {
			var value = INTRINSICS[intrinsicName];
			if (value === needsEval) {
				value = doEval(intrinsicName);
			}
			if (typeof value === 'undefined' && !allowMissing) {
				throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
			}

			return {
				alias: alias,
				name: intrinsicName,
				value: value
			};
		}

		throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
	};

	_package$v = function GetIntrinsic(name, allowMissing) {
		if (typeof name !== 'string' || name.length === 0) {
			throw new $TypeError('intrinsic name must be a non-empty string');
		}
		if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
			throw new $TypeError('"allowMissing" argument must be a boolean');
		}

		if ($exec(/^%?[^%]*%?$/, name) === null) {
			throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
		}
		var parts = stringToPath(name);
		var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

		var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
		var intrinsicRealName = intrinsic.name;
		var value = intrinsic.value;
		var skipFurtherCaching = false;

		var alias = intrinsic.alias;
		if (alias) {
			intrinsicBaseName = alias[0];
			$spliceApply(parts, $concat([0, 1], alias));
		}

		for (var i = 1, isOwn = true; i < parts.length; i += 1) {
			var part = parts[i];
			var first = $strSlice(part, 0, 1);
			var last = $strSlice(part, -1);
			if (
				(
					(first === '"' || first === "'" || first === '`')
					|| (last === '"' || last === "'" || last === '`')
				)
				&& first !== last
			) {
				throw new $SyntaxError('property names with quotes must have matching quotes');
			}
			if (part === 'constructor' || !isOwn) {
				skipFurtherCaching = true;
			}

			intrinsicBaseName += '.' + part;
			intrinsicRealName = '%' + intrinsicBaseName + '%';

			if (hasOwn(INTRINSICS, intrinsicRealName)) {
				value = INTRINSICS[intrinsicRealName];
			} else if (value != null) {
				if (!(part in value)) {
					if (!allowMissing) {
						throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
					}
					return void undefined$1;
				}
				if ($gOPD && (i + 1) >= parts.length) {
					var desc = $gOPD(value, part);
					isOwn = !!desc;

					// By convention, when a data property is converted to an accessor
					// property to emulate a data property that does not suffer from
					// the override mistake, that accessor's getter is marked with
					// an `originalValue` property. Here, when we detect this, we
					// uphold the illusion by pretending to see that original data
					// property, i.e., returning the value rather than the getter
					// itself.
					if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
						value = desc.get;
					} else {
						value = value[part];
					}
				} else {
					isOwn = hasOwn(value, part);
					value = value[part];
				}

				if (isOwn && !skipFurtherCaching) {
					INTRINSICS[intrinsicRealName] = value;
				}
			}
		}
		return value;
	};
	return _package$v;
}

var _package$u = {exports: {}};

var _package$t;
var hasRequired_package$7;

function require_package$7 () {
	if (hasRequired_package$7) return _package$t;
	hasRequired_package$7 = 1;

	var GetIntrinsic = require_package$8();

	var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

	var hasPropertyDescriptors = function hasPropertyDescriptors() {
		if ($defineProperty) {
			try {
				$defineProperty({}, 'a', { value: 1 });
				return true;
			} catch (e) {
				// IE 8 has a broken defineProperty
				return false;
			}
		}
		return false;
	};

	hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
		// node v0.6 has a bug where array lengths can be Set but not Defined
		if (!hasPropertyDescriptors()) {
			return null;
		}
		try {
			return $defineProperty([], 'length', { value: 1 }).length !== 1;
		} catch (e) {
			// In Firefox 4-22, defining length on an array throws an exception.
			return true;
		}
	};

	_package$t = hasPropertyDescriptors;
	return _package$t;
}

var _package$s;
var hasRequired_package$6;

function require_package$6 () {
	if (hasRequired_package$6) return _package$s;
	hasRequired_package$6 = 1;

	var GetIntrinsic = require_package$8();

	var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

	if ($gOPD) {
		try {
			$gOPD([], 'length');
		} catch (e) {
			// IE 8 has a broken gOPD
			$gOPD = null;
		}
	}

	_package$s = $gOPD;
	return _package$s;
}

var _package$r;
var hasRequired_package$5;

function require_package$5 () {
	if (hasRequired_package$5) return _package$r;
	hasRequired_package$5 = 1;

	var hasPropertyDescriptors = require_package$7()();

	var GetIntrinsic = require_package$8();

	var $defineProperty = hasPropertyDescriptors && GetIntrinsic('%Object.defineProperty%', true);
	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
		} catch (e) {
			// IE 8 has a broken defineProperty
			$defineProperty = false;
		}
	}

	var $SyntaxError = GetIntrinsic('%SyntaxError%');
	var $TypeError = GetIntrinsic('%TypeError%');

	var gopd = require_package$6();

	/** @type {(obj: Record<PropertyKey, unknown>, property: PropertyKey, value: unknown, nonEnumerable?: boolean | null, nonWritable?: boolean | null, nonConfigurable?: boolean | null, loose?: boolean) => void} */
	_package$r = function defineDataProperty(
		obj,
		property,
		value
	) {
		if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
			throw new $TypeError('`obj` must be an object or a function`');
		}
		if (typeof property !== 'string' && typeof property !== 'symbol') {
			throw new $TypeError('`property` must be a string or a symbol`');
		}
		if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
			throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
		}
		if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
			throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
		}
		if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
			throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
		}
		if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
			throw new $TypeError('`loose`, if provided, must be a boolean');
		}

		var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
		var nonWritable = arguments.length > 4 ? arguments[4] : null;
		var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
		var loose = arguments.length > 6 ? arguments[6] : false;

		/* @type {false | TypedPropertyDescriptor<unknown>} */
		var desc = !!gopd && gopd(obj, property);

		if ($defineProperty) {
			$defineProperty(obj, property, {
				configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
				enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
				value: value,
				writable: nonWritable === null && desc ? desc.writable : !nonWritable
			});
		} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
			// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
			obj[property] = value; // eslint-disable-line no-param-reassign
		} else {
			throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
		}
	};
	return _package$r;
}

var _package$q;
var hasRequired_package$4;

function require_package$4 () {
	if (hasRequired_package$4) return _package$q;
	hasRequired_package$4 = 1;

	var GetIntrinsic = require_package$8();
	var define = require_package$5();
	var hasDescriptors = require_package$7()();
	var gOPD = require_package$6();

	var $TypeError = GetIntrinsic('%TypeError%');
	var $floor = GetIntrinsic('%Math.floor%');

	_package$q = function setFunctionLength(fn, length) {
		if (typeof fn !== 'function') {
			throw new $TypeError('`fn` is not a function');
		}
		if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
			throw new $TypeError('`length` must be a positive 32-bit integer');
		}

		var loose = arguments.length > 2 && !!arguments[2];

		var functionLengthIsConfigurable = true;
		var functionLengthIsWritable = true;
		if ('length' in fn && gOPD) {
			var desc = gOPD(fn, 'length');
			if (desc && !desc.configurable) {
				functionLengthIsConfigurable = false;
			}
			if (desc && !desc.writable) {
				functionLengthIsWritable = false;
			}
		}

		if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
			if (hasDescriptors) {
				define(fn, 'length', length, true, true);
			} else {
				define(fn, 'length', length);
			}
		}
		return fn;
	};
	return _package$q;
}

var hasRequired_package$3;

function require_package$3 () {
	if (hasRequired_package$3) return _package$u.exports;
	hasRequired_package$3 = 1;
	(function (module) {

		var bind = require_package$a();
		var GetIntrinsic = require_package$8();
		var setFunctionLength = require_package$4();

		var $TypeError = GetIntrinsic('%TypeError%');
		var $apply = GetIntrinsic('%Function.prototype.apply%');
		var $call = GetIntrinsic('%Function.prototype.call%');
		var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

		var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
		var $max = GetIntrinsic('%Math.max%');

		if ($defineProperty) {
			try {
				$defineProperty({}, 'a', { value: 1 });
			} catch (e) {
				// IE 8 has a broken defineProperty
				$defineProperty = null;
			}
		}

		module.exports = function callBind(originalFunction) {
			if (typeof originalFunction !== 'function') {
				throw new $TypeError('a function is required');
			}
			var func = $reflectApply(bind, $call, arguments);
			return setFunctionLength(
				func,
				1 + $max(0, originalFunction.length - (arguments.length - 1)),
				true
			);
		};

		var applyBind = function applyBind() {
			return $reflectApply(bind, $apply, arguments);
		};

		if ($defineProperty) {
			$defineProperty(module.exports, 'apply', { value: applyBind });
		} else {
			module.exports.apply = applyBind;
		} 
	} (_package$u));
	return _package$u.exports;
}

var callBound;
var hasRequiredCallBound;

function requireCallBound () {
	if (hasRequiredCallBound) return callBound;
	hasRequiredCallBound = 1;

	var GetIntrinsic = require_package$8();

	var callBind = require_package$3();

	var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

	callBound = function callBoundIntrinsic(name, allowMissing) {
		var intrinsic = GetIntrinsic(name, !!allowMissing);
		if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
			return callBind(intrinsic);
		}
		return intrinsic;
	};
	return callBound;
}

var util_inspect;
var hasRequiredUtil_inspect;

function requireUtil_inspect () {
	if (hasRequiredUtil_inspect) return util_inspect;
	hasRequiredUtil_inspect = 1;
	util_inspect = require$$1$1.inspect;
	return util_inspect;
}

var _package$p;
var hasRequired_package$2;

function require_package$2 () {
	if (hasRequired_package$2) return _package$p;
	hasRequired_package$2 = 1;
	var hasMap = typeof Map === 'function' && Map.prototype;
	var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
	var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
	var mapForEach = hasMap && Map.prototype.forEach;
	var hasSet = typeof Set === 'function' && Set.prototype;
	var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
	var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
	var setForEach = hasSet && Set.prototype.forEach;
	var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
	var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
	var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
	var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
	var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
	var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
	var booleanValueOf = Boolean.prototype.valueOf;
	var objectToString = Object.prototype.toString;
	var functionToString = Function.prototype.toString;
	var $match = String.prototype.match;
	var $slice = String.prototype.slice;
	var $replace = String.prototype.replace;
	var $toUpperCase = String.prototype.toUpperCase;
	var $toLowerCase = String.prototype.toLowerCase;
	var $test = RegExp.prototype.test;
	var $concat = Array.prototype.concat;
	var $join = Array.prototype.join;
	var $arrSlice = Array.prototype.slice;
	var $floor = Math.floor;
	var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
	var gOPS = Object.getOwnPropertySymbols;
	var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
	var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
	// ie, `has-tostringtag/shams
	var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
	    ? Symbol.toStringTag
	    : null;
	var isEnumerable = Object.prototype.propertyIsEnumerable;

	var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
	    [].__proto__ === Array.prototype // eslint-disable-line no-proto
	        ? function (O) {
	            return O.__proto__; // eslint-disable-line no-proto
	        }
	        : null
	);

	function addNumericSeparator(num, str) {
	    if (
	        num === Infinity
	        || num === -Infinity
	        || num !== num
	        || (num && num > -1000 && num < 1000)
	        || $test.call(/e/, str)
	    ) {
	        return str;
	    }
	    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
	    if (typeof num === 'number') {
	        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)
	        if (int !== num) {
	            var intStr = String(int);
	            var dec = $slice.call(str, intStr.length + 1);
	            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
	        }
	    }
	    return $replace.call(str, sepRegex, '$&_');
	}

	var utilInspect = requireUtil_inspect();
	var inspectCustom = utilInspect.custom;
	var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;

	_package$p = function inspect_(obj, options, depth, seen) {
	    var opts = options || {};

	    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
	        throw new TypeError('option "quoteStyle" must be "single" or "double"');
	    }
	    if (
	        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
	            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
	            : opts.maxStringLength !== null
	        )
	    ) {
	        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
	    }
	    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;
	    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
	        throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
	    }

	    if (
	        has(opts, 'indent')
	        && opts.indent !== null
	        && opts.indent !== '\t'
	        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
	    ) {
	        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
	    }
	    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
	        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
	    }
	    var numericSeparator = opts.numericSeparator;

	    if (typeof obj === 'undefined') {
	        return 'undefined';
	    }
	    if (obj === null) {
	        return 'null';
	    }
	    if (typeof obj === 'boolean') {
	        return obj ? 'true' : 'false';
	    }

	    if (typeof obj === 'string') {
	        return inspectString(obj, opts);
	    }
	    if (typeof obj === 'number') {
	        if (obj === 0) {
	            return Infinity / obj > 0 ? '0' : '-0';
	        }
	        var str = String(obj);
	        return numericSeparator ? addNumericSeparator(obj, str) : str;
	    }
	    if (typeof obj === 'bigint') {
	        var bigIntStr = String(obj) + 'n';
	        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
	    }

	    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
	    if (typeof depth === 'undefined') { depth = 0; }
	    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
	        return isArray(obj) ? '[Array]' : '[Object]';
	    }

	    var indent = getIndent(opts, depth);

	    if (typeof seen === 'undefined') {
	        seen = [];
	    } else if (indexOf(seen, obj) >= 0) {
	        return '[Circular]';
	    }

	    function inspect(value, from, noIndent) {
	        if (from) {
	            seen = $arrSlice.call(seen);
	            seen.push(from);
	        }
	        if (noIndent) {
	            var newOpts = {
	                depth: opts.depth
	            };
	            if (has(opts, 'quoteStyle')) {
	                newOpts.quoteStyle = opts.quoteStyle;
	            }
	            return inspect_(value, newOpts, depth + 1, seen);
	        }
	        return inspect_(value, opts, depth + 1, seen);
	    }

	    if (typeof obj === 'function' && !isRegExp(obj)) { // in older engines, regexes are callable
	        var name = nameOf(obj);
	        var keys = arrObjKeys(obj, inspect);
	        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
	    }
	    if (isSymbol(obj)) {
	        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
	        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
	    }
	    if (isElement(obj)) {
	        var s = '<' + $toLowerCase.call(String(obj.nodeName));
	        var attrs = obj.attributes || [];
	        for (var i = 0; i < attrs.length; i++) {
	            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
	        }
	        s += '>';
	        if (obj.childNodes && obj.childNodes.length) { s += '...'; }
	        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
	        return s;
	    }
	    if (isArray(obj)) {
	        if (obj.length === 0) { return '[]'; }
	        var xs = arrObjKeys(obj, inspect);
	        if (indent && !singleLineValues(xs)) {
	            return '[' + indentedJoin(xs, indent) + ']';
	        }
	        return '[ ' + $join.call(xs, ', ') + ' ]';
	    }
	    if (isError(obj)) {
	        var parts = arrObjKeys(obj, inspect);
	        if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {
	            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
	        }
	        if (parts.length === 0) { return '[' + String(obj) + ']'; }
	        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
	    }
	    if (typeof obj === 'object' && customInspect) {
	        if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {
	            return utilInspect(obj, { depth: maxDepth - depth });
	        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
	            return obj.inspect();
	        }
	    }
	    if (isMap(obj)) {
	        var mapParts = [];
	        if (mapForEach) {
	            mapForEach.call(obj, function (value, key) {
	                mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
	            });
	        }
	        return collectionOf('Map', mapSize.call(obj), mapParts, indent);
	    }
	    if (isSet(obj)) {
	        var setParts = [];
	        if (setForEach) {
	            setForEach.call(obj, function (value) {
	                setParts.push(inspect(value, obj));
	            });
	        }
	        return collectionOf('Set', setSize.call(obj), setParts, indent);
	    }
	    if (isWeakMap(obj)) {
	        return weakCollectionOf('WeakMap');
	    }
	    if (isWeakSet(obj)) {
	        return weakCollectionOf('WeakSet');
	    }
	    if (isWeakRef(obj)) {
	        return weakCollectionOf('WeakRef');
	    }
	    if (isNumber(obj)) {
	        return markBoxed(inspect(Number(obj)));
	    }
	    if (isBigInt(obj)) {
	        return markBoxed(inspect(bigIntValueOf.call(obj)));
	    }
	    if (isBoolean(obj)) {
	        return markBoxed(booleanValueOf.call(obj));
	    }
	    if (isString(obj)) {
	        return markBoxed(inspect(String(obj)));
	    }
	    // note: in IE 8, sometimes `global !== window` but both are the prototypes of each other
	    /* eslint-env browser */
	    if (typeof window !== 'undefined' && obj === window) {
	        return '{ [object Window] }';
	    }
	    if (obj === commonjsGlobal) {
	        return '{ [object globalThis] }';
	    }
	    if (!isDate(obj) && !isRegExp(obj)) {
	        var ys = arrObjKeys(obj, inspect);
	        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
	        var protoTag = obj instanceof Object ? '' : 'null prototype';
	        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';
	        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
	        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
	        if (ys.length === 0) { return tag + '{}'; }
	        if (indent) {
	            return tag + '{' + indentedJoin(ys, indent) + '}';
	        }
	        return tag + '{ ' + $join.call(ys, ', ') + ' }';
	    }
	    return String(obj);
	};

	function wrapQuotes(s, defaultStyle, opts) {
	    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
	    return quoteChar + s + quoteChar;
	}

	function quote(s) {
	    return $replace.call(String(s), /"/g, '&quot;');
	}

	function isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
	function isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
	function isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
	function isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
	function isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
	function isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
	function isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }

	// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
	function isSymbol(obj) {
	    if (hasShammedSymbols) {
	        return obj && typeof obj === 'object' && obj instanceof Symbol;
	    }
	    if (typeof obj === 'symbol') {
	        return true;
	    }
	    if (!obj || typeof obj !== 'object' || !symToString) {
	        return false;
	    }
	    try {
	        symToString.call(obj);
	        return true;
	    } catch (e) {}
	    return false;
	}

	function isBigInt(obj) {
	    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
	        return false;
	    }
	    try {
	        bigIntValueOf.call(obj);
	        return true;
	    } catch (e) {}
	    return false;
	}

	var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
	function has(obj, key) {
	    return hasOwn.call(obj, key);
	}

	function toStr(obj) {
	    return objectToString.call(obj);
	}

	function nameOf(f) {
	    if (f.name) { return f.name; }
	    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
	    if (m) { return m[1]; }
	    return null;
	}

	function indexOf(xs, x) {
	    if (xs.indexOf) { return xs.indexOf(x); }
	    for (var i = 0, l = xs.length; i < l; i++) {
	        if (xs[i] === x) { return i; }
	    }
	    return -1;
	}

	function isMap(x) {
	    if (!mapSize || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        mapSize.call(x);
	        try {
	            setSize.call(x);
	        } catch (s) {
	            return true;
	        }
	        return x instanceof Map; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isWeakMap(x) {
	    if (!weakMapHas || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        weakMapHas.call(x, weakMapHas);
	        try {
	            weakSetHas.call(x, weakSetHas);
	        } catch (s) {
	            return true;
	        }
	        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isWeakRef(x) {
	    if (!weakRefDeref || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        weakRefDeref.call(x);
	        return true;
	    } catch (e) {}
	    return false;
	}

	function isSet(x) {
	    if (!setSize || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        setSize.call(x);
	        try {
	            mapSize.call(x);
	        } catch (m) {
	            return true;
	        }
	        return x instanceof Set; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isWeakSet(x) {
	    if (!weakSetHas || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        weakSetHas.call(x, weakSetHas);
	        try {
	            weakMapHas.call(x, weakMapHas);
	        } catch (s) {
	            return true;
	        }
	        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isElement(x) {
	    if (!x || typeof x !== 'object') { return false; }
	    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
	        return true;
	    }
	    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
	}

	function inspectString(str, opts) {
	    if (str.length > opts.maxStringLength) {
	        var remaining = str.length - opts.maxStringLength;
	        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
	        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
	    }
	    // eslint-disable-next-line no-control-regex
	    var s = $replace.call($replace.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte);
	    return wrapQuotes(s, 'single', opts);
	}

	function lowbyte(c) {
	    var n = c.charCodeAt(0);
	    var x = {
	        8: 'b',
	        9: 't',
	        10: 'n',
	        12: 'f',
	        13: 'r'
	    }[n];
	    if (x) { return '\\' + x; }
	    return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
	}

	function markBoxed(str) {
	    return 'Object(' + str + ')';
	}

	function weakCollectionOf(type) {
	    return type + ' { ? }';
	}

	function collectionOf(type, size, entries, indent) {
	    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');
	    return type + ' (' + size + ') {' + joinedEntries + '}';
	}

	function singleLineValues(xs) {
	    for (var i = 0; i < xs.length; i++) {
	        if (indexOf(xs[i], '\n') >= 0) {
	            return false;
	        }
	    }
	    return true;
	}

	function getIndent(opts, depth) {
	    var baseIndent;
	    if (opts.indent === '\t') {
	        baseIndent = '\t';
	    } else if (typeof opts.indent === 'number' && opts.indent > 0) {
	        baseIndent = $join.call(Array(opts.indent + 1), ' ');
	    } else {
	        return null;
	    }
	    return {
	        base: baseIndent,
	        prev: $join.call(Array(depth + 1), baseIndent)
	    };
	}

	function indentedJoin(xs, indent) {
	    if (xs.length === 0) { return ''; }
	    var lineJoiner = '\n' + indent.prev + indent.base;
	    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
	}

	function arrObjKeys(obj, inspect) {
	    var isArr = isArray(obj);
	    var xs = [];
	    if (isArr) {
	        xs.length = obj.length;
	        for (var i = 0; i < obj.length; i++) {
	            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
	        }
	    }
	    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
	    var symMap;
	    if (hasShammedSymbols) {
	        symMap = {};
	        for (var k = 0; k < syms.length; k++) {
	            symMap['$' + syms[k]] = syms[k];
	        }
	    }

	    for (var key in obj) { // eslint-disable-line no-restricted-syntax
	        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
	        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
	        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
	            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
	            continue; // eslint-disable-line no-restricted-syntax, no-continue
	        } else if ($test.call(/[^\w$]/, key)) {
	            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
	        } else {
	            xs.push(key + ': ' + inspect(obj[key], obj));
	        }
	    }
	    if (typeof gOPS === 'function') {
	        for (var j = 0; j < syms.length; j++) {
	            if (isEnumerable.call(obj, syms[j])) {
	                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
	            }
	        }
	    }
	    return xs;
	}
	return _package$p;
}

var _package$o;
var hasRequired_package$1;

function require_package$1 () {
	if (hasRequired_package$1) return _package$o;
	hasRequired_package$1 = 1;

	var GetIntrinsic = require_package$8();
	var callBound = requireCallBound();
	var inspect = require_package$2();

	var $TypeError = GetIntrinsic('%TypeError%');
	var $WeakMap = GetIntrinsic('%WeakMap%', true);
	var $Map = GetIntrinsic('%Map%', true);

	var $weakMapGet = callBound('WeakMap.prototype.get', true);
	var $weakMapSet = callBound('WeakMap.prototype.set', true);
	var $weakMapHas = callBound('WeakMap.prototype.has', true);
	var $mapGet = callBound('Map.prototype.get', true);
	var $mapSet = callBound('Map.prototype.set', true);
	var $mapHas = callBound('Map.prototype.has', true);

	/*
	 * This function traverses the list returning the node corresponding to the
	 * given key.
	 *
	 * That node is also moved to the head of the list, so that if it's accessed
	 * again we don't need to traverse the whole list. By doing so, all the recently
	 * used nodes can be accessed relatively quickly.
	 */
	var listGetNode = function (list, key) { // eslint-disable-line consistent-return
		for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
			if (curr.key === key) {
				prev.next = curr.next;
				curr.next = list.next;
				list.next = curr; // eslint-disable-line no-param-reassign
				return curr;
			}
		}
	};

	var listGet = function (objects, key) {
		var node = listGetNode(objects, key);
		return node && node.value;
	};
	var listSet = function (objects, key, value) {
		var node = listGetNode(objects, key);
		if (node) {
			node.value = value;
		} else {
			// Prepend the new node to the beginning of the list
			objects.next = { // eslint-disable-line no-param-reassign
				key: key,
				next: objects.next,
				value: value
			};
		}
	};
	var listHas = function (objects, key) {
		return !!listGetNode(objects, key);
	};

	_package$o = function getSideChannel() {
		var $wm;
		var $m;
		var $o;
		var channel = {
			assert: function (key) {
				if (!channel.has(key)) {
					throw new $TypeError('Side channel does not contain ' + inspect(key));
				}
			},
			get: function (key) { // eslint-disable-line consistent-return
				if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
					if ($wm) {
						return $weakMapGet($wm, key);
					}
				} else if ($Map) {
					if ($m) {
						return $mapGet($m, key);
					}
				} else {
					if ($o) { // eslint-disable-line no-lonely-if
						return listGet($o, key);
					}
				}
			},
			has: function (key) {
				if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
					if ($wm) {
						return $weakMapHas($wm, key);
					}
				} else if ($Map) {
					if ($m) {
						return $mapHas($m, key);
					}
				} else {
					if ($o) { // eslint-disable-line no-lonely-if
						return listHas($o, key);
					}
				}
				return false;
			},
			set: function (key, value) {
				if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
					if (!$wm) {
						$wm = new $WeakMap();
					}
					$weakMapSet($wm, key, value);
				} else if ($Map) {
					if (!$m) {
						$m = new $Map();
					}
					$mapSet($m, key, value);
				} else {
					if (!$o) {
						/*
						 * Initialize the linked list as an empty node, so that we don't have
						 * to special-case handling of the first node: we can always refer to
						 * it as (previous node).next, instead of something like (list).head
						 */
						$o = { key: {}, next: null };
					}
					listSet($o, key, value);
				}
			}
		};
		return channel;
	};
	return _package$o;
}

var formats;
var hasRequiredFormats;

function requireFormats () {
	if (hasRequiredFormats) return formats;
	hasRequiredFormats = 1;

	var replace = String.prototype.replace;
	var percentTwenties = /%20/g;

	var Format = {
	    RFC1738: 'RFC1738',
	    RFC3986: 'RFC3986'
	};

	formats = {
	    'default': Format.RFC3986,
	    formatters: {
	        RFC1738: function (value) {
	            return replace.call(value, percentTwenties, '+');
	        },
	        RFC3986: function (value) {
	            return String(value);
	        }
	    },
	    RFC1738: Format.RFC1738,
	    RFC3986: Format.RFC3986
	};
	return formats;
}

var utils$2;
var hasRequiredUtils;

function requireUtils () {
	if (hasRequiredUtils) return utils$2;
	hasRequiredUtils = 1;

	var formats = requireFormats();

	var has = Object.prototype.hasOwnProperty;
	var isArray = Array.isArray;

	var hexTable = (function () {
	    var array = [];
	    for (var i = 0; i < 256; ++i) {
	        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
	    }

	    return array;
	}());

	var compactQueue = function compactQueue(queue) {
	    while (queue.length > 1) {
	        var item = queue.pop();
	        var obj = item.obj[item.prop];

	        if (isArray(obj)) {
	            var compacted = [];

	            for (var j = 0; j < obj.length; ++j) {
	                if (typeof obj[j] !== 'undefined') {
	                    compacted.push(obj[j]);
	                }
	            }

	            item.obj[item.prop] = compacted;
	        }
	    }
	};

	var arrayToObject = function arrayToObject(source, options) {
	    var obj = options && options.plainObjects ? Object.create(null) : {};
	    for (var i = 0; i < source.length; ++i) {
	        if (typeof source[i] !== 'undefined') {
	            obj[i] = source[i];
	        }
	    }

	    return obj;
	};

	var merge = function merge(target, source, options) {
	    /* eslint no-param-reassign: 0 */
	    if (!source) {
	        return target;
	    }

	    if (typeof source !== 'object') {
	        if (isArray(target)) {
	            target.push(source);
	        } else if (target && typeof target === 'object') {
	            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {
	                target[source] = true;
	            }
	        } else {
	            return [target, source];
	        }

	        return target;
	    }

	    if (!target || typeof target !== 'object') {
	        return [target].concat(source);
	    }

	    var mergeTarget = target;
	    if (isArray(target) && !isArray(source)) {
	        mergeTarget = arrayToObject(target, options);
	    }

	    if (isArray(target) && isArray(source)) {
	        source.forEach(function (item, i) {
	            if (has.call(target, i)) {
	                var targetItem = target[i];
	                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
	                    target[i] = merge(targetItem, item, options);
	                } else {
	                    target.push(item);
	                }
	            } else {
	                target[i] = item;
	            }
	        });
	        return target;
	    }

	    return Object.keys(source).reduce(function (acc, key) {
	        var value = source[key];

	        if (has.call(acc, key)) {
	            acc[key] = merge(acc[key], value, options);
	        } else {
	            acc[key] = value;
	        }
	        return acc;
	    }, mergeTarget);
	};

	var assign = function assignSingleSource(target, source) {
	    return Object.keys(source).reduce(function (acc, key) {
	        acc[key] = source[key];
	        return acc;
	    }, target);
	};

	var decode = function (str, decoder, charset) {
	    var strWithoutPlus = str.replace(/\+/g, ' ');
	    if (charset === 'iso-8859-1') {
	        // unescape never throws, no try...catch needed:
	        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
	    }
	    // utf-8
	    try {
	        return decodeURIComponent(strWithoutPlus);
	    } catch (e) {
	        return strWithoutPlus;
	    }
	};

	var encode = function encode(str, defaultEncoder, charset, kind, format) {
	    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
	    // It has been adapted here for stricter adherence to RFC 3986
	    if (str.length === 0) {
	        return str;
	    }

	    var string = str;
	    if (typeof str === 'symbol') {
	        string = Symbol.prototype.toString.call(str);
	    } else if (typeof str !== 'string') {
	        string = String(str);
	    }

	    if (charset === 'iso-8859-1') {
	        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
	            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
	        });
	    }

	    var out = '';
	    for (var i = 0; i < string.length; ++i) {
	        var c = string.charCodeAt(i);

	        if (
	            c === 0x2D // -
	            || c === 0x2E // .
	            || c === 0x5F // _
	            || c === 0x7E // ~
	            || (c >= 0x30 && c <= 0x39) // 0-9
	            || (c >= 0x41 && c <= 0x5A) // a-z
	            || (c >= 0x61 && c <= 0x7A) // A-Z
	            || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )
	        ) {
	            out += string.charAt(i);
	            continue;
	        }

	        if (c < 0x80) {
	            out = out + hexTable[c];
	            continue;
	        }

	        if (c < 0x800) {
	            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
	            continue;
	        }

	        if (c < 0xD800 || c >= 0xE000) {
	            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
	            continue;
	        }

	        i += 1;
	        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
	        /* eslint operator-linebreak: [2, "before"] */
	        out += hexTable[0xF0 | (c >> 18)]
	            + hexTable[0x80 | ((c >> 12) & 0x3F)]
	            + hexTable[0x80 | ((c >> 6) & 0x3F)]
	            + hexTable[0x80 | (c & 0x3F)];
	    }

	    return out;
	};

	var compact = function compact(value) {
	    var queue = [{ obj: { o: value }, prop: 'o' }];
	    var refs = [];

	    for (var i = 0; i < queue.length; ++i) {
	        var item = queue[i];
	        var obj = item.obj[item.prop];

	        var keys = Object.keys(obj);
	        for (var j = 0; j < keys.length; ++j) {
	            var key = keys[j];
	            var val = obj[key];
	            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
	                queue.push({ obj: obj, prop: key });
	                refs.push(val);
	            }
	        }
	    }

	    compactQueue(queue);

	    return value;
	};

	var isRegExp = function isRegExp(obj) {
	    return Object.prototype.toString.call(obj) === '[object RegExp]';
	};

	var isBuffer = function isBuffer(obj) {
	    if (!obj || typeof obj !== 'object') {
	        return false;
	    }

	    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
	};

	var combine = function combine(a, b) {
	    return [].concat(a, b);
	};

	var maybeMap = function maybeMap(val, fn) {
	    if (isArray(val)) {
	        var mapped = [];
	        for (var i = 0; i < val.length; i += 1) {
	            mapped.push(fn(val[i]));
	        }
	        return mapped;
	    }
	    return fn(val);
	};

	utils$2 = {
	    arrayToObject: arrayToObject,
	    assign: assign,
	    combine: combine,
	    compact: compact,
	    decode: decode,
	    encode: encode,
	    isBuffer: isBuffer,
	    isRegExp: isRegExp,
	    maybeMap: maybeMap,
	    merge: merge
	};
	return utils$2;
}

var stringify_1;
var hasRequiredStringify;

function requireStringify () {
	if (hasRequiredStringify) return stringify_1;
	hasRequiredStringify = 1;

	var getSideChannel = require_package$1();
	var utils = requireUtils();
	var formats = requireFormats();
	var has = Object.prototype.hasOwnProperty;

	var arrayPrefixGenerators = {
	    brackets: function brackets(prefix) {
	        return prefix + '[]';
	    },
	    comma: 'comma',
	    indices: function indices(prefix, key) {
	        return prefix + '[' + key + ']';
	    },
	    repeat: function repeat(prefix) {
	        return prefix;
	    }
	};

	var isArray = Array.isArray;
	var split = String.prototype.split;
	var push = Array.prototype.push;
	var pushToArray = function (arr, valueOrArray) {
	    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
	};

	var toISO = Date.prototype.toISOString;

	var defaultFormat = formats['default'];
	var defaults = {
	    addQueryPrefix: false,
	    allowDots: false,
	    charset: 'utf-8',
	    charsetSentinel: false,
	    delimiter: '&',
	    encode: true,
	    encoder: utils.encode,
	    encodeValuesOnly: false,
	    format: defaultFormat,
	    formatter: formats.formatters[defaultFormat],
	    // deprecated
	    indices: false,
	    serializeDate: function serializeDate(date) {
	        return toISO.call(date);
	    },
	    skipNulls: false,
	    strictNullHandling: false
	};

	var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
	    return typeof v === 'string'
	        || typeof v === 'number'
	        || typeof v === 'boolean'
	        || typeof v === 'symbol'
	        || typeof v === 'bigint';
	};

	var sentinel = {};

	var stringify = function stringify(
	    object,
	    prefix,
	    generateArrayPrefix,
	    commaRoundTrip,
	    strictNullHandling,
	    skipNulls,
	    encoder,
	    filter,
	    sort,
	    allowDots,
	    serializeDate,
	    format,
	    formatter,
	    encodeValuesOnly,
	    charset,
	    sideChannel
	) {
	    var obj = object;

	    var tmpSc = sideChannel;
	    var step = 0;
	    var findFlag = false;
	    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {
	        // Where object last appeared in the ref tree
	        var pos = tmpSc.get(object);
	        step += 1;
	        if (typeof pos !== 'undefined') {
	            if (pos === step) {
	                throw new RangeError('Cyclic object value');
	            } else {
	                findFlag = true; // Break while
	            }
	        }
	        if (typeof tmpSc.get(sentinel) === 'undefined') {
	            step = 0;
	        }
	    }

	    if (typeof filter === 'function') {
	        obj = filter(prefix, obj);
	    } else if (obj instanceof Date) {
	        obj = serializeDate(obj);
	    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {
	        obj = utils.maybeMap(obj, function (value) {
	            if (value instanceof Date) {
	                return serializeDate(value);
	            }
	            return value;
	        });
	    }

	    if (obj === null) {
	        if (strictNullHandling) {
	            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;
	        }

	        obj = '';
	    }

	    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
	        if (encoder) {
	            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);
	            if (generateArrayPrefix === 'comma' && encodeValuesOnly) {
	                var valuesArray = split.call(String(obj), ',');
	                var valuesJoined = '';
	                for (var i = 0; i < valuesArray.length; ++i) {
	                    valuesJoined += (i === 0 ? '' : ',') + formatter(encoder(valuesArray[i], defaults.encoder, charset, 'value', format));
	                }
	                return [formatter(keyValue) + (commaRoundTrip && isArray(obj) && valuesArray.length === 1 ? '[]' : '') + '=' + valuesJoined];
	            }
	            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];
	        }
	        return [formatter(prefix) + '=' + formatter(String(obj))];
	    }

	    var values = [];

	    if (typeof obj === 'undefined') {
	        return values;
	    }

	    var objKeys;
	    if (generateArrayPrefix === 'comma' && isArray(obj)) {
	        // we need to join elements in
	        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];
	    } else if (isArray(filter)) {
	        objKeys = filter;
	    } else {
	        var keys = Object.keys(obj);
	        objKeys = sort ? keys.sort(sort) : keys;
	    }

	    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + '[]' : prefix;

	    for (var j = 0; j < objKeys.length; ++j) {
	        var key = objKeys[j];
	        var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];

	        if (skipNulls && value === null) {
	            continue;
	        }

	        var keyPrefix = isArray(obj)
	            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix
	            : adjustedPrefix + (allowDots ? '.' + key : '[' + key + ']');

	        sideChannel.set(object, step);
	        var valueSideChannel = getSideChannel();
	        valueSideChannel.set(sentinel, sideChannel);
	        pushToArray(values, stringify(
	            value,
	            keyPrefix,
	            generateArrayPrefix,
	            commaRoundTrip,
	            strictNullHandling,
	            skipNulls,
	            encoder,
	            filter,
	            sort,
	            allowDots,
	            serializeDate,
	            format,
	            formatter,
	            encodeValuesOnly,
	            charset,
	            valueSideChannel
	        ));
	    }

	    return values;
	};

	var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
	    if (!opts) {
	        return defaults;
	    }

	    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {
	        throw new TypeError('Encoder has to be a function.');
	    }

	    var charset = opts.charset || defaults.charset;
	    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
	        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
	    }

	    var format = formats['default'];
	    if (typeof opts.format !== 'undefined') {
	        if (!has.call(formats.formatters, opts.format)) {
	            throw new TypeError('Unknown format option provided.');
	        }
	        format = opts.format;
	    }
	    var formatter = formats.formatters[format];

	    var filter = defaults.filter;
	    if (typeof opts.filter === 'function' || isArray(opts.filter)) {
	        filter = opts.filter;
	    }

	    return {
	        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
	        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
	        charset: charset,
	        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
	        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
	        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
	        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
	        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
	        filter: filter,
	        format: format,
	        formatter: formatter,
	        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
	        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
	        sort: typeof opts.sort === 'function' ? opts.sort : null,
	        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
	    };
	};

	stringify_1 = function (object, opts) {
	    var obj = object;
	    var options = normalizeStringifyOptions(opts);

	    var objKeys;
	    var filter;

	    if (typeof options.filter === 'function') {
	        filter = options.filter;
	        obj = filter('', obj);
	    } else if (isArray(options.filter)) {
	        filter = options.filter;
	        objKeys = filter;
	    }

	    var keys = [];

	    if (typeof obj !== 'object' || obj === null) {
	        return '';
	    }

	    var arrayFormat;
	    if (opts && opts.arrayFormat in arrayPrefixGenerators) {
	        arrayFormat = opts.arrayFormat;
	    } else if (opts && 'indices' in opts) {
	        arrayFormat = opts.indices ? 'indices' : 'repeat';
	    } else {
	        arrayFormat = 'indices';
	    }

	    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
	    if (opts && 'commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {
	        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');
	    }
	    var commaRoundTrip = generateArrayPrefix === 'comma' && opts && opts.commaRoundTrip;

	    if (!objKeys) {
	        objKeys = Object.keys(obj);
	    }

	    if (options.sort) {
	        objKeys.sort(options.sort);
	    }

	    var sideChannel = getSideChannel();
	    for (var i = 0; i < objKeys.length; ++i) {
	        var key = objKeys[i];

	        if (options.skipNulls && obj[key] === null) {
	            continue;
	        }
	        pushToArray(keys, stringify(
	            obj[key],
	            key,
	            generateArrayPrefix,
	            commaRoundTrip,
	            options.strictNullHandling,
	            options.skipNulls,
	            options.encode ? options.encoder : null,
	            options.filter,
	            options.sort,
	            options.allowDots,
	            options.serializeDate,
	            options.format,
	            options.formatter,
	            options.encodeValuesOnly,
	            options.charset,
	            sideChannel
	        ));
	    }

	    var joined = keys.join(options.delimiter);
	    var prefix = options.addQueryPrefix === true ? '?' : '';

	    if (options.charsetSentinel) {
	        if (options.charset === 'iso-8859-1') {
	            // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
	            prefix += 'utf8=%26%2310003%3B&';
	        } else {
	            // encodeURIComponent('✓')
	            prefix += 'utf8=%E2%9C%93&';
	        }
	    }

	    return joined.length > 0 ? prefix + joined : '';
	};
	return stringify_1;
}

var parse$7;
var hasRequiredParse;

function requireParse () {
	if (hasRequiredParse) return parse$7;
	hasRequiredParse = 1;

	var utils = requireUtils();

	var has = Object.prototype.hasOwnProperty;
	var isArray = Array.isArray;

	var defaults = {
	    allowDots: false,
	    allowPrototypes: false,
	    allowSparse: false,
	    arrayLimit: 20,
	    charset: 'utf-8',
	    charsetSentinel: false,
	    comma: false,
	    decoder: utils.decode,
	    delimiter: '&',
	    depth: 5,
	    ignoreQueryPrefix: false,
	    interpretNumericEntities: false,
	    parameterLimit: 1000,
	    parseArrays: true,
	    plainObjects: false,
	    strictNullHandling: false
	};

	var interpretNumericEntities = function (str) {
	    return str.replace(/&#(\d+);/g, function ($0, numberStr) {
	        return String.fromCharCode(parseInt(numberStr, 10));
	    });
	};

	var parseArrayValue = function (val, options) {
	    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {
	        return val.split(',');
	    }

	    return val;
	};

	// This is what browsers will submit when the ✓ character occurs in an
	// application/x-www-form-urlencoded body and the encoding of the page containing
	// the form is iso-8859-1, or when the submitted form has an accept-charset
	// attribute of iso-8859-1. Presumably also with other charsets that do not contain
	// the ✓ character, such as us-ascii.
	var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')

	// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
	var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

	var parseValues = function parseQueryStringValues(str, options) {
	    var obj = {};
	    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
	    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
	    var parts = cleanStr.split(options.delimiter, limit);
	    var skipIndex = -1; // Keep track of where the utf8 sentinel was found
	    var i;

	    var charset = options.charset;
	    if (options.charsetSentinel) {
	        for (i = 0; i < parts.length; ++i) {
	            if (parts[i].indexOf('utf8=') === 0) {
	                if (parts[i] === charsetSentinel) {
	                    charset = 'utf-8';
	                } else if (parts[i] === isoSentinel) {
	                    charset = 'iso-8859-1';
	                }
	                skipIndex = i;
	                i = parts.length; // The eslint settings do not allow break;
	            }
	        }
	    }

	    for (i = 0; i < parts.length; ++i) {
	        if (i === skipIndex) {
	            continue;
	        }
	        var part = parts[i];

	        var bracketEqualsPos = part.indexOf(']=');
	        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

	        var key, val;
	        if (pos === -1) {
	            key = options.decoder(part, defaults.decoder, charset, 'key');
	            val = options.strictNullHandling ? null : '';
	        } else {
	            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');
	            val = utils.maybeMap(
	                parseArrayValue(part.slice(pos + 1), options),
	                function (encodedVal) {
	                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');
	                }
	            );
	        }

	        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
	            val = interpretNumericEntities(val);
	        }

	        if (part.indexOf('[]=') > -1) {
	            val = isArray(val) ? [val] : val;
	        }

	        if (has.call(obj, key)) {
	            obj[key] = utils.combine(obj[key], val);
	        } else {
	            obj[key] = val;
	        }
	    }

	    return obj;
	};

	var parseObject = function (chain, val, options, valuesParsed) {
	    var leaf = valuesParsed ? val : parseArrayValue(val, options);

	    for (var i = chain.length - 1; i >= 0; --i) {
	        var obj;
	        var root = chain[i];

	        if (root === '[]' && options.parseArrays) {
	            obj = [].concat(leaf);
	        } else {
	            obj = options.plainObjects ? Object.create(null) : {};
	            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
	            var index = parseInt(cleanRoot, 10);
	            if (!options.parseArrays && cleanRoot === '') {
	                obj = { 0: leaf };
	            } else if (
	                !isNaN(index)
	                && root !== cleanRoot
	                && String(index) === cleanRoot
	                && index >= 0
	                && (options.parseArrays && index <= options.arrayLimit)
	            ) {
	                obj = [];
	                obj[index] = leaf;
	            } else if (cleanRoot !== '__proto__') {
	                obj[cleanRoot] = leaf;
	            }
	        }

	        leaf = obj;
	    }

	    return leaf;
	};

	var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
	    if (!givenKey) {
	        return;
	    }

	    // Transform dot notation to bracket notation
	    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

	    // The regex chunks

	    var brackets = /(\[[^[\]]*])/;
	    var child = /(\[[^[\]]*])/g;

	    // Get the parent

	    var segment = options.depth > 0 && brackets.exec(key);
	    var parent = segment ? key.slice(0, segment.index) : key;

	    // Stash the parent if it exists

	    var keys = [];
	    if (parent) {
	        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
	        if (!options.plainObjects && has.call(Object.prototype, parent)) {
	            if (!options.allowPrototypes) {
	                return;
	            }
	        }

	        keys.push(parent);
	    }

	    // Loop through children appending to the array until we hit depth

	    var i = 0;
	    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
	        i += 1;
	        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
	            if (!options.allowPrototypes) {
	                return;
	            }
	        }
	        keys.push(segment[1]);
	    }

	    // If there's a remainder, just add whatever is left

	    if (segment) {
	        keys.push('[' + key.slice(segment.index) + ']');
	    }

	    return parseObject(keys, val, options, valuesParsed);
	};

	var normalizeParseOptions = function normalizeParseOptions(opts) {
	    if (!opts) {
	        return defaults;
	    }

	    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
	        throw new TypeError('Decoder has to be a function.');
	    }

	    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
	        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
	    }
	    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;

	    return {
	        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
	        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,
	        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,
	        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,
	        charset: charset,
	        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
	        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
	        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
	        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
	        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
	        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,
	        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
	        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
	        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,
	        parseArrays: opts.parseArrays !== false,
	        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,
	        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
	    };
	};

	parse$7 = function (str, opts) {
	    var options = normalizeParseOptions(opts);

	    if (str === '' || str === null || typeof str === 'undefined') {
	        return options.plainObjects ? Object.create(null) : {};
	    }

	    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
	    var obj = options.plainObjects ? Object.create(null) : {};

	    // Iterate over the keys and setup the new object

	    var keys = Object.keys(tempObj);
	    for (var i = 0; i < keys.length; ++i) {
	        var key = keys[i];
	        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');
	        obj = utils.merge(obj, newObj, options);
	    }

	    if (options.allowSparse === true) {
	        return obj;
	    }

	    return utils.compact(obj);
	};
	return parse$7;
}

var lib$3;
var hasRequiredLib;

function requireLib () {
	if (hasRequiredLib) return lib$3;
	hasRequiredLib = 1;

	var stringify = requireStringify();
	var parse = requireParse();
	var formats = requireFormats();

	lib$3 = {
	    formats: formats,
	    parse: parse,
	    stringify: stringify
	};
	return lib$3;
}

/*!
 * body-parser
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

var urlencoded_1;
var hasRequiredUrlencoded$1;

function requireUrlencoded$1 () {
	if (hasRequiredUrlencoded$1) return urlencoded_1;
	hasRequiredUrlencoded$1 = 1;

	/**
	 * Module dependencies.
	 * @private
	 */

	var bytes = require_package$f();
	var contentType = _package$O;
	var createError = _packageExports$b;
	var debug = srcExports('body-parser:urlencoded');
	var deprecate = _package$Q('body-parser');
	var read = requireRead();
	var typeis = _packageExports$9;

	/**
	 * Module exports.
	 */

	urlencoded_1 = urlencoded;

	/**
	 * Cache of parser modules.
	 */

	var parsers = Object.create(null);

	/**
	 * Create a middleware to parse urlencoded bodies.
	 *
	 * @param {object} [options]
	 * @return {function}
	 * @public
	 */

	function urlencoded (options) {
	  var opts = options || {};

	  // notice because option default will flip in next major
	  if (opts.extended === undefined) {
	    deprecate('undefined extended: provide extended option');
	  }

	  var extended = opts.extended !== false;
	  var inflate = opts.inflate !== false;
	  var limit = typeof opts.limit !== 'number'
	    ? bytes.parse(opts.limit || '100kb')
	    : opts.limit;
	  var type = opts.type || 'application/x-www-form-urlencoded';
	  var verify = opts.verify || false;

	  if (verify !== false && typeof verify !== 'function') {
	    throw new TypeError('option verify must be function')
	  }

	  // create the appropriate query parser
	  var queryparse = extended
	    ? extendedparser(opts)
	    : simpleparser(opts);

	  // create the appropriate type checking function
	  var shouldParse = typeof type !== 'function'
	    ? typeChecker(type)
	    : type;

	  function parse (body) {
	    return body.length
	      ? queryparse(body)
	      : {}
	  }

	  return function urlencodedParser (req, res, next) {
	    if (req._body) {
	      debug('body already parsed');
	      next();
	      return
	    }

	    req.body = req.body || {};

	    // skip requests without bodies
	    if (!typeis.hasBody(req)) {
	      debug('skip empty body');
	      next();
	      return
	    }

	    debug('content-type %j', req.headers['content-type']);

	    // determine if request should be parsed
	    if (!shouldParse(req)) {
	      debug('skip parsing');
	      next();
	      return
	    }

	    // assert charset
	    var charset = getCharset(req) || 'utf-8';
	    if (charset !== 'utf-8') {
	      debug('invalid charset');
	      next(createError(415, 'unsupported charset "' + charset.toUpperCase() + '"', {
	        charset: charset,
	        type: 'charset.unsupported'
	      }));
	      return
	    }

	    // read
	    read(req, res, next, parse, debug, {
	      debug: debug,
	      encoding: charset,
	      inflate: inflate,
	      limit: limit,
	      verify: verify
	    });
	  }
	}

	/**
	 * Get the extended query parser.
	 *
	 * @param {object} options
	 */

	function extendedparser (options) {
	  var parameterLimit = options.parameterLimit !== undefined
	    ? options.parameterLimit
	    : 1000;
	  var parse = parser('qs');

	  if (isNaN(parameterLimit) || parameterLimit < 1) {
	    throw new TypeError('option parameterLimit must be a positive number')
	  }

	  if (isFinite(parameterLimit)) {
	    parameterLimit = parameterLimit | 0;
	  }

	  return function queryparse (body) {
	    var paramCount = parameterCount(body, parameterLimit);

	    if (paramCount === undefined) {
	      debug('too many parameters');
	      throw createError(413, 'too many parameters', {
	        type: 'parameters.too.many'
	      })
	    }

	    var arrayLimit = Math.max(100, paramCount);

	    debug('parse extended urlencoding');
	    return parse(body, {
	      allowPrototypes: true,
	      arrayLimit: arrayLimit,
	      depth: Infinity,
	      parameterLimit: parameterLimit
	    })
	  }
	}

	/**
	 * Get the charset of a request.
	 *
	 * @param {object} req
	 * @api private
	 */

	function getCharset (req) {
	  try {
	    return (contentType.parse(req).parameters.charset || '').toLowerCase()
	  } catch (e) {
	    return undefined
	  }
	}

	/**
	 * Count the number of parameters, stopping once limit reached
	 *
	 * @param {string} body
	 * @param {number} limit
	 * @api private
	 */

	function parameterCount (body, limit) {
	  var count = 0;
	  var index = 0;

	  while ((index = body.indexOf('&', index)) !== -1) {
	    count++;
	    index++;

	    if (count === limit) {
	      return undefined
	    }
	  }

	  return count
	}

	/**
	 * Get parser for module name dynamically.
	 *
	 * @param {string} name
	 * @return {function}
	 * @api private
	 */

	function parser (name) {
	  var mod = parsers[name];

	  if (mod !== undefined) {
	    return mod.parse
	  }

	  // this uses a switch for static require analysis
	  switch (name) {
	    case 'qs':
	      mod = requireLib();
	      break
	    case 'querystring':
	      mod = require$$8;
	      break
	  }

	  // store to prevent invoking require()
	  parsers[name] = mod;

	  return mod.parse
	}

	/**
	 * Get the simple query parser.
	 *
	 * @param {object} options
	 */

	function simpleparser (options) {
	  var parameterLimit = options.parameterLimit !== undefined
	    ? options.parameterLimit
	    : 1000;
	  var parse = parser('querystring');

	  if (isNaN(parameterLimit) || parameterLimit < 1) {
	    throw new TypeError('option parameterLimit must be a positive number')
	  }

	  if (isFinite(parameterLimit)) {
	    parameterLimit = parameterLimit | 0;
	  }

	  return function queryparse (body) {
	    var paramCount = parameterCount(body, parameterLimit);

	    if (paramCount === undefined) {
	      debug('too many parameters');
	      throw createError(413, 'too many parameters', {
	        type: 'parameters.too.many'
	      })
	    }

	    debug('parse urlencoding');
	    return parse(body, undefined, undefined, { maxKeys: parameterLimit })
	  }
	}

	/**
	 * Get the simple type checker.
	 *
	 * @param {string} type
	 * @return {function}
	 */

	function typeChecker (type) {
	  return function checkType (req) {
	    return Boolean(typeis(req, type))
	  }
	}
	return urlencoded_1;
}

/*!
 * body-parser
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

(function (module, exports) {

	/**
	 * Module dependencies.
	 * @private
	 */

	var deprecate = _package$Q('body-parser');

	/**
	 * Cache of loaded parsers.
	 * @private
	 */

	var parsers = Object.create(null);

	/**
	 * @typedef Parsers
	 * @type {function}
	 * @property {function} json
	 * @property {function} raw
	 * @property {function} text
	 * @property {function} urlencoded
	 */

	/**
	 * Module exports.
	 * @type {Parsers}
	 */

	exports = module.exports = deprecate.function(bodyParser,
	  'bodyParser: use individual json/urlencoded middlewares');

	/**
	 * JSON parser.
	 * @public
	 */

	Object.defineProperty(exports, 'json', {
	  configurable: true,
	  enumerable: true,
	  get: createParserGetter('json')
	});

	/**
	 * Raw parser.
	 * @public
	 */

	Object.defineProperty(exports, 'raw', {
	  configurable: true,
	  enumerable: true,
	  get: createParserGetter('raw')
	});

	/**
	 * Text parser.
	 * @public
	 */

	Object.defineProperty(exports, 'text', {
	  configurable: true,
	  enumerable: true,
	  get: createParserGetter('text')
	});

	/**
	 * URL-encoded parser.
	 * @public
	 */

	Object.defineProperty(exports, 'urlencoded', {
	  configurable: true,
	  enumerable: true,
	  get: createParserGetter('urlencoded')
	});

	/**
	 * Create a middleware to parse json and urlencoded bodies.
	 *
	 * @param {object} [options]
	 * @return {function}
	 * @deprecated
	 * @public
	 */

	function bodyParser (options) {
	  // use default type for parsers
	  var opts = Object.create(options || null, {
	    type: {
	      configurable: true,
	      enumerable: true,
	      value: undefined,
	      writable: true
	    }
	  });

	  var _urlencoded = exports.urlencoded(opts);
	  var _json = exports.json(opts);

	  return function bodyParser (req, res, next) {
	    _json(req, res, function (err) {
	      if (err) return next(err)
	      _urlencoded(req, res, next);
	    });
	  }
	}

	/**
	 * Create a getter for loading a parser.
	 * @private
	 */

	function createParserGetter (name) {
	  return function get () {
	    return loadParser(name)
	  }
	}

	/**
	 * Load a parser module.
	 * @private
	 */

	function loadParser (parserName) {
	  var parser = parsers[parserName];

	  if (parser !== undefined) {
	    return parser
	  }

	  // this uses a switch for static require analysis
	  switch (parserName) {
	    case 'json':
	      parser = requireJson$1();
	      break
	    case 'raw':
	      parser = requireRaw();
	      break
	    case 'text':
	      parser = requireText();
	      break
	    case 'urlencoded':
	      parser = requireUrlencoded$1();
	      break
	  }

	  // store to prevent invoking require()
	  return (parsers[parserName] = parser)
	} 
} (_package$R, _package$R.exports));

var _packageExports$8 = _package$R.exports;

/*!
 * merge-descriptors
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var _package$n = merge$1;

/**
 * Module variables.
 * @private
 */

var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

/**
 * Merge the property descriptors of `src` into `dest`
 *
 * @param {object} dest Object to add descriptors to
 * @param {object} src Object to clone descriptors from
 * @param {boolean} [redefine=true] Redefine `dest` properties with `src` properties
 * @returns {object} Reference to dest
 * @public
 */

function merge$1(dest, src, redefine) {
  if (!dest) {
    throw new TypeError('argument dest is required')
  }

  if (!src) {
    throw new TypeError('argument src is required')
  }

  if (redefine === undefined) {
    // Default to true
    redefine = true;
  }

  Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName(name) {
    if (!redefine && hasOwnProperty$1.call(dest, name)) {
      // Skip desriptor
      return
    }

    // Copy descriptor
    var descriptor = Object.getOwnPropertyDescriptor(src, name);
    Object.defineProperty(dest, name, descriptor);
  });

  return dest
}

var application = {exports: {}};

/*!
 * encodeurl
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var _package$m = encodeUrl$3;

/**
 * RegExp to match non-URL code points, *after* encoding (i.e. not including "%")
 * and including invalid escape sequences.
 * @private
 */

var ENCODE_CHARS_REGEXP = /(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;

/**
 * RegExp to match unmatched surrogate pair.
 * @private
 */

var UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g;

/**
 * String to replace unmatched surrogate pair with.
 * @private
 */

var UNMATCHED_SURROGATE_PAIR_REPLACE = '$1\uFFFD$2';

/**
 * Encode a URL to a percent-encoded form, excluding already-encoded sequences.
 *
 * This function will take an already-encoded URL and encode all the non-URL
 * code points. This function will not encode the "%" character unless it is
 * not part of a valid sequence (`%20` will be left as-is, but `%foo` will
 * be encoded as `%25foo`).
 *
 * This encode is meant to be "safe" and does not throw errors. It will try as
 * hard as it can to properly encode the given URL, including replacing any raw,
 * unpaired surrogate pairs with the Unicode replacement character prior to
 * encoding.
 *
 * @param {string} url
 * @return {string}
 * @public
 */

function encodeUrl$3 (url) {
  return String(url)
    .replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE)
    .replace(ENCODE_CHARS_REGEXP, encodeURI)
}

/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */

/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Module exports.
 * @public
 */

var _package$l = escapeHtml$3;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml$3(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34: // "
        escape = '&quot;';
        break;
      case 38: // &
        escape = '&amp;';
        break;
      case 39: // '
        escape = '&#39;';
        break;
      case 60: // <
        escape = '&lt;';
        break;
      case 62: // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index
    ? html + str.substring(lastIndex, index)
    : html;
}

var _package$k = {exports: {}};

/*!
 * parseurl
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 * @private
 */

var url = require$$0$6;
var parse$6 = url.parse;
var Url = url.Url;

/**
 * Module exports.
 * @public
 */

_package$k.exports = parseurl;
_package$k.exports.original = originalurl;

/**
 * Parse the `req` url with memoization.
 *
 * @param {ServerRequest} req
 * @return {Object}
 * @public
 */

function parseurl (req) {
  var url = req.url;

  if (url === undefined) {
    // URL is undefined
    return undefined
  }

  var parsed = req._parsedUrl;

  if (fresh$3(url, parsed)) {
    // Return cached URL parse
    return parsed
  }

  // Parse the URL
  parsed = fastparse(url);
  parsed._raw = url;

  return (req._parsedUrl = parsed)
}
/**
 * Parse the `req` original url with fallback and memoization.
 *
 * @param {ServerRequest} req
 * @return {Object}
 * @public
 */

function originalurl (req) {
  var url = req.originalUrl;

  if (typeof url !== 'string') {
    // Fallback
    return parseurl(req)
  }

  var parsed = req._parsedOriginalUrl;

  if (fresh$3(url, parsed)) {
    // Return cached URL parse
    return parsed
  }

  // Parse the URL
  parsed = fastparse(url);
  parsed._raw = url;

  return (req._parsedOriginalUrl = parsed)
}
/**
 * Parse the `str` url with fast-path short-cut.
 *
 * @param {string} str
 * @return {Object}
 * @private
 */

function fastparse (str) {
  if (typeof str !== 'string' || str.charCodeAt(0) !== 0x2f /* / */) {
    return parse$6(str)
  }

  var pathname = str;
  var query = null;
  var search = null;

  // This takes the regexp from https://github.com/joyent/node/pull/7878
  // Which is /^(\/[^?#\s]*)(\?[^#\s]*)?$/
  // And unrolls it into a for loop
  for (var i = 1; i < str.length; i++) {
    switch (str.charCodeAt(i)) {
      case 0x3f: /* ?  */
        if (search === null) {
          pathname = str.substring(0, i);
          query = str.substring(i + 1);
          search = str.substring(i);
        }
        break
      case 0x09: /* \t */
      case 0x0a: /* \n */
      case 0x0c: /* \f */
      case 0x0d: /* \r */
      case 0x20: /*    */
      case 0x23: /* #  */
      case 0xa0:
      case 0xfeff:
        return parse$6(str)
    }
  }

  var url = Url !== undefined
    ? new Url()
    : {};

  url.path = str;
  url.href = str;
  url.pathname = pathname;

  if (search !== null) {
    url.query = query;
    url.search = search;
  }

  return url
}

/**
 * Determine if parsed is still fresh for url.
 *
 * @param {string} url
 * @param {object} parsedUrl
 * @return {boolean}
 * @private
 */

function fresh$3 (url, parsedUrl) {
  return typeof parsedUrl === 'object' &&
    parsedUrl !== null &&
    (Url === undefined || parsedUrl instanceof Url) &&
    parsedUrl._raw === url
}

var _packageExports$7 = _package$k.exports;

/*!
 * finalhandler
 * Copyright(c) 2014-2022 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 * @private
 */

var debug$5 = srcExports('finalhandler');
var encodeUrl$2 = _package$m;
var escapeHtml$2 = _package$l;
var onFinished$2 = _packageExports$a;
var parseUrl$1 = _packageExports$7;
var statuses$2 = _package$L;
var unpipe = _package$H;

/**
 * Module variables.
 * @private
 */

var DOUBLE_SPACE_REGEXP = /\x20{2}/g;
var NEWLINE_REGEXP = /\n/g;

/* istanbul ignore next */
var defer = typeof setImmediate === 'function'
  ? setImmediate
  : function (fn) { process.nextTick(fn.bind.apply(fn, arguments)); };
var isFinished = onFinished$2.isFinished;

/**
 * Create a minimal HTML document.
 *
 * @param {string} message
 * @private
 */

function createHtmlDocument$1 (message) {
  var body = escapeHtml$2(message)
    .replace(NEWLINE_REGEXP, '<br>')
    .replace(DOUBLE_SPACE_REGEXP, ' &nbsp;');

  return '<!DOCTYPE html>\n' +
    '<html lang="en">\n' +
    '<head>\n' +
    '<meta charset="utf-8">\n' +
    '<title>Error</title>\n' +
    '</head>\n' +
    '<body>\n' +
    '<pre>' + body + '</pre>\n' +
    '</body>\n' +
    '</html>\n'
}

/**
 * Module exports.
 * @public
 */

var _package$j = finalhandler;

/**
 * Create a function to handle the final response.
 *
 * @param {Request} req
 * @param {Response} res
 * @param {Object} [options]
 * @return {Function}
 * @public
 */

function finalhandler (req, res, options) {
  var opts = options || {};

  // get environment
  var env = opts.env || process.env.NODE_ENV || 'development';

  // get error callback
  var onerror = opts.onerror;

  return function (err) {
    var headers;
    var msg;
    var status;

    // ignore 404 on in-flight response
    if (!err && headersSent$1(res)) {
      debug$5('cannot 404 after headers sent');
      return
    }

    // unhandled error
    if (err) {
      // respect status code from error
      status = getErrorStatusCode(err);

      if (status === undefined) {
        // fallback to status code on response
        status = getResponseStatusCode(res);
      } else {
        // respect headers from error
        headers = getErrorHeaders(err);
      }

      // get error message
      msg = getErrorMessage(err, status, env);
    } else {
      // not found
      status = 404;
      msg = 'Cannot ' + req.method + ' ' + encodeUrl$2(getResourceName(req));
    }

    debug$5('default %s', status);

    // schedule onerror callback
    if (err && onerror) {
      defer(onerror, err, req, res);
    }

    // cannot actually respond
    if (headersSent$1(res)) {
      debug$5('cannot %d after headers sent', status);
      req.socket.destroy();
      return
    }

    // send response
    send$2(req, res, status, headers, msg);
  }
}

/**
 * Get headers from Error object.
 *
 * @param {Error} err
 * @return {object}
 * @private
 */

function getErrorHeaders (err) {
  if (!err.headers || typeof err.headers !== 'object') {
    return undefined
  }

  var headers = Object.create(null);
  var keys = Object.keys(err.headers);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    headers[key] = err.headers[key];
  }

  return headers
}

/**
 * Get message from Error object, fallback to status message.
 *
 * @param {Error} err
 * @param {number} status
 * @param {string} env
 * @return {string}
 * @private
 */

function getErrorMessage (err, status, env) {
  var msg;

  if (env !== 'production') {
    // use err.stack, which typically includes err.message
    msg = err.stack;

    // fallback to err.toString() when possible
    if (!msg && typeof err.toString === 'function') {
      msg = err.toString();
    }
  }

  return msg || statuses$2.message[status]
}

/**
 * Get status code from Error object.
 *
 * @param {Error} err
 * @return {number}
 * @private
 */

function getErrorStatusCode (err) {
  // check err.status
  if (typeof err.status === 'number' && err.status >= 400 && err.status < 600) {
    return err.status
  }

  // check err.statusCode
  if (typeof err.statusCode === 'number' && err.statusCode >= 400 && err.statusCode < 600) {
    return err.statusCode
  }

  return undefined
}

/**
 * Get resource name for the request.
 *
 * This is typically just the original pathname of the request
 * but will fallback to "resource" is that cannot be determined.
 *
 * @param {IncomingMessage} req
 * @return {string}
 * @private
 */

function getResourceName (req) {
  try {
    return parseUrl$1.original(req).pathname
  } catch (e) {
    return 'resource'
  }
}

/**
 * Get status code from response.
 *
 * @param {OutgoingMessage} res
 * @return {number}
 * @private
 */

function getResponseStatusCode (res) {
  var status = res.statusCode;

  // default status code to 500 if outside valid range
  if (typeof status !== 'number' || status < 400 || status > 599) {
    status = 500;
  }

  return status
}

/**
 * Determine if the response headers have been sent.
 *
 * @param {object} res
 * @returns {boolean}
 * @private
 */

function headersSent$1 (res) {
  return typeof res.headersSent !== 'boolean'
    ? Boolean(res._header)
    : res.headersSent
}

/**
 * Send response.
 *
 * @param {IncomingMessage} req
 * @param {OutgoingMessage} res
 * @param {number} status
 * @param {object} headers
 * @param {string} message
 * @private
 */

function send$2 (req, res, status, headers, message) {
  function write () {
    // response body
    var body = createHtmlDocument$1(message);

    // response status
    res.statusCode = status;
    res.statusMessage = statuses$2.message[status];

    // remove any content headers
    res.removeHeader('Content-Encoding');
    res.removeHeader('Content-Language');
    res.removeHeader('Content-Range');

    // response headers
    setHeaders$1(res, headers);

    // security headers
    res.setHeader('Content-Security-Policy', "default-src 'none'");
    res.setHeader('X-Content-Type-Options', 'nosniff');

    // standard headers
    res.setHeader('Content-Type', 'text/html; charset=utf-8');
    res.setHeader('Content-Length', Buffer.byteLength(body, 'utf8'));

    if (req.method === 'HEAD') {
      res.end();
      return
    }

    res.end(body, 'utf8');
  }

  if (isFinished(req)) {
    write();
    return
  }

  // unpipe everything from the request
  unpipe(req);

  // flush the request
  onFinished$2(req, write);
  req.resume();
}

/**
 * Set response headers from an object.
 *
 * @param {OutgoingMessage} res
 * @param {object} headers
 * @private
 */

function setHeaders$1 (res, headers) {
  if (!headers) {
    return
  }

  var keys = Object.keys(headers);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    res.setHeader(key, headers[key]);
  }
}

var router = {exports: {}};

/**
 * Expose `arrayFlatten`.
 */
var arrayFlatten_1 = arrayFlatten;

/**
 * Recursive flatten function with depth.
 *
 * @param  {Array}  array
 * @param  {Array}  result
 * @param  {Number} depth
 * @return {Array}
 */
function flattenWithDepth (array, result, depth) {
  for (var i = 0; i < array.length; i++) {
    var value = array[i];

    if (depth > 0 && Array.isArray(value)) {
      flattenWithDepth(value, result, depth - 1);
    } else {
      result.push(value);
    }
  }

  return result
}

/**
 * Recursive flatten function. Omitting depth is slightly faster.
 *
 * @param  {Array} array
 * @param  {Array} result
 * @return {Array}
 */
function flattenForever (array, result) {
  for (var i = 0; i < array.length; i++) {
    var value = array[i];

    if (Array.isArray(value)) {
      flattenForever(value, result);
    } else {
      result.push(value);
    }
  }

  return result
}

/**
 * Flatten an array, with the ability to define a depth.
 *
 * @param  {Array}  array
 * @param  {Number} depth
 * @return {Array}
 */
function arrayFlatten (array, depth) {
  if (depth == null) {
    return flattenForever(array, [])
  }

  return flattenWithDepth(array, [], depth)
}

/**
 * Expose `pathtoRegexp`.
 */

var _package$i = pathtoRegexp;

/**
 * Match matching groups in a regular expression.
 */
var MATCHING_GROUP_REGEXP = /\((?!\?)/g;

/**
 * Normalize the given path string,
 * returning a regular expression.
 *
 * An empty array should be passed,
 * which will contain the placeholder
 * key names. For example "/user/:id" will
 * then contain ["id"].
 *
 * @param  {String|RegExp|Array} path
 * @param  {Array} keys
 * @param  {Object} options
 * @return {RegExp}
 * @api private
 */

function pathtoRegexp(path, keys, options) {
  options = options || {};
  keys = keys || [];
  var strict = options.strict;
  var end = options.end !== false;
  var flags = options.sensitive ? '' : 'i';
  var extraOffset = 0;
  var keysOffset = keys.length;
  var i = 0;
  var name = 0;
  var m;

  if (path instanceof RegExp) {
    while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {
      keys.push({
        name: name++,
        optional: false,
        offset: m.index
      });
    }

    return path;
  }

  if (Array.isArray(path)) {
    // Map array parts into regexps and return their source. We also pass
    // the same keys and options instance into every generation to get
    // consistent matching groups before we join the sources together.
    path = path.map(function (value) {
      return pathtoRegexp(value, keys, options).source;
    });

    return new RegExp('(?:' + path.join('|') + ')', flags);
  }

  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))
    .replace(/\/\(/g, '/(?:')
    .replace(/([\/\.])/g, '\\$1')
    .replace(/(\\\/)?(\\\.)?:(\w+)(\(.*?\))?(\*)?(\?)?/g, function (match, slash, format, key, capture, star, optional, offset) {
      slash = slash || '';
      format = format || '';
      capture = capture || '([^\\/' + format + ']+?)';
      optional = optional || '';

      keys.push({
        name: key,
        optional: !!optional,
        offset: offset + extraOffset
      });

      var result = ''
        + (optional ? '' : slash)
        + '(?:'
        + format + (optional ? slash : '') + capture
        + (star ? '((?:[\\/' + format + '].+?)?)' : '')
        + ')'
        + optional;

      extraOffset += result.length - match.length;

      return result;
    })
    .replace(/\*/g, function (star, index) {
      var len = keys.length;

      while (len-- > keysOffset && keys[len].offset > index) {
        keys[len].offset += 3; // Replacement length minus asterisk length.
      }

      return '(.*)';
    });

  // This is a workaround for handling unnamed matching groups.
  while (m = MATCHING_GROUP_REGEXP.exec(path)) {
    var escapeCount = 0;
    var index = m.index;

    while (path.charAt(--index) === '\\') {
      escapeCount++;
    }

    // It's possible to escape the bracket.
    if (escapeCount % 2 === 1) {
      continue;
    }

    if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {
      keys.splice(keysOffset + i, 0, {
        name: name++, // Unnamed matching groups must be consistently linear.
        optional: false,
        offset: m.index
      });
    }

    i++;
  }

  // If the path is non-ending, match until the end or a slash.
  path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\/|$)'));

  return new RegExp(path, flags);
}

/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 * @private
 */

var pathRegexp = _package$i;
var debug$4 = srcExports('express:router:layer');

/**
 * Module variables.
 * @private
 */

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Module exports.
 * @public
 */

var layer = Layer$2;

function Layer$2(path, options, fn) {
  if (!(this instanceof Layer$2)) {
    return new Layer$2(path, options, fn);
  }

  debug$4('new %o', path);
  var opts = options || {};

  this.handle = fn;
  this.name = fn.name || '<anonymous>';
  this.params = undefined;
  this.path = undefined;
  this.regexp = pathRegexp(path, this.keys = [], opts);

  // set fast path flags
  this.regexp.fast_star = path === '*';
  this.regexp.fast_slash = path === '/' && opts.end === false;
}

/**
 * Handle the error for the layer.
 *
 * @param {Error} error
 * @param {Request} req
 * @param {Response} res
 * @param {function} next
 * @api private
 */

Layer$2.prototype.handle_error = function handle_error(error, req, res, next) {
  var fn = this.handle;

  if (fn.length !== 4) {
    // not a standard error handler
    return next(error);
  }

  try {
    fn(error, req, res, next);
  } catch (err) {
    next(err);
  }
};

/**
 * Handle the request for the layer.
 *
 * @param {Request} req
 * @param {Response} res
 * @param {function} next
 * @api private
 */

Layer$2.prototype.handle_request = function handle(req, res, next) {
  var fn = this.handle;

  if (fn.length > 3) {
    // not a standard request handler
    return next();
  }

  try {
    fn(req, res, next);
  } catch (err) {
    next(err);
  }
};

/**
 * Check if this route matches `path`, if so
 * populate `.params`.
 *
 * @param {String} path
 * @return {Boolean}
 * @api private
 */

Layer$2.prototype.match = function match(path) {
  var match;

  if (path != null) {
    // fast path non-ending match for / (any path matches)
    if (this.regexp.fast_slash) {
      this.params = {};
      this.path = '';
      return true
    }

    // fast path for * (everything matched in a param)
    if (this.regexp.fast_star) {
      this.params = {'0': decode_param(path)};
      this.path = path;
      return true
    }

    // match the path
    match = this.regexp.exec(path);
  }

  if (!match) {
    this.params = undefined;
    this.path = undefined;
    return false;
  }

  // store values
  this.params = {};
  this.path = match[0];

  var keys = this.keys;
  var params = this.params;

  for (var i = 1; i < match.length; i++) {
    var key = keys[i - 1];
    var prop = key.name;
    var val = decode_param(match[i]);

    if (val !== undefined || !(hasOwnProperty.call(params, prop))) {
      params[prop] = val;
    }
  }

  return true;
};

/**
 * Decode param value.
 *
 * @param {string} val
 * @return {string}
 * @private
 */

function decode_param(val) {
  if (typeof val !== 'string' || val.length === 0) {
    return val;
  }

  try {
    return decodeURIComponent(val);
  } catch (err) {
    if (err instanceof URIError) {
      err.message = 'Failed to decode param \'' + val + '\'';
      err.status = err.statusCode = 400;
    }

    throw err;
  }
}

/*!
 * methods
 * Copyright(c) 2013-2014 TJ Holowaychuk
 * Copyright(c) 2015-2016 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 * @private
 */

var http$2 = require$$0$7;

/**
 * Module exports.
 * @public
 */

var _package$h = getCurrentNodeMethods() || getBasicNodeMethods();

/**
 * Get the current Node.js methods.
 * @private
 */

function getCurrentNodeMethods() {
  return http$2.METHODS && http$2.METHODS.map(function lowerCaseMethod(method) {
    return method.toLowerCase();
  });
}

/**
 * Get the "basic" Node.js methods, a snapshot from Node.js 0.10.
 * @private
 */

function getBasicNodeMethods() {
  return [
    'get',
    'post',
    'put',
    'head',
    'delete',
    'options',
    'trace',
    'copy',
    'lock',
    'mkcol',
    'move',
    'purge',
    'propfind',
    'proppatch',
    'unlock',
    'report',
    'mkactivity',
    'checkout',
    'merge',
    'm-search',
    'notify',
    'subscribe',
    'unsubscribe',
    'patch',
    'search',
    'connect'
  ];
}

/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 * @private
 */

var debug$3 = srcExports('express:router:route');
var flatten$1 = arrayFlatten_1;
var Layer$1 = layer;
var methods$1 = _package$h;

/**
 * Module variables.
 * @private
 */

var slice$1 = Array.prototype.slice;
var toString$2 = Object.prototype.toString;

/**
 * Module exports.
 * @public
 */

var route = Route$1;

/**
 * Initialize `Route` with the given `path`,
 *
 * @param {String} path
 * @public
 */

function Route$1(path) {
  this.path = path;
  this.stack = [];

  debug$3('new %o', path);

  // route handlers for various http methods
  this.methods = {};
}

/**
 * Determine if the route handles a given method.
 * @private
 */

Route$1.prototype._handles_method = function _handles_method(method) {
  if (this.methods._all) {
    return true;
  }

  var name = method.toLowerCase();

  if (name === 'head' && !this.methods['head']) {
    name = 'get';
  }

  return Boolean(this.methods[name]);
};

/**
 * @return {Array} supported HTTP methods
 * @private
 */

Route$1.prototype._options = function _options() {
  var methods = Object.keys(this.methods);

  // append automatic head
  if (this.methods.get && !this.methods.head) {
    methods.push('head');
  }

  for (var i = 0; i < methods.length; i++) {
    // make upper case
    methods[i] = methods[i].toUpperCase();
  }

  return methods;
};

/**
 * dispatch req, res into this route
 * @private
 */

Route$1.prototype.dispatch = function dispatch(req, res, done) {
  var idx = 0;
  var stack = this.stack;
  var sync = 0;

  if (stack.length === 0) {
    return done();
  }

  var method = req.method.toLowerCase();
  if (method === 'head' && !this.methods['head']) {
    method = 'get';
  }

  req.route = this;

  next();

  function next(err) {
    // signal to exit route
    if (err && err === 'route') {
      return done();
    }

    // signal to exit router
    if (err && err === 'router') {
      return done(err)
    }

    // max sync stack
    if (++sync > 100) {
      return setImmediate(next, err)
    }

    var layer = stack[idx++];

    // end of layers
    if (!layer) {
      return done(err)
    }

    if (layer.method && layer.method !== method) {
      next(err);
    } else if (err) {
      layer.handle_error(err, req, res, next);
    } else {
      layer.handle_request(req, res, next);
    }

    sync = 0;
  }
};

/**
 * Add a handler for all HTTP verbs to this route.
 *
 * Behaves just like middleware and can respond or call `next`
 * to continue processing.
 *
 * You can use multiple `.all` call to add multiple handlers.
 *
 *   function check_something(req, res, next){
 *     next();
 *   };
 *
 *   function validate_user(req, res, next){
 *     next();
 *   };
 *
 *   route
 *   .all(validate_user)
 *   .all(check_something)
 *   .get(function(req, res, next){
 *     res.send('hello world');
 *   });
 *
 * @param {function} handler
 * @return {Route} for chaining
 * @api public
 */

Route$1.prototype.all = function all() {
  var handles = flatten$1(slice$1.call(arguments));

  for (var i = 0; i < handles.length; i++) {
    var handle = handles[i];

    if (typeof handle !== 'function') {
      var type = toString$2.call(handle);
      var msg = 'Route.all() requires a callback function but got a ' + type;
      throw new TypeError(msg);
    }

    var layer = Layer$1('/', {}, handle);
    layer.method = undefined;

    this.methods._all = true;
    this.stack.push(layer);
  }

  return this;
};

methods$1.forEach(function(method){
  Route$1.prototype[method] = function(){
    var handles = flatten$1(slice$1.call(arguments));

    for (var i = 0; i < handles.length; i++) {
      var handle = handles[i];

      if (typeof handle !== 'function') {
        var type = toString$2.call(handle);
        var msg = 'Route.' + method + '() requires a callback function but got a ' + type;
        throw new Error(msg);
      }

      debug$3('%s %o', method, this.path);

      var layer = Layer$1('/', {}, handle);
      layer.method = method;

      this.methods[method] = true;
      this.stack.push(layer);
    }

    return this;
  };
});

var _package$g = {exports: {}};

/**
 * Merge object b with object a.
 *
 *     var a = { foo: 'bar' }
 *       , b = { bar: 'baz' };
 *
 *     merge(a, b);
 *     // => { foo: 'bar', bar: 'baz' }
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object}
 * @api public
 */

(function (module, exports) {
	module.exports = function(a, b){
	  if (a && b) {
	    for (var key in b) {
	      a[key] = b[key];
	    }
	  }
	  return a;
	}; 
} (_package$g));

var _packageExports$6 = _package$g.exports;

/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 * @private
 */

var Route = route;
var Layer = layer;
var methods = _package$h;
var mixin = _packageExports$6;
var debug$2 = srcExports('express:router');
var deprecate$3 = _package$Q('express');
var flatten = arrayFlatten_1;
var parseUrl = _packageExports$7;
var setPrototypeOf$1 = _package$M;

/**
 * Module variables.
 * @private
 */

var objectRegExp = /^\[object (\S+)\]$/;
var slice = Array.prototype.slice;
var toString$1 = Object.prototype.toString;

/**
 * Initialize a new `Router` with the given `options`.
 *
 * @param {Object} [options]
 * @return {Router} which is an callable function
 * @public
 */

var proto = router.exports = function(options) {
  var opts = options || {};

  function router(req, res, next) {
    router.handle(req, res, next);
  }

  // mixin Router class functions
  setPrototypeOf$1(router, proto);

  router.params = {};
  router._params = [];
  router.caseSensitive = opts.caseSensitive;
  router.mergeParams = opts.mergeParams;
  router.strict = opts.strict;
  router.stack = [];

  return router;
};

/**
 * Map the given param placeholder `name`(s) to the given callback.
 *
 * Parameter mapping is used to provide pre-conditions to routes
 * which use normalized placeholders. For example a _:user_id_ parameter
 * could automatically load a user's information from the database without
 * any additional code,
 *
 * The callback uses the same signature as middleware, the only difference
 * being that the value of the placeholder is passed, in this case the _id_
 * of the user. Once the `next()` function is invoked, just like middleware
 * it will continue on to execute the route, or subsequent parameter functions.
 *
 * Just like in middleware, you must either respond to the request or call next
 * to avoid stalling the request.
 *
 *  app.param('user_id', function(req, res, next, id){
 *    User.find(id, function(err, user){
 *      if (err) {
 *        return next(err);
 *      } else if (!user) {
 *        return next(new Error('failed to load user'));
 *      }
 *      req.user = user;
 *      next();
 *    });
 *  });
 *
 * @param {String} name
 * @param {Function} fn
 * @return {app} for chaining
 * @public
 */

proto.param = function param(name, fn) {
  // param logic
  if (typeof name === 'function') {
    deprecate$3('router.param(fn): Refactor to use path params');
    this._params.push(name);
    return;
  }

  // apply param functions
  var params = this._params;
  var len = params.length;
  var ret;

  if (name[0] === ':') {
    deprecate$3('router.param(' + JSON.stringify(name) + ', fn): Use router.param(' + JSON.stringify(name.slice(1)) + ', fn) instead');
    name = name.slice(1);
  }

  for (var i = 0; i < len; ++i) {
    if (ret = params[i](name, fn)) {
      fn = ret;
    }
  }

  // ensure we end up with a
  // middleware function
  if ('function' !== typeof fn) {
    throw new Error('invalid param() call for ' + name + ', got ' + fn);
  }

  (this.params[name] = this.params[name] || []).push(fn);
  return this;
};

/**
 * Dispatch a req, res into the router.
 * @private
 */

proto.handle = function handle(req, res, out) {
  var self = this;

  debug$2('dispatching %s %s', req.method, req.url);

  var idx = 0;
  var protohost = getProtohost(req.url) || '';
  var removed = '';
  var slashAdded = false;
  var sync = 0;
  var paramcalled = {};

  // store options for OPTIONS request
  // only used if OPTIONS request
  var options = [];

  // middleware and routes
  var stack = self.stack;

  // manage inter-router variables
  var parentParams = req.params;
  var parentUrl = req.baseUrl || '';
  var done = restore(out, req, 'baseUrl', 'next', 'params');

  // setup next layer
  req.next = next;

  // for options requests, respond with a default if nothing else responds
  if (req.method === 'OPTIONS') {
    done = wrap(done, function(old, err) {
      if (err || options.length === 0) return old(err);
      sendOptionsResponse(res, options, old);
    });
  }

  // setup basic req values
  req.baseUrl = parentUrl;
  req.originalUrl = req.originalUrl || req.url;

  next();

  function next(err) {
    var layerError = err === 'route'
      ? null
      : err;

    // remove added slash
    if (slashAdded) {
      req.url = req.url.slice(1);
      slashAdded = false;
    }

    // restore altered req.url
    if (removed.length !== 0) {
      req.baseUrl = parentUrl;
      req.url = protohost + removed + req.url.slice(protohost.length);
      removed = '';
    }

    // signal to exit router
    if (layerError === 'router') {
      setImmediate(done, null);
      return
    }

    // no more matching layers
    if (idx >= stack.length) {
      setImmediate(done, layerError);
      return;
    }

    // max sync stack
    if (++sync > 100) {
      return setImmediate(next, err)
    }

    // get pathname of request
    var path = getPathname(req);

    if (path == null) {
      return done(layerError);
    }

    // find next matching layer
    var layer;
    var match;
    var route;

    while (match !== true && idx < stack.length) {
      layer = stack[idx++];
      match = matchLayer(layer, path);
      route = layer.route;

      if (typeof match !== 'boolean') {
        // hold on to layerError
        layerError = layerError || match;
      }

      if (match !== true) {
        continue;
      }

      if (!route) {
        // process non-route handlers normally
        continue;
      }

      if (layerError) {
        // routes do not match with a pending error
        match = false;
        continue;
      }

      var method = req.method;
      var has_method = route._handles_method(method);

      // build up automatic options response
      if (!has_method && method === 'OPTIONS') {
        appendMethods(options, route._options());
      }

      // don't even bother matching route
      if (!has_method && method !== 'HEAD') {
        match = false;
      }
    }

    // no match
    if (match !== true) {
      return done(layerError);
    }

    // store route for dispatch on change
    if (route) {
      req.route = route;
    }

    // Capture one-time layer values
    req.params = self.mergeParams
      ? mergeParams(layer.params, parentParams)
      : layer.params;
    var layerPath = layer.path;

    // this should be done for the layer
    self.process_params(layer, paramcalled, req, res, function (err) {
      if (err) {
        next(layerError || err);
      } else if (route) {
        layer.handle_request(req, res, next);
      } else {
        trim_prefix(layer, layerError, layerPath, path);
      }

      sync = 0;
    });
  }

  function trim_prefix(layer, layerError, layerPath, path) {
    if (layerPath.length !== 0) {
      // Validate path is a prefix match
      if (layerPath !== path.slice(0, layerPath.length)) {
        next(layerError);
        return
      }

      // Validate path breaks on a path separator
      var c = path[layerPath.length];
      if (c && c !== '/' && c !== '.') return next(layerError)

      // Trim off the part of the url that matches the route
      // middleware (.use stuff) needs to have the path stripped
      debug$2('trim prefix (%s) from url %s', layerPath, req.url);
      removed = layerPath;
      req.url = protohost + req.url.slice(protohost.length + removed.length);

      // Ensure leading slash
      if (!protohost && req.url[0] !== '/') {
        req.url = '/' + req.url;
        slashAdded = true;
      }

      // Setup base URL (no trailing slash)
      req.baseUrl = parentUrl + (removed[removed.length - 1] === '/'
        ? removed.substring(0, removed.length - 1)
        : removed);
    }

    debug$2('%s %s : %s', layer.name, layerPath, req.originalUrl);

    if (layerError) {
      layer.handle_error(layerError, req, res, next);
    } else {
      layer.handle_request(req, res, next);
    }
  }
};

/**
 * Process any parameters for the layer.
 * @private
 */

proto.process_params = function process_params(layer, called, req, res, done) {
  var params = this.params;

  // captured parameters from the layer, keys and values
  var keys = layer.keys;

  // fast track
  if (!keys || keys.length === 0) {
    return done();
  }

  var i = 0;
  var name;
  var paramIndex = 0;
  var key;
  var paramVal;
  var paramCallbacks;
  var paramCalled;

  // process params in order
  // param callbacks can be async
  function param(err) {
    if (err) {
      return done(err);
    }

    if (i >= keys.length ) {
      return done();
    }

    paramIndex = 0;
    key = keys[i++];
    name = key.name;
    paramVal = req.params[name];
    paramCallbacks = params[name];
    paramCalled = called[name];

    if (paramVal === undefined || !paramCallbacks) {
      return param();
    }

    // param previously called with same value or error occurred
    if (paramCalled && (paramCalled.match === paramVal
      || (paramCalled.error && paramCalled.error !== 'route'))) {
      // restore value
      req.params[name] = paramCalled.value;

      // next param
      return param(paramCalled.error);
    }

    called[name] = paramCalled = {
      error: null,
      match: paramVal,
      value: paramVal
    };

    paramCallback();
  }

  // single param callbacks
  function paramCallback(err) {
    var fn = paramCallbacks[paramIndex++];

    // store updated value
    paramCalled.value = req.params[key.name];

    if (err) {
      // store error
      paramCalled.error = err;
      param(err);
      return;
    }

    if (!fn) return param();

    try {
      fn(req, res, paramCallback, paramVal, key.name);
    } catch (e) {
      paramCallback(e);
    }
  }

  param();
};

/**
 * Use the given middleware function, with optional path, defaulting to "/".
 *
 * Use (like `.all`) will run for any http METHOD, but it will not add
 * handlers for those methods so OPTIONS requests will not consider `.use`
 * functions even if they could respond.
 *
 * The other difference is that _route_ path is stripped and not visible
 * to the handler function. The main effect of this feature is that mounted
 * handlers can operate without any code changes regardless of the "prefix"
 * pathname.
 *
 * @public
 */

proto.use = function use(fn) {
  var offset = 0;
  var path = '/';

  // default path to '/'
  // disambiguate router.use([fn])
  if (typeof fn !== 'function') {
    var arg = fn;

    while (Array.isArray(arg) && arg.length !== 0) {
      arg = arg[0];
    }

    // first arg is the path
    if (typeof arg !== 'function') {
      offset = 1;
      path = fn;
    }
  }

  var callbacks = flatten(slice.call(arguments, offset));

  if (callbacks.length === 0) {
    throw new TypeError('Router.use() requires a middleware function')
  }

  for (var i = 0; i < callbacks.length; i++) {
    var fn = callbacks[i];

    if (typeof fn !== 'function') {
      throw new TypeError('Router.use() requires a middleware function but got a ' + gettype(fn))
    }

    // add the middleware
    debug$2('use %o %s', path, fn.name || '<anonymous>');

    var layer = new Layer(path, {
      sensitive: this.caseSensitive,
      strict: false,
      end: false
    }, fn);

    layer.route = undefined;

    this.stack.push(layer);
  }

  return this;
};

/**
 * Create a new Route for the given path.
 *
 * Each route contains a separate middleware stack and VERB handlers.
 *
 * See the Route api documentation for details on adding handlers
 * and middleware to routes.
 *
 * @param {String} path
 * @return {Route}
 * @public
 */

proto.route = function route(path) {
  var route = new Route(path);

  var layer = new Layer(path, {
    sensitive: this.caseSensitive,
    strict: this.strict,
    end: true
  }, route.dispatch.bind(route));

  layer.route = route;

  this.stack.push(layer);
  return route;
};

// create Router#VERB functions
methods.concat('all').forEach(function(method){
  proto[method] = function(path){
    var route = this.route(path);
    route[method].apply(route, slice.call(arguments, 1));
    return this;
  };
});

// append methods to a list of methods
function appendMethods(list, addition) {
  for (var i = 0; i < addition.length; i++) {
    var method = addition[i];
    if (list.indexOf(method) === -1) {
      list.push(method);
    }
  }
}

// get pathname of request
function getPathname(req) {
  try {
    return parseUrl(req).pathname;
  } catch (err) {
    return undefined;
  }
}

// Get get protocol + host for a URL
function getProtohost(url) {
  if (typeof url !== 'string' || url.length === 0 || url[0] === '/') {
    return undefined
  }

  var searchIndex = url.indexOf('?');
  var pathLength = searchIndex !== -1
    ? searchIndex
    : url.length;
  var fqdnIndex = url.slice(0, pathLength).indexOf('://');

  return fqdnIndex !== -1
    ? url.substring(0, url.indexOf('/', 3 + fqdnIndex))
    : undefined
}

// get type for error message
function gettype(obj) {
  var type = typeof obj;

  if (type !== 'object') {
    return type;
  }

  // inspect [[Class]] for objects
  return toString$1.call(obj)
    .replace(objectRegExp, '$1');
}

/**
 * Match path to a layer.
 *
 * @param {Layer} layer
 * @param {string} path
 * @private
 */

function matchLayer(layer, path) {
  try {
    return layer.match(path);
  } catch (err) {
    return err;
  }
}

// merge params with parent params
function mergeParams(params, parent) {
  if (typeof parent !== 'object' || !parent) {
    return params;
  }

  // make copy of parent for base
  var obj = mixin({}, parent);

  // simple non-numeric merging
  if (!(0 in params) || !(0 in parent)) {
    return mixin(obj, params);
  }

  var i = 0;
  var o = 0;

  // determine numeric gaps
  while (i in params) {
    i++;
  }

  while (o in parent) {
    o++;
  }

  // offset numeric indices in params before merge
  for (i--; i >= 0; i--) {
    params[i + o] = params[i];

    // create holes for the merge when necessary
    if (i < o) {
      delete params[i];
    }
  }

  return mixin(obj, params);
}

// restore obj props after function
function restore(fn, obj) {
  var props = new Array(arguments.length - 2);
  var vals = new Array(arguments.length - 2);

  for (var i = 0; i < props.length; i++) {
    props[i] = arguments[i + 2];
    vals[i] = obj[props[i]];
  }

  return function () {
    // restore vals
    for (var i = 0; i < props.length; i++) {
      obj[props[i]] = vals[i];
    }

    return fn.apply(this, arguments);
  };
}

// send an OPTIONS response
function sendOptionsResponse(res, options, next) {
  try {
    var body = options.join(',');
    res.set('Allow', body);
    res.send(body);
  } catch (err) {
    next(err);
  }
}

// wrap a function
function wrap(old, fn) {
  return function proxy() {
    var args = new Array(arguments.length + 1);

    args[0] = old;
    for (var i = 0, len = arguments.length; i < len; i++) {
      args[i + 1] = arguments[i];
    }

    fn.apply(this, args);
  };
}

var routerExports = router.exports;

var init = {};

/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 * @private
 */

var setPrototypeOf = _package$M;

/**
 * Initialization middleware, exposing the
 * request and response to each other, as well
 * as defaulting the X-Powered-By header field.
 *
 * @param {Function} app
 * @return {Function}
 * @api private
 */

init.init = function(app){
  return function expressInit(req, res, next){
    if (app.enabled('x-powered-by')) res.setHeader('X-Powered-By', 'Express');
    req.res = res;
    res.req = req;
    req.next = next;

    setPrototypeOf(req, app.request);
    setPrototypeOf(res, app.response);

    res.locals = res.locals || Object.create(null);

    next();
  };
};

/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

var query;
var hasRequiredQuery;

function requireQuery () {
	if (hasRequiredQuery) return query;
	hasRequiredQuery = 1;

	/**
	 * Module dependencies.
	 */

	var merge = _packageExports$6;
	var parseUrl = _packageExports$7;
	var qs = requireLib();

	/**
	 * @param {Object} options
	 * @return {Function}
	 * @api public
	 */

	query = function query(options) {
	  var opts = merge({}, options);
	  var queryparse = qs.parse;

	  if (typeof options === 'function') {
	    queryparse = options;
	    opts = undefined;
	  }

	  if (opts !== undefined && opts.allowPrototypes === undefined) {
	    // back-compat for qs module
	    opts.allowPrototypes = true;
	  }

	  return function query(req, res, next){
	    if (!req.query) {
	      var val = parseUrl(req).query;
	      req.query = queryparse(val, opts);
	    }

	    next();
	  };
	};
	return query;
}

function commonjsRequire(path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 * @private
 */

var debug$1 = srcExports('express:view');
var path$5 = path$6;
var fs$4 = require$$1$2;

/**
 * Module variables.
 * @private
 */

var dirname = path$5.dirname;
var basename$2 = path$5.basename;
var extname$2 = path$5.extname;
var join$1 = path$5.join;
var resolve$2 = path$5.resolve;

/**
 * Module exports.
 * @public
 */

var view = View;

/**
 * Initialize a new `View` with the given `name`.
 *
 * Options:
 *
 *   - `defaultEngine` the default template engine name
 *   - `engines` template engine require() cache
 *   - `root` root path for view lookup
 *
 * @param {string} name
 * @param {object} options
 * @public
 */

function View(name, options) {
  var opts = options || {};

  this.defaultEngine = opts.defaultEngine;
  this.ext = extname$2(name);
  this.name = name;
  this.root = opts.root;

  if (!this.ext && !this.defaultEngine) {
    throw new Error('No default engine was specified and no extension was provided.');
  }

  var fileName = name;

  if (!this.ext) {
    // get extension from default engine name
    this.ext = this.defaultEngine[0] !== '.'
      ? '.' + this.defaultEngine
      : this.defaultEngine;

    fileName += this.ext;
  }

  if (!opts.engines[this.ext]) {
    // load engine
    var mod = this.ext.slice(1);
    debug$1('require "%s"', mod);

    // default engine export
    var fn = commonjsRequire(mod).__express;

    if (typeof fn !== 'function') {
      throw new Error('Module "' + mod + '" does not provide a view engine.')
    }

    opts.engines[this.ext] = fn;
  }

  // store loaded engine
  this.engine = opts.engines[this.ext];

  // lookup path
  this.path = this.lookup(fileName);
}

/**
 * Lookup view by the given `name`
 *
 * @param {string} name
 * @private
 */

View.prototype.lookup = function lookup(name) {
  var path;
  var roots = [].concat(this.root);

  debug$1('lookup "%s"', name);

  for (var i = 0; i < roots.length && !path; i++) {
    var root = roots[i];

    // resolve the path
    var loc = resolve$2(root, name);
    var dir = dirname(loc);
    var file = basename$2(loc);

    // resolve the file
    path = this.resolve(dir, file);
  }

  return path;
};

/**
 * Render with the given options.
 *
 * @param {object} options
 * @param {function} callback
 * @private
 */

View.prototype.render = function render(options, callback) {
  debug$1('render "%s"', this.path);
  this.engine(this.path, options, callback);
};

/**
 * Resolve the file within the given directory.
 *
 * @param {string} dir
 * @param {string} file
 * @private
 */

View.prototype.resolve = function resolve(dir, file) {
  var ext = this.ext;

  // <path>.<ext>
  var path = join$1(dir, file);
  var stat = tryStat(path);

  if (stat && stat.isFile()) {
    return path;
  }

  // <path>/index.<ext>
  path = join$1(dir, basename$2(file, ext), 'index' + ext);
  stat = tryStat(path);

  if (stat && stat.isFile()) {
    return path;
  }
};

/**
 * Return a stat, maybe.
 *
 * @param {string} path
 * @return {fs.Stats}
 * @private
 */

function tryStat(path) {
  debug$1('stat "%s"', path);

  try {
    return fs$4.statSync(path);
  } catch (e) {
    return undefined;
  }
}

var utils$1 = {};

var _package$f = {exports: {}};

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

(function (module, exports) {
	/* eslint-disable node/no-deprecated-api */
	var buffer = require$$0$5;
	var Buffer = buffer.Buffer;

	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
	    dst[key] = src[key];
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer;
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer, exports);
	  exports.Buffer = SafeBuffer;
	}

	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}

	SafeBuffer.prototype = Object.create(Buffer.prototype);

	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer);

	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	};

	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size);
	  if (fill !== undefined) {
	    if (typeof encoding === 'string') {
	      buf.fill(fill, encoding);
	    } else {
	      buf.fill(fill);
	    }
	  } else {
	    buf.fill(0);
	  }
	  return buf
	};

	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	};

	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return buffer.SlowBuffer(size)
	}; 
} (_package$f, _package$f.exports));

var _packageExports$5 = _package$f.exports;

var _package$e = {exports: {}};

/*!
 * content-disposition
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

_package$e.exports = contentDisposition$1;
_package$e.exports.parse = parse$5;

/**
 * Module dependencies.
 * @private
 */

var basename$1 = path$6.basename;
var Buffer$2 = _packageExports$5.Buffer;

/**
 * RegExp to match non attr-char, *after* encodeURIComponent (i.e. not including "%")
 * @private
 */

var ENCODE_URL_ATTR_CHAR_REGEXP = /[\x00-\x20"'()*,/:;<=>?@[\\\]{}\x7f]/g; // eslint-disable-line no-control-regex

/**
 * RegExp to match percent encoding escape.
 * @private
 */

var HEX_ESCAPE_REGEXP = /%[0-9A-Fa-f]{2}/;
var HEX_ESCAPE_REPLACE_REGEXP = /%([0-9A-Fa-f]{2})/g;

/**
 * RegExp to match non-latin1 characters.
 * @private
 */

var NON_LATIN1_REGEXP = /[^\x20-\x7e\xa0-\xff]/g;

/**
 * RegExp to match quoted-pair in RFC 2616
 *
 * quoted-pair = "\" CHAR
 * CHAR        = <any US-ASCII character (octets 0 - 127)>
 * @private
 */

var QESC_REGEXP = /\\([\u0000-\u007f])/g; // eslint-disable-line no-control-regex

/**
 * RegExp to match chars that must be quoted-pair in RFC 2616
 * @private
 */

var QUOTE_REGEXP = /([\\"])/g;

/**
 * RegExp for various RFC 2616 grammar
 *
 * parameter     = token "=" ( token | quoted-string )
 * token         = 1*<any CHAR except CTLs or separators>
 * separators    = "(" | ")" | "<" | ">" | "@"
 *               | "," | ";" | ":" | "\" | <">
 *               | "/" | "[" | "]" | "?" | "="
 *               | "{" | "}" | SP | HT
 * quoted-string = ( <"> *(qdtext | quoted-pair ) <"> )
 * qdtext        = <any TEXT except <">>
 * quoted-pair   = "\" CHAR
 * CHAR          = <any US-ASCII character (octets 0 - 127)>
 * TEXT          = <any OCTET except CTLs, but including LWS>
 * LWS           = [CRLF] 1*( SP | HT )
 * CRLF          = CR LF
 * CR            = <US-ASCII CR, carriage return (13)>
 * LF            = <US-ASCII LF, linefeed (10)>
 * SP            = <US-ASCII SP, space (32)>
 * HT            = <US-ASCII HT, horizontal-tab (9)>
 * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>
 * OCTET         = <any 8-bit sequence of data>
 * @private
 */

var PARAM_REGEXP = /;[\x09\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*=[\x09\x20]*("(?:[\x20!\x23-\x5b\x5d-\x7e\x80-\xff]|\\[\x20-\x7e])*"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*/g; // eslint-disable-line no-control-regex
var TEXT_REGEXP = /^[\x20-\x7e\x80-\xff]+$/;
var TOKEN_REGEXP = /^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/;

/**
 * RegExp for various RFC 5987 grammar
 *
 * ext-value     = charset  "'" [ language ] "'" value-chars
 * charset       = "UTF-8" / "ISO-8859-1" / mime-charset
 * mime-charset  = 1*mime-charsetc
 * mime-charsetc = ALPHA / DIGIT
 *               / "!" / "#" / "$" / "%" / "&"
 *               / "+" / "-" / "^" / "_" / "`"
 *               / "{" / "}" / "~"
 * language      = ( 2*3ALPHA [ extlang ] )
 *               / 4ALPHA
 *               / 5*8ALPHA
 * extlang       = *3( "-" 3ALPHA )
 * value-chars   = *( pct-encoded / attr-char )
 * pct-encoded   = "%" HEXDIG HEXDIG
 * attr-char     = ALPHA / DIGIT
 *               / "!" / "#" / "$" / "&" / "+" / "-" / "."
 *               / "^" / "_" / "`" / "|" / "~"
 * @private
 */

var EXT_VALUE_REGEXP = /^([A-Za-z0-9!#$%&+\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/;

/**
 * RegExp for various RFC 6266 grammar
 *
 * disposition-type = "inline" | "attachment" | disp-ext-type
 * disp-ext-type    = token
 * disposition-parm = filename-parm | disp-ext-parm
 * filename-parm    = "filename" "=" value
 *                  | "filename*" "=" ext-value
 * disp-ext-parm    = token "=" value
 *                  | ext-token "=" ext-value
 * ext-token        = <the characters in token, followed by "*">
 * @private
 */

var DISPOSITION_TYPE_REGEXP = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*(?:$|;)/; // eslint-disable-line no-control-regex

/**
 * Create an attachment Content-Disposition header.
 *
 * @param {string} [filename]
 * @param {object} [options]
 * @param {string} [options.type=attachment]
 * @param {string|boolean} [options.fallback=true]
 * @return {string}
 * @public
 */

function contentDisposition$1 (filename, options) {
  var opts = options || {};

  // get type
  var type = opts.type || 'attachment';

  // get parameters
  var params = createparams(filename, opts.fallback);

  // format into string
  return format(new ContentDisposition(type, params))
}

/**
 * Create parameters object from filename and fallback.
 *
 * @param {string} [filename]
 * @param {string|boolean} [fallback=true]
 * @return {object}
 * @private
 */

function createparams (filename, fallback) {
  if (filename === undefined) {
    return
  }

  var params = {};

  if (typeof filename !== 'string') {
    throw new TypeError('filename must be a string')
  }

  // fallback defaults to true
  if (fallback === undefined) {
    fallback = true;
  }

  if (typeof fallback !== 'string' && typeof fallback !== 'boolean') {
    throw new TypeError('fallback must be a string or boolean')
  }

  if (typeof fallback === 'string' && NON_LATIN1_REGEXP.test(fallback)) {
    throw new TypeError('fallback must be ISO-8859-1 string')
  }

  // restrict to file base name
  var name = basename$1(filename);

  // determine if name is suitable for quoted string
  var isQuotedString = TEXT_REGEXP.test(name);

  // generate fallback name
  var fallbackName = typeof fallback !== 'string'
    ? fallback && getlatin1(name)
    : basename$1(fallback);
  var hasFallback = typeof fallbackName === 'string' && fallbackName !== name;

  // set extended filename parameter
  if (hasFallback || !isQuotedString || HEX_ESCAPE_REGEXP.test(name)) {
    params['filename*'] = name;
  }

  // set filename parameter
  if (isQuotedString || hasFallback) {
    params.filename = hasFallback
      ? fallbackName
      : name;
  }

  return params
}

/**
 * Format object to Content-Disposition header.
 *
 * @param {object} obj
 * @param {string} obj.type
 * @param {object} [obj.parameters]
 * @return {string}
 * @private
 */

function format (obj) {
  var parameters = obj.parameters;
  var type = obj.type;

  if (!type || typeof type !== 'string' || !TOKEN_REGEXP.test(type)) {
    throw new TypeError('invalid type')
  }

  // start with normalized type
  var string = String(type).toLowerCase();

  // append parameters
  if (parameters && typeof parameters === 'object') {
    var param;
    var params = Object.keys(parameters).sort();

    for (var i = 0; i < params.length; i++) {
      param = params[i];

      var val = param.substr(-1) === '*'
        ? ustring(parameters[param])
        : qstring(parameters[param]);

      string += '; ' + param + '=' + val;
    }
  }

  return string
}

/**
 * Decode a RFC 5987 field value (gracefully).
 *
 * @param {string} str
 * @return {string}
 * @private
 */

function decodefield (str) {
  var match = EXT_VALUE_REGEXP.exec(str);

  if (!match) {
    throw new TypeError('invalid extended field value')
  }

  var charset = match[1].toLowerCase();
  var encoded = match[2];
  var value;

  // to binary string
  var binary = encoded.replace(HEX_ESCAPE_REPLACE_REGEXP, pdecode);

  switch (charset) {
    case 'iso-8859-1':
      value = getlatin1(binary);
      break
    case 'utf-8':
      value = Buffer$2.from(binary, 'binary').toString('utf8');
      break
    default:
      throw new TypeError('unsupported charset in extended field')
  }

  return value
}

/**
 * Get ISO-8859-1 version of string.
 *
 * @param {string} val
 * @return {string}
 * @private
 */

function getlatin1 (val) {
  // simple Unicode -> ISO-8859-1 transformation
  return String(val).replace(NON_LATIN1_REGEXP, '?')
}

/**
 * Parse Content-Disposition header string.
 *
 * @param {string} string
 * @return {object}
 * @public
 */

function parse$5 (string) {
  if (!string || typeof string !== 'string') {
    throw new TypeError('argument string is required')
  }

  var match = DISPOSITION_TYPE_REGEXP.exec(string);

  if (!match) {
    throw new TypeError('invalid type format')
  }

  // normalize type
  var index = match[0].length;
  var type = match[1].toLowerCase();

  var key;
  var names = [];
  var params = {};
  var value;

  // calculate index to start at
  index = PARAM_REGEXP.lastIndex = match[0].substr(-1) === ';'
    ? index - 1
    : index;

  // match parameters
  while ((match = PARAM_REGEXP.exec(string))) {
    if (match.index !== index) {
      throw new TypeError('invalid parameter format')
    }

    index += match[0].length;
    key = match[1].toLowerCase();
    value = match[2];

    if (names.indexOf(key) !== -1) {
      throw new TypeError('invalid duplicate parameter')
    }

    names.push(key);

    if (key.indexOf('*') + 1 === key.length) {
      // decode extended value
      key = key.slice(0, -1);
      value = decodefield(value);

      // overwrite existing value
      params[key] = value;
      continue
    }

    if (typeof params[key] === 'string') {
      continue
    }

    if (value[0] === '"') {
      // remove quotes and escapes
      value = value
        .substr(1, value.length - 2)
        .replace(QESC_REGEXP, '$1');
    }

    params[key] = value;
  }

  if (index !== -1 && index !== string.length) {
    throw new TypeError('invalid parameter format')
  }

  return new ContentDisposition(type, params)
}

/**
 * Percent decode a single character.
 *
 * @param {string} str
 * @param {string} hex
 * @return {string}
 * @private
 */

function pdecode (str, hex) {
  return String.fromCharCode(parseInt(hex, 16))
}

/**
 * Percent encode a single character.
 *
 * @param {string} char
 * @return {string}
 * @private
 */

function pencode (char) {
  return '%' + String(char)
    .charCodeAt(0)
    .toString(16)
    .toUpperCase()
}

/**
 * Quote a string for HTTP.
 *
 * @param {string} val
 * @return {string}
 * @private
 */

function qstring (val) {
  var str = String(val);

  return '"' + str.replace(QUOTE_REGEXP, '\\$1') + '"'
}

/**
 * Encode a Unicode string for HTTP (RFC 5987).
 *
 * @param {string} val
 * @return {string}
 * @private
 */

function ustring (val) {
  var str = String(val);

  // percent encode as UTF-8
  var encoded = encodeURIComponent(str)
    .replace(ENCODE_URL_ATTR_CHAR_REGEXP, pencode);

  return 'UTF-8\'\'' + encoded
}

/**
 * Class for parsed Content-Disposition header for v8 optimization
 *
 * @public
 * @param {string} type
 * @param {object} parameters
 * @constructor
 */

function ContentDisposition (type, parameters) {
  this.type = type;
  this.parameters = parameters;
}

var _packageExports$4 = _package$e.exports;

var _package$d = {exports: {}};

/*!
 * etag
 * Copyright(c) 2014-2016 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var _package$c = etag$1;

/**
 * Module dependencies.
 * @private
 */

var crypto$2 = require$$0$8;
var Stats = require$$1$2.Stats;

/**
 * Module variables.
 * @private
 */

var toString = Object.prototype.toString;

/**
 * Generate an entity tag.
 *
 * @param {Buffer|string} entity
 * @return {string}
 * @private
 */

function entitytag (entity) {
  if (entity.length === 0) {
    // fast-path empty
    return '"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk"'
  }

  // compute hash of entity
  var hash = crypto$2
    .createHash('sha1')
    .update(entity, 'utf8')
    .digest('base64')
    .substring(0, 27);

  // compute length of entity
  var len = typeof entity === 'string'
    ? Buffer.byteLength(entity, 'utf8')
    : entity.length;

  return '"' + len.toString(16) + '-' + hash + '"'
}

/**
 * Create a simple ETag.
 *
 * @param {string|Buffer|Stats} entity
 * @param {object} [options]
 * @param {boolean} [options.weak]
 * @return {String}
 * @public
 */

function etag$1 (entity, options) {
  if (entity == null) {
    throw new TypeError('argument entity is required')
  }

  // support fs.Stats object
  var isStats = isstats(entity);
  var weak = options && typeof options.weak === 'boolean'
    ? options.weak
    : isStats;

  // validate argument
  if (!isStats && typeof entity !== 'string' && !Buffer.isBuffer(entity)) {
    throw new TypeError('argument entity must be string, Buffer, or fs.Stats')
  }

  // generate entity tag
  var tag = isStats
    ? stattag(entity)
    : entitytag(entity);

  return weak
    ? 'W/' + tag
    : tag
}

/**
 * Determine if object is a Stats object.
 *
 * @param {object} obj
 * @return {boolean}
 * @api private
 */

function isstats (obj) {
  // genuine fs.Stats
  if (typeof Stats === 'function' && obj instanceof Stats) {
    return true
  }

  // quack quack
  return obj && typeof obj === 'object' &&
    'ctime' in obj && toString.call(obj.ctime) === '[object Date]' &&
    'mtime' in obj && toString.call(obj.mtime) === '[object Date]' &&
    'ino' in obj && typeof obj.ino === 'number' &&
    'size' in obj && typeof obj.size === 'number'
}

/**
 * Generate a tag for a stat.
 *
 * @param {object} stat
 * @return {string}
 * @private
 */

function stattag (stat) {
  var mtime = stat.mtime.getTime().toString(16);
  var size = stat.size.toString(16);

  return '"' + size + '-' + mtime + '"'
}

/*!
 * fresh
 * Copyright(c) 2012 TJ Holowaychuk
 * Copyright(c) 2016-2017 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * RegExp to check for no-cache token in Cache-Control.
 * @private
 */

var CACHE_CONTROL_NO_CACHE_REGEXP = /(?:^|,)\s*?no-cache\s*?(?:,|$)/;

/**
 * Module exports.
 * @public
 */

var _package$b = fresh$2;

/**
 * Check freshness of the response using request and response headers.
 *
 * @param {Object} reqHeaders
 * @param {Object} resHeaders
 * @return {Boolean}
 * @public
 */

function fresh$2 (reqHeaders, resHeaders) {
  // fields
  var modifiedSince = reqHeaders['if-modified-since'];
  var noneMatch = reqHeaders['if-none-match'];

  // unconditional request
  if (!modifiedSince && !noneMatch) {
    return false
  }

  // Always return stale when Cache-Control: no-cache
  // to support end-to-end reload requests
  // https://tools.ietf.org/html/rfc2616#section-14.9.4
  var cacheControl = reqHeaders['cache-control'];
  if (cacheControl && CACHE_CONTROL_NO_CACHE_REGEXP.test(cacheControl)) {
    return false
  }

  // if-none-match
  if (noneMatch && noneMatch !== '*') {
    var etag = resHeaders['etag'];

    if (!etag) {
      return false
    }

    var etagStale = true;
    var matches = parseTokenList$1(noneMatch);
    for (var i = 0; i < matches.length; i++) {
      var match = matches[i];
      if (match === etag || match === 'W/' + etag || 'W/' + match === etag) {
        etagStale = false;
        break
      }
    }

    if (etagStale) {
      return false
    }
  }

  // if-modified-since
  if (modifiedSince) {
    var lastModified = resHeaders['last-modified'];
    var modifiedStale = !lastModified || !(parseHttpDate$1(lastModified) <= parseHttpDate$1(modifiedSince));

    if (modifiedStale) {
      return false
    }
  }

  return true
}

/**
 * Parse an HTTP Date into a number.
 *
 * @param {string} date
 * @private
 */

function parseHttpDate$1 (date) {
  var timestamp = date && Date.parse(date);

  // istanbul ignore next: guard against date.js Date.parse patching
  return typeof timestamp === 'number'
    ? timestamp
    : NaN
}

/**
 * Parse a HTTP token list.
 *
 * @param {string} str
 * @private
 */

function parseTokenList$1 (str) {
  var end = 0;
  var list = [];
  var start = 0;

  // gather tokens
  for (var i = 0, len = str.length; i < len; i++) {
    switch (str.charCodeAt(i)) {
      case 0x20: /*   */
        if (start === end) {
          start = end = i + 1;
        }
        break
      case 0x2c: /* , */
        list.push(str.substring(start, end));
        start = end = i + 1;
        break
      default:
        end = i + 1;
        break
    }
  }

  // final token
  list.push(str.substring(start, end));

  return list
}

var require$$2 = {
	"application/andrew-inset": [
	"ez"
],
	"application/applixware": [
	"aw"
],
	"application/atom+xml": [
	"atom"
],
	"application/atomcat+xml": [
	"atomcat"
],
	"application/atomsvc+xml": [
	"atomsvc"
],
	"application/bdoc": [
	"bdoc"
],
	"application/ccxml+xml": [
	"ccxml"
],
	"application/cdmi-capability": [
	"cdmia"
],
	"application/cdmi-container": [
	"cdmic"
],
	"application/cdmi-domain": [
	"cdmid"
],
	"application/cdmi-object": [
	"cdmio"
],
	"application/cdmi-queue": [
	"cdmiq"
],
	"application/cu-seeme": [
	"cu"
],
	"application/dash+xml": [
	"mpd"
],
	"application/davmount+xml": [
	"davmount"
],
	"application/docbook+xml": [
	"dbk"
],
	"application/dssc+der": [
	"dssc"
],
	"application/dssc+xml": [
	"xdssc"
],
	"application/ecmascript": [
	"ecma"
],
	"application/emma+xml": [
	"emma"
],
	"application/epub+zip": [
	"epub"
],
	"application/exi": [
	"exi"
],
	"application/font-tdpfr": [
	"pfr"
],
	"application/font-woff": [
],
	"application/font-woff2": [
],
	"application/geo+json": [
	"geojson"
],
	"application/gml+xml": [
	"gml"
],
	"application/gpx+xml": [
	"gpx"
],
	"application/gxf": [
	"gxf"
],
	"application/gzip": [
	"gz"
],
	"application/hyperstudio": [
	"stk"
],
	"application/inkml+xml": [
	"ink",
	"inkml"
],
	"application/ipfix": [
	"ipfix"
],
	"application/java-archive": [
	"jar",
	"war",
	"ear"
],
	"application/java-serialized-object": [
	"ser"
],
	"application/java-vm": [
	"class"
],
	"application/javascript": [
	"js",
	"mjs"
],
	"application/json": [
	"json",
	"map"
],
	"application/json5": [
	"json5"
],
	"application/jsonml+json": [
	"jsonml"
],
	"application/ld+json": [
	"jsonld"
],
	"application/lost+xml": [
	"lostxml"
],
	"application/mac-binhex40": [
	"hqx"
],
	"application/mac-compactpro": [
	"cpt"
],
	"application/mads+xml": [
	"mads"
],
	"application/manifest+json": [
	"webmanifest"
],
	"application/marc": [
	"mrc"
],
	"application/marcxml+xml": [
	"mrcx"
],
	"application/mathematica": [
	"ma",
	"nb",
	"mb"
],
	"application/mathml+xml": [
	"mathml"
],
	"application/mbox": [
	"mbox"
],
	"application/mediaservercontrol+xml": [
	"mscml"
],
	"application/metalink+xml": [
	"metalink"
],
	"application/metalink4+xml": [
	"meta4"
],
	"application/mets+xml": [
	"mets"
],
	"application/mods+xml": [
	"mods"
],
	"application/mp21": [
	"m21",
	"mp21"
],
	"application/mp4": [
	"mp4s",
	"m4p"
],
	"application/msword": [
	"doc",
	"dot"
],
	"application/mxf": [
	"mxf"
],
	"application/octet-stream": [
	"bin",
	"dms",
	"lrf",
	"mar",
	"so",
	"dist",
	"distz",
	"pkg",
	"bpk",
	"dump",
	"elc",
	"deploy",
	"exe",
	"dll",
	"deb",
	"dmg",
	"iso",
	"img",
	"msi",
	"msp",
	"msm",
	"buffer"
],
	"application/oda": [
	"oda"
],
	"application/oebps-package+xml": [
	"opf"
],
	"application/ogg": [
	"ogx"
],
	"application/omdoc+xml": [
	"omdoc"
],
	"application/onenote": [
	"onetoc",
	"onetoc2",
	"onetmp",
	"onepkg"
],
	"application/oxps": [
	"oxps"
],
	"application/patch-ops-error+xml": [
	"xer"
],
	"application/pdf": [
	"pdf"
],
	"application/pgp-encrypted": [
	"pgp"
],
	"application/pgp-signature": [
	"asc",
	"sig"
],
	"application/pics-rules": [
	"prf"
],
	"application/pkcs10": [
	"p10"
],
	"application/pkcs7-mime": [
	"p7m",
	"p7c"
],
	"application/pkcs7-signature": [
	"p7s"
],
	"application/pkcs8": [
	"p8"
],
	"application/pkix-attr-cert": [
	"ac"
],
	"application/pkix-cert": [
	"cer"
],
	"application/pkix-crl": [
	"crl"
],
	"application/pkix-pkipath": [
	"pkipath"
],
	"application/pkixcmp": [
	"pki"
],
	"application/pls+xml": [
	"pls"
],
	"application/postscript": [
	"ai",
	"eps",
	"ps"
],
	"application/prs.cww": [
	"cww"
],
	"application/pskc+xml": [
	"pskcxml"
],
	"application/raml+yaml": [
	"raml"
],
	"application/rdf+xml": [
	"rdf"
],
	"application/reginfo+xml": [
	"rif"
],
	"application/relax-ng-compact-syntax": [
	"rnc"
],
	"application/resource-lists+xml": [
	"rl"
],
	"application/resource-lists-diff+xml": [
	"rld"
],
	"application/rls-services+xml": [
	"rs"
],
	"application/rpki-ghostbusters": [
	"gbr"
],
	"application/rpki-manifest": [
	"mft"
],
	"application/rpki-roa": [
	"roa"
],
	"application/rsd+xml": [
	"rsd"
],
	"application/rss+xml": [
	"rss"
],
	"application/rtf": [
	"rtf"
],
	"application/sbml+xml": [
	"sbml"
],
	"application/scvp-cv-request": [
	"scq"
],
	"application/scvp-cv-response": [
	"scs"
],
	"application/scvp-vp-request": [
	"spq"
],
	"application/scvp-vp-response": [
	"spp"
],
	"application/sdp": [
	"sdp"
],
	"application/set-payment-initiation": [
	"setpay"
],
	"application/set-registration-initiation": [
	"setreg"
],
	"application/shf+xml": [
	"shf"
],
	"application/smil+xml": [
	"smi",
	"smil"
],
	"application/sparql-query": [
	"rq"
],
	"application/sparql-results+xml": [
	"srx"
],
	"application/srgs": [
	"gram"
],
	"application/srgs+xml": [
	"grxml"
],
	"application/sru+xml": [
	"sru"
],
	"application/ssdl+xml": [
	"ssdl"
],
	"application/ssml+xml": [
	"ssml"
],
	"application/tei+xml": [
	"tei",
	"teicorpus"
],
	"application/thraud+xml": [
	"tfi"
],
	"application/timestamped-data": [
	"tsd"
],
	"application/vnd.3gpp.pic-bw-large": [
	"plb"
],
	"application/vnd.3gpp.pic-bw-small": [
	"psb"
],
	"application/vnd.3gpp.pic-bw-var": [
	"pvb"
],
	"application/vnd.3gpp2.tcap": [
	"tcap"
],
	"application/vnd.3m.post-it-notes": [
	"pwn"
],
	"application/vnd.accpac.simply.aso": [
	"aso"
],
	"application/vnd.accpac.simply.imp": [
	"imp"
],
	"application/vnd.acucobol": [
	"acu"
],
	"application/vnd.acucorp": [
	"atc",
	"acutc"
],
	"application/vnd.adobe.air-application-installer-package+zip": [
	"air"
],
	"application/vnd.adobe.formscentral.fcdt": [
	"fcdt"
],
	"application/vnd.adobe.fxp": [
	"fxp",
	"fxpl"
],
	"application/vnd.adobe.xdp+xml": [
	"xdp"
],
	"application/vnd.adobe.xfdf": [
	"xfdf"
],
	"application/vnd.ahead.space": [
	"ahead"
],
	"application/vnd.airzip.filesecure.azf": [
	"azf"
],
	"application/vnd.airzip.filesecure.azs": [
	"azs"
],
	"application/vnd.amazon.ebook": [
	"azw"
],
	"application/vnd.americandynamics.acc": [
	"acc"
],
	"application/vnd.amiga.ami": [
	"ami"
],
	"application/vnd.android.package-archive": [
	"apk"
],
	"application/vnd.anser-web-certificate-issue-initiation": [
	"cii"
],
	"application/vnd.anser-web-funds-transfer-initiation": [
	"fti"
],
	"application/vnd.antix.game-component": [
	"atx"
],
	"application/vnd.apple.installer+xml": [
	"mpkg"
],
	"application/vnd.apple.mpegurl": [
	"m3u8"
],
	"application/vnd.apple.pkpass": [
	"pkpass"
],
	"application/vnd.aristanetworks.swi": [
	"swi"
],
	"application/vnd.astraea-software.iota": [
	"iota"
],
	"application/vnd.audiograph": [
	"aep"
],
	"application/vnd.blueice.multipass": [
	"mpm"
],
	"application/vnd.bmi": [
	"bmi"
],
	"application/vnd.businessobjects": [
	"rep"
],
	"application/vnd.chemdraw+xml": [
	"cdxml"
],
	"application/vnd.chipnuts.karaoke-mmd": [
	"mmd"
],
	"application/vnd.cinderella": [
	"cdy"
],
	"application/vnd.claymore": [
	"cla"
],
	"application/vnd.cloanto.rp9": [
	"rp9"
],
	"application/vnd.clonk.c4group": [
	"c4g",
	"c4d",
	"c4f",
	"c4p",
	"c4u"
],
	"application/vnd.cluetrust.cartomobile-config": [
	"c11amc"
],
	"application/vnd.cluetrust.cartomobile-config-pkg": [
	"c11amz"
],
	"application/vnd.commonspace": [
	"csp"
],
	"application/vnd.contact.cmsg": [
	"cdbcmsg"
],
	"application/vnd.cosmocaller": [
	"cmc"
],
	"application/vnd.crick.clicker": [
	"clkx"
],
	"application/vnd.crick.clicker.keyboard": [
	"clkk"
],
	"application/vnd.crick.clicker.palette": [
	"clkp"
],
	"application/vnd.crick.clicker.template": [
	"clkt"
],
	"application/vnd.crick.clicker.wordbank": [
	"clkw"
],
	"application/vnd.criticaltools.wbs+xml": [
	"wbs"
],
	"application/vnd.ctc-posml": [
	"pml"
],
	"application/vnd.cups-ppd": [
	"ppd"
],
	"application/vnd.curl.car": [
	"car"
],
	"application/vnd.curl.pcurl": [
	"pcurl"
],
	"application/vnd.dart": [
	"dart"
],
	"application/vnd.data-vision.rdz": [
	"rdz"
],
	"application/vnd.dece.data": [
	"uvf",
	"uvvf",
	"uvd",
	"uvvd"
],
	"application/vnd.dece.ttml+xml": [
	"uvt",
	"uvvt"
],
	"application/vnd.dece.unspecified": [
	"uvx",
	"uvvx"
],
	"application/vnd.dece.zip": [
	"uvz",
	"uvvz"
],
	"application/vnd.denovo.fcselayout-link": [
	"fe_launch"
],
	"application/vnd.dna": [
	"dna"
],
	"application/vnd.dolby.mlp": [
	"mlp"
],
	"application/vnd.dpgraph": [
	"dpg"
],
	"application/vnd.dreamfactory": [
	"dfac"
],
	"application/vnd.ds-keypoint": [
	"kpxx"
],
	"application/vnd.dvb.ait": [
	"ait"
],
	"application/vnd.dvb.service": [
	"svc"
],
	"application/vnd.dynageo": [
	"geo"
],
	"application/vnd.ecowin.chart": [
	"mag"
],
	"application/vnd.enliven": [
	"nml"
],
	"application/vnd.epson.esf": [
	"esf"
],
	"application/vnd.epson.msf": [
	"msf"
],
	"application/vnd.epson.quickanime": [
	"qam"
],
	"application/vnd.epson.salt": [
	"slt"
],
	"application/vnd.epson.ssf": [
	"ssf"
],
	"application/vnd.eszigno3+xml": [
	"es3",
	"et3"
],
	"application/vnd.ezpix-album": [
	"ez2"
],
	"application/vnd.ezpix-package": [
	"ez3"
],
	"application/vnd.fdf": [
	"fdf"
],
	"application/vnd.fdsn.mseed": [
	"mseed"
],
	"application/vnd.fdsn.seed": [
	"seed",
	"dataless"
],
	"application/vnd.flographit": [
	"gph"
],
	"application/vnd.fluxtime.clip": [
	"ftc"
],
	"application/vnd.framemaker": [
	"fm",
	"frame",
	"maker",
	"book"
],
	"application/vnd.frogans.fnc": [
	"fnc"
],
	"application/vnd.frogans.ltf": [
	"ltf"
],
	"application/vnd.fsc.weblaunch": [
	"fsc"
],
	"application/vnd.fujitsu.oasys": [
	"oas"
],
	"application/vnd.fujitsu.oasys2": [
	"oa2"
],
	"application/vnd.fujitsu.oasys3": [
	"oa3"
],
	"application/vnd.fujitsu.oasysgp": [
	"fg5"
],
	"application/vnd.fujitsu.oasysprs": [
	"bh2"
],
	"application/vnd.fujixerox.ddd": [
	"ddd"
],
	"application/vnd.fujixerox.docuworks": [
	"xdw"
],
	"application/vnd.fujixerox.docuworks.binder": [
	"xbd"
],
	"application/vnd.fuzzysheet": [
	"fzs"
],
	"application/vnd.genomatix.tuxedo": [
	"txd"
],
	"application/vnd.geogebra.file": [
	"ggb"
],
	"application/vnd.geogebra.tool": [
	"ggt"
],
	"application/vnd.geometry-explorer": [
	"gex",
	"gre"
],
	"application/vnd.geonext": [
	"gxt"
],
	"application/vnd.geoplan": [
	"g2w"
],
	"application/vnd.geospace": [
	"g3w"
],
	"application/vnd.gmx": [
	"gmx"
],
	"application/vnd.google-apps.document": [
	"gdoc"
],
	"application/vnd.google-apps.presentation": [
	"gslides"
],
	"application/vnd.google-apps.spreadsheet": [
	"gsheet"
],
	"application/vnd.google-earth.kml+xml": [
	"kml"
],
	"application/vnd.google-earth.kmz": [
	"kmz"
],
	"application/vnd.grafeq": [
	"gqf",
	"gqs"
],
	"application/vnd.groove-account": [
	"gac"
],
	"application/vnd.groove-help": [
	"ghf"
],
	"application/vnd.groove-identity-message": [
	"gim"
],
	"application/vnd.groove-injector": [
	"grv"
],
	"application/vnd.groove-tool-message": [
	"gtm"
],
	"application/vnd.groove-tool-template": [
	"tpl"
],
	"application/vnd.groove-vcard": [
	"vcg"
],
	"application/vnd.hal+xml": [
	"hal"
],
	"application/vnd.handheld-entertainment+xml": [
	"zmm"
],
	"application/vnd.hbci": [
	"hbci"
],
	"application/vnd.hhe.lesson-player": [
	"les"
],
	"application/vnd.hp-hpgl": [
	"hpgl"
],
	"application/vnd.hp-hpid": [
	"hpid"
],
	"application/vnd.hp-hps": [
	"hps"
],
	"application/vnd.hp-jlyt": [
	"jlt"
],
	"application/vnd.hp-pcl": [
	"pcl"
],
	"application/vnd.hp-pclxl": [
	"pclxl"
],
	"application/vnd.hydrostatix.sof-data": [
	"sfd-hdstx"
],
	"application/vnd.ibm.minipay": [
	"mpy"
],
	"application/vnd.ibm.modcap": [
	"afp",
	"listafp",
	"list3820"
],
	"application/vnd.ibm.rights-management": [
	"irm"
],
	"application/vnd.ibm.secure-container": [
	"sc"
],
	"application/vnd.iccprofile": [
	"icc",
	"icm"
],
	"application/vnd.igloader": [
	"igl"
],
	"application/vnd.immervision-ivp": [
	"ivp"
],
	"application/vnd.immervision-ivu": [
	"ivu"
],
	"application/vnd.insors.igm": [
	"igm"
],
	"application/vnd.intercon.formnet": [
	"xpw",
	"xpx"
],
	"application/vnd.intergeo": [
	"i2g"
],
	"application/vnd.intu.qbo": [
	"qbo"
],
	"application/vnd.intu.qfx": [
	"qfx"
],
	"application/vnd.ipunplugged.rcprofile": [
	"rcprofile"
],
	"application/vnd.irepository.package+xml": [
	"irp"
],
	"application/vnd.is-xpr": [
	"xpr"
],
	"application/vnd.isac.fcs": [
	"fcs"
],
	"application/vnd.jam": [
	"jam"
],
	"application/vnd.jcp.javame.midlet-rms": [
	"rms"
],
	"application/vnd.jisp": [
	"jisp"
],
	"application/vnd.joost.joda-archive": [
	"joda"
],
	"application/vnd.kahootz": [
	"ktz",
	"ktr"
],
	"application/vnd.kde.karbon": [
	"karbon"
],
	"application/vnd.kde.kchart": [
	"chrt"
],
	"application/vnd.kde.kformula": [
	"kfo"
],
	"application/vnd.kde.kivio": [
	"flw"
],
	"application/vnd.kde.kontour": [
	"kon"
],
	"application/vnd.kde.kpresenter": [
	"kpr",
	"kpt"
],
	"application/vnd.kde.kspread": [
	"ksp"
],
	"application/vnd.kde.kword": [
	"kwd",
	"kwt"
],
	"application/vnd.kenameaapp": [
	"htke"
],
	"application/vnd.kidspiration": [
	"kia"
],
	"application/vnd.kinar": [
	"kne",
	"knp"
],
	"application/vnd.koan": [
	"skp",
	"skd",
	"skt",
	"skm"
],
	"application/vnd.kodak-descriptor": [
	"sse"
],
	"application/vnd.las.las+xml": [
	"lasxml"
],
	"application/vnd.llamagraphics.life-balance.desktop": [
	"lbd"
],
	"application/vnd.llamagraphics.life-balance.exchange+xml": [
	"lbe"
],
	"application/vnd.lotus-1-2-3": [
	"123"
],
	"application/vnd.lotus-approach": [
	"apr"
],
	"application/vnd.lotus-freelance": [
	"pre"
],
	"application/vnd.lotus-notes": [
	"nsf"
],
	"application/vnd.lotus-organizer": [
	"org"
],
	"application/vnd.lotus-screencam": [
	"scm"
],
	"application/vnd.lotus-wordpro": [
	"lwp"
],
	"application/vnd.macports.portpkg": [
	"portpkg"
],
	"application/vnd.mcd": [
	"mcd"
],
	"application/vnd.medcalcdata": [
	"mc1"
],
	"application/vnd.mediastation.cdkey": [
	"cdkey"
],
	"application/vnd.mfer": [
	"mwf"
],
	"application/vnd.mfmp": [
	"mfm"
],
	"application/vnd.micrografx.flo": [
	"flo"
],
	"application/vnd.micrografx.igx": [
	"igx"
],
	"application/vnd.mif": [
	"mif"
],
	"application/vnd.mobius.daf": [
	"daf"
],
	"application/vnd.mobius.dis": [
	"dis"
],
	"application/vnd.mobius.mbk": [
	"mbk"
],
	"application/vnd.mobius.mqy": [
	"mqy"
],
	"application/vnd.mobius.msl": [
	"msl"
],
	"application/vnd.mobius.plc": [
	"plc"
],
	"application/vnd.mobius.txf": [
	"txf"
],
	"application/vnd.mophun.application": [
	"mpn"
],
	"application/vnd.mophun.certificate": [
	"mpc"
],
	"application/vnd.mozilla.xul+xml": [
	"xul"
],
	"application/vnd.ms-artgalry": [
	"cil"
],
	"application/vnd.ms-cab-compressed": [
	"cab"
],
	"application/vnd.ms-excel": [
	"xls",
	"xlm",
	"xla",
	"xlc",
	"xlt",
	"xlw"
],
	"application/vnd.ms-excel.addin.macroenabled.12": [
	"xlam"
],
	"application/vnd.ms-excel.sheet.binary.macroenabled.12": [
	"xlsb"
],
	"application/vnd.ms-excel.sheet.macroenabled.12": [
	"xlsm"
],
	"application/vnd.ms-excel.template.macroenabled.12": [
	"xltm"
],
	"application/vnd.ms-fontobject": [
	"eot"
],
	"application/vnd.ms-htmlhelp": [
	"chm"
],
	"application/vnd.ms-ims": [
	"ims"
],
	"application/vnd.ms-lrm": [
	"lrm"
],
	"application/vnd.ms-officetheme": [
	"thmx"
],
	"application/vnd.ms-outlook": [
	"msg"
],
	"application/vnd.ms-pki.seccat": [
	"cat"
],
	"application/vnd.ms-pki.stl": [
	"stl"
],
	"application/vnd.ms-powerpoint": [
	"ppt",
	"pps",
	"pot"
],
	"application/vnd.ms-powerpoint.addin.macroenabled.12": [
	"ppam"
],
	"application/vnd.ms-powerpoint.presentation.macroenabled.12": [
	"pptm"
],
	"application/vnd.ms-powerpoint.slide.macroenabled.12": [
	"sldm"
],
	"application/vnd.ms-powerpoint.slideshow.macroenabled.12": [
	"ppsm"
],
	"application/vnd.ms-powerpoint.template.macroenabled.12": [
	"potm"
],
	"application/vnd.ms-project": [
	"mpp",
	"mpt"
],
	"application/vnd.ms-word.document.macroenabled.12": [
	"docm"
],
	"application/vnd.ms-word.template.macroenabled.12": [
	"dotm"
],
	"application/vnd.ms-works": [
	"wps",
	"wks",
	"wcm",
	"wdb"
],
	"application/vnd.ms-wpl": [
	"wpl"
],
	"application/vnd.ms-xpsdocument": [
	"xps"
],
	"application/vnd.mseq": [
	"mseq"
],
	"application/vnd.musician": [
	"mus"
],
	"application/vnd.muvee.style": [
	"msty"
],
	"application/vnd.mynfc": [
	"taglet"
],
	"application/vnd.neurolanguage.nlu": [
	"nlu"
],
	"application/vnd.nitf": [
	"ntf",
	"nitf"
],
	"application/vnd.noblenet-directory": [
	"nnd"
],
	"application/vnd.noblenet-sealer": [
	"nns"
],
	"application/vnd.noblenet-web": [
	"nnw"
],
	"application/vnd.nokia.n-gage.data": [
	"ngdat"
],
	"application/vnd.nokia.n-gage.symbian.install": [
	"n-gage"
],
	"application/vnd.nokia.radio-preset": [
	"rpst"
],
	"application/vnd.nokia.radio-presets": [
	"rpss"
],
	"application/vnd.novadigm.edm": [
	"edm"
],
	"application/vnd.novadigm.edx": [
	"edx"
],
	"application/vnd.novadigm.ext": [
	"ext"
],
	"application/vnd.oasis.opendocument.chart": [
	"odc"
],
	"application/vnd.oasis.opendocument.chart-template": [
	"otc"
],
	"application/vnd.oasis.opendocument.database": [
	"odb"
],
	"application/vnd.oasis.opendocument.formula": [
	"odf"
],
	"application/vnd.oasis.opendocument.formula-template": [
	"odft"
],
	"application/vnd.oasis.opendocument.graphics": [
	"odg"
],
	"application/vnd.oasis.opendocument.graphics-template": [
	"otg"
],
	"application/vnd.oasis.opendocument.image": [
	"odi"
],
	"application/vnd.oasis.opendocument.image-template": [
	"oti"
],
	"application/vnd.oasis.opendocument.presentation": [
	"odp"
],
	"application/vnd.oasis.opendocument.presentation-template": [
	"otp"
],
	"application/vnd.oasis.opendocument.spreadsheet": [
	"ods"
],
	"application/vnd.oasis.opendocument.spreadsheet-template": [
	"ots"
],
	"application/vnd.oasis.opendocument.text": [
	"odt"
],
	"application/vnd.oasis.opendocument.text-master": [
	"odm"
],
	"application/vnd.oasis.opendocument.text-template": [
	"ott"
],
	"application/vnd.oasis.opendocument.text-web": [
	"oth"
],
	"application/vnd.olpc-sugar": [
	"xo"
],
	"application/vnd.oma.dd2+xml": [
	"dd2"
],
	"application/vnd.openofficeorg.extension": [
	"oxt"
],
	"application/vnd.openxmlformats-officedocument.presentationml.presentation": [
	"pptx"
],
	"application/vnd.openxmlformats-officedocument.presentationml.slide": [
	"sldx"
],
	"application/vnd.openxmlformats-officedocument.presentationml.slideshow": [
	"ppsx"
],
	"application/vnd.openxmlformats-officedocument.presentationml.template": [
	"potx"
],
	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": [
	"xlsx"
],
	"application/vnd.openxmlformats-officedocument.spreadsheetml.template": [
	"xltx"
],
	"application/vnd.openxmlformats-officedocument.wordprocessingml.document": [
	"docx"
],
	"application/vnd.openxmlformats-officedocument.wordprocessingml.template": [
	"dotx"
],
	"application/vnd.osgeo.mapguide.package": [
	"mgp"
],
	"application/vnd.osgi.dp": [
	"dp"
],
	"application/vnd.osgi.subsystem": [
	"esa"
],
	"application/vnd.palm": [
	"pdb",
	"pqa",
	"oprc"
],
	"application/vnd.pawaafile": [
	"paw"
],
	"application/vnd.pg.format": [
	"str"
],
	"application/vnd.pg.osasli": [
	"ei6"
],
	"application/vnd.picsel": [
	"efif"
],
	"application/vnd.pmi.widget": [
	"wg"
],
	"application/vnd.pocketlearn": [
	"plf"
],
	"application/vnd.powerbuilder6": [
	"pbd"
],
	"application/vnd.previewsystems.box": [
	"box"
],
	"application/vnd.proteus.magazine": [
	"mgz"
],
	"application/vnd.publishare-delta-tree": [
	"qps"
],
	"application/vnd.pvi.ptid1": [
	"ptid"
],
	"application/vnd.quark.quarkxpress": [
	"qxd",
	"qxt",
	"qwd",
	"qwt",
	"qxl",
	"qxb"
],
	"application/vnd.realvnc.bed": [
	"bed"
],
	"application/vnd.recordare.musicxml": [
	"mxl"
],
	"application/vnd.recordare.musicxml+xml": [
	"musicxml"
],
	"application/vnd.rig.cryptonote": [
	"cryptonote"
],
	"application/vnd.rim.cod": [
	"cod"
],
	"application/vnd.rn-realmedia": [
	"rm"
],
	"application/vnd.rn-realmedia-vbr": [
	"rmvb"
],
	"application/vnd.route66.link66+xml": [
	"link66"
],
	"application/vnd.sailingtracker.track": [
	"st"
],
	"application/vnd.seemail": [
	"see"
],
	"application/vnd.sema": [
	"sema"
],
	"application/vnd.semd": [
	"semd"
],
	"application/vnd.semf": [
	"semf"
],
	"application/vnd.shana.informed.formdata": [
	"ifm"
],
	"application/vnd.shana.informed.formtemplate": [
	"itp"
],
	"application/vnd.shana.informed.interchange": [
	"iif"
],
	"application/vnd.shana.informed.package": [
	"ipk"
],
	"application/vnd.simtech-mindmapper": [
	"twd",
	"twds"
],
	"application/vnd.smaf": [
	"mmf"
],
	"application/vnd.smart.teacher": [
	"teacher"
],
	"application/vnd.solent.sdkm+xml": [
	"sdkm",
	"sdkd"
],
	"application/vnd.spotfire.dxp": [
	"dxp"
],
	"application/vnd.spotfire.sfs": [
	"sfs"
],
	"application/vnd.stardivision.calc": [
	"sdc"
],
	"application/vnd.stardivision.draw": [
	"sda"
],
	"application/vnd.stardivision.impress": [
	"sdd"
],
	"application/vnd.stardivision.math": [
	"smf"
],
	"application/vnd.stardivision.writer": [
	"sdw",
	"vor"
],
	"application/vnd.stardivision.writer-global": [
	"sgl"
],
	"application/vnd.stepmania.package": [
	"smzip"
],
	"application/vnd.stepmania.stepchart": [
	"sm"
],
	"application/vnd.sun.wadl+xml": [
	"wadl"
],
	"application/vnd.sun.xml.calc": [
	"sxc"
],
	"application/vnd.sun.xml.calc.template": [
	"stc"
],
	"application/vnd.sun.xml.draw": [
	"sxd"
],
	"application/vnd.sun.xml.draw.template": [
	"std"
],
	"application/vnd.sun.xml.impress": [
	"sxi"
],
	"application/vnd.sun.xml.impress.template": [
	"sti"
],
	"application/vnd.sun.xml.math": [
	"sxm"
],
	"application/vnd.sun.xml.writer": [
	"sxw"
],
	"application/vnd.sun.xml.writer.global": [
	"sxg"
],
	"application/vnd.sun.xml.writer.template": [
	"stw"
],
	"application/vnd.sus-calendar": [
	"sus",
	"susp"
],
	"application/vnd.svd": [
	"svd"
],
	"application/vnd.symbian.install": [
	"sis",
	"sisx"
],
	"application/vnd.syncml+xml": [
	"xsm"
],
	"application/vnd.syncml.dm+wbxml": [
	"bdm"
],
	"application/vnd.syncml.dm+xml": [
	"xdm"
],
	"application/vnd.tao.intent-module-archive": [
	"tao"
],
	"application/vnd.tcpdump.pcap": [
	"pcap",
	"cap",
	"dmp"
],
	"application/vnd.tmobile-livetv": [
	"tmo"
],
	"application/vnd.trid.tpt": [
	"tpt"
],
	"application/vnd.triscape.mxs": [
	"mxs"
],
	"application/vnd.trueapp": [
	"tra"
],
	"application/vnd.ufdl": [
	"ufd",
	"ufdl"
],
	"application/vnd.uiq.theme": [
	"utz"
],
	"application/vnd.umajin": [
	"umj"
],
	"application/vnd.unity": [
	"unityweb"
],
	"application/vnd.uoml+xml": [
	"uoml"
],
	"application/vnd.vcx": [
	"vcx"
],
	"application/vnd.visio": [
	"vsd",
	"vst",
	"vss",
	"vsw"
],
	"application/vnd.visionary": [
	"vis"
],
	"application/vnd.vsf": [
	"vsf"
],
	"application/vnd.wap.wbxml": [
	"wbxml"
],
	"application/vnd.wap.wmlc": [
	"wmlc"
],
	"application/vnd.wap.wmlscriptc": [
	"wmlsc"
],
	"application/vnd.webturbo": [
	"wtb"
],
	"application/vnd.wolfram.player": [
	"nbp"
],
	"application/vnd.wordperfect": [
	"wpd"
],
	"application/vnd.wqd": [
	"wqd"
],
	"application/vnd.wt.stf": [
	"stf"
],
	"application/vnd.xara": [
	"xar"
],
	"application/vnd.xfdl": [
	"xfdl"
],
	"application/vnd.yamaha.hv-dic": [
	"hvd"
],
	"application/vnd.yamaha.hv-script": [
	"hvs"
],
	"application/vnd.yamaha.hv-voice": [
	"hvp"
],
	"application/vnd.yamaha.openscoreformat": [
	"osf"
],
	"application/vnd.yamaha.openscoreformat.osfpvg+xml": [
	"osfpvg"
],
	"application/vnd.yamaha.smaf-audio": [
	"saf"
],
	"application/vnd.yamaha.smaf-phrase": [
	"spf"
],
	"application/vnd.yellowriver-custom-menu": [
	"cmp"
],
	"application/vnd.zul": [
	"zir",
	"zirz"
],
	"application/vnd.zzazz.deck+xml": [
	"zaz"
],
	"application/voicexml+xml": [
	"vxml"
],
	"application/wasm": [
	"wasm"
],
	"application/widget": [
	"wgt"
],
	"application/winhlp": [
	"hlp"
],
	"application/wsdl+xml": [
	"wsdl"
],
	"application/wspolicy+xml": [
	"wspolicy"
],
	"application/x-7z-compressed": [
	"7z"
],
	"application/x-abiword": [
	"abw"
],
	"application/x-ace-compressed": [
	"ace"
],
	"application/x-apple-diskimage": [
],
	"application/x-arj": [
	"arj"
],
	"application/x-authorware-bin": [
	"aab",
	"x32",
	"u32",
	"vox"
],
	"application/x-authorware-map": [
	"aam"
],
	"application/x-authorware-seg": [
	"aas"
],
	"application/x-bcpio": [
	"bcpio"
],
	"application/x-bdoc": [
],
	"application/x-bittorrent": [
	"torrent"
],
	"application/x-blorb": [
	"blb",
	"blorb"
],
	"application/x-bzip": [
	"bz"
],
	"application/x-bzip2": [
	"bz2",
	"boz"
],
	"application/x-cbr": [
	"cbr",
	"cba",
	"cbt",
	"cbz",
	"cb7"
],
	"application/x-cdlink": [
	"vcd"
],
	"application/x-cfs-compressed": [
	"cfs"
],
	"application/x-chat": [
	"chat"
],
	"application/x-chess-pgn": [
	"pgn"
],
	"application/x-chrome-extension": [
	"crx"
],
	"application/x-cocoa": [
	"cco"
],
	"application/x-conference": [
	"nsc"
],
	"application/x-cpio": [
	"cpio"
],
	"application/x-csh": [
	"csh"
],
	"application/x-debian-package": [
	"udeb"
],
	"application/x-dgc-compressed": [
	"dgc"
],
	"application/x-director": [
	"dir",
	"dcr",
	"dxr",
	"cst",
	"cct",
	"cxt",
	"w3d",
	"fgd",
	"swa"
],
	"application/x-doom": [
	"wad"
],
	"application/x-dtbncx+xml": [
	"ncx"
],
	"application/x-dtbook+xml": [
	"dtb"
],
	"application/x-dtbresource+xml": [
	"res"
],
	"application/x-dvi": [
	"dvi"
],
	"application/x-envoy": [
	"evy"
],
	"application/x-eva": [
	"eva"
],
	"application/x-font-bdf": [
	"bdf"
],
	"application/x-font-ghostscript": [
	"gsf"
],
	"application/x-font-linux-psf": [
	"psf"
],
	"application/x-font-pcf": [
	"pcf"
],
	"application/x-font-snf": [
	"snf"
],
	"application/x-font-type1": [
	"pfa",
	"pfb",
	"pfm",
	"afm"
],
	"application/x-freearc": [
	"arc"
],
	"application/x-futuresplash": [
	"spl"
],
	"application/x-gca-compressed": [
	"gca"
],
	"application/x-glulx": [
	"ulx"
],
	"application/x-gnumeric": [
	"gnumeric"
],
	"application/x-gramps-xml": [
	"gramps"
],
	"application/x-gtar": [
	"gtar"
],
	"application/x-hdf": [
	"hdf"
],
	"application/x-httpd-php": [
	"php"
],
	"application/x-install-instructions": [
	"install"
],
	"application/x-iso9660-image": [
],
	"application/x-java-archive-diff": [
	"jardiff"
],
	"application/x-java-jnlp-file": [
	"jnlp"
],
	"application/x-latex": [
	"latex"
],
	"application/x-lua-bytecode": [
	"luac"
],
	"application/x-lzh-compressed": [
	"lzh",
	"lha"
],
	"application/x-makeself": [
	"run"
],
	"application/x-mie": [
	"mie"
],
	"application/x-mobipocket-ebook": [
	"prc",
	"mobi"
],
	"application/x-ms-application": [
	"application"
],
	"application/x-ms-shortcut": [
	"lnk"
],
	"application/x-ms-wmd": [
	"wmd"
],
	"application/x-ms-wmz": [
	"wmz"
],
	"application/x-ms-xbap": [
	"xbap"
],
	"application/x-msaccess": [
	"mdb"
],
	"application/x-msbinder": [
	"obd"
],
	"application/x-mscardfile": [
	"crd"
],
	"application/x-msclip": [
	"clp"
],
	"application/x-msdos-program": [
],
	"application/x-msdownload": [
	"com",
	"bat"
],
	"application/x-msmediaview": [
	"mvb",
	"m13",
	"m14"
],
	"application/x-msmetafile": [
	"wmf",
	"emf",
	"emz"
],
	"application/x-msmoney": [
	"mny"
],
	"application/x-mspublisher": [
	"pub"
],
	"application/x-msschedule": [
	"scd"
],
	"application/x-msterminal": [
	"trm"
],
	"application/x-mswrite": [
	"wri"
],
	"application/x-netcdf": [
	"nc",
	"cdf"
],
	"application/x-ns-proxy-autoconfig": [
	"pac"
],
	"application/x-nzb": [
	"nzb"
],
	"application/x-perl": [
	"pl",
	"pm"
],
	"application/x-pilot": [
],
	"application/x-pkcs12": [
	"p12",
	"pfx"
],
	"application/x-pkcs7-certificates": [
	"p7b",
	"spc"
],
	"application/x-pkcs7-certreqresp": [
	"p7r"
],
	"application/x-rar-compressed": [
	"rar"
],
	"application/x-redhat-package-manager": [
	"rpm"
],
	"application/x-research-info-systems": [
	"ris"
],
	"application/x-sea": [
	"sea"
],
	"application/x-sh": [
	"sh"
],
	"application/x-shar": [
	"shar"
],
	"application/x-shockwave-flash": [
	"swf"
],
	"application/x-silverlight-app": [
	"xap"
],
	"application/x-sql": [
	"sql"
],
	"application/x-stuffit": [
	"sit"
],
	"application/x-stuffitx": [
	"sitx"
],
	"application/x-subrip": [
	"srt"
],
	"application/x-sv4cpio": [
	"sv4cpio"
],
	"application/x-sv4crc": [
	"sv4crc"
],
	"application/x-t3vm-image": [
	"t3"
],
	"application/x-tads": [
	"gam"
],
	"application/x-tar": [
	"tar"
],
	"application/x-tcl": [
	"tcl",
	"tk"
],
	"application/x-tex": [
	"tex"
],
	"application/x-tex-tfm": [
	"tfm"
],
	"application/x-texinfo": [
	"texinfo",
	"texi"
],
	"application/x-tgif": [
	"obj"
],
	"application/x-ustar": [
	"ustar"
],
	"application/x-virtualbox-hdd": [
	"hdd"
],
	"application/x-virtualbox-ova": [
	"ova"
],
	"application/x-virtualbox-ovf": [
	"ovf"
],
	"application/x-virtualbox-vbox": [
	"vbox"
],
	"application/x-virtualbox-vbox-extpack": [
	"vbox-extpack"
],
	"application/x-virtualbox-vdi": [
	"vdi"
],
	"application/x-virtualbox-vhd": [
	"vhd"
],
	"application/x-virtualbox-vmdk": [
	"vmdk"
],
	"application/x-wais-source": [
	"src"
],
	"application/x-web-app-manifest+json": [
	"webapp"
],
	"application/x-x509-ca-cert": [
	"der",
	"crt",
	"pem"
],
	"application/x-xfig": [
	"fig"
],
	"application/x-xliff+xml": [
	"xlf"
],
	"application/x-xpinstall": [
	"xpi"
],
	"application/x-xz": [
	"xz"
],
	"application/x-zmachine": [
	"z1",
	"z2",
	"z3",
	"z4",
	"z5",
	"z6",
	"z7",
	"z8"
],
	"application/xaml+xml": [
	"xaml"
],
	"application/xcap-diff+xml": [
	"xdf"
],
	"application/xenc+xml": [
	"xenc"
],
	"application/xhtml+xml": [
	"xhtml",
	"xht"
],
	"application/xml": [
	"xml",
	"xsl",
	"xsd",
	"rng"
],
	"application/xml-dtd": [
	"dtd"
],
	"application/xop+xml": [
	"xop"
],
	"application/xproc+xml": [
	"xpl"
],
	"application/xslt+xml": [
	"xslt"
],
	"application/xspf+xml": [
	"xspf"
],
	"application/xv+xml": [
	"mxml",
	"xhvml",
	"xvml",
	"xvm"
],
	"application/yang": [
	"yang"
],
	"application/yin+xml": [
	"yin"
],
	"application/zip": [
	"zip"
],
	"audio/3gpp": [
],
	"audio/adpcm": [
	"adp"
],
	"audio/basic": [
	"au",
	"snd"
],
	"audio/midi": [
	"mid",
	"midi",
	"kar",
	"rmi"
],
	"audio/mp3": [
],
	"audio/mp4": [
	"m4a",
	"mp4a"
],
	"audio/mpeg": [
	"mpga",
	"mp2",
	"mp2a",
	"mp3",
	"m2a",
	"m3a"
],
	"audio/ogg": [
	"oga",
	"ogg",
	"spx"
],
	"audio/s3m": [
	"s3m"
],
	"audio/silk": [
	"sil"
],
	"audio/vnd.dece.audio": [
	"uva",
	"uvva"
],
	"audio/vnd.digital-winds": [
	"eol"
],
	"audio/vnd.dra": [
	"dra"
],
	"audio/vnd.dts": [
	"dts"
],
	"audio/vnd.dts.hd": [
	"dtshd"
],
	"audio/vnd.lucent.voice": [
	"lvp"
],
	"audio/vnd.ms-playready.media.pya": [
	"pya"
],
	"audio/vnd.nuera.ecelp4800": [
	"ecelp4800"
],
	"audio/vnd.nuera.ecelp7470": [
	"ecelp7470"
],
	"audio/vnd.nuera.ecelp9600": [
	"ecelp9600"
],
	"audio/vnd.rip": [
	"rip"
],
	"audio/wav": [
	"wav"
],
	"audio/wave": [
],
	"audio/webm": [
	"weba"
],
	"audio/x-aac": [
	"aac"
],
	"audio/x-aiff": [
	"aif",
	"aiff",
	"aifc"
],
	"audio/x-caf": [
	"caf"
],
	"audio/x-flac": [
	"flac"
],
	"audio/x-m4a": [
],
	"audio/x-matroska": [
	"mka"
],
	"audio/x-mpegurl": [
	"m3u"
],
	"audio/x-ms-wax": [
	"wax"
],
	"audio/x-ms-wma": [
	"wma"
],
	"audio/x-pn-realaudio": [
	"ram",
	"ra"
],
	"audio/x-pn-realaudio-plugin": [
	"rmp"
],
	"audio/x-realaudio": [
],
	"audio/x-wav": [
],
	"audio/xm": [
	"xm"
],
	"chemical/x-cdx": [
	"cdx"
],
	"chemical/x-cif": [
	"cif"
],
	"chemical/x-cmdf": [
	"cmdf"
],
	"chemical/x-cml": [
	"cml"
],
	"chemical/x-csml": [
	"csml"
],
	"chemical/x-xyz": [
	"xyz"
],
	"font/collection": [
	"ttc"
],
	"font/otf": [
	"otf"
],
	"font/ttf": [
	"ttf"
],
	"font/woff": [
	"woff"
],
	"font/woff2": [
	"woff2"
],
	"image/apng": [
	"apng"
],
	"image/bmp": [
	"bmp"
],
	"image/cgm": [
	"cgm"
],
	"image/g3fax": [
	"g3"
],
	"image/gif": [
	"gif"
],
	"image/ief": [
	"ief"
],
	"image/jp2": [
	"jp2",
	"jpg2"
],
	"image/jpeg": [
	"jpeg",
	"jpg",
	"jpe"
],
	"image/jpm": [
	"jpm"
],
	"image/jpx": [
	"jpx",
	"jpf"
],
	"image/ktx": [
	"ktx"
],
	"image/png": [
	"png"
],
	"image/prs.btif": [
	"btif"
],
	"image/sgi": [
	"sgi"
],
	"image/svg+xml": [
	"svg",
	"svgz"
],
	"image/tiff": [
	"tiff",
	"tif"
],
	"image/vnd.adobe.photoshop": [
	"psd"
],
	"image/vnd.dece.graphic": [
	"uvi",
	"uvvi",
	"uvg",
	"uvvg"
],
	"image/vnd.djvu": [
	"djvu",
	"djv"
],
	"image/vnd.dvb.subtitle": [
],
	"image/vnd.dwg": [
	"dwg"
],
	"image/vnd.dxf": [
	"dxf"
],
	"image/vnd.fastbidsheet": [
	"fbs"
],
	"image/vnd.fpx": [
	"fpx"
],
	"image/vnd.fst": [
	"fst"
],
	"image/vnd.fujixerox.edmics-mmr": [
	"mmr"
],
	"image/vnd.fujixerox.edmics-rlc": [
	"rlc"
],
	"image/vnd.ms-modi": [
	"mdi"
],
	"image/vnd.ms-photo": [
	"wdp"
],
	"image/vnd.net-fpx": [
	"npx"
],
	"image/vnd.wap.wbmp": [
	"wbmp"
],
	"image/vnd.xiff": [
	"xif"
],
	"image/webp": [
	"webp"
],
	"image/x-3ds": [
	"3ds"
],
	"image/x-cmu-raster": [
	"ras"
],
	"image/x-cmx": [
	"cmx"
],
	"image/x-freehand": [
	"fh",
	"fhc",
	"fh4",
	"fh5",
	"fh7"
],
	"image/x-icon": [
	"ico"
],
	"image/x-jng": [
	"jng"
],
	"image/x-mrsid-image": [
	"sid"
],
	"image/x-ms-bmp": [
],
	"image/x-pcx": [
	"pcx"
],
	"image/x-pict": [
	"pic",
	"pct"
],
	"image/x-portable-anymap": [
	"pnm"
],
	"image/x-portable-bitmap": [
	"pbm"
],
	"image/x-portable-graymap": [
	"pgm"
],
	"image/x-portable-pixmap": [
	"ppm"
],
	"image/x-rgb": [
	"rgb"
],
	"image/x-tga": [
	"tga"
],
	"image/x-xbitmap": [
	"xbm"
],
	"image/x-xpixmap": [
	"xpm"
],
	"image/x-xwindowdump": [
	"xwd"
],
	"message/rfc822": [
	"eml",
	"mime"
],
	"model/gltf+json": [
	"gltf"
],
	"model/gltf-binary": [
	"glb"
],
	"model/iges": [
	"igs",
	"iges"
],
	"model/mesh": [
	"msh",
	"mesh",
	"silo"
],
	"model/vnd.collada+xml": [
	"dae"
],
	"model/vnd.dwf": [
	"dwf"
],
	"model/vnd.gdl": [
	"gdl"
],
	"model/vnd.gtw": [
	"gtw"
],
	"model/vnd.mts": [
	"mts"
],
	"model/vnd.vtu": [
	"vtu"
],
	"model/vrml": [
	"wrl",
	"vrml"
],
	"model/x3d+binary": [
	"x3db",
	"x3dbz"
],
	"model/x3d+vrml": [
	"x3dv",
	"x3dvz"
],
	"model/x3d+xml": [
	"x3d",
	"x3dz"
],
	"text/cache-manifest": [
	"appcache",
	"manifest"
],
	"text/calendar": [
	"ics",
	"ifb"
],
	"text/coffeescript": [
	"coffee",
	"litcoffee"
],
	"text/css": [
	"css"
],
	"text/csv": [
	"csv"
],
	"text/hjson": [
	"hjson"
],
	"text/html": [
	"html",
	"htm",
	"shtml"
],
	"text/jade": [
	"jade"
],
	"text/jsx": [
	"jsx"
],
	"text/less": [
	"less"
],
	"text/markdown": [
	"markdown",
	"md"
],
	"text/mathml": [
	"mml"
],
	"text/n3": [
	"n3"
],
	"text/plain": [
	"txt",
	"text",
	"conf",
	"def",
	"list",
	"log",
	"in",
	"ini"
],
	"text/prs.lines.tag": [
	"dsc"
],
	"text/richtext": [
	"rtx"
],
	"text/rtf": [
],
	"text/sgml": [
	"sgml",
	"sgm"
],
	"text/slim": [
	"slim",
	"slm"
],
	"text/stylus": [
	"stylus",
	"styl"
],
	"text/tab-separated-values": [
	"tsv"
],
	"text/troff": [
	"t",
	"tr",
	"roff",
	"man",
	"me",
	"ms"
],
	"text/turtle": [
	"ttl"
],
	"text/uri-list": [
	"uri",
	"uris",
	"urls"
],
	"text/vcard": [
	"vcard"
],
	"text/vnd.curl": [
	"curl"
],
	"text/vnd.curl.dcurl": [
	"dcurl"
],
	"text/vnd.curl.mcurl": [
	"mcurl"
],
	"text/vnd.curl.scurl": [
	"scurl"
],
	"text/vnd.dvb.subtitle": [
	"sub"
],
	"text/vnd.fly": [
	"fly"
],
	"text/vnd.fmi.flexstor": [
	"flx"
],
	"text/vnd.graphviz": [
	"gv"
],
	"text/vnd.in3d.3dml": [
	"3dml"
],
	"text/vnd.in3d.spot": [
	"spot"
],
	"text/vnd.sun.j2me.app-descriptor": [
	"jad"
],
	"text/vnd.wap.wml": [
	"wml"
],
	"text/vnd.wap.wmlscript": [
	"wmls"
],
	"text/vtt": [
	"vtt"
],
	"text/x-asm": [
	"s",
	"asm"
],
	"text/x-c": [
	"c",
	"cc",
	"cxx",
	"cpp",
	"h",
	"hh",
	"dic"
],
	"text/x-component": [
	"htc"
],
	"text/x-fortran": [
	"f",
	"for",
	"f77",
	"f90"
],
	"text/x-handlebars-template": [
	"hbs"
],
	"text/x-java-source": [
	"java"
],
	"text/x-lua": [
	"lua"
],
	"text/x-markdown": [
	"mkd"
],
	"text/x-nfo": [
	"nfo"
],
	"text/x-opml": [
	"opml"
],
	"text/x-org": [
],
	"text/x-pascal": [
	"p",
	"pas"
],
	"text/x-processing": [
	"pde"
],
	"text/x-sass": [
	"sass"
],
	"text/x-scss": [
	"scss"
],
	"text/x-setext": [
	"etx"
],
	"text/x-sfv": [
	"sfv"
],
	"text/x-suse-ymp": [
	"ymp"
],
	"text/x-uuencode": [
	"uu"
],
	"text/x-vcalendar": [
	"vcs"
],
	"text/x-vcard": [
	"vcf"
],
	"text/xml": [
],
	"text/yaml": [
	"yaml",
	"yml"
],
	"video/3gpp": [
	"3gp",
	"3gpp"
],
	"video/3gpp2": [
	"3g2"
],
	"video/h261": [
	"h261"
],
	"video/h263": [
	"h263"
],
	"video/h264": [
	"h264"
],
	"video/jpeg": [
	"jpgv"
],
	"video/jpm": [
	"jpgm"
],
	"video/mj2": [
	"mj2",
	"mjp2"
],
	"video/mp2t": [
	"ts"
],
	"video/mp4": [
	"mp4",
	"mp4v",
	"mpg4"
],
	"video/mpeg": [
	"mpeg",
	"mpg",
	"mpe",
	"m1v",
	"m2v"
],
	"video/ogg": [
	"ogv"
],
	"video/quicktime": [
	"qt",
	"mov"
],
	"video/vnd.dece.hd": [
	"uvh",
	"uvvh"
],
	"video/vnd.dece.mobile": [
	"uvm",
	"uvvm"
],
	"video/vnd.dece.pd": [
	"uvp",
	"uvvp"
],
	"video/vnd.dece.sd": [
	"uvs",
	"uvvs"
],
	"video/vnd.dece.video": [
	"uvv",
	"uvvv"
],
	"video/vnd.dvb.file": [
	"dvb"
],
	"video/vnd.fvt": [
	"fvt"
],
	"video/vnd.mpegurl": [
	"mxu",
	"m4u"
],
	"video/vnd.ms-playready.media.pyv": [
	"pyv"
],
	"video/vnd.uvvu.mp4": [
	"uvu",
	"uvvu"
],
	"video/vnd.vivo": [
	"viv"
],
	"video/webm": [
	"webm"
],
	"video/x-f4v": [
	"f4v"
],
	"video/x-fli": [
	"fli"
],
	"video/x-flv": [
	"flv"
],
	"video/x-m4v": [
	"m4v"
],
	"video/x-matroska": [
	"mkv",
	"mk3d",
	"mks"
],
	"video/x-mng": [
	"mng"
],
	"video/x-ms-asf": [
	"asf",
	"asx"
],
	"video/x-ms-vob": [
	"vob"
],
	"video/x-ms-wm": [
	"wm"
],
	"video/x-ms-wmv": [
	"wmv"
],
	"video/x-ms-wmx": [
	"wmx"
],
	"video/x-ms-wvx": [
	"wvx"
],
	"video/x-msvideo": [
	"avi"
],
	"video/x-sgi-movie": [
	"movie"
],
	"video/x-smv": [
	"smv"
],
	"x-conference/x-cooltalk": [
	"ice"
]
};

var fs$3 = require$$1$2;

function Mime() {
  // Map of extension -> mime type
  this.types = Object.create(null);

  // Map of mime type -> extension
  this.extensions = Object.create(null);
}

/**
 * Define mimetype -> extension mappings.  Each key is a mime-type that maps
 * to an array of extensions associated with the type.  The first extension is
 * used as the default extension for the type.
 *
 * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});
 *
 * @param map (Object) type definitions
 */
Mime.prototype.define = function (map) {
  for (var type in map) {
    var exts = map[type];
    for (var i = 0; i < exts.length; i++) {
      if (process.env.DEBUG_MIME && this.types[exts[i]]) {
        console.warn((this._loading || "define()").replace(/.*\//, ''), 'changes "' + exts[i] + '" extension type from ' +
          this.types[exts[i]] + ' to ' + type);
      }

      this.types[exts[i]] = type;
    }

    // Default extension is the first one we encounter
    if (!this.extensions[type]) {
      this.extensions[type] = exts[0];
    }
  }
};

/**
 * Load an Apache2-style ".types" file
 *
 * This may be called multiple times (it's expected).  Where files declare
 * overlapping types/extensions, the last file wins.
 *
 * @param file (String) path of file to load.
 */
Mime.prototype.load = function(file) {
  this._loading = file;
  // Read file and split into lines
  var map = {},
      content = fs$3.readFileSync(file, 'ascii'),
      lines = content.split(/[\r\n]+/);

  lines.forEach(function(line) {
    // Clean up whitespace/comments, and split into fields
    var fields = line.replace(/\s*#.*|^\s*|\s*$/g, '').split(/\s+/);
    map[fields.shift()] = fields;
  });

  this.define(map);

  this._loading = null;
};

/**
 * Lookup a mime type based on extension
 */
Mime.prototype.lookup = function(path, fallback) {
  var ext = path.replace(/^.*[\.\/\\]/, '').toLowerCase();

  return this.types[ext] || fallback || this.default_type;
};

/**
 * Return file extension associated with a mime type
 */
Mime.prototype.extension = function(mimeType) {
  var type = mimeType.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();
  return this.extensions[type];
};

// Default instance
var mime$3 = new Mime();

// Define built-in types
mime$3.define(require$$2);

// Default type
mime$3.default_type = mime$3.lookup('bin');

//
// Additional API specific to the default instance
//

mime$3.Mime = Mime;

/**
 * Lookup a charset based on mime type.
 */
mime$3.charsets = {
  lookup: function(mimeType, fallback) {
    // Assume text types are utf8
    return (/^text\/|^application\/(javascript|json)/).test(mimeType) ? 'UTF-8' : fallback;
  }
};

var mime_1 = mime$3;

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

var _package$a = function (val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse$4(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse$4(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

/*!
 * range-parser
 * Copyright(c) 2012-2014 TJ Holowaychuk
 * Copyright(c) 2015-2016 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var _package$9 = rangeParser;

/**
 * Parse "Range" header `str` relative to the given file `size`.
 *
 * @param {Number} size
 * @param {String} str
 * @param {Object} [options]
 * @return {Array}
 * @public
 */

function rangeParser (size, str, options) {
  if (typeof str !== 'string') {
    throw new TypeError('argument str must be a string')
  }

  var index = str.indexOf('=');

  if (index === -1) {
    return -2
  }

  // split the range string
  var arr = str.slice(index + 1).split(',');
  var ranges = [];

  // add ranges type
  ranges.type = str.slice(0, index);

  // parse all ranges
  for (var i = 0; i < arr.length; i++) {
    var range = arr[i].split('-');
    var start = parseInt(range[0], 10);
    var end = parseInt(range[1], 10);

    // -nnn
    if (isNaN(start)) {
      start = size - end;
      end = size - 1;
    // nnn-
    } else if (isNaN(end)) {
      end = size - 1;
    }

    // limit last-byte-pos to current length
    if (end > size - 1) {
      end = size - 1;
    }

    // invalid or unsatisifiable
    if (isNaN(start) || isNaN(end) || start > end || start < 0) {
      continue
    }

    // add range
    ranges.push({
      start: start,
      end: end
    });
  }

  if (ranges.length < 1) {
    // unsatisifiable
    return -1
  }

  return options && options.combine
    ? combineRanges(ranges)
    : ranges
}

/**
 * Combine overlapping & adjacent ranges.
 * @private
 */

function combineRanges (ranges) {
  var ordered = ranges.map(mapWithIndex).sort(sortByRangeStart);

  for (var j = 0, i = 1; i < ordered.length; i++) {
    var range = ordered[i];
    var current = ordered[j];

    if (range.start > current.end + 1) {
      // next range
      ordered[++j] = range;
    } else if (range.end > current.end) {
      // extend range
      current.end = range.end;
      current.index = Math.min(current.index, range.index);
    }
  }

  // trim ordered array
  ordered.length = j + 1;

  // generate combined range
  var combined = ordered.sort(sortByRangeIndex).map(mapWithoutIndex);

  // copy ranges type
  combined.type = ranges.type;

  return combined
}

/**
 * Map function to add index value to ranges.
 * @private
 */

function mapWithIndex (range, index) {
  return {
    start: range.start,
    end: range.end,
    index: index
  }
}

/**
 * Map function to remove index value from ranges.
 * @private
 */

function mapWithoutIndex (range) {
  return {
    start: range.start,
    end: range.end
  }
}

/**
 * Sort function to sort ranges by index.
 * @private
 */

function sortByRangeIndex (a, b) {
  return a.index - b.index
}

/**
 * Sort function to sort ranges by start position.
 * @private
 */

function sortByRangeStart (a, b) {
  return a.start - b.start
}

/*!
 * send
 * Copyright(c) 2012 TJ Holowaychuk
 * Copyright(c) 2014-2022 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 * @private
 */

var createError$1 = _packageExports$b;
var debug = srcExports('send');
var deprecate$2 = _package$Q('send');
var destroy = _package$I;
var encodeUrl$1 = _package$m;
var escapeHtml$1 = _package$l;
var etag = _package$c;
var fresh$1 = _package$b;
var fs$2 = require$$1$2;
var mime$2 = mime_1;
var ms = _package$a;
var onFinished$1 = _packageExports$a;
var parseRange$1 = _package$9;
var path$4 = path$6;
var statuses$1 = _package$L;
var Stream = require$$1$3;
var util = require$$1$1;

/**
 * Path function references.
 * @private
 */

var extname$1 = path$4.extname;
var join = path$4.join;
var normalize = path$4.normalize;
var resolve$1 = path$4.resolve;
var sep = path$4.sep;

/**
 * Regular expression for identifying a bytes Range header.
 * @private
 */

var BYTES_RANGE_REGEXP = /^ *bytes=/;

/**
 * Maximum value allowed for the max age.
 * @private
 */

var MAX_MAXAGE = 60 * 60 * 24 * 365 * 1000; // 1 year

/**
 * Regular expression to match a path with a directory up component.
 * @private
 */

var UP_PATH_REGEXP = /(?:^|[\\/])\.\.(?:[\\/]|$)/;

/**
 * Module exports.
 * @public
 */

_package$d.exports = send$1;
_package$d.exports.mime = mime$2;

/**
 * Return a `SendStream` for `req` and `path`.
 *
 * @param {object} req
 * @param {string} path
 * @param {object} [options]
 * @return {SendStream}
 * @public
 */

function send$1 (req, path, options) {
  return new SendStream(req, path, options)
}

/**
 * Initialize a `SendStream` with the given `path`.
 *
 * @param {Request} req
 * @param {String} path
 * @param {object} [options]
 * @private
 */

function SendStream (req, path, options) {
  Stream.call(this);

  var opts = options || {};

  this.options = opts;
  this.path = path;
  this.req = req;

  this._acceptRanges = opts.acceptRanges !== undefined
    ? Boolean(opts.acceptRanges)
    : true;

  this._cacheControl = opts.cacheControl !== undefined
    ? Boolean(opts.cacheControl)
    : true;

  this._etag = opts.etag !== undefined
    ? Boolean(opts.etag)
    : true;

  this._dotfiles = opts.dotfiles !== undefined
    ? opts.dotfiles
    : 'ignore';

  if (this._dotfiles !== 'ignore' && this._dotfiles !== 'allow' && this._dotfiles !== 'deny') {
    throw new TypeError('dotfiles option must be "allow", "deny", or "ignore"')
  }

  this._hidden = Boolean(opts.hidden);

  if (opts.hidden !== undefined) {
    deprecate$2('hidden: use dotfiles: \'' + (this._hidden ? 'allow' : 'ignore') + '\' instead');
  }

  // legacy support
  if (opts.dotfiles === undefined) {
    this._dotfiles = undefined;
  }

  this._extensions = opts.extensions !== undefined
    ? normalizeList(opts.extensions, 'extensions option')
    : [];

  this._immutable = opts.immutable !== undefined
    ? Boolean(opts.immutable)
    : false;

  this._index = opts.index !== undefined
    ? normalizeList(opts.index, 'index option')
    : ['index.html'];

  this._lastModified = opts.lastModified !== undefined
    ? Boolean(opts.lastModified)
    : true;

  this._maxage = opts.maxAge || opts.maxage;
  this._maxage = typeof this._maxage === 'string'
    ? ms(this._maxage)
    : Number(this._maxage);
  this._maxage = !isNaN(this._maxage)
    ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE)
    : 0;

  this._root = opts.root
    ? resolve$1(opts.root)
    : null;

  if (!this._root && opts.from) {
    this.from(opts.from);
  }
}

/**
 * Inherits from `Stream`.
 */

util.inherits(SendStream, Stream);

/**
 * Enable or disable etag generation.
 *
 * @param {Boolean} val
 * @return {SendStream}
 * @api public
 */

SendStream.prototype.etag = deprecate$2.function(function etag (val) {
  this._etag = Boolean(val);
  debug('etag %s', this._etag);
  return this
}, 'send.etag: pass etag as option');

/**
 * Enable or disable "hidden" (dot) files.
 *
 * @param {Boolean} path
 * @return {SendStream}
 * @api public
 */

SendStream.prototype.hidden = deprecate$2.function(function hidden (val) {
  this._hidden = Boolean(val);
  this._dotfiles = undefined;
  debug('hidden %s', this._hidden);
  return this
}, 'send.hidden: use dotfiles option');

/**
 * Set index `paths`, set to a falsy
 * value to disable index support.
 *
 * @param {String|Boolean|Array} paths
 * @return {SendStream}
 * @api public
 */

SendStream.prototype.index = deprecate$2.function(function index (paths) {
  var index = !paths ? [] : normalizeList(paths, 'paths argument');
  debug('index %o', paths);
  this._index = index;
  return this
}, 'send.index: pass index as option');

/**
 * Set root `path`.
 *
 * @param {String} path
 * @return {SendStream}
 * @api public
 */

SendStream.prototype.root = function root (path) {
  this._root = resolve$1(String(path));
  debug('root %s', this._root);
  return this
};

SendStream.prototype.from = deprecate$2.function(SendStream.prototype.root,
  'send.from: pass root as option');

SendStream.prototype.root = deprecate$2.function(SendStream.prototype.root,
  'send.root: pass root as option');

/**
 * Set max-age to `maxAge`.
 *
 * @param {Number} maxAge
 * @return {SendStream}
 * @api public
 */

SendStream.prototype.maxage = deprecate$2.function(function maxage (maxAge) {
  this._maxage = typeof maxAge === 'string'
    ? ms(maxAge)
    : Number(maxAge);
  this._maxage = !isNaN(this._maxage)
    ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE)
    : 0;
  debug('max-age %d', this._maxage);
  return this
}, 'send.maxage: pass maxAge as option');

/**
 * Emit error with `status`.
 *
 * @param {number} status
 * @param {Error} [err]
 * @private
 */

SendStream.prototype.error = function error (status, err) {
  // emit if listeners instead of responding
  if (hasListeners(this, 'error')) {
    return this.emit('error', createHttpError(status, err))
  }

  var res = this.res;
  var msg = statuses$1.message[status] || String(status);
  var doc = createHtmlDocument('Error', escapeHtml$1(msg));

  // clear existing headers
  clearHeaders(res);

  // add error headers
  if (err && err.headers) {
    setHeaders(res, err.headers);
  }

  // send basic response
  res.statusCode = status;
  res.setHeader('Content-Type', 'text/html; charset=UTF-8');
  res.setHeader('Content-Length', Buffer.byteLength(doc));
  res.setHeader('Content-Security-Policy', "default-src 'none'");
  res.setHeader('X-Content-Type-Options', 'nosniff');
  res.end(doc);
};

/**
 * Check if the pathname ends with "/".
 *
 * @return {boolean}
 * @private
 */

SendStream.prototype.hasTrailingSlash = function hasTrailingSlash () {
  return this.path[this.path.length - 1] === '/'
};

/**
 * Check if this is a conditional GET request.
 *
 * @return {Boolean}
 * @api private
 */

SendStream.prototype.isConditionalGET = function isConditionalGET () {
  return this.req.headers['if-match'] ||
    this.req.headers['if-unmodified-since'] ||
    this.req.headers['if-none-match'] ||
    this.req.headers['if-modified-since']
};

/**
 * Check if the request preconditions failed.
 *
 * @return {boolean}
 * @private
 */

SendStream.prototype.isPreconditionFailure = function isPreconditionFailure () {
  var req = this.req;
  var res = this.res;

  // if-match
  var match = req.headers['if-match'];
  if (match) {
    var etag = res.getHeader('ETag');
    return !etag || (match !== '*' && parseTokenList(match).every(function (match) {
      return match !== etag && match !== 'W/' + etag && 'W/' + match !== etag
    }))
  }

  // if-unmodified-since
  var unmodifiedSince = parseHttpDate(req.headers['if-unmodified-since']);
  if (!isNaN(unmodifiedSince)) {
    var lastModified = parseHttpDate(res.getHeader('Last-Modified'));
    return isNaN(lastModified) || lastModified > unmodifiedSince
  }

  return false
};

/**
 * Strip various content header fields for a change in entity.
 *
 * @private
 */

SendStream.prototype.removeContentHeaderFields = function removeContentHeaderFields () {
  var res = this.res;

  res.removeHeader('Content-Encoding');
  res.removeHeader('Content-Language');
  res.removeHeader('Content-Length');
  res.removeHeader('Content-Range');
  res.removeHeader('Content-Type');
};

/**
 * Respond with 304 not modified.
 *
 * @api private
 */

SendStream.prototype.notModified = function notModified () {
  var res = this.res;
  debug('not modified');
  this.removeContentHeaderFields();
  res.statusCode = 304;
  res.end();
};

/**
 * Raise error that headers already sent.
 *
 * @api private
 */

SendStream.prototype.headersAlreadySent = function headersAlreadySent () {
  var err = new Error('Can\'t set headers after they are sent.');
  debug('headers already sent');
  this.error(500, err);
};

/**
 * Check if the request is cacheable, aka
 * responded with 2xx or 304 (see RFC 2616 section 14.2{5,6}).
 *
 * @return {Boolean}
 * @api private
 */

SendStream.prototype.isCachable = function isCachable () {
  var statusCode = this.res.statusCode;
  return (statusCode >= 200 && statusCode < 300) ||
    statusCode === 304
};

/**
 * Handle stat() error.
 *
 * @param {Error} error
 * @private
 */

SendStream.prototype.onStatError = function onStatError (error) {
  switch (error.code) {
    case 'ENAMETOOLONG':
    case 'ENOENT':
    case 'ENOTDIR':
      this.error(404, error);
      break
    default:
      this.error(500, error);
      break
  }
};

/**
 * Check if the cache is fresh.
 *
 * @return {Boolean}
 * @api private
 */

SendStream.prototype.isFresh = function isFresh () {
  return fresh$1(this.req.headers, {
    etag: this.res.getHeader('ETag'),
    'last-modified': this.res.getHeader('Last-Modified')
  })
};

/**
 * Check if the range is fresh.
 *
 * @return {Boolean}
 * @api private
 */

SendStream.prototype.isRangeFresh = function isRangeFresh () {
  var ifRange = this.req.headers['if-range'];

  if (!ifRange) {
    return true
  }

  // if-range as etag
  if (ifRange.indexOf('"') !== -1) {
    var etag = this.res.getHeader('ETag');
    return Boolean(etag && ifRange.indexOf(etag) !== -1)
  }

  // if-range as modified date
  var lastModified = this.res.getHeader('Last-Modified');
  return parseHttpDate(lastModified) <= parseHttpDate(ifRange)
};

/**
 * Redirect to path.
 *
 * @param {string} path
 * @private
 */

SendStream.prototype.redirect = function redirect (path) {
  var res = this.res;

  if (hasListeners(this, 'directory')) {
    this.emit('directory', res, path);
    return
  }

  if (this.hasTrailingSlash()) {
    this.error(403);
    return
  }

  var loc = encodeUrl$1(collapseLeadingSlashes(this.path + '/'));
  var doc = createHtmlDocument('Redirecting', 'Redirecting to <a href="' + escapeHtml$1(loc) + '">' +
    escapeHtml$1(loc) + '</a>');

  // redirect
  res.statusCode = 301;
  res.setHeader('Content-Type', 'text/html; charset=UTF-8');
  res.setHeader('Content-Length', Buffer.byteLength(doc));
  res.setHeader('Content-Security-Policy', "default-src 'none'");
  res.setHeader('X-Content-Type-Options', 'nosniff');
  res.setHeader('Location', loc);
  res.end(doc);
};

/**
 * Pipe to `res.
 *
 * @param {Stream} res
 * @return {Stream} res
 * @api public
 */

SendStream.prototype.pipe = function pipe (res) {
  // root path
  var root = this._root;

  // references
  this.res = res;

  // decode the path
  var path = decode$1(this.path);
  if (path === -1) {
    this.error(400);
    return res
  }

  // null byte(s)
  if (~path.indexOf('\0')) {
    this.error(400);
    return res
  }

  var parts;
  if (root !== null) {
    // normalize
    if (path) {
      path = normalize('.' + sep + path);
    }

    // malicious path
    if (UP_PATH_REGEXP.test(path)) {
      debug('malicious path "%s"', path);
      this.error(403);
      return res
    }

    // explode path parts
    parts = path.split(sep);

    // join / normalize from optional root dir
    path = normalize(join(root, path));
  } else {
    // ".." is malicious without "root"
    if (UP_PATH_REGEXP.test(path)) {
      debug('malicious path "%s"', path);
      this.error(403);
      return res
    }

    // explode path parts
    parts = normalize(path).split(sep);

    // resolve the path
    path = resolve$1(path);
  }

  // dotfile handling
  if (containsDotFile(parts)) {
    var access = this._dotfiles;

    // legacy support
    if (access === undefined) {
      access = parts[parts.length - 1][0] === '.'
        ? (this._hidden ? 'allow' : 'ignore')
        : 'allow';
    }

    debug('%s dotfile "%s"', access, path);
    switch (access) {
      case 'allow':
        break
      case 'deny':
        this.error(403);
        return res
      case 'ignore':
      default:
        this.error(404);
        return res
    }
  }

  // index file support
  if (this._index.length && this.hasTrailingSlash()) {
    this.sendIndex(path);
    return res
  }

  this.sendFile(path);
  return res
};

/**
 * Transfer `path`.
 *
 * @param {String} path
 * @api public
 */

SendStream.prototype.send = function send (path, stat) {
  var len = stat.size;
  var options = this.options;
  var opts = {};
  var res = this.res;
  var req = this.req;
  var ranges = req.headers.range;
  var offset = options.start || 0;

  if (headersSent(res)) {
    // impossible to send now
    this.headersAlreadySent();
    return
  }

  debug('pipe "%s"', path);

  // set header fields
  this.setHeader(path, stat);

  // set content-type
  this.type(path);

  // conditional GET support
  if (this.isConditionalGET()) {
    if (this.isPreconditionFailure()) {
      this.error(412);
      return
    }

    if (this.isCachable() && this.isFresh()) {
      this.notModified();
      return
    }
  }

  // adjust len to start/end options
  len = Math.max(0, len - offset);
  if (options.end !== undefined) {
    var bytes = options.end - offset + 1;
    if (len > bytes) len = bytes;
  }

  // Range support
  if (this._acceptRanges && BYTES_RANGE_REGEXP.test(ranges)) {
    // parse
    ranges = parseRange$1(len, ranges, {
      combine: true
    });

    // If-Range support
    if (!this.isRangeFresh()) {
      debug('range stale');
      ranges = -2;
    }

    // unsatisfiable
    if (ranges === -1) {
      debug('range unsatisfiable');

      // Content-Range
      res.setHeader('Content-Range', contentRange('bytes', len));

      // 416 Requested Range Not Satisfiable
      return this.error(416, {
        headers: { 'Content-Range': res.getHeader('Content-Range') }
      })
    }

    // valid (syntactically invalid/multiple ranges are treated as a regular response)
    if (ranges !== -2 && ranges.length === 1) {
      debug('range %j', ranges);

      // Content-Range
      res.statusCode = 206;
      res.setHeader('Content-Range', contentRange('bytes', len, ranges[0]));

      // adjust for requested range
      offset += ranges[0].start;
      len = ranges[0].end - ranges[0].start + 1;
    }
  }

  // clone options
  for (var prop in options) {
    opts[prop] = options[prop];
  }

  // set read options
  opts.start = offset;
  opts.end = Math.max(offset, offset + len - 1);

  // content-length
  res.setHeader('Content-Length', len);

  // HEAD support
  if (req.method === 'HEAD') {
    res.end();
    return
  }

  this.stream(path, opts);
};

/**
 * Transfer file for `path`.
 *
 * @param {String} path
 * @api private
 */
SendStream.prototype.sendFile = function sendFile (path) {
  var i = 0;
  var self = this;

  debug('stat "%s"', path);
  fs$2.stat(path, function onstat (err, stat) {
    if (err && err.code === 'ENOENT' && !extname$1(path) && path[path.length - 1] !== sep) {
      // not found, check extensions
      return next(err)
    }
    if (err) return self.onStatError(err)
    if (stat.isDirectory()) return self.redirect(path)
    self.emit('file', path, stat);
    self.send(path, stat);
  });

  function next (err) {
    if (self._extensions.length <= i) {
      return err
        ? self.onStatError(err)
        : self.error(404)
    }

    var p = path + '.' + self._extensions[i++];

    debug('stat "%s"', p);
    fs$2.stat(p, function (err, stat) {
      if (err) return next(err)
      if (stat.isDirectory()) return next()
      self.emit('file', p, stat);
      self.send(p, stat);
    });
  }
};

/**
 * Transfer index for `path`.
 *
 * @param {String} path
 * @api private
 */
SendStream.prototype.sendIndex = function sendIndex (path) {
  var i = -1;
  var self = this;

  function next (err) {
    if (++i >= self._index.length) {
      if (err) return self.onStatError(err)
      return self.error(404)
    }

    var p = join(path, self._index[i]);

    debug('stat "%s"', p);
    fs$2.stat(p, function (err, stat) {
      if (err) return next(err)
      if (stat.isDirectory()) return next()
      self.emit('file', p, stat);
      self.send(p, stat);
    });
  }

  next();
};

/**
 * Stream `path` to the response.
 *
 * @param {String} path
 * @param {Object} options
 * @api private
 */

SendStream.prototype.stream = function stream (path, options) {
  var self = this;
  var res = this.res;

  // pipe
  var stream = fs$2.createReadStream(path, options);
  this.emit('stream', stream);
  stream.pipe(res);

  // cleanup
  function cleanup () {
    destroy(stream, true);
  }

  // response finished, cleanup
  onFinished$1(res, cleanup);

  // error handling
  stream.on('error', function onerror (err) {
    // clean up stream early
    cleanup();

    // error
    self.onStatError(err);
  });

  // end
  stream.on('end', function onend () {
    self.emit('end');
  });
};

/**
 * Set content-type based on `path`
 * if it hasn't been explicitly set.
 *
 * @param {String} path
 * @api private
 */

SendStream.prototype.type = function type (path) {
  var res = this.res;

  if (res.getHeader('Content-Type')) return

  var type = mime$2.lookup(path);

  if (!type) {
    debug('no content-type');
    return
  }

  var charset = mime$2.charsets.lookup(type);

  debug('content-type %s', type);
  res.setHeader('Content-Type', type + (charset ? '; charset=' + charset : ''));
};

/**
 * Set response header fields, most
 * fields may be pre-defined.
 *
 * @param {String} path
 * @param {Object} stat
 * @api private
 */

SendStream.prototype.setHeader = function setHeader (path, stat) {
  var res = this.res;

  this.emit('headers', res, path, stat);

  if (this._acceptRanges && !res.getHeader('Accept-Ranges')) {
    debug('accept ranges');
    res.setHeader('Accept-Ranges', 'bytes');
  }

  if (this._cacheControl && !res.getHeader('Cache-Control')) {
    var cacheControl = 'public, max-age=' + Math.floor(this._maxage / 1000);

    if (this._immutable) {
      cacheControl += ', immutable';
    }

    debug('cache-control %s', cacheControl);
    res.setHeader('Cache-Control', cacheControl);
  }

  if (this._lastModified && !res.getHeader('Last-Modified')) {
    var modified = stat.mtime.toUTCString();
    debug('modified %s', modified);
    res.setHeader('Last-Modified', modified);
  }

  if (this._etag && !res.getHeader('ETag')) {
    var val = etag(stat);
    debug('etag %s', val);
    res.setHeader('ETag', val);
  }
};

/**
 * Clear all headers from a response.
 *
 * @param {object} res
 * @private
 */

function clearHeaders (res) {
  var headers = getHeaderNames(res);

  for (var i = 0; i < headers.length; i++) {
    res.removeHeader(headers[i]);
  }
}

/**
 * Collapse all leading slashes into a single slash
 *
 * @param {string} str
 * @private
 */
function collapseLeadingSlashes (str) {
  for (var i = 0; i < str.length; i++) {
    if (str[i] !== '/') {
      break
    }
  }

  return i > 1
    ? '/' + str.substr(i)
    : str
}

/**
 * Determine if path parts contain a dotfile.
 *
 * @api private
 */

function containsDotFile (parts) {
  for (var i = 0; i < parts.length; i++) {
    var part = parts[i];
    if (part.length > 1 && part[0] === '.') {
      return true
    }
  }

  return false
}

/**
 * Create a Content-Range header.
 *
 * @param {string} type
 * @param {number} size
 * @param {array} [range]
 */

function contentRange (type, size, range) {
  return type + ' ' + (range ? range.start + '-' + range.end : '*') + '/' + size
}

/**
 * Create a minimal HTML document.
 *
 * @param {string} title
 * @param {string} body
 * @private
 */

function createHtmlDocument (title, body) {
  return '<!DOCTYPE html>\n' +
    '<html lang="en">\n' +
    '<head>\n' +
    '<meta charset="utf-8">\n' +
    '<title>' + title + '</title>\n' +
    '</head>\n' +
    '<body>\n' +
    '<pre>' + body + '</pre>\n' +
    '</body>\n' +
    '</html>\n'
}

/**
 * Create a HttpError object from simple arguments.
 *
 * @param {number} status
 * @param {Error|object} err
 * @private
 */

function createHttpError (status, err) {
  if (!err) {
    return createError$1(status)
  }

  return err instanceof Error
    ? createError$1(status, err, { expose: false })
    : createError$1(status, err)
}

/**
 * decodeURIComponent.
 *
 * Allows V8 to only deoptimize this fn instead of all
 * of send().
 *
 * @param {String} path
 * @api private
 */

function decode$1 (path) {
  try {
    return decodeURIComponent(path)
  } catch (err) {
    return -1
  }
}

/**
 * Get the header names on a respnse.
 *
 * @param {object} res
 * @returns {array[string]}
 * @private
 */

function getHeaderNames (res) {
  return typeof res.getHeaderNames !== 'function'
    ? Object.keys(res._headers || {})
    : res.getHeaderNames()
}

/**
 * Determine if emitter has listeners of a given type.
 *
 * The way to do this check is done three different ways in Node.js >= 0.8
 * so this consolidates them into a minimal set using instance methods.
 *
 * @param {EventEmitter} emitter
 * @param {string} type
 * @returns {boolean}
 * @private
 */

function hasListeners (emitter, type) {
  var count = typeof emitter.listenerCount !== 'function'
    ? emitter.listeners(type).length
    : emitter.listenerCount(type);

  return count > 0
}

/**
 * Determine if the response headers have been sent.
 *
 * @param {object} res
 * @returns {boolean}
 * @private
 */

function headersSent (res) {
  return typeof res.headersSent !== 'boolean'
    ? Boolean(res._header)
    : res.headersSent
}

/**
 * Normalize the index option into an array.
 *
 * @param {boolean|string|array} val
 * @param {string} name
 * @private
 */

function normalizeList (val, name) {
  var list = [].concat(val || []);

  for (var i = 0; i < list.length; i++) {
    if (typeof list[i] !== 'string') {
      throw new TypeError(name + ' must be array of strings or false')
    }
  }

  return list
}

/**
 * Parse an HTTP Date into a number.
 *
 * @param {string} date
 * @private
 */

function parseHttpDate (date) {
  var timestamp = date && Date.parse(date);

  return typeof timestamp === 'number'
    ? timestamp
    : NaN
}

/**
 * Parse a HTTP token list.
 *
 * @param {string} str
 * @private
 */

function parseTokenList (str) {
  var end = 0;
  var list = [];
  var start = 0;

  // gather tokens
  for (var i = 0, len = str.length; i < len; i++) {
    switch (str.charCodeAt(i)) {
      case 0x20: /*   */
        if (start === end) {
          start = end = i + 1;
        }
        break
      case 0x2c: /* , */
        if (start !== end) {
          list.push(str.substring(start, end));
        }
        start = end = i + 1;
        break
      default:
        end = i + 1;
        break
    }
  }

  // final token
  if (start !== end) {
    list.push(str.substring(start, end));
  }

  return list
}

/**
 * Set an object of headers on a response.
 *
 * @param {object} res
 * @param {object} headers
 * @private
 */

function setHeaders (res, headers) {
  var keys = Object.keys(headers);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    res.setHeader(key, headers[key]);
  }
}

var _packageExports$3 = _package$d.exports;

var _package$8 = {exports: {}};

/*!
 * forwarded
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var _package$7 = forwarded$1;

/**
 * Get all addresses in the request, using the `X-Forwarded-For` header.
 *
 * @param {object} req
 * @return {array}
 * @public
 */

function forwarded$1 (req) {
  if (!req) {
    throw new TypeError('argument req is required')
  }

  // simple header parsing
  var proxyAddrs = parse$3(req.headers['x-forwarded-for'] || '');
  var socketAddr = getSocketAddr(req);
  var addrs = [socketAddr].concat(proxyAddrs);

  // return all addresses
  return addrs
}

/**
 * Get the socket address for a request.
 *
 * @param {object} req
 * @return {string}
 * @private
 */

function getSocketAddr (req) {
  return req.socket
    ? req.socket.remoteAddress
    : req.connection.remoteAddress
}

/**
 * Parse the X-Forwarded-For header.
 *
 * @param {string} header
 * @private
 */

function parse$3 (header) {
  var end = header.length;
  var list = [];
  var start = header.length;

  // gather addresses, backwards
  for (var i = header.length - 1; i >= 0; i--) {
    switch (header.charCodeAt(i)) {
      case 0x20: /*   */
        if (start === end) {
          start = end = i;
        }
        break
      case 0x2c: /* , */
        if (start !== end) {
          list.push(header.substring(start, end));
        }
        start = end = i;
        break
      default:
        start = i;
        break
    }
  }

  // final address
  if (start !== end) {
    list.push(header.substring(start, end));
  }

  return list
}

var ipaddr$1 = {exports: {}};

ipaddr$1.exports;

(function (module) {
	(function() {
	  var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root, zoneIndex;

	  ipaddr = {};

	  root = this;

	  if ((module !== null) && module.exports) {
	    module.exports = ipaddr;
	  } else {
	    root['ipaddr'] = ipaddr;
	  }

	  matchCIDR = function(first, second, partSize, cidrBits) {
	    var part, shift;
	    if (first.length !== second.length) {
	      throw new Error("ipaddr: cannot match CIDR for objects with different lengths");
	    }
	    part = 0;
	    while (cidrBits > 0) {
	      shift = partSize - cidrBits;
	      if (shift < 0) {
	        shift = 0;
	      }
	      if (first[part] >> shift !== second[part] >> shift) {
	        return false;
	      }
	      cidrBits -= partSize;
	      part += 1;
	    }
	    return true;
	  };

	  ipaddr.subnetMatch = function(address, rangeList, defaultName) {
	    var k, len, rangeName, rangeSubnets, subnet;
	    if (defaultName == null) {
	      defaultName = 'unicast';
	    }
	    for (rangeName in rangeList) {
	      rangeSubnets = rangeList[rangeName];
	      if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {
	        rangeSubnets = [rangeSubnets];
	      }
	      for (k = 0, len = rangeSubnets.length; k < len; k++) {
	        subnet = rangeSubnets[k];
	        if (address.kind() === subnet[0].kind()) {
	          if (address.match.apply(address, subnet)) {
	            return rangeName;
	          }
	        }
	      }
	    }
	    return defaultName;
	  };

	  ipaddr.IPv4 = (function() {
	    function IPv4(octets) {
	      var k, len, octet;
	      if (octets.length !== 4) {
	        throw new Error("ipaddr: ipv4 octet count should be 4");
	      }
	      for (k = 0, len = octets.length; k < len; k++) {
	        octet = octets[k];
	        if (!((0 <= octet && octet <= 255))) {
	          throw new Error("ipaddr: ipv4 octet should fit in 8 bits");
	        }
	      }
	      this.octets = octets;
	    }

	    IPv4.prototype.kind = function() {
	      return 'ipv4';
	    };

	    IPv4.prototype.toString = function() {
	      return this.octets.join(".");
	    };

	    IPv4.prototype.toNormalizedString = function() {
	      return this.toString();
	    };

	    IPv4.prototype.toByteArray = function() {
	      return this.octets.slice(0);
	    };

	    IPv4.prototype.match = function(other, cidrRange) {
	      var ref;
	      if (cidrRange === void 0) {
	        ref = other, other = ref[0], cidrRange = ref[1];
	      }
	      if (other.kind() !== 'ipv4') {
	        throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");
	      }
	      return matchCIDR(this.octets, other.octets, 8, cidrRange);
	    };

	    IPv4.prototype.SpecialRanges = {
	      unspecified: [[new IPv4([0, 0, 0, 0]), 8]],
	      broadcast: [[new IPv4([255, 255, 255, 255]), 32]],
	      multicast: [[new IPv4([224, 0, 0, 0]), 4]],
	      linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],
	      loopback: [[new IPv4([127, 0, 0, 0]), 8]],
	      carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],
	      "private": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],
	      reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]
	    };

	    IPv4.prototype.range = function() {
	      return ipaddr.subnetMatch(this, this.SpecialRanges);
	    };

	    IPv4.prototype.toIPv4MappedAddress = function() {
	      return ipaddr.IPv6.parse("::ffff:" + (this.toString()));
	    };

	    IPv4.prototype.prefixLengthFromSubnetMask = function() {
	      var cidr, i, k, octet, stop, zeros, zerotable;
	      zerotable = {
	        0: 8,
	        128: 7,
	        192: 6,
	        224: 5,
	        240: 4,
	        248: 3,
	        252: 2,
	        254: 1,
	        255: 0
	      };
	      cidr = 0;
	      stop = false;
	      for (i = k = 3; k >= 0; i = k += -1) {
	        octet = this.octets[i];
	        if (octet in zerotable) {
	          zeros = zerotable[octet];
	          if (stop && zeros !== 0) {
	            return null;
	          }
	          if (zeros !== 8) {
	            stop = true;
	          }
	          cidr += zeros;
	        } else {
	          return null;
	        }
	      }
	      return 32 - cidr;
	    };

	    return IPv4;

	  })();

	  ipv4Part = "(0?\\d+|0x[a-f0-9]+)";

	  ipv4Regexes = {
	    fourOctet: new RegExp("^" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$", 'i'),
	    longValue: new RegExp("^" + ipv4Part + "$", 'i')
	  };

	  ipaddr.IPv4.parser = function(string) {
	    var match, parseIntAuto, part, shift, value;
	    parseIntAuto = function(string) {
	      if (string[0] === "0" && string[1] !== "x") {
	        return parseInt(string, 8);
	      } else {
	        return parseInt(string);
	      }
	    };
	    if (match = string.match(ipv4Regexes.fourOctet)) {
	      return (function() {
	        var k, len, ref, results;
	        ref = match.slice(1, 6);
	        results = [];
	        for (k = 0, len = ref.length; k < len; k++) {
	          part = ref[k];
	          results.push(parseIntAuto(part));
	        }
	        return results;
	      })();
	    } else if (match = string.match(ipv4Regexes.longValue)) {
	      value = parseIntAuto(match[1]);
	      if (value > 0xffffffff || value < 0) {
	        throw new Error("ipaddr: address outside defined range");
	      }
	      return ((function() {
	        var k, results;
	        results = [];
	        for (shift = k = 0; k <= 24; shift = k += 8) {
	          results.push((value >> shift) & 0xff);
	        }
	        return results;
	      })()).reverse();
	    } else {
	      return null;
	    }
	  };

	  ipaddr.IPv6 = (function() {
	    function IPv6(parts, zoneId) {
	      var i, k, l, len, part, ref;
	      if (parts.length === 16) {
	        this.parts = [];
	        for (i = k = 0; k <= 14; i = k += 2) {
	          this.parts.push((parts[i] << 8) | parts[i + 1]);
	        }
	      } else if (parts.length === 8) {
	        this.parts = parts;
	      } else {
	        throw new Error("ipaddr: ipv6 part count should be 8 or 16");
	      }
	      ref = this.parts;
	      for (l = 0, len = ref.length; l < len; l++) {
	        part = ref[l];
	        if (!((0 <= part && part <= 0xffff))) {
	          throw new Error("ipaddr: ipv6 part should fit in 16 bits");
	        }
	      }
	      if (zoneId) {
	        this.zoneId = zoneId;
	      }
	    }

	    IPv6.prototype.kind = function() {
	      return 'ipv6';
	    };

	    IPv6.prototype.toString = function() {
	      return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, '::');
	    };

	    IPv6.prototype.toRFC5952String = function() {
	      var bestMatchIndex, bestMatchLength, match, regex, string;
	      regex = /((^|:)(0(:|$)){2,})/g;
	      string = this.toNormalizedString();
	      bestMatchIndex = 0;
	      bestMatchLength = -1;
	      while ((match = regex.exec(string))) {
	        if (match[0].length > bestMatchLength) {
	          bestMatchIndex = match.index;
	          bestMatchLength = match[0].length;
	        }
	      }
	      if (bestMatchLength < 0) {
	        return string;
	      }
	      return string.substring(0, bestMatchIndex) + '::' + string.substring(bestMatchIndex + bestMatchLength);
	    };

	    IPv6.prototype.toByteArray = function() {
	      var bytes, k, len, part, ref;
	      bytes = [];
	      ref = this.parts;
	      for (k = 0, len = ref.length; k < len; k++) {
	        part = ref[k];
	        bytes.push(part >> 8);
	        bytes.push(part & 0xff);
	      }
	      return bytes;
	    };

	    IPv6.prototype.toNormalizedString = function() {
	      var addr, part, suffix;
	      addr = ((function() {
	        var k, len, ref, results;
	        ref = this.parts;
	        results = [];
	        for (k = 0, len = ref.length; k < len; k++) {
	          part = ref[k];
	          results.push(part.toString(16));
	        }
	        return results;
	      }).call(this)).join(":");
	      suffix = '';
	      if (this.zoneId) {
	        suffix = '%' + this.zoneId;
	      }
	      return addr + suffix;
	    };

	    IPv6.prototype.toFixedLengthString = function() {
	      var addr, part, suffix;
	      addr = ((function() {
	        var k, len, ref, results;
	        ref = this.parts;
	        results = [];
	        for (k = 0, len = ref.length; k < len; k++) {
	          part = ref[k];
	          results.push(part.toString(16).padStart(4, '0'));
	        }
	        return results;
	      }).call(this)).join(":");
	      suffix = '';
	      if (this.zoneId) {
	        suffix = '%' + this.zoneId;
	      }
	      return addr + suffix;
	    };

	    IPv6.prototype.match = function(other, cidrRange) {
	      var ref;
	      if (cidrRange === void 0) {
	        ref = other, other = ref[0], cidrRange = ref[1];
	      }
	      if (other.kind() !== 'ipv6') {
	        throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");
	      }
	      return matchCIDR(this.parts, other.parts, 16, cidrRange);
	    };

	    IPv6.prototype.SpecialRanges = {
	      unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],
	      linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],
	      multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],
	      loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],
	      uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],
	      ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],
	      rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],
	      rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],
	      '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],
	      teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],
	      reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]
	    };

	    IPv6.prototype.range = function() {
	      return ipaddr.subnetMatch(this, this.SpecialRanges);
	    };

	    IPv6.prototype.isIPv4MappedAddress = function() {
	      return this.range() === 'ipv4Mapped';
	    };

	    IPv6.prototype.toIPv4Address = function() {
	      var high, low, ref;
	      if (!this.isIPv4MappedAddress()) {
	        throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");
	      }
	      ref = this.parts.slice(-2), high = ref[0], low = ref[1];
	      return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);
	    };

	    IPv6.prototype.prefixLengthFromSubnetMask = function() {
	      var cidr, i, k, part, stop, zeros, zerotable;
	      zerotable = {
	        0: 16,
	        32768: 15,
	        49152: 14,
	        57344: 13,
	        61440: 12,
	        63488: 11,
	        64512: 10,
	        65024: 9,
	        65280: 8,
	        65408: 7,
	        65472: 6,
	        65504: 5,
	        65520: 4,
	        65528: 3,
	        65532: 2,
	        65534: 1,
	        65535: 0
	      };
	      cidr = 0;
	      stop = false;
	      for (i = k = 7; k >= 0; i = k += -1) {
	        part = this.parts[i];
	        if (part in zerotable) {
	          zeros = zerotable[part];
	          if (stop && zeros !== 0) {
	            return null;
	          }
	          if (zeros !== 16) {
	            stop = true;
	          }
	          cidr += zeros;
	        } else {
	          return null;
	        }
	      }
	      return 128 - cidr;
	    };

	    return IPv6;

	  })();

	  ipv6Part = "(?:[0-9a-f]+::?)+";

	  zoneIndex = "%[0-9a-z]{1,}";

	  ipv6Regexes = {
	    zoneIndex: new RegExp(zoneIndex, 'i'),
	    "native": new RegExp("^(::)?(" + ipv6Part + ")?([0-9a-f]+)?(::)?(" + zoneIndex + ")?$", 'i'),
	    transitional: new RegExp(("^((?:" + ipv6Part + ")|(?:::)(?:" + ipv6Part + ")?)") + (ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part) + ("(" + zoneIndex + ")?$"), 'i')
	  };

	  expandIPv6 = function(string, parts) {
	    var colonCount, lastColon, part, replacement, replacementCount, zoneId;
	    if (string.indexOf('::') !== string.lastIndexOf('::')) {
	      return null;
	    }
	    zoneId = (string.match(ipv6Regexes['zoneIndex']) || [])[0];
	    if (zoneId) {
	      zoneId = zoneId.substring(1);
	      string = string.replace(/%.+$/, '');
	    }
	    colonCount = 0;
	    lastColon = -1;
	    while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {
	      colonCount++;
	    }
	    if (string.substr(0, 2) === '::') {
	      colonCount--;
	    }
	    if (string.substr(-2, 2) === '::') {
	      colonCount--;
	    }
	    if (colonCount > parts) {
	      return null;
	    }
	    replacementCount = parts - colonCount;
	    replacement = ':';
	    while (replacementCount--) {
	      replacement += '0:';
	    }
	    string = string.replace('::', replacement);
	    if (string[0] === ':') {
	      string = string.slice(1);
	    }
	    if (string[string.length - 1] === ':') {
	      string = string.slice(0, -1);
	    }
	    parts = (function() {
	      var k, len, ref, results;
	      ref = string.split(":");
	      results = [];
	      for (k = 0, len = ref.length; k < len; k++) {
	        part = ref[k];
	        results.push(parseInt(part, 16));
	      }
	      return results;
	    })();
	    return {
	      parts: parts,
	      zoneId: zoneId
	    };
	  };

	  ipaddr.IPv6.parser = function(string) {
	    var addr, k, len, match, octet, octets, zoneId;
	    if (ipv6Regexes['native'].test(string)) {
	      return expandIPv6(string, 8);
	    } else if (match = string.match(ipv6Regexes['transitional'])) {
	      zoneId = match[6] || '';
	      addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);
	      if (addr.parts) {
	        octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];
	        for (k = 0, len = octets.length; k < len; k++) {
	          octet = octets[k];
	          if (!((0 <= octet && octet <= 255))) {
	            return null;
	          }
	        }
	        addr.parts.push(octets[0] << 8 | octets[1]);
	        addr.parts.push(octets[2] << 8 | octets[3]);
	        return {
	          parts: addr.parts,
	          zoneId: addr.zoneId
	        };
	      }
	    }
	    return null;
	  };

	  ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function(string) {
	    return this.parser(string) !== null;
	  };

	  ipaddr.IPv4.isValid = function(string) {
	    try {
	      new this(this.parser(string));
	      return true;
	    } catch (error1) {
	      return false;
	    }
	  };

	  ipaddr.IPv4.isValidFourPartDecimal = function(string) {
	    if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){3}$/)) {
	      return true;
	    } else {
	      return false;
	    }
	  };

	  ipaddr.IPv6.isValid = function(string) {
	    var addr;
	    if (typeof string === "string" && string.indexOf(":") === -1) {
	      return false;
	    }
	    try {
	      addr = this.parser(string);
	      new this(addr.parts, addr.zoneId);
	      return true;
	    } catch (error1) {
	      return false;
	    }
	  };

	  ipaddr.IPv4.parse = function(string) {
	    var parts;
	    parts = this.parser(string);
	    if (parts === null) {
	      throw new Error("ipaddr: string is not formatted like ip address");
	    }
	    return new this(parts);
	  };

	  ipaddr.IPv6.parse = function(string) {
	    var addr;
	    addr = this.parser(string);
	    if (addr.parts === null) {
	      throw new Error("ipaddr: string is not formatted like ip address");
	    }
	    return new this(addr.parts, addr.zoneId);
	  };

	  ipaddr.IPv4.parseCIDR = function(string) {
	    var maskLength, match, parsed;
	    if (match = string.match(/^(.+)\/(\d+)$/)) {
	      maskLength = parseInt(match[2]);
	      if (maskLength >= 0 && maskLength <= 32) {
	        parsed = [this.parse(match[1]), maskLength];
	        Object.defineProperty(parsed, 'toString', {
	          value: function() {
	            return this.join('/');
	          }
	        });
	        return parsed;
	      }
	    }
	    throw new Error("ipaddr: string is not formatted like an IPv4 CIDR range");
	  };

	  ipaddr.IPv4.subnetMaskFromPrefixLength = function(prefix) {
	    var filledOctetCount, j, octets;
	    prefix = parseInt(prefix);
	    if (prefix < 0 || prefix > 32) {
	      throw new Error('ipaddr: invalid IPv4 prefix length');
	    }
	    octets = [0, 0, 0, 0];
	    j = 0;
	    filledOctetCount = Math.floor(prefix / 8);
	    while (j < filledOctetCount) {
	      octets[j] = 255;
	      j++;
	    }
	    if (filledOctetCount < 4) {
	      octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);
	    }
	    return new this(octets);
	  };

	  ipaddr.IPv4.broadcastAddressFromCIDR = function(string) {
	    var cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;
	    try {
	      cidr = this.parseCIDR(string);
	      ipInterfaceOctets = cidr[0].toByteArray();
	      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
	      octets = [];
	      i = 0;
	      while (i < 4) {
	        octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);
	        i++;
	      }
	      return new this(octets);
	    } catch (error1) {
	      throw new Error('ipaddr: the address does not have IPv4 CIDR format');
	    }
	  };

	  ipaddr.IPv4.networkAddressFromCIDR = function(string) {
	    var cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;
	    try {
	      cidr = this.parseCIDR(string);
	      ipInterfaceOctets = cidr[0].toByteArray();
	      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
	      octets = [];
	      i = 0;
	      while (i < 4) {
	        octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));
	        i++;
	      }
	      return new this(octets);
	    } catch (error1) {
	      throw new Error('ipaddr: the address does not have IPv4 CIDR format');
	    }
	  };

	  ipaddr.IPv6.parseCIDR = function(string) {
	    var maskLength, match, parsed;
	    if (match = string.match(/^(.+)\/(\d+)$/)) {
	      maskLength = parseInt(match[2]);
	      if (maskLength >= 0 && maskLength <= 128) {
	        parsed = [this.parse(match[1]), maskLength];
	        Object.defineProperty(parsed, 'toString', {
	          value: function() {
	            return this.join('/');
	          }
	        });
	        return parsed;
	      }
	    }
	    throw new Error("ipaddr: string is not formatted like an IPv6 CIDR range");
	  };

	  ipaddr.isValid = function(string) {
	    return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
	  };

	  ipaddr.parse = function(string) {
	    if (ipaddr.IPv6.isValid(string)) {
	      return ipaddr.IPv6.parse(string);
	    } else if (ipaddr.IPv4.isValid(string)) {
	      return ipaddr.IPv4.parse(string);
	    } else {
	      throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format");
	    }
	  };

	  ipaddr.parseCIDR = function(string) {
	    try {
	      return ipaddr.IPv6.parseCIDR(string);
	    } catch (error1) {
	      try {
	        return ipaddr.IPv4.parseCIDR(string);
	      } catch (error1) {
	        throw new Error("ipaddr: the address has neither IPv6 nor IPv4 CIDR format");
	      }
	    }
	  };

	  ipaddr.fromByteArray = function(bytes) {
	    var length;
	    length = bytes.length;
	    if (length === 4) {
	      return new ipaddr.IPv4(bytes);
	    } else if (length === 16) {
	      return new ipaddr.IPv6(bytes);
	    } else {
	      throw new Error("ipaddr: the binary input is neither an IPv6 nor IPv4 address");
	    }
	  };

	  ipaddr.process = function(string) {
	    var addr;
	    addr = this.parse(string);
	    if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {
	      return addr.toIPv4Address();
	    } else {
	      return addr;
	    }
	  };

	}).call(commonjsGlobal); 
} (ipaddr$1));

var ipaddrExports = ipaddr$1.exports;

/*!
 * proxy-addr
 * Copyright(c) 2014-2016 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

_package$8.exports = proxyaddr$1;
_package$8.exports.all = alladdrs;
_package$8.exports.compile = compile;

/**
 * Module dependencies.
 * @private
 */

var forwarded = _package$7;
var ipaddr = ipaddrExports;

/**
 * Variables.
 * @private
 */

var DIGIT_REGEXP = /^[0-9]+$/;
var isip = ipaddr.isValid;
var parseip = ipaddr.parse;

/**
 * Pre-defined IP ranges.
 * @private
 */

var IP_RANGES = {
  linklocal: ['169.254.0.0/16', 'fe80::/10'],
  loopback: ['127.0.0.1/8', '::1/128'],
  uniquelocal: ['10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16', 'fc00::/7']
};

/**
 * Get all addresses in the request, optionally stopping
 * at the first untrusted.
 *
 * @param {Object} request
 * @param {Function|Array|String} [trust]
 * @public
 */

function alladdrs (req, trust) {
  // get addresses
  var addrs = forwarded(req);

  if (!trust) {
    // Return all addresses
    return addrs
  }

  if (typeof trust !== 'function') {
    trust = compile(trust);
  }

  for (var i = 0; i < addrs.length - 1; i++) {
    if (trust(addrs[i], i)) continue

    addrs.length = i + 1;
  }

  return addrs
}

/**
 * Compile argument into trust function.
 *
 * @param {Array|String} val
 * @private
 */

function compile (val) {
  if (!val) {
    throw new TypeError('argument is required')
  }

  var trust;

  if (typeof val === 'string') {
    trust = [val];
  } else if (Array.isArray(val)) {
    trust = val.slice();
  } else {
    throw new TypeError('unsupported trust argument')
  }

  for (var i = 0; i < trust.length; i++) {
    val = trust[i];

    if (!Object.prototype.hasOwnProperty.call(IP_RANGES, val)) {
      continue
    }

    // Splice in pre-defined range
    val = IP_RANGES[val];
    trust.splice.apply(trust, [i, 1].concat(val));
    i += val.length - 1;
  }

  return compileTrust(compileRangeSubnets(trust))
}

/**
 * Compile `arr` elements into range subnets.
 *
 * @param {Array} arr
 * @private
 */

function compileRangeSubnets (arr) {
  var rangeSubnets = new Array(arr.length);

  for (var i = 0; i < arr.length; i++) {
    rangeSubnets[i] = parseipNotation(arr[i]);
  }

  return rangeSubnets
}

/**
 * Compile range subnet array into trust function.
 *
 * @param {Array} rangeSubnets
 * @private
 */

function compileTrust (rangeSubnets) {
  // Return optimized function based on length
  var len = rangeSubnets.length;
  return len === 0
    ? trustNone
    : len === 1
      ? trustSingle(rangeSubnets[0])
      : trustMulti(rangeSubnets)
}

/**
 * Parse IP notation string into range subnet.
 *
 * @param {String} note
 * @private
 */

function parseipNotation (note) {
  var pos = note.lastIndexOf('/');
  var str = pos !== -1
    ? note.substring(0, pos)
    : note;

  if (!isip(str)) {
    throw new TypeError('invalid IP address: ' + str)
  }

  var ip = parseip(str);

  if (pos === -1 && ip.kind() === 'ipv6' && ip.isIPv4MappedAddress()) {
    // Store as IPv4
    ip = ip.toIPv4Address();
  }

  var max = ip.kind() === 'ipv6'
    ? 128
    : 32;

  var range = pos !== -1
    ? note.substring(pos + 1, note.length)
    : null;

  if (range === null) {
    range = max;
  } else if (DIGIT_REGEXP.test(range)) {
    range = parseInt(range, 10);
  } else if (ip.kind() === 'ipv4' && isip(range)) {
    range = parseNetmask(range);
  } else {
    range = null;
  }

  if (range <= 0 || range > max) {
    throw new TypeError('invalid range on address: ' + note)
  }

  return [ip, range]
}

/**
 * Parse netmask string into CIDR range.
 *
 * @param {String} netmask
 * @private
 */

function parseNetmask (netmask) {
  var ip = parseip(netmask);
  var kind = ip.kind();

  return kind === 'ipv4'
    ? ip.prefixLengthFromSubnetMask()
    : null
}

/**
 * Determine address of proxied request.
 *
 * @param {Object} request
 * @param {Function|Array|String} trust
 * @public
 */

function proxyaddr$1 (req, trust) {
  if (!req) {
    throw new TypeError('req argument is required')
  }

  if (!trust) {
    throw new TypeError('trust argument is required')
  }

  var addrs = alladdrs(req, trust);
  var addr = addrs[addrs.length - 1];

  return addr
}

/**
 * Static trust function to trust nothing.
 *
 * @private
 */

function trustNone () {
  return false
}

/**
 * Compile trust function for multiple subnets.
 *
 * @param {Array} subnets
 * @private
 */

function trustMulti (subnets) {
  return function trust (addr) {
    if (!isip(addr)) return false

    var ip = parseip(addr);
    var ipconv;
    var kind = ip.kind();

    for (var i = 0; i < subnets.length; i++) {
      var subnet = subnets[i];
      var subnetip = subnet[0];
      var subnetkind = subnetip.kind();
      var subnetrange = subnet[1];
      var trusted = ip;

      if (kind !== subnetkind) {
        if (subnetkind === 'ipv4' && !ip.isIPv4MappedAddress()) {
          // Incompatible IP addresses
          continue
        }

        if (!ipconv) {
          // Convert IP to match subnet IP kind
          ipconv = subnetkind === 'ipv4'
            ? ip.toIPv4Address()
            : ip.toIPv4MappedAddress();
        }

        trusted = ipconv;
      }

      if (trusted.match(subnetip, subnetrange)) {
        return true
      }
    }

    return false
  }
}

/**
 * Compile trust function for single subnet.
 *
 * @param {Object} subnet
 * @private
 */

function trustSingle (subnet) {
  var subnetip = subnet[0];
  var subnetkind = subnetip.kind();
  var subnetisipv4 = subnetkind === 'ipv4';
  var subnetrange = subnet[1];

  return function trust (addr) {
    if (!isip(addr)) return false

    var ip = parseip(addr);
    var kind = ip.kind();

    if (kind !== subnetkind) {
      if (subnetisipv4 && !ip.isIPv4MappedAddress()) {
        // Incompatible IP addresses
        return false
      }

      // Convert IP to match subnet IP kind
      ip = subnetisipv4
        ? ip.toIPv4Address()
        : ip.toIPv4MappedAddress();
    }

    return ip.match(subnetip, subnetrange)
  }
}

var _packageExports$2 = _package$8.exports;

/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

(function (exports) {

	/**
	 * Module dependencies.
	 * @api private
	 */

	var Buffer = _packageExports$5.Buffer;
	var contentDisposition = _packageExports$4;
	var contentType = _package$O;
	var deprecate = _package$Q('express');
	var flatten = arrayFlatten_1;
	var mime = _packageExports$3.mime;
	var etag = _package$c;
	var proxyaddr = _packageExports$2;
	var qs = requireLib();
	var querystring = require$$8;

	/**
	 * Return strong ETag for `body`.
	 *
	 * @param {String|Buffer} body
	 * @param {String} [encoding]
	 * @return {String}
	 * @api private
	 */

	exports.etag = createETagGenerator({ weak: false });

	/**
	 * Return weak ETag for `body`.
	 *
	 * @param {String|Buffer} body
	 * @param {String} [encoding]
	 * @return {String}
	 * @api private
	 */

	exports.wetag = createETagGenerator({ weak: true });

	/**
	 * Check if `path` looks absolute.
	 *
	 * @param {String} path
	 * @return {Boolean}
	 * @api private
	 */

	exports.isAbsolute = function(path){
	  if ('/' === path[0]) return true;
	  if (':' === path[1] && ('\\' === path[2] || '/' === path[2])) return true; // Windows device path
	  if ('\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path
	};

	/**
	 * Flatten the given `arr`.
	 *
	 * @param {Array} arr
	 * @return {Array}
	 * @api private
	 */

	exports.flatten = deprecate.function(flatten,
	  'utils.flatten: use array-flatten npm module instead');

	/**
	 * Normalize the given `type`, for example "html" becomes "text/html".
	 *
	 * @param {String} type
	 * @return {Object}
	 * @api private
	 */

	exports.normalizeType = function(type){
	  return ~type.indexOf('/')
	    ? acceptParams(type)
	    : { value: mime.lookup(type), params: {} };
	};

	/**
	 * Normalize `types`, for example "html" becomes "text/html".
	 *
	 * @param {Array} types
	 * @return {Array}
	 * @api private
	 */

	exports.normalizeTypes = function(types){
	  var ret = [];

	  for (var i = 0; i < types.length; ++i) {
	    ret.push(exports.normalizeType(types[i]));
	  }

	  return ret;
	};

	/**
	 * Generate Content-Disposition header appropriate for the filename.
	 * non-ascii filenames are urlencoded and a filename* parameter is added
	 *
	 * @param {String} filename
	 * @return {String}
	 * @api private
	 */

	exports.contentDisposition = deprecate.function(contentDisposition,
	  'utils.contentDisposition: use content-disposition npm module instead');

	/**
	 * Parse accept params `str` returning an
	 * object with `.value`, `.quality` and `.params`.
	 * also includes `.originalIndex` for stable sorting
	 *
	 * @param {String} str
	 * @param {Number} index
	 * @return {Object}
	 * @api private
	 */

	function acceptParams(str, index) {
	  var parts = str.split(/ *; */);
	  var ret = { value: parts[0], quality: 1, params: {}, originalIndex: index };

	  for (var i = 1; i < parts.length; ++i) {
	    var pms = parts[i].split(/ *= */);
	    if ('q' === pms[0]) {
	      ret.quality = parseFloat(pms[1]);
	    } else {
	      ret.params[pms[0]] = pms[1];
	    }
	  }

	  return ret;
	}

	/**
	 * Compile "etag" value to function.
	 *
	 * @param  {Boolean|String|Function} val
	 * @return {Function}
	 * @api private
	 */

	exports.compileETag = function(val) {
	  var fn;

	  if (typeof val === 'function') {
	    return val;
	  }

	  switch (val) {
	    case true:
	    case 'weak':
	      fn = exports.wetag;
	      break;
	    case false:
	      break;
	    case 'strong':
	      fn = exports.etag;
	      break;
	    default:
	      throw new TypeError('unknown value for etag function: ' + val);
	  }

	  return fn;
	};

	/**
	 * Compile "query parser" value to function.
	 *
	 * @param  {String|Function} val
	 * @return {Function}
	 * @api private
	 */

	exports.compileQueryParser = function compileQueryParser(val) {
	  var fn;

	  if (typeof val === 'function') {
	    return val;
	  }

	  switch (val) {
	    case true:
	    case 'simple':
	      fn = querystring.parse;
	      break;
	    case false:
	      fn = newObject;
	      break;
	    case 'extended':
	      fn = parseExtendedQueryString;
	      break;
	    default:
	      throw new TypeError('unknown value for query parser function: ' + val);
	  }

	  return fn;
	};

	/**
	 * Compile "proxy trust" value to function.
	 *
	 * @param  {Boolean|String|Number|Array|Function} val
	 * @return {Function}
	 * @api private
	 */

	exports.compileTrust = function(val) {
	  if (typeof val === 'function') return val;

	  if (val === true) {
	    // Support plain true/false
	    return function(){ return true };
	  }

	  if (typeof val === 'number') {
	    // Support trusting hop count
	    return function(a, i){ return i < val };
	  }

	  if (typeof val === 'string') {
	    // Support comma-separated values
	    val = val.split(',')
	      .map(function (v) { return v.trim() });
	  }

	  return proxyaddr.compile(val || []);
	};

	/**
	 * Set the charset in a given Content-Type string.
	 *
	 * @param {String} type
	 * @param {String} charset
	 * @return {String}
	 * @api private
	 */

	exports.setCharset = function setCharset(type, charset) {
	  if (!type || !charset) {
	    return type;
	  }

	  // parse type
	  var parsed = contentType.parse(type);

	  // set charset
	  parsed.parameters.charset = charset;

	  // format type
	  return contentType.format(parsed);
	};

	/**
	 * Create an ETag generator function, generating ETags with
	 * the given options.
	 *
	 * @param {object} options
	 * @return {function}
	 * @private
	 */

	function createETagGenerator (options) {
	  return function generateETag (body, encoding) {
	    var buf = !Buffer.isBuffer(body)
	      ? Buffer.from(body, encoding)
	      : body;

	    return etag(buf, options)
	  }
	}

	/**
	 * Parse an extended query string with qs.
	 *
	 * @return {Object}
	 * @private
	 */

	function parseExtendedQueryString(str) {
	  return qs.parse(str, {
	    allowPrototypes: true
	  });
	}

	/**
	 * Return new empty object.
	 *
	 * @return {Object}
	 * @api private
	 */

	function newObject() {
	  return {};
	} 
} (utils$1));

/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

(function (module, exports) {

	/**
	 * Module dependencies.
	 * @private
	 */

	var finalhandler = _package$j;
	var Router = routerExports;
	var methods = _package$h;
	var middleware = init;
	var query = requireQuery();
	var debug = srcExports('express:application');
	var View = view;
	var http = require$$0$7;
	var compileETag = utils$1.compileETag;
	var compileQueryParser = utils$1.compileQueryParser;
	var compileTrust = utils$1.compileTrust;
	var deprecate = _package$Q('express');
	var flatten = arrayFlatten_1;
	var merge = _packageExports$6;
	var resolve = path$6.resolve;
	var setPrototypeOf = _package$M;

	/**
	 * Module variables.
	 * @private
	 */

	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var slice = Array.prototype.slice;

	/**
	 * Application prototype.
	 */

	var app = module.exports = {};

	/**
	 * Variable for trust proxy inheritance back-compat
	 * @private
	 */

	var trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';

	/**
	 * Initialize the server.
	 *
	 *   - setup default configuration
	 *   - setup default middleware
	 *   - setup route reflection methods
	 *
	 * @private
	 */

	app.init = function init() {
	  this.cache = {};
	  this.engines = {};
	  this.settings = {};

	  this.defaultConfiguration();
	};

	/**
	 * Initialize application configuration.
	 * @private
	 */

	app.defaultConfiguration = function defaultConfiguration() {
	  var env = process.env.NODE_ENV || 'development';

	  // default settings
	  this.enable('x-powered-by');
	  this.set('etag', 'weak');
	  this.set('env', env);
	  this.set('query parser', 'extended');
	  this.set('subdomain offset', 2);
	  this.set('trust proxy', false);

	  // trust proxy inherit back-compat
	  Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
	    configurable: true,
	    value: true
	  });

	  debug('booting in %s mode', env);

	  this.on('mount', function onmount(parent) {
	    // inherit trust proxy
	    if (this.settings[trustProxyDefaultSymbol] === true
	      && typeof parent.settings['trust proxy fn'] === 'function') {
	      delete this.settings['trust proxy'];
	      delete this.settings['trust proxy fn'];
	    }

	    // inherit protos
	    setPrototypeOf(this.request, parent.request);
	    setPrototypeOf(this.response, parent.response);
	    setPrototypeOf(this.engines, parent.engines);
	    setPrototypeOf(this.settings, parent.settings);
	  });

	  // setup locals
	  this.locals = Object.create(null);

	  // top-most app is mounted at /
	  this.mountpath = '/';

	  // default locals
	  this.locals.settings = this.settings;

	  // default configuration
	  this.set('view', View);
	  this.set('views', resolve('views'));
	  this.set('jsonp callback name', 'callback');

	  if (env === 'production') {
	    this.enable('view cache');
	  }

	  Object.defineProperty(this, 'router', {
	    get: function() {
	      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
	    }
	  });
	};

	/**
	 * lazily adds the base router if it has not yet been added.
	 *
	 * We cannot add the base router in the defaultConfiguration because
	 * it reads app settings which might be set after that has run.
	 *
	 * @private
	 */
	app.lazyrouter = function lazyrouter() {
	  if (!this._router) {
	    this._router = new Router({
	      caseSensitive: this.enabled('case sensitive routing'),
	      strict: this.enabled('strict routing')
	    });

	    this._router.use(query(this.get('query parser fn')));
	    this._router.use(middleware.init(this));
	  }
	};

	/**
	 * Dispatch a req, res pair into the application. Starts pipeline processing.
	 *
	 * If no callback is provided, then default error handlers will respond
	 * in the event of an error bubbling through the stack.
	 *
	 * @private
	 */

	app.handle = function handle(req, res, callback) {
	  var router = this._router;

	  // final handler
	  var done = callback || finalhandler(req, res, {
	    env: this.get('env'),
	    onerror: logerror.bind(this)
	  });

	  // no routes
	  if (!router) {
	    debug('no routes defined on app');
	    done();
	    return;
	  }

	  router.handle(req, res, done);
	};

	/**
	 * Proxy `Router#use()` to add middleware to the app router.
	 * See Router#use() documentation for details.
	 *
	 * If the _fn_ parameter is an express app, then it will be
	 * mounted at the _route_ specified.
	 *
	 * @public
	 */

	app.use = function use(fn) {
	  var offset = 0;
	  var path = '/';

	  // default path to '/'
	  // disambiguate app.use([fn])
	  if (typeof fn !== 'function') {
	    var arg = fn;

	    while (Array.isArray(arg) && arg.length !== 0) {
	      arg = arg[0];
	    }

	    // first arg is the path
	    if (typeof arg !== 'function') {
	      offset = 1;
	      path = fn;
	    }
	  }

	  var fns = flatten(slice.call(arguments, offset));

	  if (fns.length === 0) {
	    throw new TypeError('app.use() requires a middleware function')
	  }

	  // setup router
	  this.lazyrouter();
	  var router = this._router;

	  fns.forEach(function (fn) {
	    // non-express app
	    if (!fn || !fn.handle || !fn.set) {
	      return router.use(path, fn);
	    }

	    debug('.use app under %s', path);
	    fn.mountpath = path;
	    fn.parent = this;

	    // restore .app property on req and res
	    router.use(path, function mounted_app(req, res, next) {
	      var orig = req.app;
	      fn.handle(req, res, function (err) {
	        setPrototypeOf(req, orig.request);
	        setPrototypeOf(res, orig.response);
	        next(err);
	      });
	    });

	    // mounted an app
	    fn.emit('mount', this);
	  }, this);

	  return this;
	};

	/**
	 * Proxy to the app `Router#route()`
	 * Returns a new `Route` instance for the _path_.
	 *
	 * Routes are isolated middleware stacks for specific paths.
	 * See the Route api docs for details.
	 *
	 * @public
	 */

	app.route = function route(path) {
	  this.lazyrouter();
	  return this._router.route(path);
	};

	/**
	 * Register the given template engine callback `fn`
	 * as `ext`.
	 *
	 * By default will `require()` the engine based on the
	 * file extension. For example if you try to render
	 * a "foo.ejs" file Express will invoke the following internally:
	 *
	 *     app.engine('ejs', require('ejs').__express);
	 *
	 * For engines that do not provide `.__express` out of the box,
	 * or if you wish to "map" a different extension to the template engine
	 * you may use this method. For example mapping the EJS template engine to
	 * ".html" files:
	 *
	 *     app.engine('html', require('ejs').renderFile);
	 *
	 * In this case EJS provides a `.renderFile()` method with
	 * the same signature that Express expects: `(path, options, callback)`,
	 * though note that it aliases this method as `ejs.__express` internally
	 * so if you're using ".ejs" extensions you don't need to do anything.
	 *
	 * Some template engines do not follow this convention, the
	 * [Consolidate.js](https://github.com/tj/consolidate.js)
	 * library was created to map all of node's popular template
	 * engines to follow this convention, thus allowing them to
	 * work seamlessly within Express.
	 *
	 * @param {String} ext
	 * @param {Function} fn
	 * @return {app} for chaining
	 * @public
	 */

	app.engine = function engine(ext, fn) {
	  if (typeof fn !== 'function') {
	    throw new Error('callback function required');
	  }

	  // get file extension
	  var extension = ext[0] !== '.'
	    ? '.' + ext
	    : ext;

	  // store engine
	  this.engines[extension] = fn;

	  return this;
	};

	/**
	 * Proxy to `Router#param()` with one added api feature. The _name_ parameter
	 * can be an array of names.
	 *
	 * See the Router#param() docs for more details.
	 *
	 * @param {String|Array} name
	 * @param {Function} fn
	 * @return {app} for chaining
	 * @public
	 */

	app.param = function param(name, fn) {
	  this.lazyrouter();

	  if (Array.isArray(name)) {
	    for (var i = 0; i < name.length; i++) {
	      this.param(name[i], fn);
	    }

	    return this;
	  }

	  this._router.param(name, fn);

	  return this;
	};

	/**
	 * Assign `setting` to `val`, or return `setting`'s value.
	 *
	 *    app.set('foo', 'bar');
	 *    app.set('foo');
	 *    // => "bar"
	 *
	 * Mounted servers inherit their parent server's settings.
	 *
	 * @param {String} setting
	 * @param {*} [val]
	 * @return {Server} for chaining
	 * @public
	 */

	app.set = function set(setting, val) {
	  if (arguments.length === 1) {
	    // app.get(setting)
	    var settings = this.settings;

	    while (settings && settings !== Object.prototype) {
	      if (hasOwnProperty.call(settings, setting)) {
	        return settings[setting]
	      }

	      settings = Object.getPrototypeOf(settings);
	    }

	    return undefined
	  }

	  debug('set "%s" to %o', setting, val);

	  // set value
	  this.settings[setting] = val;

	  // trigger matched settings
	  switch (setting) {
	    case 'etag':
	      this.set('etag fn', compileETag(val));
	      break;
	    case 'query parser':
	      this.set('query parser fn', compileQueryParser(val));
	      break;
	    case 'trust proxy':
	      this.set('trust proxy fn', compileTrust(val));

	      // trust proxy inherit back-compat
	      Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
	        configurable: true,
	        value: false
	      });

	      break;
	  }

	  return this;
	};

	/**
	 * Return the app's absolute pathname
	 * based on the parent(s) that have
	 * mounted it.
	 *
	 * For example if the application was
	 * mounted as "/admin", which itself
	 * was mounted as "/blog" then the
	 * return value would be "/blog/admin".
	 *
	 * @return {String}
	 * @private
	 */

	app.path = function path() {
	  return this.parent
	    ? this.parent.path() + this.mountpath
	    : '';
	};

	/**
	 * Check if `setting` is enabled (truthy).
	 *
	 *    app.enabled('foo')
	 *    // => false
	 *
	 *    app.enable('foo')
	 *    app.enabled('foo')
	 *    // => true
	 *
	 * @param {String} setting
	 * @return {Boolean}
	 * @public
	 */

	app.enabled = function enabled(setting) {
	  return Boolean(this.set(setting));
	};

	/**
	 * Check if `setting` is disabled.
	 *
	 *    app.disabled('foo')
	 *    // => true
	 *
	 *    app.enable('foo')
	 *    app.disabled('foo')
	 *    // => false
	 *
	 * @param {String} setting
	 * @return {Boolean}
	 * @public
	 */

	app.disabled = function disabled(setting) {
	  return !this.set(setting);
	};

	/**
	 * Enable `setting`.
	 *
	 * @param {String} setting
	 * @return {app} for chaining
	 * @public
	 */

	app.enable = function enable(setting) {
	  return this.set(setting, true);
	};

	/**
	 * Disable `setting`.
	 *
	 * @param {String} setting
	 * @return {app} for chaining
	 * @public
	 */

	app.disable = function disable(setting) {
	  return this.set(setting, false);
	};

	/**
	 * Delegate `.VERB(...)` calls to `router.VERB(...)`.
	 */

	methods.forEach(function(method){
	  app[method] = function(path){
	    if (method === 'get' && arguments.length === 1) {
	      // app.get(setting)
	      return this.set(path);
	    }

	    this.lazyrouter();

	    var route = this._router.route(path);
	    route[method].apply(route, slice.call(arguments, 1));
	    return this;
	  };
	});

	/**
	 * Special-cased "all" method, applying the given route `path`,
	 * middleware, and callback to _every_ HTTP method.
	 *
	 * @param {String} path
	 * @param {Function} ...
	 * @return {app} for chaining
	 * @public
	 */

	app.all = function all(path) {
	  this.lazyrouter();

	  var route = this._router.route(path);
	  var args = slice.call(arguments, 1);

	  for (var i = 0; i < methods.length; i++) {
	    route[methods[i]].apply(route, args);
	  }

	  return this;
	};

	// del -> delete alias

	app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');

	/**
	 * Render the given view `name` name with `options`
	 * and a callback accepting an error and the
	 * rendered template string.
	 *
	 * Example:
	 *
	 *    app.render('email', { name: 'Tobi' }, function(err, html){
	 *      // ...
	 *    })
	 *
	 * @param {String} name
	 * @param {Object|Function} options or fn
	 * @param {Function} callback
	 * @public
	 */

	app.render = function render(name, options, callback) {
	  var cache = this.cache;
	  var done = callback;
	  var engines = this.engines;
	  var opts = options;
	  var renderOptions = {};
	  var view;

	  // support callback function as second arg
	  if (typeof options === 'function') {
	    done = options;
	    opts = {};
	  }

	  // merge app.locals
	  merge(renderOptions, this.locals);

	  // merge options._locals
	  if (opts._locals) {
	    merge(renderOptions, opts._locals);
	  }

	  // merge options
	  merge(renderOptions, opts);

	  // set .cache unless explicitly provided
	  if (renderOptions.cache == null) {
	    renderOptions.cache = this.enabled('view cache');
	  }

	  // primed cache
	  if (renderOptions.cache) {
	    view = cache[name];
	  }

	  // view
	  if (!view) {
	    var View = this.get('view');

	    view = new View(name, {
	      defaultEngine: this.get('view engine'),
	      root: this.get('views'),
	      engines: engines
	    });

	    if (!view.path) {
	      var dirs = Array.isArray(view.root) && view.root.length > 1
	        ? 'directories "' + view.root.slice(0, -1).join('", "') + '" or "' + view.root[view.root.length - 1] + '"'
	        : 'directory "' + view.root + '"';
	      var err = new Error('Failed to lookup view "' + name + '" in views ' + dirs);
	      err.view = view;
	      return done(err);
	    }

	    // prime the cache
	    if (renderOptions.cache) {
	      cache[name] = view;
	    }
	  }

	  // render
	  tryRender(view, renderOptions, done);
	};

	/**
	 * Listen for connections.
	 *
	 * A node `http.Server` is returned, with this
	 * application (which is a `Function`) as its
	 * callback. If you wish to create both an HTTP
	 * and HTTPS server you may do so with the "http"
	 * and "https" modules as shown here:
	 *
	 *    var http = require('http')
	 *      , https = require('https')
	 *      , express = require('express')
	 *      , app = express();
	 *
	 *    http.createServer(app).listen(80);
	 *    https.createServer({ ... }, app).listen(443);
	 *
	 * @return {http.Server}
	 * @public
	 */

	app.listen = function listen() {
	  var server = http.createServer(this);
	  return server.listen.apply(server, arguments);
	};

	/**
	 * Log error using console.error.
	 *
	 * @param {Error} err
	 * @private
	 */

	function logerror(err) {
	  /* istanbul ignore next */
	  if (this.get('env') !== 'test') console.error(err.stack || err.toString());
	}

	/**
	 * Try rendering a view.
	 * @private
	 */

	function tryRender(view, options, callback) {
	  try {
	    view.render(options, callback);
	  } catch (err) {
	    callback(err);
	  }
	} 
} (application));

var applicationExports = application.exports;

var _package$6 = {exports: {}};

var charset = {exports: {}};

/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

charset.exports = preferredCharsets$1;
charset.exports.preferredCharsets = preferredCharsets$1;

/**
 * Module variables.
 * @private
 */

var simpleCharsetRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;

/**
 * Parse the Accept-Charset header.
 * @private
 */

function parseAcceptCharset(accept) {
  var accepts = accept.split(',');

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var charset = parseCharset(accepts[i].trim(), i);

    if (charset) {
      accepts[j++] = charset;
    }
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse a charset from the Accept-Charset header.
 * @private
 */

function parseCharset(str, i) {
  var match = simpleCharsetRegExp.exec(str);
  if (!match) return null;

  var charset = match[1];
  var q = 1;
  if (match[2]) {
    var params = match[2].split(';');
    for (var j = 0; j < params.length; j++) {
      var p = params[j].trim().split('=');
      if (p[0] === 'q') {
        q = parseFloat(p[1]);
        break;
      }
    }
  }

  return {
    charset: charset,
    q: q,
    i: i
  };
}

/**
 * Get the priority of a charset.
 * @private
 */

function getCharsetPriority(charset, accepted, index) {
  var priority = {o: -1, q: 0, s: 0};

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify$3(charset, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the charset.
 * @private
 */

function specify$3(charset, spec, index) {
  var s = 0;
  if(spec.charset.toLowerCase() === charset.toLowerCase()){
    s |= 1;
  } else if (spec.charset !== '*' ) {
    return null
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s
  }
}

/**
 * Get the preferred charsets from an Accept-Charset header.
 * @public
 */

function preferredCharsets$1(accept, provided) {
  // RFC 2616 sec 14.2: no header = *
  var accepts = parseAcceptCharset(accept === undefined ? '*' : accept || '');

  if (!provided) {
    // sorted list of all charsets
    return accepts
      .filter(isQuality$3)
      .sort(compareSpecs$3)
      .map(getFullCharset);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getCharsetPriority(type, accepts, index);
  });

  // sorted list of accepted charsets
  return priorities.filter(isQuality$3).sort(compareSpecs$3).map(function getCharset(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs$3(a, b) {
  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
}

/**
 * Get full charset string.
 * @private
 */

function getFullCharset(spec) {
  return spec.charset;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality$3(spec) {
  return spec.q > 0;
}

var charsetExports = charset.exports;

var encoding = {exports: {}};

/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

encoding.exports = preferredEncodings$1;
encoding.exports.preferredEncodings = preferredEncodings$1;

/**
 * Module variables.
 * @private
 */

var simpleEncodingRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;

/**
 * Parse the Accept-Encoding header.
 * @private
 */

function parseAcceptEncoding(accept) {
  var accepts = accept.split(',');
  var hasIdentity = false;
  var minQuality = 1;

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var encoding = parseEncoding(accepts[i].trim(), i);

    if (encoding) {
      accepts[j++] = encoding;
      hasIdentity = hasIdentity || specify$2('identity', encoding);
      minQuality = Math.min(minQuality, encoding.q || 1);
    }
  }

  if (!hasIdentity) {
    /*
     * If identity doesn't explicitly appear in the accept-encoding header,
     * it's added to the list of acceptable encoding with the lowest q
     */
    accepts[j++] = {
      encoding: 'identity',
      q: minQuality,
      i: i
    };
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse an encoding from the Accept-Encoding header.
 * @private
 */

function parseEncoding(str, i) {
  var match = simpleEncodingRegExp.exec(str);
  if (!match) return null;

  var encoding = match[1];
  var q = 1;
  if (match[2]) {
    var params = match[2].split(';');
    for (var j = 0; j < params.length; j++) {
      var p = params[j].trim().split('=');
      if (p[0] === 'q') {
        q = parseFloat(p[1]);
        break;
      }
    }
  }

  return {
    encoding: encoding,
    q: q,
    i: i
  };
}

/**
 * Get the priority of an encoding.
 * @private
 */

function getEncodingPriority(encoding, accepted, index) {
  var priority = {o: -1, q: 0, s: 0};

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify$2(encoding, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the encoding.
 * @private
 */

function specify$2(encoding, spec, index) {
  var s = 0;
  if(spec.encoding.toLowerCase() === encoding.toLowerCase()){
    s |= 1;
  } else if (spec.encoding !== '*' ) {
    return null
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s
  }
}
/**
 * Get the preferred encodings from an Accept-Encoding header.
 * @public
 */

function preferredEncodings$1(accept, provided) {
  var accepts = parseAcceptEncoding(accept || '');

  if (!provided) {
    // sorted list of all encodings
    return accepts
      .filter(isQuality$2)
      .sort(compareSpecs$2)
      .map(getFullEncoding);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getEncodingPriority(type, accepts, index);
  });

  // sorted list of accepted encodings
  return priorities.filter(isQuality$2).sort(compareSpecs$2).map(function getEncoding(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs$2(a, b) {
  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
}

/**
 * Get full encoding string.
 * @private
 */

function getFullEncoding(spec) {
  return spec.encoding;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality$2(spec) {
  return spec.q > 0;
}

var encodingExports = encoding.exports;

var language = {exports: {}};

/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

language.exports = preferredLanguages$1;
language.exports.preferredLanguages = preferredLanguages$1;

/**
 * Module variables.
 * @private
 */

var simpleLanguageRegExp = /^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;

/**
 * Parse the Accept-Language header.
 * @private
 */

function parseAcceptLanguage(accept) {
  var accepts = accept.split(',');

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var language = parseLanguage(accepts[i].trim(), i);

    if (language) {
      accepts[j++] = language;
    }
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse a language from the Accept-Language header.
 * @private
 */

function parseLanguage(str, i) {
  var match = simpleLanguageRegExp.exec(str);
  if (!match) return null;

  var prefix = match[1];
  var suffix = match[2];
  var full = prefix;

  if (suffix) full += "-" + suffix;

  var q = 1;
  if (match[3]) {
    var params = match[3].split(';');
    for (var j = 0; j < params.length; j++) {
      var p = params[j].split('=');
      if (p[0] === 'q') q = parseFloat(p[1]);
    }
  }

  return {
    prefix: prefix,
    suffix: suffix,
    q: q,
    i: i,
    full: full
  };
}

/**
 * Get the priority of a language.
 * @private
 */

function getLanguagePriority(language, accepted, index) {
  var priority = {o: -1, q: 0, s: 0};

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify$1(language, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the language.
 * @private
 */

function specify$1(language, spec, index) {
  var p = parseLanguage(language);
  if (!p) return null;
  var s = 0;
  if(spec.full.toLowerCase() === p.full.toLowerCase()){
    s |= 4;
  } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {
    s |= 2;
  } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {
    s |= 1;
  } else if (spec.full !== '*' ) {
    return null
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s
  }
}
/**
 * Get the preferred languages from an Accept-Language header.
 * @public
 */

function preferredLanguages$1(accept, provided) {
  // RFC 2616 sec 14.4: no header = *
  var accepts = parseAcceptLanguage(accept === undefined ? '*' : accept || '');

  if (!provided) {
    // sorted list of all languages
    return accepts
      .filter(isQuality$1)
      .sort(compareSpecs$1)
      .map(getFullLanguage);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getLanguagePriority(type, accepts, index);
  });

  // sorted list of accepted languages
  return priorities.filter(isQuality$1).sort(compareSpecs$1).map(function getLanguage(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs$1(a, b) {
  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
}

/**
 * Get full language string.
 * @private
 */

function getFullLanguage(spec) {
  return spec.full;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality$1(spec) {
  return spec.q > 0;
}

var languageExports = language.exports;

var mediaType = {exports: {}};

/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

mediaType.exports = preferredMediaTypes$1;
mediaType.exports.preferredMediaTypes = preferredMediaTypes$1;

/**
 * Module variables.
 * @private
 */

var simpleMediaTypeRegExp = /^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;

/**
 * Parse the Accept header.
 * @private
 */

function parseAccept(accept) {
  var accepts = splitMediaTypes(accept);

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var mediaType = parseMediaType(accepts[i].trim(), i);

    if (mediaType) {
      accepts[j++] = mediaType;
    }
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse a media type from the Accept header.
 * @private
 */

function parseMediaType(str, i) {
  var match = simpleMediaTypeRegExp.exec(str);
  if (!match) return null;

  var params = Object.create(null);
  var q = 1;
  var subtype = match[2];
  var type = match[1];

  if (match[3]) {
    var kvps = splitParameters(match[3]).map(splitKeyValuePair);

    for (var j = 0; j < kvps.length; j++) {
      var pair = kvps[j];
      var key = pair[0].toLowerCase();
      var val = pair[1];

      // get the value, unwrapping quotes
      var value = val && val[0] === '"' && val[val.length - 1] === '"'
        ? val.substr(1, val.length - 2)
        : val;

      if (key === 'q') {
        q = parseFloat(value);
        break;
      }

      // store parameter
      params[key] = value;
    }
  }

  return {
    type: type,
    subtype: subtype,
    params: params,
    q: q,
    i: i
  };
}

/**
 * Get the priority of a media type.
 * @private
 */

function getMediaTypePriority(type, accepted, index) {
  var priority = {o: -1, q: 0, s: 0};

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify(type, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the media type.
 * @private
 */

function specify(type, spec, index) {
  var p = parseMediaType(type);
  var s = 0;

  if (!p) {
    return null;
  }

  if(spec.type.toLowerCase() == p.type.toLowerCase()) {
    s |= 4;
  } else if(spec.type != '*') {
    return null;
  }

  if(spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {
    s |= 2;
  } else if(spec.subtype != '*') {
    return null;
  }

  var keys = Object.keys(spec.params);
  if (keys.length > 0) {
    if (keys.every(function (k) {
      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();
    })) {
      s |= 1;
    } else {
      return null
    }
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s,
  }
}

/**
 * Get the preferred media types from an Accept header.
 * @public
 */

function preferredMediaTypes$1(accept, provided) {
  // RFC 2616 sec 14.2: no header = */*
  var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');

  if (!provided) {
    // sorted list of all types
    return accepts
      .filter(isQuality)
      .sort(compareSpecs)
      .map(getFullType);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getMediaTypePriority(type, accepts, index);
  });

  // sorted list of accepted types
  return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs(a, b) {
  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
}

/**
 * Get full type string.
 * @private
 */

function getFullType(spec) {
  return spec.type + '/' + spec.subtype;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality(spec) {
  return spec.q > 0;
}

/**
 * Count the number of quotes in a string.
 * @private
 */

function quoteCount(string) {
  var count = 0;
  var index = 0;

  while ((index = string.indexOf('"', index)) !== -1) {
    count++;
    index++;
  }

  return count;
}

/**
 * Split a key value pair.
 * @private
 */

function splitKeyValuePair(str) {
  var index = str.indexOf('=');
  var key;
  var val;

  if (index === -1) {
    key = str;
  } else {
    key = str.substr(0, index);
    val = str.substr(index + 1);
  }

  return [key, val];
}

/**
 * Split an Accept header into media types.
 * @private
 */

function splitMediaTypes(accept) {
  var accepts = accept.split(',');

  for (var i = 1, j = 0; i < accepts.length; i++) {
    if (quoteCount(accepts[j]) % 2 == 0) {
      accepts[++j] = accepts[i];
    } else {
      accepts[j] += ',' + accepts[i];
    }
  }

  // trim accepts
  accepts.length = j + 1;

  return accepts;
}

/**
 * Split a string of parameters.
 * @private
 */

function splitParameters(str) {
  var parameters = str.split(';');

  for (var i = 1, j = 0; i < parameters.length; i++) {
    if (quoteCount(parameters[j]) % 2 == 0) {
      parameters[++j] = parameters[i];
    } else {
      parameters[j] += ';' + parameters[i];
    }
  }

  // trim parameters
  parameters.length = j + 1;

  for (var i = 0; i < parameters.length; i++) {
    parameters[i] = parameters[i].trim();
  }

  return parameters;
}

var mediaTypeExports = mediaType.exports;

/*!
 * negotiator
 * Copyright(c) 2012 Federico Romero
 * Copyright(c) 2012-2014 Isaac Z. Schlueter
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

var preferredCharsets = charsetExports;
var preferredEncodings = encodingExports;
var preferredLanguages = languageExports;
var preferredMediaTypes = mediaTypeExports;

/**
 * Module exports.
 * @public
 */

_package$6.exports = Negotiator$1;
_package$6.exports.Negotiator = Negotiator$1;

/**
 * Create a Negotiator instance from a request.
 * @param {object} request
 * @public
 */

function Negotiator$1(request) {
  if (!(this instanceof Negotiator$1)) {
    return new Negotiator$1(request);
  }

  this.request = request;
}

Negotiator$1.prototype.charset = function charset(available) {
  var set = this.charsets(available);
  return set && set[0];
};

Negotiator$1.prototype.charsets = function charsets(available) {
  return preferredCharsets(this.request.headers['accept-charset'], available);
};

Negotiator$1.prototype.encoding = function encoding(available) {
  var set = this.encodings(available);
  return set && set[0];
};

Negotiator$1.prototype.encodings = function encodings(available) {
  return preferredEncodings(this.request.headers['accept-encoding'], available);
};

Negotiator$1.prototype.language = function language(available) {
  var set = this.languages(available);
  return set && set[0];
};

Negotiator$1.prototype.languages = function languages(available) {
  return preferredLanguages(this.request.headers['accept-language'], available);
};

Negotiator$1.prototype.mediaType = function mediaType(available) {
  var set = this.mediaTypes(available);
  return set && set[0];
};

Negotiator$1.prototype.mediaTypes = function mediaTypes(available) {
  return preferredMediaTypes(this.request.headers.accept, available);
};

// Backwards compatibility
Negotiator$1.prototype.preferredCharset = Negotiator$1.prototype.charset;
Negotiator$1.prototype.preferredCharsets = Negotiator$1.prototype.charsets;
Negotiator$1.prototype.preferredEncoding = Negotiator$1.prototype.encoding;
Negotiator$1.prototype.preferredEncodings = Negotiator$1.prototype.encodings;
Negotiator$1.prototype.preferredLanguage = Negotiator$1.prototype.language;
Negotiator$1.prototype.preferredLanguages = Negotiator$1.prototype.languages;
Negotiator$1.prototype.preferredMediaType = Negotiator$1.prototype.mediaType;
Negotiator$1.prototype.preferredMediaTypes = Negotiator$1.prototype.mediaTypes;

var _packageExports$1 = _package$6.exports;

/*!
 * accepts
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 * @private
 */

var Negotiator = _packageExports$1;
var mime$1 = _package$B;

/**
 * Module exports.
 * @public
 */

var _package$5 = Accepts;

/**
 * Create a new Accepts object for the given req.
 *
 * @param {object} req
 * @public
 */

function Accepts (req) {
  if (!(this instanceof Accepts)) {
    return new Accepts(req)
  }

  this.headers = req.headers;
  this.negotiator = new Negotiator(req);
}

/**
 * Check if the given `type(s)` is acceptable, returning
 * the best match when true, otherwise `undefined`, in which
 * case you should respond with 406 "Not Acceptable".
 *
 * The `type` value may be a single mime type string
 * such as "application/json", the extension name
 * such as "json" or an array `["json", "html", "text/plain"]`. When a list
 * or array is given the _best_ match, if any is returned.
 *
 * Examples:
 *
 *     // Accept: text/html
 *     this.types('html');
 *     // => "html"
 *
 *     // Accept: text/*, application/json
 *     this.types('html');
 *     // => "html"
 *     this.types('text/html');
 *     // => "text/html"
 *     this.types('json', 'text');
 *     // => "json"
 *     this.types('application/json');
 *     // => "application/json"
 *
 *     // Accept: text/*, application/json
 *     this.types('image/png');
 *     this.types('png');
 *     // => undefined
 *
 *     // Accept: text/*;q=.5, application/json
 *     this.types(['html', 'json']);
 *     this.types('html', 'json');
 *     // => "json"
 *
 * @param {String|Array} types...
 * @return {String|Array|Boolean}
 * @public
 */

Accepts.prototype.type =
Accepts.prototype.types = function (types_) {
  var types = types_;

  // support flattened arguments
  if (types && !Array.isArray(types)) {
    types = new Array(arguments.length);
    for (var i = 0; i < types.length; i++) {
      types[i] = arguments[i];
    }
  }

  // no types, return all requested types
  if (!types || types.length === 0) {
    return this.negotiator.mediaTypes()
  }

  // no accept header, return first given type
  if (!this.headers.accept) {
    return types[0]
  }

  var mimes = types.map(extToMime);
  var accepts = this.negotiator.mediaTypes(mimes.filter(validMime));
  var first = accepts[0];

  return first
    ? types[mimes.indexOf(first)]
    : false
};

/**
 * Return accepted encodings or best fit based on `encodings`.
 *
 * Given `Accept-Encoding: gzip, deflate`
 * an array sorted by quality is returned:
 *
 *     ['gzip', 'deflate']
 *
 * @param {String|Array} encodings...
 * @return {String|Array}
 * @public
 */

Accepts.prototype.encoding =
Accepts.prototype.encodings = function (encodings_) {
  var encodings = encodings_;

  // support flattened arguments
  if (encodings && !Array.isArray(encodings)) {
    encodings = new Array(arguments.length);
    for (var i = 0; i < encodings.length; i++) {
      encodings[i] = arguments[i];
    }
  }

  // no encodings, return all requested encodings
  if (!encodings || encodings.length === 0) {
    return this.negotiator.encodings()
  }

  return this.negotiator.encodings(encodings)[0] || false
};

/**
 * Return accepted charsets or best fit based on `charsets`.
 *
 * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`
 * an array sorted by quality is returned:
 *
 *     ['utf-8', 'utf-7', 'iso-8859-1']
 *
 * @param {String|Array} charsets...
 * @return {String|Array}
 * @public
 */

Accepts.prototype.charset =
Accepts.prototype.charsets = function (charsets_) {
  var charsets = charsets_;

  // support flattened arguments
  if (charsets && !Array.isArray(charsets)) {
    charsets = new Array(arguments.length);
    for (var i = 0; i < charsets.length; i++) {
      charsets[i] = arguments[i];
    }
  }

  // no charsets, return all requested charsets
  if (!charsets || charsets.length === 0) {
    return this.negotiator.charsets()
  }

  return this.negotiator.charsets(charsets)[0] || false
};

/**
 * Return accepted languages or best fit based on `langs`.
 *
 * Given `Accept-Language: en;q=0.8, es, pt`
 * an array sorted by quality is returned:
 *
 *     ['es', 'pt', 'en']
 *
 * @param {String|Array} langs...
 * @return {Array|String}
 * @public
 */

Accepts.prototype.lang =
Accepts.prototype.langs =
Accepts.prototype.language =
Accepts.prototype.languages = function (languages_) {
  var languages = languages_;

  // support flattened arguments
  if (languages && !Array.isArray(languages)) {
    languages = new Array(arguments.length);
    for (var i = 0; i < languages.length; i++) {
      languages[i] = arguments[i];
    }
  }

  // no languages, return all requested languages
  if (!languages || languages.length === 0) {
    return this.negotiator.languages()
  }

  return this.negotiator.languages(languages)[0] || false
};

/**
 * Convert extnames to mime.
 *
 * @param {String} type
 * @return {String}
 * @private
 */

function extToMime (type) {
  return type.indexOf('/') === -1
    ? mime$1.lookup(type)
    : type
}

/**
 * Check if mime is valid.
 *
 * @param {String} type
 * @return {String}
 * @private
 */

function validMime (type) {
  return typeof type === 'string'
}

/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 * @private
 */

var accepts = _package$5;
var deprecate$1 = _package$Q('express');
var isIP = require$$4$1.isIP;
var typeis = _packageExports$9;
var http$1 = require$$0$7;
var fresh = _package$b;
var parseRange = _package$9;
var parse$2 = _packageExports$7;
var proxyaddr = _packageExports$2;

/**
 * Request prototype.
 * @public
 */

var req = Object.create(http$1.IncomingMessage.prototype);

/**
 * Module exports.
 * @public
 */

var request = req;

/**
 * Return request header.
 *
 * The `Referrer` header field is special-cased,
 * both `Referrer` and `Referer` are interchangeable.
 *
 * Examples:
 *
 *     req.get('Content-Type');
 *     // => "text/plain"
 *
 *     req.get('content-type');
 *     // => "text/plain"
 *
 *     req.get('Something');
 *     // => undefined
 *
 * Aliased as `req.header()`.
 *
 * @param {String} name
 * @return {String}
 * @public
 */

req.get =
req.header = function header(name) {
  if (!name) {
    throw new TypeError('name argument is required to req.get');
  }

  if (typeof name !== 'string') {
    throw new TypeError('name must be a string to req.get');
  }

  var lc = name.toLowerCase();

  switch (lc) {
    case 'referer':
    case 'referrer':
      return this.headers.referrer
        || this.headers.referer;
    default:
      return this.headers[lc];
  }
};

/**
 * To do: update docs.
 *
 * Check if the given `type(s)` is acceptable, returning
 * the best match when true, otherwise `undefined`, in which
 * case you should respond with 406 "Not Acceptable".
 *
 * The `type` value may be a single MIME type string
 * such as "application/json", an extension name
 * such as "json", a comma-delimited list such as "json, html, text/plain",
 * an argument list such as `"json", "html", "text/plain"`,
 * or an array `["json", "html", "text/plain"]`. When a list
 * or array is given, the _best_ match, if any is returned.
 *
 * Examples:
 *
 *     // Accept: text/html
 *     req.accepts('html');
 *     // => "html"
 *
 *     // Accept: text/*, application/json
 *     req.accepts('html');
 *     // => "html"
 *     req.accepts('text/html');
 *     // => "text/html"
 *     req.accepts('json, text');
 *     // => "json"
 *     req.accepts('application/json');
 *     // => "application/json"
 *
 *     // Accept: text/*, application/json
 *     req.accepts('image/png');
 *     req.accepts('png');
 *     // => undefined
 *
 *     // Accept: text/*;q=.5, application/json
 *     req.accepts(['html', 'json']);
 *     req.accepts('html', 'json');
 *     req.accepts('html, json');
 *     // => "json"
 *
 * @param {String|Array} type(s)
 * @return {String|Array|Boolean}
 * @public
 */

req.accepts = function(){
  var accept = accepts(this);
  return accept.types.apply(accept, arguments);
};

/**
 * Check if the given `encoding`s are accepted.
 *
 * @param {String} ...encoding
 * @return {String|Array}
 * @public
 */

req.acceptsEncodings = function(){
  var accept = accepts(this);
  return accept.encodings.apply(accept, arguments);
};

req.acceptsEncoding = deprecate$1.function(req.acceptsEncodings,
  'req.acceptsEncoding: Use acceptsEncodings instead');

/**
 * Check if the given `charset`s are acceptable,
 * otherwise you should respond with 406 "Not Acceptable".
 *
 * @param {String} ...charset
 * @return {String|Array}
 * @public
 */

req.acceptsCharsets = function(){
  var accept = accepts(this);
  return accept.charsets.apply(accept, arguments);
};

req.acceptsCharset = deprecate$1.function(req.acceptsCharsets,
  'req.acceptsCharset: Use acceptsCharsets instead');

/**
 * Check if the given `lang`s are acceptable,
 * otherwise you should respond with 406 "Not Acceptable".
 *
 * @param {String} ...lang
 * @return {String|Array}
 * @public
 */

req.acceptsLanguages = function(){
  var accept = accepts(this);
  return accept.languages.apply(accept, arguments);
};

req.acceptsLanguage = deprecate$1.function(req.acceptsLanguages,
  'req.acceptsLanguage: Use acceptsLanguages instead');

/**
 * Parse Range header field, capping to the given `size`.
 *
 * Unspecified ranges such as "0-" require knowledge of your resource length. In
 * the case of a byte range this is of course the total number of bytes. If the
 * Range header field is not given `undefined` is returned, `-1` when unsatisfiable,
 * and `-2` when syntactically invalid.
 *
 * When ranges are returned, the array has a "type" property which is the type of
 * range that is required (most commonly, "bytes"). Each array element is an object
 * with a "start" and "end" property for the portion of the range.
 *
 * The "combine" option can be set to `true` and overlapping & adjacent ranges
 * will be combined into a single range.
 *
 * NOTE: remember that ranges are inclusive, so for example "Range: users=0-3"
 * should respond with 4 users when available, not 3.
 *
 * @param {number} size
 * @param {object} [options]
 * @param {boolean} [options.combine=false]
 * @return {number|array}
 * @public
 */

req.range = function range(size, options) {
  var range = this.get('Range');
  if (!range) return;
  return parseRange(size, range, options);
};

/**
 * Return the value of param `name` when present or `defaultValue`.
 *
 *  - Checks route placeholders, ex: _/user/:id_
 *  - Checks body params, ex: id=12, {"id":12}
 *  - Checks query string params, ex: ?id=12
 *
 * To utilize request bodies, `req.body`
 * should be an object. This can be done by using
 * the `bodyParser()` middleware.
 *
 * @param {String} name
 * @param {Mixed} [defaultValue]
 * @return {String}
 * @public
 */

req.param = function param(name, defaultValue) {
  var params = this.params || {};
  var body = this.body || {};
  var query = this.query || {};

  var args = arguments.length === 1
    ? 'name'
    : 'name, default';
  deprecate$1('req.param(' + args + '): Use req.params, req.body, or req.query instead');

  if (null != params[name] && params.hasOwnProperty(name)) return params[name];
  if (null != body[name]) return body[name];
  if (null != query[name]) return query[name];

  return defaultValue;
};

/**
 * Check if the incoming request contains the "Content-Type"
 * header field, and it contains the given mime `type`.
 *
 * Examples:
 *
 *      // With Content-Type: text/html; charset=utf-8
 *      req.is('html');
 *      req.is('text/html');
 *      req.is('text/*');
 *      // => true
 *
 *      // When Content-Type is application/json
 *      req.is('json');
 *      req.is('application/json');
 *      req.is('application/*');
 *      // => true
 *
 *      req.is('html');
 *      // => false
 *
 * @param {String|Array} types...
 * @return {String|false|null}
 * @public
 */

req.is = function is(types) {
  var arr = types;

  // support flattened arguments
  if (!Array.isArray(types)) {
    arr = new Array(arguments.length);
    for (var i = 0; i < arr.length; i++) {
      arr[i] = arguments[i];
    }
  }

  return typeis(this, arr);
};

/**
 * Return the protocol string "http" or "https"
 * when requested with TLS. When the "trust proxy"
 * setting trusts the socket address, the
 * "X-Forwarded-Proto" header field will be trusted
 * and used if present.
 *
 * If you're running behind a reverse proxy that
 * supplies https for you this may be enabled.
 *
 * @return {String}
 * @public
 */

defineGetter(req, 'protocol', function protocol(){
  var proto = this.connection.encrypted
    ? 'https'
    : 'http';
  var trust = this.app.get('trust proxy fn');

  if (!trust(this.connection.remoteAddress, 0)) {
    return proto;
  }

  // Note: X-Forwarded-Proto is normally only ever a
  //       single value, but this is to be safe.
  var header = this.get('X-Forwarded-Proto') || proto;
  var index = header.indexOf(',');

  return index !== -1
    ? header.substring(0, index).trim()
    : header.trim()
});

/**
 * Short-hand for:
 *
 *    req.protocol === 'https'
 *
 * @return {Boolean}
 * @public
 */

defineGetter(req, 'secure', function secure(){
  return this.protocol === 'https';
});

/**
 * Return the remote address from the trusted proxy.
 *
 * The is the remote address on the socket unless
 * "trust proxy" is set.
 *
 * @return {String}
 * @public
 */

defineGetter(req, 'ip', function ip(){
  var trust = this.app.get('trust proxy fn');
  return proxyaddr(this, trust);
});

/**
 * When "trust proxy" is set, trusted proxy addresses + client.
 *
 * For example if the value were "client, proxy1, proxy2"
 * you would receive the array `["client", "proxy1", "proxy2"]`
 * where "proxy2" is the furthest down-stream and "proxy1" and
 * "proxy2" were trusted.
 *
 * @return {Array}
 * @public
 */

defineGetter(req, 'ips', function ips() {
  var trust = this.app.get('trust proxy fn');
  var addrs = proxyaddr.all(this, trust);

  // reverse the order (to farthest -> closest)
  // and remove socket address
  addrs.reverse().pop();

  return addrs
});

/**
 * Return subdomains as an array.
 *
 * Subdomains are the dot-separated parts of the host before the main domain of
 * the app. By default, the domain of the app is assumed to be the last two
 * parts of the host. This can be changed by setting "subdomain offset".
 *
 * For example, if the domain is "tobi.ferrets.example.com":
 * If "subdomain offset" is not set, req.subdomains is `["ferrets", "tobi"]`.
 * If "subdomain offset" is 3, req.subdomains is `["tobi"]`.
 *
 * @return {Array}
 * @public
 */

defineGetter(req, 'subdomains', function subdomains() {
  var hostname = this.hostname;

  if (!hostname) return [];

  var offset = this.app.get('subdomain offset');
  var subdomains = !isIP(hostname)
    ? hostname.split('.').reverse()
    : [hostname];

  return subdomains.slice(offset);
});

/**
 * Short-hand for `url.parse(req.url).pathname`.
 *
 * @return {String}
 * @public
 */

defineGetter(req, 'path', function path() {
  return parse$2(this).pathname;
});

/**
 * Parse the "Host" header field to a hostname.
 *
 * When the "trust proxy" setting trusts the socket
 * address, the "X-Forwarded-Host" header field will
 * be trusted.
 *
 * @return {String}
 * @public
 */

defineGetter(req, 'hostname', function hostname(){
  var trust = this.app.get('trust proxy fn');
  var host = this.get('X-Forwarded-Host');

  if (!host || !trust(this.connection.remoteAddress, 0)) {
    host = this.get('Host');
  } else if (host.indexOf(',') !== -1) {
    // Note: X-Forwarded-Host is normally only ever a
    //       single value, but this is to be safe.
    host = host.substring(0, host.indexOf(',')).trimRight();
  }

  if (!host) return;

  // IPv6 literal support
  var offset = host[0] === '['
    ? host.indexOf(']') + 1
    : 0;
  var index = host.indexOf(':', offset);

  return index !== -1
    ? host.substring(0, index)
    : host;
});

// TODO: change req.host to return host in next major

defineGetter(req, 'host', deprecate$1.function(function host(){
  return this.hostname;
}, 'req.host: Use req.hostname instead'));

/**
 * Check if the request is fresh, aka
 * Last-Modified and/or the ETag
 * still match.
 *
 * @return {Boolean}
 * @public
 */

defineGetter(req, 'fresh', function(){
  var method = this.method;
  var res = this.res;
  var status = res.statusCode;

  // GET or HEAD for weak freshness validation only
  if ('GET' !== method && 'HEAD' !== method) return false;

  // 2xx or 304 as per rfc2616 14.26
  if ((status >= 200 && status < 300) || 304 === status) {
    return fresh(this.headers, {
      'etag': res.get('ETag'),
      'last-modified': res.get('Last-Modified')
    })
  }

  return false;
});

/**
 * Check if the request is stale, aka
 * "Last-Modified" and / or the "ETag" for the
 * resource has changed.
 *
 * @return {Boolean}
 * @public
 */

defineGetter(req, 'stale', function stale(){
  return !this.fresh;
});

/**
 * Check if the request was an _XMLHttpRequest_.
 *
 * @return {Boolean}
 * @public
 */

defineGetter(req, 'xhr', function xhr(){
  var val = this.get('X-Requested-With') || '';
  return val.toLowerCase() === 'xmlhttprequest';
});

/**
 * Helper function for creating a getter on an object.
 *
 * @param {Object} obj
 * @param {String} name
 * @param {Function} getter
 * @private
 */
function defineGetter(obj, name, getter) {
  Object.defineProperty(obj, name, {
    configurable: true,
    enumerable: true,
    get: getter
  });
}

var _package$4 = {};

/**
 * Module dependencies.
 */

(function (exports) {
	var crypto = require$$0$8;

	/**
	 * Sign the given `val` with `secret`.
	 *
	 * @param {String} val
	 * @param {String} secret
	 * @return {String}
	 * @api private
	 */

	exports.sign = function(val, secret){
	  if ('string' != typeof val) throw new TypeError("Cookie value must be provided as a string.");
	  if ('string' != typeof secret) throw new TypeError("Secret string must be provided.");
	  return val + '.' + crypto
	    .createHmac('sha256', secret)
	    .update(val)
	    .digest('base64')
	    .replace(/\=+$/, '');
	};

	/**
	 * Unsign and decode the given `val` with `secret`,
	 * returning `false` if the signature is invalid.
	 *
	 * @param {String} val
	 * @param {String} secret
	 * @return {String|Boolean}
	 * @api private
	 */

	exports.unsign = function(val, secret){
	  if ('string' != typeof val) throw new TypeError("Signed cookie string must be provided.");
	  if ('string' != typeof secret) throw new TypeError("Secret string must be provided.");
	  var str = val.slice(0, val.lastIndexOf('.'))
	    , mac = exports.sign(str, secret);
	  
	  return sha1(mac) == sha1(val) ? str : false;
	};

	/**
	 * Private
	 */

	function sha1(str){
	  return crypto.createHash('sha1').update(str).digest('hex');
	} 
} (_package$4));

var _package$3 = {};

/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

_package$3.parse = parse$1;
_package$3.serialize = serialize;

/**
 * Module variables.
 * @private
 */

var __toString = Object.prototype.toString;

/**
 * RegExp to match field-content in RFC 7230 sec 3.2
 *
 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 * field-vchar   = VCHAR / obs-text
 * obs-text      = %x80-FF
 */

var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

/**
 * Parse a cookie header.
 *
 * Parse the given cookie header string into an object
 * The object has the various cookies as keys(names) => values
 *
 * @param {string} str
 * @param {object} [options]
 * @return {object}
 * @public
 */

function parse$1(str, options) {
  if (typeof str !== 'string') {
    throw new TypeError('argument str must be a string');
  }

  var obj = {};
  var opt = options || {};
  var dec = opt.decode || decode;

  var index = 0;
  while (index < str.length) {
    var eqIdx = str.indexOf('=', index);

    // no more cookie pairs
    if (eqIdx === -1) {
      break
    }

    var endIdx = str.indexOf(';', index);

    if (endIdx === -1) {
      endIdx = str.length;
    } else if (endIdx < eqIdx) {
      // backtrack on prior semicolon
      index = str.lastIndexOf(';', eqIdx - 1) + 1;
      continue
    }

    var key = str.slice(index, eqIdx).trim();

    // only assign once
    if (undefined === obj[key]) {
      var val = str.slice(eqIdx + 1, endIdx).trim();

      // quoted values
      if (val.charCodeAt(0) === 0x22) {
        val = val.slice(1, -1);
      }

      obj[key] = tryDecode(val, dec);
    }

    index = endIdx + 1;
  }

  return obj;
}

/**
 * Serialize data into a cookie header.
 *
 * Serialize the a name value pair into a cookie string suitable for
 * http headers. An optional options object specified cookie parameters.
 *
 * serialize('foo', 'bar', { httpOnly: true })
 *   => "foo=bar; httpOnly"
 *
 * @param {string} name
 * @param {string} val
 * @param {object} [options]
 * @return {string}
 * @public
 */

function serialize(name, val, options) {
  var opt = options || {};
  var enc = opt.encode || encode;

  if (typeof enc !== 'function') {
    throw new TypeError('option encode is invalid');
  }

  if (!fieldContentRegExp.test(name)) {
    throw new TypeError('argument name is invalid');
  }

  var value = enc(val);

  if (value && !fieldContentRegExp.test(value)) {
    throw new TypeError('argument val is invalid');
  }

  var str = name + '=' + value;

  if (null != opt.maxAge) {
    var maxAge = opt.maxAge - 0;

    if (isNaN(maxAge) || !isFinite(maxAge)) {
      throw new TypeError('option maxAge is invalid')
    }

    str += '; Max-Age=' + Math.floor(maxAge);
  }

  if (opt.domain) {
    if (!fieldContentRegExp.test(opt.domain)) {
      throw new TypeError('option domain is invalid');
    }

    str += '; Domain=' + opt.domain;
  }

  if (opt.path) {
    if (!fieldContentRegExp.test(opt.path)) {
      throw new TypeError('option path is invalid');
    }

    str += '; Path=' + opt.path;
  }

  if (opt.expires) {
    var expires = opt.expires;

    if (!isDate(expires) || isNaN(expires.valueOf())) {
      throw new TypeError('option expires is invalid');
    }

    str += '; Expires=' + expires.toUTCString();
  }

  if (opt.httpOnly) {
    str += '; HttpOnly';
  }

  if (opt.secure) {
    str += '; Secure';
  }

  if (opt.priority) {
    var priority = typeof opt.priority === 'string'
      ? opt.priority.toLowerCase()
      : opt.priority;

    switch (priority) {
      case 'low':
        str += '; Priority=Low';
        break
      case 'medium':
        str += '; Priority=Medium';
        break
      case 'high':
        str += '; Priority=High';
        break
      default:
        throw new TypeError('option priority is invalid')
    }
  }

  if (opt.sameSite) {
    var sameSite = typeof opt.sameSite === 'string'
      ? opt.sameSite.toLowerCase() : opt.sameSite;

    switch (sameSite) {
      case true:
        str += '; SameSite=Strict';
        break;
      case 'lax':
        str += '; SameSite=Lax';
        break;
      case 'strict':
        str += '; SameSite=Strict';
        break;
      case 'none':
        str += '; SameSite=None';
        break;
      default:
        throw new TypeError('option sameSite is invalid');
    }
  }

  return str;
}

/**
 * URL-decode string value. Optimized to skip native call when no %.
 *
 * @param {string} str
 * @returns {string}
 */

function decode (str) {
  return str.indexOf('%') !== -1
    ? decodeURIComponent(str)
    : str
}

/**
 * URL-encode value.
 *
 * @param {string} str
 * @returns {string}
 */

function encode (val) {
  return encodeURIComponent(val)
}

/**
 * Determine if value is a Date.
 *
 * @param {*} val
 * @private
 */

function isDate (val) {
  return __toString.call(val) === '[object Date]' ||
    val instanceof Date
}

/**
 * Try decoding a string using a decoding function.
 *
 * @param {string} str
 * @param {function} decode
 * @private
 */

function tryDecode(str, decode) {
  try {
    return decode(str);
  } catch (e) {
    return str;
  }
}

var _package$2 = {exports: {}};

/*!
 * vary
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 */

_package$2.exports = vary$1;
_package$2.exports.append = append;

/**
 * RegExp to match field-name in RFC 7230 sec 3.2
 *
 * field-name    = token
 * token         = 1*tchar
 * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
 *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
 *               / DIGIT / ALPHA
 *               ; any VCHAR, except delimiters
 */

var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;

/**
 * Append a field to a vary header.
 *
 * @param {String} header
 * @param {String|Array} field
 * @return {String}
 * @public
 */

function append (header, field) {
  if (typeof header !== 'string') {
    throw new TypeError('header argument is required')
  }

  if (!field) {
    throw new TypeError('field argument is required')
  }

  // get fields array
  var fields = !Array.isArray(field)
    ? parse(String(field))
    : field;

  // assert on invalid field names
  for (var j = 0; j < fields.length; j++) {
    if (!FIELD_NAME_REGEXP.test(fields[j])) {
      throw new TypeError('field argument contains an invalid header name')
    }
  }

  // existing, unspecified vary
  if (header === '*') {
    return header
  }

  // enumerate current values
  var val = header;
  var vals = parse(header.toLowerCase());

  // unspecified vary
  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {
    return '*'
  }

  for (var i = 0; i < fields.length; i++) {
    var fld = fields[i].toLowerCase();

    // append value (case-preserving)
    if (vals.indexOf(fld) === -1) {
      vals.push(fld);
      val = val
        ? val + ', ' + fields[i]
        : fields[i];
    }
  }

  return val
}

/**
 * Parse a vary header into an array.
 *
 * @param {String} header
 * @return {Array}
 * @private
 */

function parse (header) {
  var end = 0;
  var list = [];
  var start = 0;

  // gather tokens
  for (var i = 0, len = header.length; i < len; i++) {
    switch (header.charCodeAt(i)) {
      case 0x20: /*   */
        if (start === end) {
          start = end = i + 1;
        }
        break
      case 0x2c: /* , */
        list.push(header.substring(start, end));
        start = end = i + 1;
        break
      default:
        end = i + 1;
        break
    }
  }

  // final token
  list.push(header.substring(start, end));

  return list
}

/**
 * Mark that a request is varied on a header field.
 *
 * @param {Object} res
 * @param {String|Array} field
 * @public
 */

function vary$1 (res, field) {
  if (!res || !res.getHeader || !res.setHeader) {
    // quack quack
    throw new TypeError('res argument is required')
  }

  // get existing header
  var val = res.getHeader('Vary') || '';
  var header = Array.isArray(val)
    ? val.join(', ')
    : String(val);

  // set new header
  if ((val = append(header, field))) {
    res.setHeader('Vary', val);
  }
}

var _packageExports = _package$2.exports;

/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 * @private
 */

var Buffer$1 = _packageExports$5.Buffer;
var contentDisposition = _packageExports$4;
var createError = _packageExports$b;
var deprecate = _package$Q('express');
var encodeUrl = _package$m;
var escapeHtml = _package$l;
var http = require$$0$7;
var isAbsolute = utils$1.isAbsolute;
var onFinished = _packageExports$a;
var path$3 = path$6;
var statuses = _package$L;
var merge = _packageExports$6;
var sign = _package$4.sign;
var normalizeType = utils$1.normalizeType;
var normalizeTypes = utils$1.normalizeTypes;
var setCharset = utils$1.setCharset;
var cookie = _package$3;
var send = _packageExports$3;
var extname = path$3.extname;
var mime = send.mime;
var resolve = path$3.resolve;
var vary = _packageExports;

/**
 * Response prototype.
 * @public
 */

var res = Object.create(http.ServerResponse.prototype);

/**
 * Module exports.
 * @public
 */

var response = res;

/**
 * Module variables.
 * @private
 */

var charsetRegExp = /;\s*charset\s*=/;

/**
 * Set status `code`.
 *
 * @param {Number} code
 * @return {ServerResponse}
 * @public
 */

res.status = function status(code) {
  if ((typeof code === 'string' || Math.floor(code) !== code) && code > 99 && code < 1000) {
    deprecate('res.status(' + JSON.stringify(code) + '): use res.status(' + Math.floor(code) + ') instead');
  }
  this.statusCode = code;
  return this;
};

/**
 * Set Link header field with the given `links`.
 *
 * Examples:
 *
 *    res.links({
 *      next: 'http://api.example.com/users?page=2',
 *      last: 'http://api.example.com/users?page=5'
 *    });
 *
 * @param {Object} links
 * @return {ServerResponse}
 * @public
 */

res.links = function(links){
  var link = this.get('Link') || '';
  if (link) link += ', ';
  return this.set('Link', link + Object.keys(links).map(function(rel){
    return '<' + links[rel] + '>; rel="' + rel + '"';
  }).join(', '));
};

/**
 * Send a response.
 *
 * Examples:
 *
 *     res.send(Buffer.from('wahoo'));
 *     res.send({ some: 'json' });
 *     res.send('<p>some html</p>');
 *
 * @param {string|number|boolean|object|Buffer} body
 * @public
 */

res.send = function send(body) {
  var chunk = body;
  var encoding;
  var req = this.req;
  var type;

  // settings
  var app = this.app;

  // allow status / body
  if (arguments.length === 2) {
    // res.send(body, status) backwards compat
    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
      this.statusCode = arguments[1];
    } else {
      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
      this.statusCode = arguments[0];
      chunk = arguments[1];
    }
  }

  // disambiguate res.send(status) and res.send(status, num)
  if (typeof chunk === 'number' && arguments.length === 1) {
    // res.send(status) will set status message as text string
    if (!this.get('Content-Type')) {
      this.type('txt');
    }

    deprecate('res.send(status): Use res.sendStatus(status) instead');
    this.statusCode = chunk;
    chunk = statuses.message[chunk];
  }

  switch (typeof chunk) {
    // string defaulting to html
    case 'string':
      if (!this.get('Content-Type')) {
        this.type('html');
      }
      break;
    case 'boolean':
    case 'number':
    case 'object':
      if (chunk === null) {
        chunk = '';
      } else if (Buffer$1.isBuffer(chunk)) {
        if (!this.get('Content-Type')) {
          this.type('bin');
        }
      } else {
        return this.json(chunk);
      }
      break;
  }

  // write strings in utf-8
  if (typeof chunk === 'string') {
    encoding = 'utf8';
    type = this.get('Content-Type');

    // reflect this in content-type
    if (typeof type === 'string') {
      this.set('Content-Type', setCharset(type, 'utf-8'));
    }
  }

  // determine if ETag should be generated
  var etagFn = app.get('etag fn');
  var generateETag = !this.get('ETag') && typeof etagFn === 'function';

  // populate Content-Length
  var len;
  if (chunk !== undefined) {
    if (Buffer$1.isBuffer(chunk)) {
      // get length of Buffer
      len = chunk.length;
    } else if (!generateETag && chunk.length < 1000) {
      // just calculate length when no ETag + small chunk
      len = Buffer$1.byteLength(chunk, encoding);
    } else {
      // convert chunk to Buffer and calculate
      chunk = Buffer$1.from(chunk, encoding);
      encoding = undefined;
      len = chunk.length;
    }

    this.set('Content-Length', len);
  }

  // populate ETag
  var etag;
  if (generateETag && len !== undefined) {
    if ((etag = etagFn(chunk, encoding))) {
      this.set('ETag', etag);
    }
  }

  // freshness
  if (req.fresh) this.statusCode = 304;

  // strip irrelevant headers
  if (204 === this.statusCode || 304 === this.statusCode) {
    this.removeHeader('Content-Type');
    this.removeHeader('Content-Length');
    this.removeHeader('Transfer-Encoding');
    chunk = '';
  }

  // alter headers for 205
  if (this.statusCode === 205) {
    this.set('Content-Length', '0');
    this.removeHeader('Transfer-Encoding');
    chunk = '';
  }

  if (req.method === 'HEAD') {
    // skip body for HEAD
    this.end();
  } else {
    // respond
    this.end(chunk, encoding);
  }

  return this;
};

/**
 * Send JSON response.
 *
 * Examples:
 *
 *     res.json(null);
 *     res.json({ user: 'tj' });
 *
 * @param {string|number|boolean|object} obj
 * @public
 */

res.json = function json(obj) {
  var val = obj;

  // allow status / body
  if (arguments.length === 2) {
    // res.json(body, status) backwards compat
    if (typeof arguments[1] === 'number') {
      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
      this.statusCode = arguments[1];
    } else {
      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
      this.statusCode = arguments[0];
      val = arguments[1];
    }
  }

  // settings
  var app = this.app;
  var escape = app.get('json escape');
  var replacer = app.get('json replacer');
  var spaces = app.get('json spaces');
  var body = stringify(val, replacer, spaces, escape);

  // content-type
  if (!this.get('Content-Type')) {
    this.set('Content-Type', 'application/json');
  }

  return this.send(body);
};

/**
 * Send JSON response with JSONP callback support.
 *
 * Examples:
 *
 *     res.jsonp(null);
 *     res.jsonp({ user: 'tj' });
 *
 * @param {string|number|boolean|object} obj
 * @public
 */

res.jsonp = function jsonp(obj) {
  var val = obj;

  // allow status / body
  if (arguments.length === 2) {
    // res.jsonp(body, status) backwards compat
    if (typeof arguments[1] === 'number') {
      deprecate('res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead');
      this.statusCode = arguments[1];
    } else {
      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
      this.statusCode = arguments[0];
      val = arguments[1];
    }
  }

  // settings
  var app = this.app;
  var escape = app.get('json escape');
  var replacer = app.get('json replacer');
  var spaces = app.get('json spaces');
  var body = stringify(val, replacer, spaces, escape);
  var callback = this.req.query[app.get('jsonp callback name')];

  // content-type
  if (!this.get('Content-Type')) {
    this.set('X-Content-Type-Options', 'nosniff');
    this.set('Content-Type', 'application/json');
  }

  // fixup callback
  if (Array.isArray(callback)) {
    callback = callback[0];
  }

  // jsonp
  if (typeof callback === 'string' && callback.length !== 0) {
    this.set('X-Content-Type-Options', 'nosniff');
    this.set('Content-Type', 'text/javascript');

    // restrict callback charset
    callback = callback.replace(/[^\[\]\w$.]/g, '');

    if (body === undefined) {
      // empty argument
      body = '';
    } else if (typeof body === 'string') {
      // replace chars not allowed in JavaScript that are in JSON
      body = body
        .replace(/\u2028/g, '\\u2028')
        .replace(/\u2029/g, '\\u2029');
    }

    // the /**/ is a specific security mitigation for "Rosetta Flash JSONP abuse"
    // the typeof check is just to reduce client error noise
    body = '/**/ typeof ' + callback + ' === \'function\' && ' + callback + '(' + body + ');';
  }

  return this.send(body);
};

/**
 * Send given HTTP status code.
 *
 * Sets the response status to `statusCode` and the body of the
 * response to the standard description from node's http.STATUS_CODES
 * or the statusCode number if no description.
 *
 * Examples:
 *
 *     res.sendStatus(200);
 *
 * @param {number} statusCode
 * @public
 */

res.sendStatus = function sendStatus(statusCode) {
  var body = statuses.message[statusCode] || String(statusCode);

  this.statusCode = statusCode;
  this.type('txt');

  return this.send(body);
};

/**
 * Transfer the file at the given `path`.
 *
 * Automatically sets the _Content-Type_ response header field.
 * The callback `callback(err)` is invoked when the transfer is complete
 * or when an error occurs. Be sure to check `res.headersSent`
 * if you wish to attempt responding, as the header and some data
 * may have already been transferred.
 *
 * Options:
 *
 *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
 *   - `root`     root directory for relative filenames
 *   - `headers`  object of headers to serve with file
 *   - `dotfiles` serve dotfiles, defaulting to false; can be `"allow"` to send them
 *
 * Other options are passed along to `send`.
 *
 * Examples:
 *
 *  The following example illustrates how `res.sendFile()` may
 *  be used as an alternative for the `static()` middleware for
 *  dynamic situations. The code backing `res.sendFile()` is actually
 *  the same code, so HTTP cache support etc is identical.
 *
 *     app.get('/user/:uid/photos/:file', function(req, res){
 *       var uid = req.params.uid
 *         , file = req.params.file;
 *
 *       req.user.mayViewFilesFrom(uid, function(yes){
 *         if (yes) {
 *           res.sendFile('/uploads/' + uid + '/' + file);
 *         } else {
 *           res.send(403, 'Sorry! you cant see that.');
 *         }
 *       });
 *     });
 *
 * @public
 */

res.sendFile = function sendFile(path, options, callback) {
  var done = callback;
  var req = this.req;
  var res = this;
  var next = req.next;
  var opts = options || {};

  if (!path) {
    throw new TypeError('path argument is required to res.sendFile');
  }

  if (typeof path !== 'string') {
    throw new TypeError('path must be a string to res.sendFile')
  }

  // support function as second arg
  if (typeof options === 'function') {
    done = options;
    opts = {};
  }

  if (!opts.root && !isAbsolute(path)) {
    throw new TypeError('path must be absolute or specify root to res.sendFile');
  }

  // create file stream
  var pathname = encodeURI(path);
  var file = send(req, pathname, opts);

  // transfer
  sendfile(res, file, opts, function (err) {
    if (done) return done(err);
    if (err && err.code === 'EISDIR') return next();

    // next() all but write errors
    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
      next(err);
    }
  });
};

/**
 * Transfer the file at the given `path`.
 *
 * Automatically sets the _Content-Type_ response header field.
 * The callback `callback(err)` is invoked when the transfer is complete
 * or when an error occurs. Be sure to check `res.headersSent`
 * if you wish to attempt responding, as the header and some data
 * may have already been transferred.
 *
 * Options:
 *
 *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
 *   - `root`     root directory for relative filenames
 *   - `headers`  object of headers to serve with file
 *   - `dotfiles` serve dotfiles, defaulting to false; can be `"allow"` to send them
 *
 * Other options are passed along to `send`.
 *
 * Examples:
 *
 *  The following example illustrates how `res.sendfile()` may
 *  be used as an alternative for the `static()` middleware for
 *  dynamic situations. The code backing `res.sendfile()` is actually
 *  the same code, so HTTP cache support etc is identical.
 *
 *     app.get('/user/:uid/photos/:file', function(req, res){
 *       var uid = req.params.uid
 *         , file = req.params.file;
 *
 *       req.user.mayViewFilesFrom(uid, function(yes){
 *         if (yes) {
 *           res.sendfile('/uploads/' + uid + '/' + file);
 *         } else {
 *           res.send(403, 'Sorry! you cant see that.');
 *         }
 *       });
 *     });
 *
 * @public
 */

res.sendfile = function (path, options, callback) {
  var done = callback;
  var req = this.req;
  var res = this;
  var next = req.next;
  var opts = options || {};

  // support function as second arg
  if (typeof options === 'function') {
    done = options;
    opts = {};
  }

  // create file stream
  var file = send(req, path, opts);

  // transfer
  sendfile(res, file, opts, function (err) {
    if (done) return done(err);
    if (err && err.code === 'EISDIR') return next();

    // next() all but write errors
    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
      next(err);
    }
  });
};

res.sendfile = deprecate.function(res.sendfile,
  'res.sendfile: Use res.sendFile instead');

/**
 * Transfer the file at the given `path` as an attachment.
 *
 * Optionally providing an alternate attachment `filename`,
 * and optional callback `callback(err)`. The callback is invoked
 * when the data transfer is complete, or when an error has
 * occurred. Be sure to check `res.headersSent` if you plan to respond.
 *
 * Optionally providing an `options` object to use with `res.sendFile()`.
 * This function will set the `Content-Disposition` header, overriding
 * any `Content-Disposition` header passed as header options in order
 * to set the attachment and filename.
 *
 * This method uses `res.sendFile()`.
 *
 * @public
 */

res.download = function download (path, filename, options, callback) {
  var done = callback;
  var name = filename;
  var opts = options || null;

  // support function as second or third arg
  if (typeof filename === 'function') {
    done = filename;
    name = null;
    opts = null;
  } else if (typeof options === 'function') {
    done = options;
    opts = null;
  }

  // support optional filename, where options may be in it's place
  if (typeof filename === 'object' &&
    (typeof options === 'function' || options === undefined)) {
    name = null;
    opts = filename;
  }

  // set Content-Disposition when file is sent
  var headers = {
    'Content-Disposition': contentDisposition(name || path)
  };

  // merge user-provided headers
  if (opts && opts.headers) {
    var keys = Object.keys(opts.headers);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (key.toLowerCase() !== 'content-disposition') {
        headers[key] = opts.headers[key];
      }
    }
  }

  // merge user-provided options
  opts = Object.create(opts);
  opts.headers = headers;

  // Resolve the full path for sendFile
  var fullPath = !opts.root
    ? resolve(path)
    : path;

  // send file
  return this.sendFile(fullPath, opts, done)
};

/**
 * Set _Content-Type_ response header with `type` through `mime.lookup()`
 * when it does not contain "/", or set the Content-Type to `type` otherwise.
 *
 * Examples:
 *
 *     res.type('.html');
 *     res.type('html');
 *     res.type('json');
 *     res.type('application/json');
 *     res.type('png');
 *
 * @param {String} type
 * @return {ServerResponse} for chaining
 * @public
 */

res.contentType =
res.type = function contentType(type) {
  var ct = type.indexOf('/') === -1
    ? mime.lookup(type)
    : type;

  return this.set('Content-Type', ct);
};

/**
 * Respond to the Acceptable formats using an `obj`
 * of mime-type callbacks.
 *
 * This method uses `req.accepted`, an array of
 * acceptable types ordered by their quality values.
 * When "Accept" is not present the _first_ callback
 * is invoked, otherwise the first match is used. When
 * no match is performed the server responds with
 * 406 "Not Acceptable".
 *
 * Content-Type is set for you, however if you choose
 * you may alter this within the callback using `res.type()`
 * or `res.set('Content-Type', ...)`.
 *
 *    res.format({
 *      'text/plain': function(){
 *        res.send('hey');
 *      },
 *
 *      'text/html': function(){
 *        res.send('<p>hey</p>');
 *      },
 *
 *      'application/json': function () {
 *        res.send({ message: 'hey' });
 *      }
 *    });
 *
 * In addition to canonicalized MIME types you may
 * also use extnames mapped to these types:
 *
 *    res.format({
 *      text: function(){
 *        res.send('hey');
 *      },
 *
 *      html: function(){
 *        res.send('<p>hey</p>');
 *      },
 *
 *      json: function(){
 *        res.send({ message: 'hey' });
 *      }
 *    });
 *
 * By default Express passes an `Error`
 * with a `.status` of 406 to `next(err)`
 * if a match is not made. If you provide
 * a `.default` callback it will be invoked
 * instead.
 *
 * @param {Object} obj
 * @return {ServerResponse} for chaining
 * @public
 */

res.format = function(obj){
  var req = this.req;
  var next = req.next;

  var keys = Object.keys(obj)
    .filter(function (v) { return v !== 'default' });

  var key = keys.length > 0
    ? req.accepts(keys)
    : false;

  this.vary("Accept");

  if (key) {
    this.set('Content-Type', normalizeType(key).value);
    obj[key](req, this, next);
  } else if (obj.default) {
    obj.default(req, this, next);
  } else {
    next(createError(406, {
      types: normalizeTypes(keys).map(function (o) { return o.value })
    }));
  }

  return this;
};

/**
 * Set _Content-Disposition_ header to _attachment_ with optional `filename`.
 *
 * @param {String} filename
 * @return {ServerResponse}
 * @public
 */

res.attachment = function attachment(filename) {
  if (filename) {
    this.type(extname(filename));
  }

  this.set('Content-Disposition', contentDisposition(filename));

  return this;
};

/**
 * Append additional header `field` with value `val`.
 *
 * Example:
 *
 *    res.append('Link', ['<http://localhost/>', '<http://localhost:3000/>']);
 *    res.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly');
 *    res.append('Warning', '199 Miscellaneous warning');
 *
 * @param {String} field
 * @param {String|Array} val
 * @return {ServerResponse} for chaining
 * @public
 */

res.append = function append(field, val) {
  var prev = this.get(field);
  var value = val;

  if (prev) {
    // concat the new and prev vals
    value = Array.isArray(prev) ? prev.concat(val)
      : Array.isArray(val) ? [prev].concat(val)
        : [prev, val];
  }

  return this.set(field, value);
};

/**
 * Set header `field` to `val`, or pass
 * an object of header fields.
 *
 * Examples:
 *
 *    res.set('Foo', ['bar', 'baz']);
 *    res.set('Accept', 'application/json');
 *    res.set({ Accept: 'text/plain', 'X-API-Key': 'tobi' });
 *
 * Aliased as `res.header()`.
 *
 * @param {String|Object} field
 * @param {String|Array} val
 * @return {ServerResponse} for chaining
 * @public
 */

res.set =
res.header = function header(field, val) {
  if (arguments.length === 2) {
    var value = Array.isArray(val)
      ? val.map(String)
      : String(val);

    // add charset to content-type
    if (field.toLowerCase() === 'content-type') {
      if (Array.isArray(value)) {
        throw new TypeError('Content-Type cannot be set to an Array');
      }
      if (!charsetRegExp.test(value)) {
        var charset = mime.charsets.lookup(value.split(';')[0]);
        if (charset) value += '; charset=' + charset.toLowerCase();
      }
    }

    this.setHeader(field, value);
  } else {
    for (var key in field) {
      this.set(key, field[key]);
    }
  }
  return this;
};

/**
 * Get value for header `field`.
 *
 * @param {String} field
 * @return {String}
 * @public
 */

res.get = function(field){
  return this.getHeader(field);
};

/**
 * Clear cookie `name`.
 *
 * @param {String} name
 * @param {Object} [options]
 * @return {ServerResponse} for chaining
 * @public
 */

res.clearCookie = function clearCookie(name, options) {
  var opts = merge({ expires: new Date(1), path: '/' }, options);

  return this.cookie(name, '', opts);
};

/**
 * Set cookie `name` to `value`, with the given `options`.
 *
 * Options:
 *
 *    - `maxAge`   max-age in milliseconds, converted to `expires`
 *    - `signed`   sign the cookie
 *    - `path`     defaults to "/"
 *
 * Examples:
 *
 *    // "Remember Me" for 15 minutes
 *    res.cookie('rememberme', '1', { expires: new Date(Date.now() + 900000), httpOnly: true });
 *
 *    // same as above
 *    res.cookie('rememberme', '1', { maxAge: 900000, httpOnly: true })
 *
 * @param {String} name
 * @param {String|Object} value
 * @param {Object} [options]
 * @return {ServerResponse} for chaining
 * @public
 */

res.cookie = function (name, value, options) {
  var opts = merge({}, options);
  var secret = this.req.secret;
  var signed = opts.signed;

  if (signed && !secret) {
    throw new Error('cookieParser("secret") required for signed cookies');
  }

  var val = typeof value === 'object'
    ? 'j:' + JSON.stringify(value)
    : String(value);

  if (signed) {
    val = 's:' + sign(val, secret);
  }

  if (opts.maxAge != null) {
    var maxAge = opts.maxAge - 0;

    if (!isNaN(maxAge)) {
      opts.expires = new Date(Date.now() + maxAge);
      opts.maxAge = Math.floor(maxAge / 1000);
    }
  }

  if (opts.path == null) {
    opts.path = '/';
  }

  this.append('Set-Cookie', cookie.serialize(name, String(val), opts));

  return this;
};

/**
 * Set the location header to `url`.
 *
 * The given `url` can also be "back", which redirects
 * to the _Referrer_ or _Referer_ headers or "/".
 *
 * Examples:
 *
 *    res.location('/foo/bar').;
 *    res.location('http://example.com');
 *    res.location('../login');
 *
 * @param {String} url
 * @return {ServerResponse} for chaining
 * @public
 */

res.location = function location(url) {
  var loc = url;

  // "back" is an alias for the referrer
  if (url === 'back') {
    loc = this.req.get('Referrer') || '/';
  }

  // set location
  return this.set('Location', encodeUrl(loc));
};

/**
 * Redirect to the given `url` with optional response `status`
 * defaulting to 302.
 *
 * The resulting `url` is determined by `res.location()`, so
 * it will play nicely with mounted apps, relative paths,
 * `"back"` etc.
 *
 * Examples:
 *
 *    res.redirect('/foo/bar');
 *    res.redirect('http://example.com');
 *    res.redirect(301, 'http://example.com');
 *    res.redirect('../login'); // /blog/post/1 -> /blog/login
 *
 * @public
 */

res.redirect = function redirect(url) {
  var address = url;
  var body;
  var status = 302;

  // allow status / url
  if (arguments.length === 2) {
    if (typeof arguments[0] === 'number') {
      status = arguments[0];
      address = arguments[1];
    } else {
      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
      status = arguments[1];
    }
  }

  // Set location header
  address = this.location(address).get('Location');

  // Support text/{plain,html} by default
  this.format({
    text: function(){
      body = statuses.message[status] + '. Redirecting to ' + address;
    },

    html: function(){
      var u = escapeHtml(address);
      body = '<p>' + statuses.message[status] + '. Redirecting to <a href="' + u + '">' + u + '</a></p>';
    },

    default: function(){
      body = '';
    }
  });

  // Respond
  this.statusCode = status;
  this.set('Content-Length', Buffer$1.byteLength(body));

  if (this.req.method === 'HEAD') {
    this.end();
  } else {
    this.end(body);
  }
};

/**
 * Add `field` to Vary. If already present in the Vary set, then
 * this call is simply ignored.
 *
 * @param {Array|String} field
 * @return {ServerResponse} for chaining
 * @public
 */

res.vary = function(field){
  // checks for back-compat
  if (!field || (Array.isArray(field) && !field.length)) {
    deprecate('res.vary(): Provide a field name');
    return this;
  }

  vary(this, field);

  return this;
};

/**
 * Render `view` with the given `options` and optional callback `fn`.
 * When a callback function is given a response will _not_ be made
 * automatically, otherwise a response of _200_ and _text/html_ is given.
 *
 * Options:
 *
 *  - `cache`     boolean hinting to the engine it should cache
 *  - `filename`  filename of the view being rendered
 *
 * @public
 */

res.render = function render(view, options, callback) {
  var app = this.req.app;
  var done = callback;
  var opts = options || {};
  var req = this.req;
  var self = this;

  // support callback function as second arg
  if (typeof options === 'function') {
    done = options;
    opts = {};
  }

  // merge res.locals
  opts._locals = self.locals;

  // default callback to respond
  done = done || function (err, str) {
    if (err) return req.next(err);
    self.send(str);
  };

  // render
  app.render(view, opts, done);
};

// pipe the send file stream
function sendfile(res, file, options, callback) {
  var done = false;
  var streaming;

  // request aborted
  function onaborted() {
    if (done) return;
    done = true;

    var err = new Error('Request aborted');
    err.code = 'ECONNABORTED';
    callback(err);
  }

  // directory
  function ondirectory() {
    if (done) return;
    done = true;

    var err = new Error('EISDIR, read');
    err.code = 'EISDIR';
    callback(err);
  }

  // errors
  function onerror(err) {
    if (done) return;
    done = true;
    callback(err);
  }

  // ended
  function onend() {
    if (done) return;
    done = true;
    callback();
  }

  // file
  function onfile() {
    streaming = false;
  }

  // finished
  function onfinish(err) {
    if (err && err.code === 'ECONNRESET') return onaborted();
    if (err) return onerror(err);
    if (done) return;

    setImmediate(function () {
      if (streaming !== false && !done) {
        onaborted();
        return;
      }

      if (done) return;
      done = true;
      callback();
    });
  }

  // streaming
  function onstream() {
    streaming = true;
  }

  file.on('directory', ondirectory);
  file.on('end', onend);
  file.on('error', onerror);
  file.on('file', onfile);
  file.on('stream', onstream);
  onFinished(res, onfinish);

  if (options.headers) {
    // set headers on successful transfer
    file.on('headers', function headers(res) {
      var obj = options.headers;
      var keys = Object.keys(obj);

      for (var i = 0; i < keys.length; i++) {
        var k = keys[i];
        res.setHeader(k, obj[k]);
      }
    });
  }

  // pipe
  file.pipe(res);
}

/**
 * Stringify JSON, like JSON.stringify, but v8 optimized, with the
 * ability to escape characters that can trigger HTML sniffing.
 *
 * @param {*} value
 * @param {function} replacer
 * @param {number} spaces
 * @param {boolean} escape
 * @returns {string}
 * @private
 */

function stringify (value, replacer, spaces, escape) {
  // v8 checks arguments.length for optimizing simple call
  // https://bugs.chromium.org/p/v8/issues/detail?id=4730
  var json = replacer || spaces
    ? JSON.stringify(value, replacer, spaces)
    : JSON.stringify(value);

  if (escape && typeof json === 'string') {
    json = json.replace(/[<>&]/g, function (c) {
      switch (c.charCodeAt(0)) {
        case 0x3c:
          return '\\u003c'
        case 0x3e:
          return '\\u003e'
        case 0x26:
          return '\\u0026'
        /* istanbul ignore next: unreachable default */
        default:
          return c
      }
    });
  }

  return json
}

var _package$1 = {exports: {}};

/*!
 * serve-static
 * Copyright(c) 2010 Sencha Inc.
 * Copyright(c) 2011 TJ Holowaychuk
 * Copyright(c) 2014-2016 Douglas Christopher Wilson
 * MIT Licensed
 */

var hasRequired_package;

function require_package () {
	if (hasRequired_package) return _package$1.exports;
	hasRequired_package = 1;

	/**
	 * Module dependencies.
	 * @private
	 */

	var encodeUrl = _package$m;
	var escapeHtml = _package$l;
	var parseUrl = _packageExports$7;
	var resolve = path$6.resolve;
	var send = _packageExports$3;
	var url = require$$0$6;

	/**
	 * Module exports.
	 * @public
	 */

	_package$1.exports = serveStatic;
	_package$1.exports.mime = send.mime;

	/**
	 * @param {string} root
	 * @param {object} [options]
	 * @return {function}
	 * @public
	 */

	function serveStatic (root, options) {
	  if (!root) {
	    throw new TypeError('root path required')
	  }

	  if (typeof root !== 'string') {
	    throw new TypeError('root path must be a string')
	  }

	  // copy options object
	  var opts = Object.create(options || null);

	  // fall-though
	  var fallthrough = opts.fallthrough !== false;

	  // default redirect
	  var redirect = opts.redirect !== false;

	  // headers listener
	  var setHeaders = opts.setHeaders;

	  if (setHeaders && typeof setHeaders !== 'function') {
	    throw new TypeError('option setHeaders must be function')
	  }

	  // setup options for send
	  opts.maxage = opts.maxage || opts.maxAge || 0;
	  opts.root = resolve(root);

	  // construct directory listener
	  var onDirectory = redirect
	    ? createRedirectDirectoryListener()
	    : createNotFoundDirectoryListener();

	  return function serveStatic (req, res, next) {
	    if (req.method !== 'GET' && req.method !== 'HEAD') {
	      if (fallthrough) {
	        return next()
	      }

	      // method not allowed
	      res.statusCode = 405;
	      res.setHeader('Allow', 'GET, HEAD');
	      res.setHeader('Content-Length', '0');
	      res.end();
	      return
	    }

	    var forwardError = !fallthrough;
	    var originalUrl = parseUrl.original(req);
	    var path = parseUrl(req).pathname;

	    // make sure redirect occurs at mount
	    if (path === '/' && originalUrl.pathname.substr(-1) !== '/') {
	      path = '';
	    }

	    // create send stream
	    var stream = send(req, path, opts);

	    // add directory handler
	    stream.on('directory', onDirectory);

	    // add headers listener
	    if (setHeaders) {
	      stream.on('headers', setHeaders);
	    }

	    // add file listener for fallthrough
	    if (fallthrough) {
	      stream.on('file', function onFile () {
	        // once file is determined, always forward error
	        forwardError = true;
	      });
	    }

	    // forward errors
	    stream.on('error', function error (err) {
	      if (forwardError || !(err.statusCode < 500)) {
	        next(err);
	        return
	      }

	      next();
	    });

	    // pipe
	    stream.pipe(res);
	  }
	}

	/**
	 * Collapse all leading slashes into a single slash
	 * @private
	 */
	function collapseLeadingSlashes (str) {
	  for (var i = 0; i < str.length; i++) {
	    if (str.charCodeAt(i) !== 0x2f /* / */) {
	      break
	    }
	  }

	  return i > 1
	    ? '/' + str.substr(i)
	    : str
	}

	/**
	 * Create a minimal HTML document.
	 *
	 * @param {string} title
	 * @param {string} body
	 * @private
	 */

	function createHtmlDocument (title, body) {
	  return '<!DOCTYPE html>\n' +
	    '<html lang="en">\n' +
	    '<head>\n' +
	    '<meta charset="utf-8">\n' +
	    '<title>' + title + '</title>\n' +
	    '</head>\n' +
	    '<body>\n' +
	    '<pre>' + body + '</pre>\n' +
	    '</body>\n' +
	    '</html>\n'
	}

	/**
	 * Create a directory listener that just 404s.
	 * @private
	 */

	function createNotFoundDirectoryListener () {
	  return function notFound () {
	    this.error(404);
	  }
	}

	/**
	 * Create a directory listener that performs a redirect.
	 * @private
	 */

	function createRedirectDirectoryListener () {
	  return function redirect (res) {
	    if (this.hasTrailingSlash()) {
	      this.error(404);
	      return
	    }

	    // get original URL
	    var originalUrl = parseUrl.original(this.req);

	    // append trailing slash
	    originalUrl.path = null;
	    originalUrl.pathname = collapseLeadingSlashes(originalUrl.pathname + '/');

	    // reformat the URL
	    var loc = encodeUrl(url.format(originalUrl));
	    var doc = createHtmlDocument('Redirecting', 'Redirecting to <a href="' + escapeHtml(loc) + '">' +
	      escapeHtml(loc) + '</a>');

	    // send redirect response
	    res.statusCode = 301;
	    res.setHeader('Content-Type', 'text/html; charset=UTF-8');
	    res.setHeader('Content-Length', Buffer.byteLength(doc));
	    res.setHeader('Content-Security-Policy', "default-src 'none'");
	    res.setHeader('X-Content-Type-Options', 'nosniff');
	    res.setHeader('Location', loc);
	    res.end(doc);
	  }
	}
	return _package$1.exports;
}

/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

(function (module, exports) {

	/**
	 * Module dependencies.
	 */

	var bodyParser = _packageExports$8;
	var EventEmitter = require$$0$4.EventEmitter;
	var mixin = _package$n;
	var proto = applicationExports;
	var Route = route;
	var Router = routerExports;
	var req = request;
	var res = response;

	/**
	 * Expose `createApplication()`.
	 */

	exports = module.exports = createApplication;

	/**
	 * Create an express application.
	 *
	 * @return {Function}
	 * @api public
	 */

	function createApplication() {
	  var app = function(req, res, next) {
	    app.handle(req, res, next);
	  };

	  mixin(app, EventEmitter.prototype, false);
	  mixin(app, proto, false);

	  // expose the prototype that will get set on requests
	  app.request = Object.create(req, {
	    app: { configurable: true, enumerable: true, writable: true, value: app }
	  });

	  // expose the prototype that will get set on responses
	  app.response = Object.create(res, {
	    app: { configurable: true, enumerable: true, writable: true, value: app }
	  });

	  app.init();
	  return app;
	}

	/**
	 * Expose the prototypes.
	 */

	exports.application = proto;
	exports.request = req;
	exports.response = res;

	/**
	 * Expose constructors.
	 */

	exports.Route = Route;
	exports.Router = Router;

	/**
	 * Expose middleware
	 */

	exports.json = bodyParser.json;
	exports.query = requireQuery();
	exports.raw = bodyParser.raw;
	exports.static = require_package();
	exports.text = bodyParser.text;
	exports.urlencoded = bodyParser.urlencoded;

	/**
	 * Replace removed middleware with an appropriate error message.
	 */

	var removedMiddlewares = [
	  'bodyParser',
	  'compress',
	  'cookieSession',
	  'session',
	  'logger',
	  'cookieParser',
	  'favicon',
	  'responseTime',
	  'errorHandler',
	  'timeout',
	  'methodOverride',
	  'vhost',
	  'csrf',
	  'directory',
	  'limit',
	  'multipart',
	  'staticCache'
	];

	removedMiddlewares.forEach(function (name) {
	  Object.defineProperty(exports, name, {
	    get: function () {
	      throw new Error('Most middleware (like ' + name + ') is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.');
	    },
	    configurable: true
	  });
	}); 
} (express$1, express$1.exports));

var expressExports = express$1.exports;

/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

var _package = expressExports;

var express = /*@__PURE__*/getDefaultExportFromCjs(_package);

function parseContentType$1(str) {
  if (str.length === 0)
    return;

  const params = Object.create(null);
  let i = 0;

  // Parse type
  for (; i < str.length; ++i) {
    const code = str.charCodeAt(i);
    if (TOKEN[code] !== 1) {
      if (code !== 47/* '/' */ || i === 0)
        return;
      break;
    }
  }
  // Check for type without subtype
  if (i === str.length)
    return;

  const type = str.slice(0, i).toLowerCase();

  // Parse subtype
  const subtypeStart = ++i;
  for (; i < str.length; ++i) {
    const code = str.charCodeAt(i);
    if (TOKEN[code] !== 1) {
      // Make sure we have a subtype
      if (i === subtypeStart)
        return;

      if (parseContentTypeParams(str, i, params) === undefined)
        return;
      break;
    }
  }
  // Make sure we have a subtype
  if (i === subtypeStart)
    return;

  const subtype = str.slice(subtypeStart, i).toLowerCase();

  return { type, subtype, params };
}

function parseContentTypeParams(str, i, params) {
  while (i < str.length) {
    // Consume whitespace
    for (; i < str.length; ++i) {
      const code = str.charCodeAt(i);
      if (code !== 32/* ' ' */ && code !== 9/* '\t' */)
        break;
    }

    // Ended on whitespace
    if (i === str.length)
      break;

    // Check for malformed parameter
    if (str.charCodeAt(i++) !== 59/* ';' */)
      return;

    // Consume whitespace
    for (; i < str.length; ++i) {
      const code = str.charCodeAt(i);
      if (code !== 32/* ' ' */ && code !== 9/* '\t' */)
        break;
    }

    // Ended on whitespace (malformed)
    if (i === str.length)
      return;

    let name;
    const nameStart = i;
    // Parse parameter name
    for (; i < str.length; ++i) {
      const code = str.charCodeAt(i);
      if (TOKEN[code] !== 1) {
        if (code !== 61/* '=' */)
          return;
        break;
      }
    }

    // No value (malformed)
    if (i === str.length)
      return;

    name = str.slice(nameStart, i);
    ++i; // Skip over '='

    // No value (malformed)
    if (i === str.length)
      return;

    let value = '';
    let valueStart;
    if (str.charCodeAt(i) === 34/* '"' */) {
      valueStart = ++i;
      let escaping = false;
      // Parse quoted value
      for (; i < str.length; ++i) {
        const code = str.charCodeAt(i);
        if (code === 92/* '\\' */) {
          if (escaping) {
            valueStart = i;
            escaping = false;
          } else {
            value += str.slice(valueStart, i);
            escaping = true;
          }
          continue;
        }
        if (code === 34/* '"' */) {
          if (escaping) {
            valueStart = i;
            escaping = false;
            continue;
          }
          value += str.slice(valueStart, i);
          break;
        }
        if (escaping) {
          valueStart = i - 1;
          escaping = false;
        }
        // Invalid unescaped quoted character (malformed)
        if (QDTEXT[code] !== 1)
          return;
      }

      // No end quote (malformed)
      if (i === str.length)
        return;

      ++i; // Skip over double quote
    } else {
      valueStart = i;
      // Parse unquoted value
      for (; i < str.length; ++i) {
        const code = str.charCodeAt(i);
        if (TOKEN[code] !== 1) {
          // No value (malformed)
          if (i === valueStart)
            return;
          break;
        }
      }
      value = str.slice(valueStart, i);
    }

    name = name.toLowerCase();
    if (params[name] === undefined)
      params[name] = value;
  }

  return params;
}

function parseDisposition(str, defDecoder) {
  if (str.length === 0)
    return;

  const params = Object.create(null);
  let i = 0;

  for (; i < str.length; ++i) {
    const code = str.charCodeAt(i);
    if (TOKEN[code] !== 1) {
      if (parseDispositionParams(str, i, params, defDecoder) === undefined)
        return;
      break;
    }
  }

  const type = str.slice(0, i).toLowerCase();

  return { type, params };
}

function parseDispositionParams(str, i, params, defDecoder) {
  while (i < str.length) {
    // Consume whitespace
    for (; i < str.length; ++i) {
      const code = str.charCodeAt(i);
      if (code !== 32/* ' ' */ && code !== 9/* '\t' */)
        break;
    }

    // Ended on whitespace
    if (i === str.length)
      break;

    // Check for malformed parameter
    if (str.charCodeAt(i++) !== 59/* ';' */)
      return;

    // Consume whitespace
    for (; i < str.length; ++i) {
      const code = str.charCodeAt(i);
      if (code !== 32/* ' ' */ && code !== 9/* '\t' */)
        break;
    }

    // Ended on whitespace (malformed)
    if (i === str.length)
      return;

    let name;
    const nameStart = i;
    // Parse parameter name
    for (; i < str.length; ++i) {
      const code = str.charCodeAt(i);
      if (TOKEN[code] !== 1) {
        if (code === 61/* '=' */)
          break;
        return;
      }
    }

    // No value (malformed)
    if (i === str.length)
      return;

    let value = '';
    let valueStart;
    let charset;
    //~ let lang;
    name = str.slice(nameStart, i);
    if (name.charCodeAt(name.length - 1) === 42/* '*' */) {
      // Extended value

      const charsetStart = ++i;
      // Parse charset name
      for (; i < str.length; ++i) {
        const code = str.charCodeAt(i);
        if (CHARSET[code] !== 1) {
          if (code !== 39/* '\'' */)
            return;
          break;
        }
      }

      // Incomplete charset (malformed)
      if (i === str.length)
        return;

      charset = str.slice(charsetStart, i);
      ++i; // Skip over the '\''

      //~ const langStart = ++i;
      // Parse language name
      for (; i < str.length; ++i) {
        const code = str.charCodeAt(i);
        if (code === 39/* '\'' */)
          break;
      }

      // Incomplete language (malformed)
      if (i === str.length)
        return;

      //~ lang = str.slice(langStart, i);
      ++i; // Skip over the '\''

      // No value (malformed)
      if (i === str.length)
        return;

      valueStart = i;

      let encode = 0;
      // Parse value
      for (; i < str.length; ++i) {
        const code = str.charCodeAt(i);
        if (EXTENDED_VALUE[code] !== 1) {
          if (code === 37/* '%' */) {
            let hexUpper;
            let hexLower;
            if (i + 2 < str.length
                && (hexUpper = HEX_VALUES[str.charCodeAt(i + 1)]) !== -1
                && (hexLower = HEX_VALUES[str.charCodeAt(i + 2)]) !== -1) {
              const byteVal = (hexUpper << 4) + hexLower;
              value += str.slice(valueStart, i);
              value += String.fromCharCode(byteVal);
              i += 2;
              valueStart = i + 1;
              if (byteVal >= 128)
                encode = 2;
              else if (encode === 0)
                encode = 1;
              continue;
            }
            // '%' disallowed in non-percent encoded contexts (malformed)
            return;
          }
          break;
        }
      }

      value += str.slice(valueStart, i);
      value = convertToUTF8(value, charset, encode);
      if (value === undefined)
        return;
    } else {
      // Non-extended value

      ++i; // Skip over '='

      // No value (malformed)
      if (i === str.length)
        return;

      if (str.charCodeAt(i) === 34/* '"' */) {
        valueStart = ++i;
        let escaping = false;
        // Parse quoted value
        for (; i < str.length; ++i) {
          const code = str.charCodeAt(i);
          if (code === 92/* '\\' */) {
            if (escaping) {
              valueStart = i;
              escaping = false;
            } else {
              value += str.slice(valueStart, i);
              escaping = true;
            }
            continue;
          }
          if (code === 34/* '"' */) {
            if (escaping) {
              valueStart = i;
              escaping = false;
              continue;
            }
            value += str.slice(valueStart, i);
            break;
          }
          if (escaping) {
            valueStart = i - 1;
            escaping = false;
          }
          // Invalid unescaped quoted character (malformed)
          if (QDTEXT[code] !== 1)
            return;
        }

        // No end quote (malformed)
        if (i === str.length)
          return;

        ++i; // Skip over double quote
      } else {
        valueStart = i;
        // Parse unquoted value
        for (; i < str.length; ++i) {
          const code = str.charCodeAt(i);
          if (TOKEN[code] !== 1) {
            // No value (malformed)
            if (i === valueStart)
              return;
            break;
          }
        }
        value = str.slice(valueStart, i);
      }

      value = defDecoder(value, 2);
      if (value === undefined)
        return;
    }

    name = name.toLowerCase();
    if (params[name] === undefined)
      params[name] = value;
  }

  return params;
}

function getDecoder(charset) {
  let lc;
  while (true) {
    switch (charset) {
      case 'utf-8':
      case 'utf8':
        return decoders.utf8;
      case 'latin1':
      case 'ascii': // TODO: Make these a separate, strict decoder?
      case 'us-ascii':
      case 'iso-8859-1':
      case 'iso8859-1':
      case 'iso88591':
      case 'iso_8859-1':
      case 'windows-1252':
      case 'iso_8859-1:1987':
      case 'cp1252':
      case 'x-cp1252':
        return decoders.latin1;
      case 'utf16le':
      case 'utf-16le':
      case 'ucs2':
      case 'ucs-2':
        return decoders.utf16le;
      case 'base64':
        return decoders.base64;
      default:
        if (lc === undefined) {
          lc = true;
          charset = charset.toLowerCase();
          continue;
        }
        return decoders.other.bind(charset);
    }
  }
}

const decoders = {
  utf8: (data, hint) => {
    if (data.length === 0)
      return '';
    if (typeof data === 'string') {
      // If `data` never had any percent-encoded bytes or never had any that
      // were outside of the ASCII range, then we can safely just return the
      // input since UTF-8 is ASCII compatible
      if (hint < 2)
        return data;

      data = Buffer.from(data, 'latin1');
    }
    return data.utf8Slice(0, data.length);
  },

  latin1: (data, hint) => {
    if (data.length === 0)
      return '';
    if (typeof data === 'string')
      return data;
    return data.latin1Slice(0, data.length);
  },

  utf16le: (data, hint) => {
    if (data.length === 0)
      return '';
    if (typeof data === 'string')
      data = Buffer.from(data, 'latin1');
    return data.ucs2Slice(0, data.length);
  },

  base64: (data, hint) => {
    if (data.length === 0)
      return '';
    if (typeof data === 'string')
      data = Buffer.from(data, 'latin1');
    return data.base64Slice(0, data.length);
  },

  other: (data, hint) => {
    if (data.length === 0)
      return '';
    if (typeof data === 'string')
      data = Buffer.from(data, 'latin1');
    try {
      const decoder = new TextDecoder(undefined);
      return decoder.decode(data);
    } catch {}
  },
};

function convertToUTF8(data, charset, hint) {
  const decode = getDecoder(charset);
  if (decode)
    return decode(data, hint);
}

function basename(path) {
  if (typeof path !== 'string')
    return '';
  for (let i = path.length - 1; i >= 0; --i) {
    switch (path.charCodeAt(i)) {
      case 0x2F: // '/'
      case 0x5C: // '\'
        path = path.slice(i + 1);
        return (path === '..' || path === '.' ? '' : path);
    }
  }
  return (path === '..' || path === '.' ? '' : path);
}

const TOKEN = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

const QDTEXT = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
];

const CHARSET = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

const EXTENDED_VALUE = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/* eslint-disable no-multi-spaces */
const HEX_VALUES = [
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1,
  -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
];
/* eslint-enable no-multi-spaces */

var utils = {
  basename,
  convertToUTF8,
  getDecoder,
  parseContentType: parseContentType$1,
  parseDisposition,
};

var sbmh;
var hasRequiredSbmh;

function requireSbmh () {
	if (hasRequiredSbmh) return sbmh;
	hasRequiredSbmh = 1;
	/*
	  Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation
	  by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool
	*/
	function memcmp(buf1, pos1, buf2, pos2, num) {
	  for (let i = 0; i < num; ++i) {
	    if (buf1[pos1 + i] !== buf2[pos2 + i])
	      return false;
	  }
	  return true;
	}

	class SBMH {
	  constructor(needle, cb) {
	    if (typeof cb !== 'function')
	      throw new Error('Missing match callback');

	    if (typeof needle === 'string')
	      needle = Buffer.from(needle);
	    else if (!Buffer.isBuffer(needle))
	      throw new Error(`Expected Buffer for needle, got ${typeof needle}`);

	    const needleLen = needle.length;

	    this.maxMatches = Infinity;
	    this.matches = 0;

	    this._cb = cb;
	    this._lookbehindSize = 0;
	    this._needle = needle;
	    this._bufPos = 0;

	    this._lookbehind = Buffer.allocUnsafe(needleLen);

	    // Initialize occurrence table.
	    this._occ = [
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen, needleLen, needleLen,
	      needleLen, needleLen, needleLen, needleLen
	    ];

	    // Populate occurrence table with analysis of the needle, ignoring the last
	    // letter.
	    if (needleLen > 1) {
	      for (let i = 0; i < needleLen - 1; ++i)
	        this._occ[needle[i]] = needleLen - 1 - i;
	    }
	  }

	  reset() {
	    this.matches = 0;
	    this._lookbehindSize = 0;
	    this._bufPos = 0;
	  }

	  push(chunk, pos) {
	    let result;
	    if (!Buffer.isBuffer(chunk))
	      chunk = Buffer.from(chunk, 'latin1');
	    const chunkLen = chunk.length;
	    this._bufPos = pos || 0;
	    while (result !== chunkLen && this.matches < this.maxMatches)
	      result = feed(this, chunk);
	    return result;
	  }

	  destroy() {
	    const lbSize = this._lookbehindSize;
	    if (lbSize)
	      this._cb(false, this._lookbehind, 0, lbSize, false);
	    this.reset();
	  }
	}

	function feed(self, data) {
	  const len = data.length;
	  const needle = self._needle;
	  const needleLen = needle.length;

	  // Positive: points to a position in `data`
	  //           pos == 3 points to data[3]
	  // Negative: points to a position in the lookbehind buffer
	  //           pos == -2 points to lookbehind[lookbehindSize - 2]
	  let pos = -self._lookbehindSize;
	  const lastNeedleCharPos = needleLen - 1;
	  const lastNeedleChar = needle[lastNeedleCharPos];
	  const end = len - needleLen;
	  const occ = self._occ;
	  const lookbehind = self._lookbehind;

	  if (pos < 0) {
	    // Lookbehind buffer is not empty. Perform Boyer-Moore-Horspool
	    // search with character lookup code that considers both the
	    // lookbehind buffer and the current round's haystack data.
	    //
	    // Loop until
	    //   there is a match.
	    // or until
	    //   we've moved past the position that requires the
	    //   lookbehind buffer. In this case we switch to the
	    //   optimized loop.
	    // or until
	    //   the character to look at lies outside the haystack.
	    while (pos < 0 && pos <= end) {
	      const nextPos = pos + lastNeedleCharPos;
	      const ch = (nextPos < 0
	                  ? lookbehind[self._lookbehindSize + nextPos]
	                  : data[nextPos]);

	      if (ch === lastNeedleChar
	          && matchNeedle(self, data, pos, lastNeedleCharPos)) {
	        self._lookbehindSize = 0;
	        ++self.matches;
	        if (pos > -self._lookbehindSize)
	          self._cb(true, lookbehind, 0, self._lookbehindSize + pos, false);
	        else
	          self._cb(true, undefined, 0, 0, true);

	        return (self._bufPos = pos + needleLen);
	      }

	      pos += occ[ch];
	    }

	    // No match.

	    // There's too few data for Boyer-Moore-Horspool to run,
	    // so let's use a different algorithm to skip as much as
	    // we can.
	    // Forward pos until
	    //   the trailing part of lookbehind + data
	    //   looks like the beginning of the needle
	    // or until
	    //   pos == 0
	    while (pos < 0 && !matchNeedle(self, data, pos, len - pos))
	      ++pos;

	    if (pos < 0) {
	      // Cut off part of the lookbehind buffer that has
	      // been processed and append the entire haystack
	      // into it.
	      const bytesToCutOff = self._lookbehindSize + pos;

	      if (bytesToCutOff > 0) {
	        // The cut off data is guaranteed not to contain the needle.
	        self._cb(false, lookbehind, 0, bytesToCutOff, false);
	      }

	      self._lookbehindSize -= bytesToCutOff;
	      lookbehind.copy(lookbehind, 0, bytesToCutOff, self._lookbehindSize);
	      lookbehind.set(data, self._lookbehindSize);
	      self._lookbehindSize += len;

	      self._bufPos = len;
	      return len;
	    }

	    // Discard lookbehind buffer.
	    self._cb(false, lookbehind, 0, self._lookbehindSize, false);
	    self._lookbehindSize = 0;
	  }

	  pos += self._bufPos;

	  const firstNeedleChar = needle[0];

	  // Lookbehind buffer is now empty. Perform Boyer-Moore-Horspool
	  // search with optimized character lookup code that only considers
	  // the current round's haystack data.
	  while (pos <= end) {
	    const ch = data[pos + lastNeedleCharPos];

	    if (ch === lastNeedleChar
	        && data[pos] === firstNeedleChar
	        && memcmp(needle, 0, data, pos, lastNeedleCharPos)) {
	      ++self.matches;
	      if (pos > 0)
	        self._cb(true, data, self._bufPos, pos, true);
	      else
	        self._cb(true, undefined, 0, 0, true);

	      return (self._bufPos = pos + needleLen);
	    }

	    pos += occ[ch];
	  }

	  // There was no match. If there's trailing haystack data that we cannot
	  // match yet using the Boyer-Moore-Horspool algorithm (because the trailing
	  // data is less than the needle size) then match using a modified
	  // algorithm that starts matching from the beginning instead of the end.
	  // Whatever trailing data is left after running this algorithm is added to
	  // the lookbehind buffer.
	  while (pos < len) {
	    if (data[pos] !== firstNeedleChar
	        || !memcmp(data, pos, needle, 0, len - pos)) {
	      ++pos;
	      continue;
	    }
	    data.copy(lookbehind, 0, pos, len);
	    self._lookbehindSize = len - pos;
	    break;
	  }

	  // Everything until `pos` is guaranteed not to contain needle data.
	  if (pos > 0)
	    self._cb(false, data, self._bufPos, pos < len ? pos : len, true);

	  self._bufPos = len;
	  return len;
	}

	function matchNeedle(self, data, pos, len) {
	  const lb = self._lookbehind;
	  const lbSize = self._lookbehindSize;
	  const needle = self._needle;

	  for (let i = 0; i < len; ++i, ++pos) {
	    const ch = (pos < 0 ? lb[lbSize + pos] : data[pos]);
	    if (ch !== needle[i])
	      return false;
	  }
	  return true;
	}

	sbmh = SBMH;
	return sbmh;
}

var multipart;
var hasRequiredMultipart;

function requireMultipart () {
	if (hasRequiredMultipart) return multipart;
	hasRequiredMultipart = 1;

	const { Readable, Writable } = require$$1$3;

	const StreamSearch = requireSbmh();

	const {
	  basename,
	  convertToUTF8,
	  getDecoder,
	  parseContentType,
	  parseDisposition,
	} = utils;

	const BUF_CRLF = Buffer.from('\r\n');
	const BUF_CR = Buffer.from('\r');
	const BUF_DASH = Buffer.from('-');

	function noop() {}

	const MAX_HEADER_PAIRS = 2000; // From node
	const MAX_HEADER_SIZE = 16 * 1024; // From node (its default value)

	const HPARSER_NAME = 0;
	const HPARSER_PRE_OWS = 1;
	const HPARSER_VALUE = 2;
	class HeaderParser {
	  constructor(cb) {
	    this.header = Object.create(null);
	    this.pairCount = 0;
	    this.byteCount = 0;
	    this.state = HPARSER_NAME;
	    this.name = '';
	    this.value = '';
	    this.crlf = 0;
	    this.cb = cb;
	  }

	  reset() {
	    this.header = Object.create(null);
	    this.pairCount = 0;
	    this.byteCount = 0;
	    this.state = HPARSER_NAME;
	    this.name = '';
	    this.value = '';
	    this.crlf = 0;
	  }

	  push(chunk, pos, end) {
	    let start = pos;
	    while (pos < end) {
	      switch (this.state) {
	        case HPARSER_NAME: {
	          let done = false;
	          for (; pos < end; ++pos) {
	            if (this.byteCount === MAX_HEADER_SIZE)
	              return -1;
	            ++this.byteCount;
	            const code = chunk[pos];
	            if (TOKEN[code] !== 1) {
	              if (code !== 58/* ':' */)
	                return -1;
	              this.name += chunk.latin1Slice(start, pos);
	              if (this.name.length === 0)
	                return -1;
	              ++pos;
	              done = true;
	              this.state = HPARSER_PRE_OWS;
	              break;
	            }
	          }
	          if (!done) {
	            this.name += chunk.latin1Slice(start, pos);
	            break;
	          }
	          // FALLTHROUGH
	        }
	        case HPARSER_PRE_OWS: {
	          // Skip optional whitespace
	          let done = false;
	          for (; pos < end; ++pos) {
	            if (this.byteCount === MAX_HEADER_SIZE)
	              return -1;
	            ++this.byteCount;
	            const code = chunk[pos];
	            if (code !== 32/* ' ' */ && code !== 9/* '\t' */) {
	              start = pos;
	              done = true;
	              this.state = HPARSER_VALUE;
	              break;
	            }
	          }
	          if (!done)
	            break;
	          // FALLTHROUGH
	        }
	        case HPARSER_VALUE:
	          switch (this.crlf) {
	            case 0: // Nothing yet
	              for (; pos < end; ++pos) {
	                if (this.byteCount === MAX_HEADER_SIZE)
	                  return -1;
	                ++this.byteCount;
	                const code = chunk[pos];
	                if (FIELD_VCHAR[code] !== 1) {
	                  if (code !== 13/* '\r' */)
	                    return -1;
	                  ++this.crlf;
	                  break;
	                }
	              }
	              this.value += chunk.latin1Slice(start, pos++);
	              break;
	            case 1: // Received CR
	              if (this.byteCount === MAX_HEADER_SIZE)
	                return -1;
	              ++this.byteCount;
	              if (chunk[pos++] !== 10/* '\n' */)
	                return -1;
	              ++this.crlf;
	              break;
	            case 2: { // Received CR LF
	              if (this.byteCount === MAX_HEADER_SIZE)
	                return -1;
	              ++this.byteCount;
	              const code = chunk[pos];
	              if (code === 32/* ' ' */ || code === 9/* '\t' */) {
	                // Folded value
	                start = pos;
	                this.crlf = 0;
	              } else {
	                if (++this.pairCount < MAX_HEADER_PAIRS) {
	                  this.name = this.name.toLowerCase();
	                  if (this.header[this.name] === undefined)
	                    this.header[this.name] = [this.value];
	                  else
	                    this.header[this.name].push(this.value);
	                }
	                if (code === 13/* '\r' */) {
	                  ++this.crlf;
	                  ++pos;
	                } else {
	                  // Assume start of next header field name
	                  start = pos;
	                  this.crlf = 0;
	                  this.state = HPARSER_NAME;
	                  this.name = '';
	                  this.value = '';
	                }
	              }
	              break;
	            }
	            case 3: { // Received CR LF CR
	              if (this.byteCount === MAX_HEADER_SIZE)
	                return -1;
	              ++this.byteCount;
	              if (chunk[pos++] !== 10/* '\n' */)
	                return -1;
	              // End of header
	              const header = this.header;
	              this.reset();
	              this.cb(header);
	              return pos;
	            }
	          }
	          break;
	      }
	    }

	    return pos;
	  }
	}

	class FileStream extends Readable {
	  constructor(opts, owner) {
	    super(opts);
	    this.truncated = false;
	    this._readcb = null;
	    this.once('end', () => {
	      // We need to make sure that we call any outstanding _writecb() that is
	      // associated with this file so that processing of the rest of the form
	      // can continue. This may not happen if the file stream ends right after
	      // backpressure kicks in, so we force it here.
	      this._read();
	      if (--owner._fileEndsLeft === 0 && owner._finalcb) {
	        const cb = owner._finalcb;
	        owner._finalcb = null;
	        // Make sure other 'end' event handlers get a chance to be executed
	        // before busboy's 'finish' event is emitted
	        process.nextTick(cb);
	      }
	    });
	  }
	  _read(n) {
	    const cb = this._readcb;
	    if (cb) {
	      this._readcb = null;
	      cb();
	    }
	  }
	}

	const ignoreData = {
	  push: (chunk, pos) => {},
	  destroy: () => {},
	};

	function callAndUnsetCb(self, err) {
	  const cb = self._writecb;
	  self._writecb = null;
	  if (err)
	    self.destroy(err);
	  else if (cb)
	    cb();
	}

	function nullDecoder(val, hint) {
	  return val;
	}

	class Multipart extends Writable {
	  constructor(cfg) {
	    const streamOpts = {
	      autoDestroy: true,
	      emitClose: true,
	      highWaterMark: (typeof cfg.highWaterMark === 'number'
	                      ? cfg.highWaterMark
	                      : undefined),
	    };
	    super(streamOpts);

	    if (!cfg.conType.params || typeof cfg.conType.params.boundary !== 'string')
	      throw new Error('Multipart: Boundary not found');

	    const boundary = cfg.conType.params.boundary;
	    const paramDecoder = (typeof cfg.defParamCharset === 'string'
	                            && cfg.defParamCharset
	                          ? getDecoder(cfg.defParamCharset)
	                          : nullDecoder);
	    const defCharset = (cfg.defCharset || 'utf8');
	    const preservePath = cfg.preservePath;
	    const fileOpts = {
	      autoDestroy: true,
	      emitClose: true,
	      highWaterMark: (typeof cfg.fileHwm === 'number'
	                      ? cfg.fileHwm
	                      : undefined),
	    };

	    const limits = cfg.limits;
	    const fieldSizeLimit = (limits && typeof limits.fieldSize === 'number'
	                            ? limits.fieldSize
	                            : 1 * 1024 * 1024);
	    const fileSizeLimit = (limits && typeof limits.fileSize === 'number'
	                           ? limits.fileSize
	                           : Infinity);
	    const filesLimit = (limits && typeof limits.files === 'number'
	                        ? limits.files
	                        : Infinity);
	    const fieldsLimit = (limits && typeof limits.fields === 'number'
	                         ? limits.fields
	                         : Infinity);
	    const partsLimit = (limits && typeof limits.parts === 'number'
	                        ? limits.parts
	                        : Infinity);

	    let parts = -1; // Account for initial boundary
	    let fields = 0;
	    let files = 0;
	    let skipPart = false;

	    this._fileEndsLeft = 0;
	    this._fileStream = undefined;
	    this._complete = false;
	    let fileSize = 0;

	    let field;
	    let fieldSize = 0;
	    let partCharset;
	    let partEncoding;
	    let partType;
	    let partName;
	    let partTruncated = false;

	    let hitFilesLimit = false;
	    let hitFieldsLimit = false;

	    this._hparser = null;
	    const hparser = new HeaderParser((header) => {
	      this._hparser = null;
	      skipPart = false;

	      partType = 'text/plain';
	      partCharset = defCharset;
	      partEncoding = '7bit';
	      partName = undefined;
	      partTruncated = false;

	      let filename;
	      if (!header['content-disposition']) {
	        skipPart = true;
	        return;
	      }

	      const disp = parseDisposition(header['content-disposition'][0],
	                                    paramDecoder);
	      if (!disp || disp.type !== 'form-data') {
	        skipPart = true;
	        return;
	      }

	      if (disp.params) {
	        if (disp.params.name)
	          partName = disp.params.name;

	        if (disp.params['filename*'])
	          filename = disp.params['filename*'];
	        else if (disp.params.filename)
	          filename = disp.params.filename;

	        if (filename !== undefined && !preservePath)
	          filename = basename(filename);
	      }

	      if (header['content-type']) {
	        const conType = parseContentType(header['content-type'][0]);
	        if (conType) {
	          partType = `${conType.type}/${conType.subtype}`;
	          if (conType.params && typeof conType.params.charset === 'string')
	            partCharset = conType.params.charset.toLowerCase();
	        }
	      }

	      if (header['content-transfer-encoding'])
	        partEncoding = header['content-transfer-encoding'][0].toLowerCase();

	      if (partType === 'application/octet-stream' || filename !== undefined) {
	        // File

	        if (files === filesLimit) {
	          if (!hitFilesLimit) {
	            hitFilesLimit = true;
	            this.emit('filesLimit');
	          }
	          skipPart = true;
	          return;
	        }
	        ++files;

	        if (this.listenerCount('file') === 0) {
	          skipPart = true;
	          return;
	        }

	        fileSize = 0;
	        this._fileStream = new FileStream(fileOpts, this);
	        ++this._fileEndsLeft;
	        this.emit(
	          'file',
	          partName,
	          this._fileStream,
	          { filename,
	            encoding: partEncoding,
	            mimeType: partType }
	        );
	      } else {
	        // Non-file

	        if (fields === fieldsLimit) {
	          if (!hitFieldsLimit) {
	            hitFieldsLimit = true;
	            this.emit('fieldsLimit');
	          }
	          skipPart = true;
	          return;
	        }
	        ++fields;

	        if (this.listenerCount('field') === 0) {
	          skipPart = true;
	          return;
	        }

	        field = [];
	        fieldSize = 0;
	      }
	    });

	    let matchPostBoundary = 0;
	    const ssCb = (isMatch, data, start, end, isDataSafe) => {
	retrydata:
	      while (data) {
	        if (this._hparser !== null) {
	          const ret = this._hparser.push(data, start, end);
	          if (ret === -1) {
	            this._hparser = null;
	            hparser.reset();
	            this.emit('error', new Error('Malformed part header'));
	            break;
	          }
	          start = ret;
	        }

	        if (start === end)
	          break;

	        if (matchPostBoundary !== 0) {
	          if (matchPostBoundary === 1) {
	            switch (data[start]) {
	              case 45: // '-'
	                // Try matching '--' after boundary
	                matchPostBoundary = 2;
	                ++start;
	                break;
	              case 13: // '\r'
	                // Try matching CR LF before header
	                matchPostBoundary = 3;
	                ++start;
	                break;
	              default:
	                matchPostBoundary = 0;
	            }
	            if (start === end)
	              return;
	          }

	          if (matchPostBoundary === 2) {
	            matchPostBoundary = 0;
	            if (data[start] === 45/* '-' */) {
	              // End of multipart data
	              this._complete = true;
	              this._bparser = ignoreData;
	              return;
	            }
	            // We saw something other than '-', so put the dash we consumed
	            // "back"
	            const writecb = this._writecb;
	            this._writecb = noop;
	            ssCb(false, BUF_DASH, 0, 1, false);
	            this._writecb = writecb;
	          } else if (matchPostBoundary === 3) {
	            matchPostBoundary = 0;
	            if (data[start] === 10/* '\n' */) {
	              ++start;
	              if (parts >= partsLimit)
	                break;
	              // Prepare the header parser
	              this._hparser = hparser;
	              if (start === end)
	                break;
	              // Process the remaining data as a header
	              continue retrydata;
	            } else {
	              // We saw something other than LF, so put the CR we consumed
	              // "back"
	              const writecb = this._writecb;
	              this._writecb = noop;
	              ssCb(false, BUF_CR, 0, 1, false);
	              this._writecb = writecb;
	            }
	          }
	        }

	        if (!skipPart) {
	          if (this._fileStream) {
	            let chunk;
	            const actualLen = Math.min(end - start, fileSizeLimit - fileSize);
	            if (!isDataSafe) {
	              chunk = Buffer.allocUnsafe(actualLen);
	              data.copy(chunk, 0, start, start + actualLen);
	            } else {
	              chunk = data.slice(start, start + actualLen);
	            }

	            fileSize += chunk.length;
	            if (fileSize === fileSizeLimit) {
	              if (chunk.length > 0)
	                this._fileStream.push(chunk);
	              this._fileStream.emit('limit');
	              this._fileStream.truncated = true;
	              skipPart = true;
	            } else if (!this._fileStream.push(chunk)) {
	              if (this._writecb)
	                this._fileStream._readcb = this._writecb;
	              this._writecb = null;
	            }
	          } else if (field !== undefined) {
	            let chunk;
	            const actualLen = Math.min(
	              end - start,
	              fieldSizeLimit - fieldSize
	            );
	            if (!isDataSafe) {
	              chunk = Buffer.allocUnsafe(actualLen);
	              data.copy(chunk, 0, start, start + actualLen);
	            } else {
	              chunk = data.slice(start, start + actualLen);
	            }

	            fieldSize += actualLen;
	            field.push(chunk);
	            if (fieldSize === fieldSizeLimit) {
	              skipPart = true;
	              partTruncated = true;
	            }
	          }
	        }

	        break;
	      }

	      if (isMatch) {
	        matchPostBoundary = 1;

	        if (this._fileStream) {
	          // End the active file stream if the previous part was a file
	          this._fileStream.push(null);
	          this._fileStream = null;
	        } else if (field !== undefined) {
	          let data;
	          switch (field.length) {
	            case 0:
	              data = '';
	              break;
	            case 1:
	              data = convertToUTF8(field[0], partCharset, 0);
	              break;
	            default:
	              data = convertToUTF8(
	                Buffer.concat(field, fieldSize),
	                partCharset,
	                0
	              );
	          }
	          field = undefined;
	          fieldSize = 0;
	          this.emit(
	            'field',
	            partName,
	            data,
	            { nameTruncated: false,
	              valueTruncated: partTruncated,
	              encoding: partEncoding,
	              mimeType: partType }
	          );
	        }

	        if (++parts === partsLimit)
	          this.emit('partsLimit');
	      }
	    };
	    this._bparser = new StreamSearch(`\r\n--${boundary}`, ssCb);

	    this._writecb = null;
	    this._finalcb = null;

	    // Just in case there is no preamble
	    this.write(BUF_CRLF);
	  }

	  static detect(conType) {
	    return (conType.type === 'multipart' && conType.subtype === 'form-data');
	  }

	  _write(chunk, enc, cb) {
	    this._writecb = cb;
	    this._bparser.push(chunk, 0);
	    if (this._writecb)
	      callAndUnsetCb(this);
	  }

	  _destroy(err, cb) {
	    this._hparser = null;
	    this._bparser = ignoreData;
	    if (!err)
	      err = checkEndState(this);
	    const fileStream = this._fileStream;
	    if (fileStream) {
	      this._fileStream = null;
	      fileStream.destroy(err);
	    }
	    cb(err);
	  }

	  _final(cb) {
	    this._bparser.destroy();
	    if (!this._complete)
	      return cb(new Error('Unexpected end of form'));
	    if (this._fileEndsLeft)
	      this._finalcb = finalcb.bind(null, this, cb);
	    else
	      finalcb(this, cb);
	  }
	}

	function finalcb(self, cb, err) {
	  if (err)
	    return cb(err);
	  err = checkEndState(self);
	  cb(err);
	}

	function checkEndState(self) {
	  if (self._hparser)
	    return new Error('Malformed part header');
	  const fileStream = self._fileStream;
	  if (fileStream) {
	    self._fileStream = null;
	    fileStream.destroy(new Error('Unexpected end of file'));
	  }
	  if (!self._complete)
	    return new Error('Unexpected end of form');
	}

	const TOKEN = [
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
	  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	];

	const FIELD_VCHAR = [
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	];

	multipart = Multipart;
	return multipart;
}

var urlencoded;
var hasRequiredUrlencoded;

function requireUrlencoded () {
	if (hasRequiredUrlencoded) return urlencoded;
	hasRequiredUrlencoded = 1;

	const { Writable } = require$$1$3;

	const { getDecoder } = utils;

	class URLEncoded extends Writable {
	  constructor(cfg) {
	    const streamOpts = {
	      autoDestroy: true,
	      emitClose: true,
	      highWaterMark: (typeof cfg.highWaterMark === 'number'
	                      ? cfg.highWaterMark
	                      : undefined),
	    };
	    super(streamOpts);

	    let charset = (cfg.defCharset || 'utf8');
	    if (cfg.conType.params && typeof cfg.conType.params.charset === 'string')
	      charset = cfg.conType.params.charset;

	    this.charset = charset;

	    const limits = cfg.limits;
	    this.fieldSizeLimit = (limits && typeof limits.fieldSize === 'number'
	                           ? limits.fieldSize
	                           : 1 * 1024 * 1024);
	    this.fieldsLimit = (limits && typeof limits.fields === 'number'
	                        ? limits.fields
	                        : Infinity);
	    this.fieldNameSizeLimit = (
	      limits && typeof limits.fieldNameSize === 'number'
	      ? limits.fieldNameSize
	      : 100
	    );

	    this._inKey = true;
	    this._keyTrunc = false;
	    this._valTrunc = false;
	    this._bytesKey = 0;
	    this._bytesVal = 0;
	    this._fields = 0;
	    this._key = '';
	    this._val = '';
	    this._byte = -2;
	    this._lastPos = 0;
	    this._encode = 0;
	    this._decoder = getDecoder(charset);
	  }

	  static detect(conType) {
	    return (conType.type === 'application'
	            && conType.subtype === 'x-www-form-urlencoded');
	  }

	  _write(chunk, enc, cb) {
	    if (this._fields >= this.fieldsLimit)
	      return cb();

	    let i = 0;
	    const len = chunk.length;
	    this._lastPos = 0;

	    // Check if we last ended mid-percent-encoded byte
	    if (this._byte !== -2) {
	      i = readPctEnc(this, chunk, i, len);
	      if (i === -1)
	        return cb(new Error('Malformed urlencoded form'));
	      if (i >= len)
	        return cb();
	      if (this._inKey)
	        ++this._bytesKey;
	      else
	        ++this._bytesVal;
	    }

	main:
	    while (i < len) {
	      if (this._inKey) {
	        // Parsing key

	        i = skipKeyBytes(this, chunk, i, len);

	        while (i < len) {
	          switch (chunk[i]) {
	            case 61: // '='
	              if (this._lastPos < i)
	                this._key += chunk.latin1Slice(this._lastPos, i);
	              this._lastPos = ++i;
	              this._key = this._decoder(this._key, this._encode);
	              this._encode = 0;
	              this._inKey = false;
	              continue main;
	            case 38: // '&'
	              if (this._lastPos < i)
	                this._key += chunk.latin1Slice(this._lastPos, i);
	              this._lastPos = ++i;
	              this._key = this._decoder(this._key, this._encode);
	              this._encode = 0;
	              if (this._bytesKey > 0) {
	                this.emit(
	                  'field',
	                  this._key,
	                  '',
	                  { nameTruncated: this._keyTrunc,
	                    valueTruncated: false,
	                    encoding: this.charset,
	                    mimeType: 'text/plain' }
	                );
	              }
	              this._key = '';
	              this._val = '';
	              this._keyTrunc = false;
	              this._valTrunc = false;
	              this._bytesKey = 0;
	              this._bytesVal = 0;
	              if (++this._fields >= this.fieldsLimit) {
	                this.emit('fieldsLimit');
	                return cb();
	              }
	              continue;
	            case 43: // '+'
	              if (this._lastPos < i)
	                this._key += chunk.latin1Slice(this._lastPos, i);
	              this._key += ' ';
	              this._lastPos = i + 1;
	              break;
	            case 37: // '%'
	              if (this._encode === 0)
	                this._encode = 1;
	              if (this._lastPos < i)
	                this._key += chunk.latin1Slice(this._lastPos, i);
	              this._lastPos = i + 1;
	              this._byte = -1;
	              i = readPctEnc(this, chunk, i + 1, len);
	              if (i === -1)
	                return cb(new Error('Malformed urlencoded form'));
	              if (i >= len)
	                return cb();
	              ++this._bytesKey;
	              i = skipKeyBytes(this, chunk, i, len);
	              continue;
	          }
	          ++i;
	          ++this._bytesKey;
	          i = skipKeyBytes(this, chunk, i, len);
	        }
	        if (this._lastPos < i)
	          this._key += chunk.latin1Slice(this._lastPos, i);
	      } else {
	        // Parsing value

	        i = skipValBytes(this, chunk, i, len);

	        while (i < len) {
	          switch (chunk[i]) {
	            case 38: // '&'
	              if (this._lastPos < i)
	                this._val += chunk.latin1Slice(this._lastPos, i);
	              this._lastPos = ++i;
	              this._inKey = true;
	              this._val = this._decoder(this._val, this._encode);
	              this._encode = 0;
	              if (this._bytesKey > 0 || this._bytesVal > 0) {
	                this.emit(
	                  'field',
	                  this._key,
	                  this._val,
	                  { nameTruncated: this._keyTrunc,
	                    valueTruncated: this._valTrunc,
	                    encoding: this.charset,
	                    mimeType: 'text/plain' }
	                );
	              }
	              this._key = '';
	              this._val = '';
	              this._keyTrunc = false;
	              this._valTrunc = false;
	              this._bytesKey = 0;
	              this._bytesVal = 0;
	              if (++this._fields >= this.fieldsLimit) {
	                this.emit('fieldsLimit');
	                return cb();
	              }
	              continue main;
	            case 43: // '+'
	              if (this._lastPos < i)
	                this._val += chunk.latin1Slice(this._lastPos, i);
	              this._val += ' ';
	              this._lastPos = i + 1;
	              break;
	            case 37: // '%'
	              if (this._encode === 0)
	                this._encode = 1;
	              if (this._lastPos < i)
	                this._val += chunk.latin1Slice(this._lastPos, i);
	              this._lastPos = i + 1;
	              this._byte = -1;
	              i = readPctEnc(this, chunk, i + 1, len);
	              if (i === -1)
	                return cb(new Error('Malformed urlencoded form'));
	              if (i >= len)
	                return cb();
	              ++this._bytesVal;
	              i = skipValBytes(this, chunk, i, len);
	              continue;
	          }
	          ++i;
	          ++this._bytesVal;
	          i = skipValBytes(this, chunk, i, len);
	        }
	        if (this._lastPos < i)
	          this._val += chunk.latin1Slice(this._lastPos, i);
	      }
	    }

	    cb();
	  }

	  _final(cb) {
	    if (this._byte !== -2)
	      return cb(new Error('Malformed urlencoded form'));
	    if (!this._inKey || this._bytesKey > 0 || this._bytesVal > 0) {
	      if (this._inKey)
	        this._key = this._decoder(this._key, this._encode);
	      else
	        this._val = this._decoder(this._val, this._encode);
	      this.emit(
	        'field',
	        this._key,
	        this._val,
	        { nameTruncated: this._keyTrunc,
	          valueTruncated: this._valTrunc,
	          encoding: this.charset,
	          mimeType: 'text/plain' }
	      );
	    }
	    cb();
	  }
	}

	function readPctEnc(self, chunk, pos, len) {
	  if (pos >= len)
	    return len;

	  if (self._byte === -1) {
	    // We saw a '%' but no hex characters yet
	    const hexUpper = HEX_VALUES[chunk[pos++]];
	    if (hexUpper === -1)
	      return -1;

	    if (hexUpper >= 8)
	      self._encode = 2; // Indicate high bits detected

	    if (pos < len) {
	      // Both hex characters are in this chunk
	      const hexLower = HEX_VALUES[chunk[pos++]];
	      if (hexLower === -1)
	        return -1;

	      if (self._inKey)
	        self._key += String.fromCharCode((hexUpper << 4) + hexLower);
	      else
	        self._val += String.fromCharCode((hexUpper << 4) + hexLower);

	      self._byte = -2;
	      self._lastPos = pos;
	    } else {
	      // Only one hex character was available in this chunk
	      self._byte = hexUpper;
	    }
	  } else {
	    // We saw only one hex character so far
	    const hexLower = HEX_VALUES[chunk[pos++]];
	    if (hexLower === -1)
	      return -1;

	    if (self._inKey)
	      self._key += String.fromCharCode((self._byte << 4) + hexLower);
	    else
	      self._val += String.fromCharCode((self._byte << 4) + hexLower);

	    self._byte = -2;
	    self._lastPos = pos;
	  }

	  return pos;
	}

	function skipKeyBytes(self, chunk, pos, len) {
	  // Skip bytes if we've truncated
	  if (self._bytesKey > self.fieldNameSizeLimit) {
	    if (!self._keyTrunc) {
	      if (self._lastPos < pos)
	        self._key += chunk.latin1Slice(self._lastPos, pos - 1);
	    }
	    self._keyTrunc = true;
	    for (; pos < len; ++pos) {
	      const code = chunk[pos];
	      if (code === 61/* '=' */ || code === 38/* '&' */)
	        break;
	      ++self._bytesKey;
	    }
	    self._lastPos = pos;
	  }

	  return pos;
	}

	function skipValBytes(self, chunk, pos, len) {
	  // Skip bytes if we've truncated
	  if (self._bytesVal > self.fieldSizeLimit) {
	    if (!self._valTrunc) {
	      if (self._lastPos < pos)
	        self._val += chunk.latin1Slice(self._lastPos, pos - 1);
	    }
	    self._valTrunc = true;
	    for (; pos < len; ++pos) {
	      if (chunk[pos] === 38/* '&' */)
	        break;
	      ++self._bytesVal;
	    }
	    self._lastPos = pos;
	  }

	  return pos;
	}

	/* eslint-disable no-multi-spaces */
	const HEX_VALUES = [
	  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1,
	  -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	  -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	];
	/* eslint-enable no-multi-spaces */

	urlencoded = URLEncoded;
	return urlencoded;
}

const { parseContentType } = utils;

function getInstance(cfg) {
  const headers = cfg.headers;
  const conType = parseContentType(headers['content-type']);
  if (!conType)
    throw new Error('Malformed content type');

  for (const type of TYPES) {
    const matched = type.detect(conType);
    if (!matched)
      continue;

    const instanceCfg = {
      limits: cfg.limits,
      headers,
      conType,
      highWaterMark: undefined,
      fileHwm: undefined,
      defCharset: undefined,
      defParamCharset: undefined,
      preservePath: false,
    };
    if (cfg.highWaterMark)
      instanceCfg.highWaterMark = cfg.highWaterMark;
    if (cfg.fileHwm)
      instanceCfg.fileHwm = cfg.fileHwm;
    instanceCfg.defCharset = cfg.defCharset;
    instanceCfg.defParamCharset = cfg.defParamCharset;
    instanceCfg.preservePath = cfg.preservePath;
    return new type(instanceCfg);
  }

  throw new Error(`Unsupported content type: ${headers['content-type']}`);
}

// Note: types are explicitly listed here for easier bundling
// See: https://github.com/mscdex/busboy/issues/121
const TYPES = [
  requireMultipart(),
  requireUrlencoded(),
].filter(function(typemod) { return typeof typemod.detect === 'function'; });

var lib$2 = (cfg) => {
  if (typeof cfg !== 'object' || cfg === null)
    cfg = {};

  if (typeof cfg.headers !== 'object'
      || cfg.headers === null
      || typeof cfg.headers['content-type'] !== 'string') {
    throw new Error('Missing Content-Type');
  }

  return getInstance(cfg);
};

let UploadTimer$1 = class UploadTimer {
  /**
   * @constructor
   * @param {number} timeout - timer timeout in msecs.
   * @param {Function} callback - callback to run when timeout reached.
   */
  constructor(timeout, callback) {
    this.timeout = timeout || 0;
    this.callback = callback || (() => {});
    this.timer = null;
  }

  /**
   * Sets the timer.
   * Initializes & starts the timer.
   * @returns {boolean} True if timer has been set.
   */
  set() {
    if (this.timer || !this.timeout) return false;
    this.timer = setTimeout(() => {
      this.clear();
      this.callback();
    }, this.timeout);
    return true;
  }

  /**
   * Clears the timer.
   * If timer cleared, it has to be re-initialized again with set method.
   */
  clear() {
    clearTimeout(this.timer);
  }

  /**
   * Refreshes timer.
   * @returns {boolean} True if timer has been refreshed.
   */
  refresh() {
    // Do nothing if zero/empty timeout or timer hasn't been initialized.
    if (!this.timer) return false;
    this.timer.refresh();
    return true;
  }
};

var uploadtimer = UploadTimer$1;

const fs$1 = require$$1$2;
const path$2 = path$6;
const { Readable } = require$$1$3;

// Parameters for safe file name parsing.
const SAFE_FILE_NAME_REGEX = /[^\w-]/g;
const MAX_EXTENSION_LENGTH = 3;

// Parameters to generate unique temporary file names:
const TEMP_COUNTER_MAX = 65536;
const TEMP_PREFIX = 'tmp';
let tempCounter = 0;

/**
 * Logs message to console if debug option set to true.
 * @param {Object} options - options object.
 * @param {string} msg - message to log.
 * @returns {boolean} - false if debug is off.
 */
const debugLog$5 = (options, msg) => {
  const opts = options || {};
  if (!opts.debug || !opts.logger || typeof opts.logger.log !== "function") return false;
  opts.logger.log(`Express-file-upload: ${msg}`);
  return true;
};

/**
 * Generates unique temporary file name. e.g. tmp-5000-156788789789.
 * @param {string} prefix - a prefix for generated unique file name.
 * @returns {string}
 */
const getTempFilename$1 = (prefix = TEMP_PREFIX) => {
  tempCounter = tempCounter >= TEMP_COUNTER_MAX ? 1 : tempCounter + 1;
  return `${prefix}-${tempCounter}-${Date.now()}`;
};

/**
 * isFunc: Checks if argument is a function.
 * @returns {boolean} - Returns true if argument is a function.
 */
const isFunc$2 = func => func && func.constructor && func.call && func.apply ? true: false;

/**
 * Set errorFunc to the same value as successFunc for callback mode.
 * @returns {Function}
 */
const errorFunc = (resolve, reject) => isFunc$2(reject) ? reject : resolve;

/**
 * Return a callback function for promise resole/reject args.
 * Ensures that callback is called only once.
 * @returns {Function}
 */
const promiseCallback$1 = (resolve, reject) => {
  let hasFired = false;
  return (err) => {
    if (hasFired) {
      return;
    }

    hasFired = true;
    return err ? errorFunc(resolve, reject)(err) : resolve();
  };
};

/**
 * Builds instance options from arguments objects(can't be arrow function).
 * @returns {Object} - result options.
 */
const buildOptions$2 = function() {
  const result = {};
  [...arguments].forEach(options => {
    if (!options || typeof options !== 'object') return;
    Object.keys(options).forEach(i => result[i] = options[i]);
  });
  return result;
};

// The default prototypes for both objects and arrays.
// Used by isSafeFromPollution
const OBJECT_PROTOTYPE_KEYS = Object.getOwnPropertyNames(Object.prototype);
const ARRAY_PROTOTYPE_KEYS = Object.getOwnPropertyNames(Array.prototype);

/**
 * Determines whether a key insertion into an object could result in a prototype pollution
 * @param {Object} base - The object whose insertion we are checking
 * @param {string} key - The key that will be inserted
 */
const isSafeFromPollution$1 = (base, key) => {
  // We perform an instanceof check instead of Array.isArray as the former is more
  // permissive for cases in which the object as an Array prototype but was not constructed
  // via an Array constructor or literal.
  const TOUCHES_ARRAY_PROTOTYPE = (base instanceof Array) && ARRAY_PROTOTYPE_KEYS.includes(key);
  const TOUCHES_OBJECT_PROTOTYPE = OBJECT_PROTOTYPE_KEYS.includes(key);

  return !TOUCHES_ARRAY_PROTOTYPE && !TOUCHES_OBJECT_PROTOTYPE;
};

/**
 * Builds request fields (using to build req.body and req.files)
 * @param {Object} instance - request object.
 * @param {string} field - field name.
 * @param {any} value - field value.
 * @returns {Object}
 */
const buildFields$1 = (instance, field, value) => {
  // Do nothing if value is not set.
  if (value === null || value === undefined) return instance;
  instance = instance || Object.create(null);

  if (!isSafeFromPollution$1(instance, field)) {
    return instance;
  }
  // Non-array fields
  if (!instance[field]) {
    instance[field] = value;
    return instance;
  }
  // Array fields
  if (instance[field] instanceof Array) {
    instance[field].push(value);
  } else {
    instance[field] = [instance[field], value];
  }
  return instance;
};

/**
 * Creates a folder for file specified in the path variable
 * @param {Object} fileUploadOptions
 * @param {string} filePath
 * @returns {boolean}
 */
const checkAndMakeDir$2 = (fileUploadOptions, filePath) => {
  // Check upload options were set.
  if (!fileUploadOptions) return false;
  if (!fileUploadOptions.createParentPath) return false;
  // Check whether folder for the file exists.
  if (!filePath) return false;
  const parentPath = path$2.dirname(filePath);
  // Create folder if it doesn't exist.
  if (!fs$1.existsSync(parentPath)) fs$1.mkdirSync(parentPath, { recursive: true });
  // Checks folder again and return a results.
  return fs$1.existsSync(parentPath);
};

/**
 * Deletes a file.
 * @param {string} file - Path to the file to delete.
 * @param {Function} callback
 */
const deleteFile$1 = (file, callback) => fs$1.unlink(file, callback);

/**
 * Copy file via streams
 * @param {string} src - Path to the source file
 * @param {string} dst - Path to the destination file.
 */
const copyFile = (src, dst, callback) => {
  // cbCalled flag and runCb helps to run cb only once.
  let cbCalled = false;
  let runCb = (err) => {
    if (cbCalled) return;
    cbCalled = true;
    callback(err);
  };
  // Create read stream
  let readable = fs$1.createReadStream(src);
  readable.on('error', runCb);
  // Create write stream
  let writable = fs$1.createWriteStream(dst);
  writable.on('error', (err)=>{
    readable.destroy();
    runCb(err);
  });
  writable.on('close', () => runCb());
  // Copy file via piping streams.
  readable.pipe(writable);
};

/**
 * moveFile: moves the file from src to dst.
 * Firstly trying to rename the file if no luck copying it to dst and then deleteing src.
 * @param {string} src - Path to the source file
 * @param {string} dst - Path to the destination file.
 * @param {Function} callback - A callback function with renamed flag.
 */
const moveFile$1 = (src, dst, callback) => fs$1.rename(src, dst, (err) => {
  if (err) {
    // Try to copy file if rename didn't work.
    copyFile(src, dst, (cpErr) => (cpErr ? callback(cpErr) : deleteFile$1(src, callback)));
    return;
  }
  // File was renamed successfully: Add true to the callback to indicate that.
  callback(null, true);
});

/**
 * Save buffer data to a file.
 * @param {Buffer} buffer - buffer to save to a file.
 * @param {string} filePath - path to a file.
 */
const saveBufferToFile$1 = (buffer, filePath, callback) => {
  if (!Buffer.isBuffer(buffer)) {
    return callback(new Error('buffer variable should be type of Buffer!'));
  }
  // Setup readable stream from buffer.
  let streamData = buffer;
  let readStream = Readable();
  readStream._read = () => {
    readStream.push(streamData);
    streamData = null;
  };
  // Setup file system writable stream.
  let fstream = fs$1.createWriteStream(filePath);
  // console.log("Calling saveBuffer");
  fstream.on('error', err => {
    // console.log("err cb")
    callback(err);
  });
  fstream.on('close', () => {
    // console.log("close cb");
    callback();
  });
  // Copy file via piping streams.
  readStream.pipe(fstream);
};

/**
 * Decodes uriEncoded file names.
 * @param {Object} opts - middleware options.
 * @param fileName {String} - file name to decode.
 * @returns {String}
 */
const uriDecodeFileName = (opts, fileName) => {
  if (!opts || !opts.uriDecodeFileNames) {
    return fileName;
  }
  // Decode file name from URI with checking URI malformed errors.
  // See Issue https://github.com/richardgirges/express-fileupload/issues/342.
  try {
    return decodeURIComponent(fileName);
  } catch (err) {
    const matcher = /(%[a-f0-9]{2})/gi;
    return fileName.split(matcher)
      .map((str) => {
        try {
          return decodeURIComponent(str);
        } catch (err) {
          return '';
        }
      })
      .join('');
  }
};

/**
 * Parses filename and extension and returns object {name, extension}.
 * @param {boolean|integer} preserveExtension - true/false or number of characters for extension.
 * @param {string} fileName - file name to parse.
 * @returns {Object} - { name, extension }.
 */
const parseFileNameExtension = (preserveExtension, fileName) => {
  const preserveExtensionLength = parseInt(preserveExtension);
  const result = {name: fileName, extension: ''};
  if (!preserveExtension && preserveExtensionLength !== 0) return result;
  // Define maximum extension length
  const maxExtLength = isNaN(preserveExtensionLength)
    ? MAX_EXTENSION_LENGTH
    : Math.abs(preserveExtensionLength);

  const nameParts = fileName.split('.');
  if (nameParts.length < 2) return result;

  let extension = nameParts.pop();
  if (
    extension.length > maxExtLength &&
    maxExtLength > 0
  ) {
    nameParts[nameParts.length - 1] +=
      '.' +
      extension.substr(0, extension.length - maxExtLength);
    extension = extension.substr(-maxExtLength);
  }

  result.extension = maxExtLength ? extension : '';
  result.name = nameParts.join('.');
  return result;
};

/**
 * Parse file name and extension.
 * @param {Object} opts - middleware options.
 * @param {string} fileName - Uploaded file name.
 * @returns {string}
 */
const parseFileName$1 = (opts, fileName) => {
  // Check fileName argument
  if (!fileName || typeof fileName !== 'string') return getTempFilename$1();
  // Cut off file name if it's lenght more then 255.
  let parsedName = fileName.length <= 255 ? fileName : fileName.substr(0, 255);
  // Decode file name if uriDecodeFileNames option set true.
  parsedName = uriDecodeFileName(opts, parsedName);
  // Stop parsing file name if safeFileNames options hasn't been set.
  if (!opts.safeFileNames) return parsedName;
  // Set regular expression for the file name.
  const nameRegex = typeof opts.safeFileNames === 'object' && opts.safeFileNames instanceof RegExp
    ? opts.safeFileNames
    : SAFE_FILE_NAME_REGEX;
  // Parse file name extension.
  let {name, extension} = parseFileNameExtension(opts.preserveExtension, parsedName);
  if (extension.length) extension = '.' + extension.replace(nameRegex, '');

  return name.replace(nameRegex, '').concat(extension);
};

var utilities = {
  isFunc: isFunc$2,
  debugLog: debugLog$5,
  copyFile, // For testing purpose.
  moveFile: moveFile$1,
  errorFunc,
  deleteFile: deleteFile$1, // For testing purpose.
  buildFields: buildFields$1,
  buildOptions: buildOptions$2,
  parseFileName: parseFileName$1,
  getTempFilename: getTempFilename$1,
  promiseCallback: promiseCallback$1,
  checkAndMakeDir: checkAndMakeDir$2,
  saveBufferToFile: saveBufferToFile$1,
  uriDecodeFileName,
  isSafeFromPollution: isSafeFromPollution$1
};

const {
  isFunc: isFunc$1,
  debugLog: debugLog$4,
  moveFile,
  promiseCallback,
  checkAndMakeDir: checkAndMakeDir$1,
  saveBufferToFile
} = utilities;

/**
 * Returns Local function that moves the file to a different location on the filesystem
 * which takes two function arguments to make it compatible w/ Promise or Callback APIs
 * @param {String} filePath - destination file path.
 * @param {Object} options - file factory options.
 * @param {Object} fileUploadOptions - middleware options.
 * @returns {Function}
 */
const moveFromTemp = (filePath, options, fileUploadOptions) => (resolve, reject) => {
  debugLog$4(fileUploadOptions, `Moving temporary file ${options.tempFilePath} to ${filePath}`);
  moveFile(options.tempFilePath, filePath, promiseCallback(resolve, reject));
};

/**
 * Returns Local function that moves the file from buffer to a different location on the filesystem
 * which takes two function arguments to make it compatible w/ Promise or Callback APIs
 * @param {String} filePath - destination file path.
 * @param {Object} options - file factory options.
 * @param {Object} fileUploadOptions - middleware options.
 * @returns {Function}
 */
const moveFromBuffer = (filePath, options, fileUploadOptions) => (resolve, reject) => {
  debugLog$4(fileUploadOptions, `Moving uploaded buffer to ${filePath}`);
  saveBufferToFile(options.buffer, filePath, promiseCallback(resolve, reject));
};

var fileFactory$1 = (options, fileUploadOptions = {}) => {
  // see: https://github.com/richardgirges/express-fileupload/issues/14
  // firefox uploads empty file in case of cache miss when f5ing page.
  // resulting in unexpected behavior. if there is no file data, the file is invalid.
  // if (!fileUploadOptions.useTempFiles && !options.buffer.length) return;
  
  // Create and return file object.
  return {
    name: options.name,
    data: options.buffer,
    size: options.size,
    encoding: options.encoding,
    tempFilePath: options.tempFilePath,
    truncated: options.truncated,
    mimetype: options.mimetype,
    md5: options.hash,
    mv: (filePath, callback) => {
      // Define a propper move function.
      const moveFunc = fileUploadOptions.useTempFiles
        ? moveFromTemp(filePath, options, fileUploadOptions)
        : moveFromBuffer(filePath, options, fileUploadOptions);
      // Create a folder for a file.
      checkAndMakeDir$1(fileUploadOptions, filePath);
      // If callback is passed in, use the callback API, otherwise return a promise.
      return isFunc$1(callback) ? moveFunc(callback) : new Promise(moveFunc);
    }
  };
};

const crypto$1 = require$$0$8;
const { debugLog: debugLog$3 } = utilities;

/**
 * memHandler - In memory upload handler
 * @param {Object} options
 * @param {String} fieldname
 * @param {String} filename
 * @returns {Object}
 */
var memHandler$1 = (options, fieldname, filename) => {
  const buffers = [];
  const hash = crypto$1.createHash('md5');
  let fileSize = 0;
  let completed = false;

  const getBuffer = () => Buffer.concat(buffers, fileSize);

  return {
    dataHandler: (data) => {
      if (completed === true) {
        debugLog$3(options, `Error: got ${fieldname}->${filename} data chunk for completed upload!`);
        return;
      }
      buffers.push(data);
      hash.update(data);
      fileSize += data.length;
      debugLog$3(options, `Uploading ${fieldname}->${filename}, bytes:${fileSize}...`);
    },
    getBuffer: getBuffer,
    getFilePath: () => '',
    getFileSize: () => fileSize,
    getHash: () => hash.digest('hex'),
    complete: () => {
      debugLog$3(options, `Upload ${fieldname}->${filename} completed, bytes:${fileSize}.`);
      completed = true;
      return getBuffer();
    },
    cleanup: () => { completed = true; },
    getWritePromise: () => Promise.resolve()
  };
};

const fs = require$$1$2;
const path$1 = path$6;
const crypto = require$$0$8;
const {
  debugLog: debugLog$2,
  checkAndMakeDir,
  getTempFilename,
  deleteFile
} = utilities;

var tempFileHandler$1 = (options, fieldname, filename) => {
  const dir = path$1.normalize(options.tempFileDir);
  const tempFilePath = path$1.join(dir, getTempFilename());
  checkAndMakeDir({ createParentPath: true }, tempFilePath);

  debugLog$2(options, `Temporary file path is ${tempFilePath}`);
 
  const hash = crypto.createHash('md5');
  let fileSize = 0;
  let completed = false;

  debugLog$2(options, `Opening write stream for ${fieldname}->${filename}...`);
  const writeStream = fs.createWriteStream(tempFilePath);
  const writePromise = new Promise((resolve, reject) => {
    writeStream.on('finish', () => resolve());
    writeStream.on('error', (err) => {
      debugLog$2(options, `Error write temp file: ${err}`);
      reject(err);
    });
  });

  return {
    dataHandler: (data) => {
      if (completed === true) {
        debugLog$2(options, `Error: got ${fieldname}->${filename} data chunk for completed upload!`);
        return;
      }
      writeStream.write(data);
      hash.update(data);
      fileSize += data.length;
      debugLog$2(options, `Uploading ${fieldname}->${filename}, bytes:${fileSize}...`);
    },
    getFilePath: () => tempFilePath,
    getFileSize: () => fileSize,
    getHash: () => hash.digest('hex'),
    complete: () => {
      completed = true;
      debugLog$2(options, `Upload ${fieldname}->${filename} completed, bytes:${fileSize}.`);
      if (writeStream !== false) writeStream.end();
      // Return empty buff since data was uploaded into a temp file.
      return Buffer.concat([]);
    },
    cleanup: () => {
      completed = true;
      debugLog$2(options, `Cleaning up temporary file ${tempFilePath}...`);
      writeStream.end();
      deleteFile(tempFilePath, err => (err
        ? debugLog$2(options, `Cleaning up temporary file ${tempFilePath} failed: ${err}`)
        : debugLog$2(options, `Cleaning up temporary file ${tempFilePath} done.`)
      ));
    },
    getWritePromise: () => writePromise
  };
};

const { isSafeFromPollution } = utilities;

var processNested$1 = function(data){
  if (!data || data.length < 1) return Object.create(null);

  let d = Object.create(null),
    keys = Object.keys(data);

  for (let i = 0; i < keys.length; i++) {
    let key = keys[i],
      value = data[key],
      current = d,
      keyParts = key
        .replace(new RegExp(/\[/g), '.')
        .replace(new RegExp(/\]/g), '')
        .split('.');

    for (let index = 0; index < keyParts.length; index++){
      let k = keyParts[index];

      // Ensure we don't allow prototype pollution
      if (!isSafeFromPollution(current, k)) {
        continue;
      }

      if (index >= keyParts.length - 1){
        current[k] = value;
      } else {
        if (!current[k]) current[k] = !isNaN(keyParts[index + 1]) ? [] : Object.create(null);
        current = current[k];
      }
    }
  }
  return d;
};

const Busboy = lib$2;
const UploadTimer = uploadtimer;
const fileFactory = fileFactory$1;
const memHandler = memHandler$1;
const tempFileHandler = tempFileHandler$1;
const processNested = processNested$1;
const {
  isFunc,
  debugLog: debugLog$1,
  buildFields,
  buildOptions: buildOptions$1,
  parseFileName
} = utilities;

const waitFlushProperty = Symbol('wait flush property symbol');

/**
 * Processes multipart request
 * Builds a req.body object for fields
 * Builds a req.files object for files
 * @param  {Object}   options expressFileupload and Busboy options
 * @param  {Object}   req     Express request object
 * @param  {Object}   res     Express response object
 * @param  {Function} next    Express next method
 * @return {void}
 */
var processMultipart$1 = (options, req, res, next) => {
  req.files = null;

  // Build busboy options and init busboy instance.
  const busboyOptions = buildOptions$1(options, { headers: req.headers });
  const busboy = Busboy(busboyOptions);

  /**
   * Closes connection with specified reason and http code.
   * @param {number} code HTTP response code, default: 400.
   * @param {*} reason Reason to close connection, default: 'Bad Request'.
   */
  const closeConnection = (code, reason) => {
    req.unpipe(busboy);
    req.resume();
    if (res.headersSent) {
      debugLog$1(options, 'Headers already sent, can\'t close connection.');
      return;
    }
    const resCode = code || 400;
    const resReason = reason || 'Bad Request';
    debugLog$1(options, `Closing connection with ${resCode}: ${resReason}`);
    res.writeHead(resCode, { Connection: 'close' });
    res.end(resReason);
  };

  // Express proxies sometimes attach multipart data to a buffer
  if (req.body instanceof Buffer) {
    req.body = Object.create(null);
  }
  // Build multipart req.body fields
  busboy.on('field', (field, val) => req.body = buildFields(req.body, field, val));

  // Build req.files fields
  busboy.on('file', (field, file, info) => {
    // Parse file name(cutting huge names, decoding, etc..).
    const {filename:name, encoding, mimeType: mime} = info;
    const filename = parseFileName(options, name);
    // Define methods and handlers for upload process.
    const {
      dataHandler,
      getFilePath,
      getFileSize,
      getHash,
      complete,
      cleanup,
      getWritePromise
    } = options.useTempFiles
      ? tempFileHandler(options, field, filename) // Upload into temporary file.
      : memHandler(options, field, filename);     // Upload into RAM.

    const writePromise = options.useTempFiles
      ? getWritePromise().catch(err => {
        req.unpipe(busboy);
        req.resume();
        cleanup();
        next(err);
      }) : getWritePromise();

    // Define upload timer.
    const uploadTimer = new UploadTimer(options.uploadTimeout, () => {
      file.removeAllListeners('data');
      file.resume();
      // After destroy an error event will be emitted and file clean up will be done.
      // In some cases file.destroy() doesn't exist, so we need to check this, see issue:
      // https://github.com/richardgirges/express-fileupload/issues/259.
      const err = new Error(`Upload timeout for ${field}->${filename}, bytes:${getFileSize()}`);
      return isFunc(file.destroy) ? file.destroy(err) : file.emit('error', err);
    });

    file.on('limit', () => {
      debugLog$1(options, `Size limit reached for ${field}->${filename}, bytes:${getFileSize()}`);
      // Reset upload timer in case of file limit reached.
      uploadTimer.clear();
      // Run a user defined limit handler if it has been set.
      if (isFunc(options.limitHandler)) {
        options.limitHandler(req, res, next);
      }
      // Close connection with 413 code and do cleanup if abortOnLimit set(default: false).
      if (options.abortOnLimit) {
        debugLog$1(options, `Aborting upload because of size limit ${field}->${filename}.`);
        closeConnection(413, options.responseOnLimit);
        cleanup();
      }
    });

    file.on('data', (data) => {
      uploadTimer.refresh(); // Refresh upload timer each time new data chunk came.
      dataHandler(data); // Handle new piece of data.
    });

    file.on('end', () => {
      const size = getFileSize();
      // Debug logging for file upload ending.
      debugLog$1(options, `Upload finished ${field}->${filename}, bytes:${size}`);
      // Reset upload timer in case of end event.
      uploadTimer.clear();
      // See https://github.com/richardgirges/express-fileupload/issues/191
      // Do not add file instance to the req.files if original name and size are empty.
      // Empty name and zero size indicates empty file field in the posted form.
      if (!name && size === 0) {
        if (options.useTempFiles) {
          cleanup();
          debugLog$1(options, `Removing the empty file ${field}->${filename}`);
        }
        return debugLog$1(options, `Don't add file instance if original name and size are empty`);
      }
      req.files = buildFields(req.files, field, fileFactory({
        buffer: complete(),
        name: filename,
        tempFilePath: getFilePath(),
        hash: getHash(),
        size,
        encoding,
        truncated: file.truncated,
        mimetype: mime
      }, options));

      if (!req[waitFlushProperty]) {
        req[waitFlushProperty] = [];
      }
      req[waitFlushProperty].push(writePromise);
    });

    file.on('error', (err) => {
      uploadTimer.clear(); // Reset upload timer in case of errors.
      debugLog$1(options, err);
      cleanup();
      next();
    });

    // Debug logging for a new file upload.
    debugLog$1(options, `New upload started ${field}->${filename}, bytes:${getFileSize()}`);
    // Set new upload timeout for a new file.
    uploadTimer.set();
  });

  busboy.on('finish', () => {
    debugLog$1(options, `Busboy finished parsing request.`);
    if (options.parseNested) {
      req.body = processNested(req.body);
      req.files = processNested(req.files);
    }

    if (!req[waitFlushProperty]) return next();
    Promise.all(req[waitFlushProperty])
      .then(() => {
        delete req[waitFlushProperty];
        next();
      });
  });

  busboy.on('error', (err) => {
    debugLog$1(options, `Busboy error`);
    next(err);
  });

  req.pipe(busboy);
};

const ACCEPTABLE_CONTENT_TYPE = /^multipart\/[\w'"()+-_?/:=,.]+(?:; ?[\w'"()+-_?/:=,.]*)+$/i;
const UNACCEPTABLE_METHODS = new Set(['GET', 'HEAD', 'DELETE', 'OPTIONS', 'CONNECT', 'TRACE']);

/**
 * Ensures the request contains a content body
 * @param  {Object} req Express req object
 * @returns {Boolean}
 */
const hasBody = (req) => {
  return ('transfer-encoding' in req.headers) ||
    ('content-length' in req.headers && req.headers['content-length'] !== '0');
};

/**
 * Ensures the request is not using a non-compliant multipart method
 * such as GET or HEAD
 * @param  {Object} req Express req object
 * @returns {Boolean}
 */
const hasAcceptableMethod = (req) => !UNACCEPTABLE_METHODS.has(req.method);

/**
 * Ensures that only multipart requests are processed by express-fileupload
 * ACCEPTABLE_CONTENT_TYPE REgex is based on the RFC 2046
 * Validates special characters according to RFC 2046, section 5.1.1: '"()+_-=?/:
 * Also checks for the presence of boundary in the header.
 * @param  {Object}  req Express req object
 * @returns {Boolean}
 */
const hasAcceptableContentType = (req) => {
  const contType = req.headers['content-type'];
  return contType.includes('boundary=') && ACCEPTABLE_CONTENT_TYPE.test(contType);
};

/**
 * Ensures that the request in question is eligible for file uploads
 * @param {Object} req Express req object
 * @returns {Boolean}
 */
var isEligibleRequest$1 = (req) => {
  try {
    return hasBody(req) && hasAcceptableMethod(req) && hasAcceptableContentType(req);
  } catch (e) {
    return false;
  }
};

const path = path$6;
const processMultipart = processMultipart$1;
const isEligibleRequest = isEligibleRequest$1;
const { buildOptions, debugLog } = utilities;

const DEFAULT_OPTIONS = {
  debug: false,
  logger: console,
  uploadTimeout: 60000,
  fileHandler: false,
  uriDecodeFileNames: false,
  safeFileNames: false,
  preserveExtension: false,
  abortOnLimit: false,
  responseOnLimit: 'File size limit has been reached',
  limitHandler: false,
  createParentPath: false,
  parseNested: false,
  useTempFiles: false,
  tempFileDir: path.join(process.cwd(), 'tmp')
};

/**
 * Expose the file upload middleware
 * @param {DEFAULT_OPTIONS & busboy.BusboyConfig} options - Middleware options.
 * @returns {Function} - express-fileupload middleware.
 */
var lib$1 = (options) => {
  const uploadOptions = buildOptions(DEFAULT_OPTIONS, options);
  return (req, res, next) => {
    if (!isEligibleRequest(req)) {
      debugLog(uploadOptions, 'Request is not eligible for file upload!');
      return next();
    }
    processMultipart(uploadOptions, req, res, next);
  };
};

var fileUpload = /*@__PURE__*/getDefaultExportFromCjs(lib$1);

/* eslint-disable no-multi-assign */

function deepFreeze(obj) {
  if (obj instanceof Map) {
    obj.clear =
      obj.delete =
      obj.set =
        function () {
          throw new Error('map is read-only');
        };
  } else if (obj instanceof Set) {
    obj.add =
      obj.clear =
      obj.delete =
        function () {
          throw new Error('set is read-only');
        };
  }

  // Freeze self
  Object.freeze(obj);

  Object.getOwnPropertyNames(obj).forEach((name) => {
    const prop = obj[name];
    const type = typeof prop;

    // Freeze prop if it is an object or function and also not already frozen
    if ((type === 'object' || type === 'function') && !Object.isFrozen(prop)) {
      deepFreeze(prop);
    }
  });

  return obj;
}

/** @typedef {import('highlight.js').CallbackResponse} CallbackResponse */
/** @typedef {import('highlight.js').CompiledMode} CompiledMode */
/** @implements CallbackResponse */

class Response {
  /**
   * @param {CompiledMode} mode
   */
  constructor(mode) {
    // eslint-disable-next-line no-undefined
    if (mode.data === undefined) mode.data = {};

    this.data = mode.data;
    this.isMatchIgnored = false;
  }

  ignoreMatch() {
    this.isMatchIgnored = true;
  }
}

/**
 * @param {string} value
 * @returns {string}
 */
function escapeHTML(value) {
  return value
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#x27;');
}

/**
 * performs a shallow merge of multiple objects into one
 *
 * @template T
 * @param {T} original
 * @param {Record<string,any>[]} objects
 * @returns {T} a single new object
 */
function inherit$1(original, ...objects) {
  /** @type Record<string,any> */
  const result = Object.create(null);

  for (const key in original) {
    result[key] = original[key];
  }
  objects.forEach(function(obj) {
    for (const key in obj) {
      result[key] = obj[key];
    }
  });
  return /** @type {T} */ (result);
}

/**
 * @typedef {object} Renderer
 * @property {(text: string) => void} addText
 * @property {(node: Node) => void} openNode
 * @property {(node: Node) => void} closeNode
 * @property {() => string} value
 */

/** @typedef {{scope?: string, language?: string, sublanguage?: boolean}} Node */
/** @typedef {{walk: (r: Renderer) => void}} Tree */
/** */

const SPAN_CLOSE = '</span>';

/**
 * Determines if a node needs to be wrapped in <span>
 *
 * @param {Node} node */
const emitsWrappingTags = (node) => {
  // rarely we can have a sublanguage where language is undefined
  // TODO: track down why
  return !!node.scope;
};

/**
 *
 * @param {string} name
 * @param {{prefix:string}} options
 */
const scopeToCSSClass = (name, { prefix }) => {
  // sub-language
  if (name.startsWith("language:")) {
    return name.replace("language:", "language-");
  }
  // tiered scope: comment.line
  if (name.includes(".")) {
    const pieces = name.split(".");
    return [
      `${prefix}${pieces.shift()}`,
      ...(pieces.map((x, i) => `${x}${"_".repeat(i + 1)}`))
    ].join(" ");
  }
  // simple scope
  return `${prefix}${name}`;
};

/** @type {Renderer} */
class HTMLRenderer {
  /**
   * Creates a new HTMLRenderer
   *
   * @param {Tree} parseTree - the parse tree (must support `walk` API)
   * @param {{classPrefix: string}} options
   */
  constructor(parseTree, options) {
    this.buffer = "";
    this.classPrefix = options.classPrefix;
    parseTree.walk(this);
  }

  /**
   * Adds texts to the output stream
   *
   * @param {string} text */
  addText(text) {
    this.buffer += escapeHTML(text);
  }

  /**
   * Adds a node open to the output stream (if needed)
   *
   * @param {Node} node */
  openNode(node) {
    if (!emitsWrappingTags(node)) return;

    const className = scopeToCSSClass(node.scope,
      { prefix: this.classPrefix });
    this.span(className);
  }

  /**
   * Adds a node close to the output stream (if needed)
   *
   * @param {Node} node */
  closeNode(node) {
    if (!emitsWrappingTags(node)) return;

    this.buffer += SPAN_CLOSE;
  }

  /**
   * returns the accumulated buffer
  */
  value() {
    return this.buffer;
  }

  // helpers

  /**
   * Builds a span element
   *
   * @param {string} className */
  span(className) {
    this.buffer += `<span class="${className}">`;
  }
}

/** @typedef {{scope?: string, language?: string, children: Node[]} | string} Node */
/** @typedef {{scope?: string, language?: string, children: Node[]} } DataNode */
/** @typedef {import('highlight.js').Emitter} Emitter */
/**  */

/** @returns {DataNode} */
const newNode = (opts = {}) => {
  /** @type DataNode */
  const result = { children: [] };
  Object.assign(result, opts);
  return result;
};

class TokenTree {
  constructor() {
    /** @type DataNode */
    this.rootNode = newNode();
    this.stack = [this.rootNode];
  }

  get top() {
    return this.stack[this.stack.length - 1];
  }

  get root() { return this.rootNode; }

  /** @param {Node} node */
  add(node) {
    this.top.children.push(node);
  }

  /** @param {string} scope */
  openNode(scope) {
    /** @type Node */
    const node = newNode({ scope });
    this.add(node);
    this.stack.push(node);
  }

  closeNode() {
    if (this.stack.length > 1) {
      return this.stack.pop();
    }
    // eslint-disable-next-line no-undefined
    return undefined;
  }

  closeAllNodes() {
    while (this.closeNode());
  }

  toJSON() {
    return JSON.stringify(this.rootNode, null, 4);
  }

  /**
   * @typedef { import("./html_renderer").Renderer } Renderer
   * @param {Renderer} builder
   */
  walk(builder) {
    // this does not
    return this.constructor._walk(builder, this.rootNode);
    // this works
    // return TokenTree._walk(builder, this.rootNode);
  }

  /**
   * @param {Renderer} builder
   * @param {Node} node
   */
  static _walk(builder, node) {
    if (typeof node === "string") {
      builder.addText(node);
    } else if (node.children) {
      builder.openNode(node);
      node.children.forEach((child) => this._walk(builder, child));
      builder.closeNode(node);
    }
    return builder;
  }

  /**
   * @param {Node} node
   */
  static _collapse(node) {
    if (typeof node === "string") return;
    if (!node.children) return;

    if (node.children.every(el => typeof el === "string")) {
      // node.text = node.children.join("");
      // delete node.children;
      node.children = [node.children.join("")];
    } else {
      node.children.forEach((child) => {
        TokenTree._collapse(child);
      });
    }
  }
}

/**
  Currently this is all private API, but this is the minimal API necessary
  that an Emitter must implement to fully support the parser.

  Minimal interface:

  - addText(text)
  - __addSublanguage(emitter, subLanguageName)
  - startScope(scope)
  - endScope()
  - finalize()
  - toHTML()

*/

/**
 * @implements {Emitter}
 */
class TokenTreeEmitter extends TokenTree {
  /**
   * @param {*} options
   */
  constructor(options) {
    super();
    this.options = options;
  }

  /**
   * @param {string} text
   */
  addText(text) {
    if (text === "") { return; }

    this.add(text);
  }

  /** @param {string} scope */
  startScope(scope) {
    this.openNode(scope);
  }

  endScope() {
    this.closeNode();
  }

  /**
   * @param {Emitter & {root: DataNode}} emitter
   * @param {string} name
   */
  __addSublanguage(emitter, name) {
    /** @type DataNode */
    const node = emitter.root;
    if (name) node.scope = `language:${name}`;

    this.add(node);
  }

  toHTML() {
    const renderer = new HTMLRenderer(this, this.options);
    return renderer.value();
  }

  finalize() {
    this.closeAllNodes();
    return true;
  }
}

/**
 * @param {string} value
 * @returns {RegExp}
 * */

/**
 * @param {RegExp | string } re
 * @returns {string}
 */
function source(re) {
  if (!re) return null;
  if (typeof re === "string") return re;

  return re.source;
}

/**
 * @param {RegExp | string } re
 * @returns {string}
 */
function lookahead(re) {
  return concat('(?=', re, ')');
}

/**
 * @param {RegExp | string } re
 * @returns {string}
 */
function anyNumberOfTimes(re) {
  return concat('(?:', re, ')*');
}

/**
 * @param {RegExp | string } re
 * @returns {string}
 */
function optional(re) {
  return concat('(?:', re, ')?');
}

/**
 * @param {...(RegExp | string) } args
 * @returns {string}
 */
function concat(...args) {
  const joined = args.map((x) => source(x)).join("");
  return joined;
}

/**
 * @param { Array<string | RegExp | Object> } args
 * @returns {object}
 */
function stripOptionsFromArgs(args) {
  const opts = args[args.length - 1];

  if (typeof opts === 'object' && opts.constructor === Object) {
    args.splice(args.length - 1, 1);
    return opts;
  } else {
    return {};
  }
}

/** @typedef { {capture?: boolean} } RegexEitherOptions */

/**
 * Any of the passed expresssions may match
 *
 * Creates a huge this | this | that | that match
 * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args
 * @returns {string}
 */
function either(...args) {
  /** @type { object & {capture?: boolean} }  */
  const opts = stripOptionsFromArgs(args);
  const joined = '('
    + (opts.capture ? "" : "?:")
    + args.map((x) => source(x)).join("|") + ")";
  return joined;
}

/**
 * @param {RegExp | string} re
 * @returns {number}
 */
function countMatchGroups(re) {
  return (new RegExp(re.toString() + '|')).exec('').length - 1;
}

/**
 * Does lexeme start with a regular expression match at the beginning
 * @param {RegExp} re
 * @param {string} lexeme
 */
function startsWith(re, lexeme) {
  const match = re && re.exec(lexeme);
  return match && match.index === 0;
}

// BACKREF_RE matches an open parenthesis or backreference. To avoid
// an incorrect parse, it additionally matches the following:
// - [...] elements, where the meaning of parentheses and escapes change
// - other escape sequences, so we do not misparse escape sequences as
//   interesting elements
// - non-matching or lookahead parentheses, which do not capture. These
//   follow the '(' with a '?'.
const BACKREF_RE = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;

// **INTERNAL** Not intended for outside usage
// join logically computes regexps.join(separator), but fixes the
// backreferences so they continue to match.
// it also places each individual regular expression into it's own
// match group, keeping track of the sequencing of those match groups
// is currently an exercise for the caller. :-)
/**
 * @param {(string | RegExp)[]} regexps
 * @param {{joinWith: string}} opts
 * @returns {string}
 */
function _rewriteBackreferences(regexps, { joinWith }) {
  let numCaptures = 0;

  return regexps.map((regex) => {
    numCaptures += 1;
    const offset = numCaptures;
    let re = source(regex);
    let out = '';

    while (re.length > 0) {
      const match = BACKREF_RE.exec(re);
      if (!match) {
        out += re;
        break;
      }
      out += re.substring(0, match.index);
      re = re.substring(match.index + match[0].length);
      if (match[0][0] === '\\' && match[1]) {
        // Adjust the backreference.
        out += '\\' + String(Number(match[1]) + offset);
      } else {
        out += match[0];
        if (match[0] === '(') {
          numCaptures++;
        }
      }
    }
    return out;
  }).map(re => `(${re})`).join(joinWith);
}

/** @typedef {import('highlight.js').Mode} Mode */
/** @typedef {import('highlight.js').ModeCallback} ModeCallback */

// Common regexps
const MATCH_NOTHING_RE = /\b\B/;
const IDENT_RE = '[a-zA-Z]\\w*';
const UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\w*';
const NUMBER_RE = '\\b\\d+(\\.\\d+)?';
const C_NUMBER_RE = '(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)'; // 0x..., 0..., decimal, float
const BINARY_NUMBER_RE = '\\b(0b[01]+)'; // 0b...
const RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';

/**
* @param { Partial<Mode> & {binary?: string | RegExp} } opts
*/
const SHEBANG = (opts = {}) => {
  const beginShebang = /^#![ ]*\//;
  if (opts.binary) {
    opts.begin = concat(
      beginShebang,
      /.*\b/,
      opts.binary,
      /\b.*/);
  }
  return inherit$1({
    scope: 'meta',
    begin: beginShebang,
    end: /$/,
    relevance: 0,
    /** @type {ModeCallback} */
    "on:begin": (m, resp) => {
      if (m.index !== 0) resp.ignoreMatch();
    }
  }, opts);
};

// Common modes
const BACKSLASH_ESCAPE = {
  begin: '\\\\[\\s\\S]', relevance: 0
};
const APOS_STRING_MODE = {
  scope: 'string',
  begin: '\'',
  end: '\'',
  illegal: '\\n',
  contains: [BACKSLASH_ESCAPE]
};
const QUOTE_STRING_MODE = {
  scope: 'string',
  begin: '"',
  end: '"',
  illegal: '\\n',
  contains: [BACKSLASH_ESCAPE]
};
const PHRASAL_WORDS_MODE = {
  begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
};
/**
 * Creates a comment mode
 *
 * @param {string | RegExp} begin
 * @param {string | RegExp} end
 * @param {Mode | {}} [modeOptions]
 * @returns {Partial<Mode>}
 */
const COMMENT = function(begin, end, modeOptions = {}) {
  const mode = inherit$1(
    {
      scope: 'comment',
      begin,
      end,
      contains: []
    },
    modeOptions
  );
  mode.contains.push({
    scope: 'doctag',
    // hack to avoid the space from being included. the space is necessary to
    // match here to prevent the plain text rule below from gobbling up doctags
    begin: '[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)',
    end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
    excludeBegin: true,
    relevance: 0
  });
  const ENGLISH_WORD = either(
    // list of common 1 and 2 letter words in English
    "I",
    "a",
    "is",
    "so",
    "us",
    "to",
    "at",
    "if",
    "in",
    "it",
    "on",
    // note: this is not an exhaustive list of contractions, just popular ones
    /[A-Za-z]+['](d|ve|re|ll|t|s|n)/, // contractions - can't we'd they're let's, etc
    /[A-Za-z]+[-][a-z]+/, // `no-way`, etc.
    /[A-Za-z][a-z]{2,}/ // allow capitalized words at beginning of sentences
  );
  // looking like plain text, more likely to be a comment
  mode.contains.push(
    {
      // TODO: how to include ", (, ) without breaking grammars that use these for
      // comment delimiters?
      // begin: /[ ]+([()"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()":]?([.][ ]|[ ]|\))){3}/
      // ---

      // this tries to find sequences of 3 english words in a row (without any
      // "programming" type syntax) this gives us a strong signal that we've
      // TRULY found a comment - vs perhaps scanning with the wrong language.
      // It's possible to find something that LOOKS like the start of the
      // comment - but then if there is no readable text - good chance it is a
      // false match and not a comment.
      //
      // for a visual example please see:
      // https://github.com/highlightjs/highlight.js/issues/2827

      begin: concat(
        /[ ]+/, // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */
        '(',
        ENGLISH_WORD,
        /[.]?[:]?([.][ ]|[ ])/,
        '){3}') // look for 3 words in a row
    }
  );
  return mode;
};
const C_LINE_COMMENT_MODE = COMMENT('//', '$');
const C_BLOCK_COMMENT_MODE = COMMENT('/\\*', '\\*/');
const HASH_COMMENT_MODE = COMMENT('#', '$');
const NUMBER_MODE = {
  scope: 'number',
  begin: NUMBER_RE,
  relevance: 0
};
const C_NUMBER_MODE = {
  scope: 'number',
  begin: C_NUMBER_RE,
  relevance: 0
};
const BINARY_NUMBER_MODE = {
  scope: 'number',
  begin: BINARY_NUMBER_RE,
  relevance: 0
};
const REGEXP_MODE = {
  scope: "regexp",
  begin: /\/(?=[^/\n]*\/)/,
  end: /\/[gimuy]*/,
  contains: [
    BACKSLASH_ESCAPE,
    {
      begin: /\[/,
      end: /\]/,
      relevance: 0,
      contains: [BACKSLASH_ESCAPE]
    }
  ]
};
const TITLE_MODE = {
  scope: 'title',
  begin: IDENT_RE,
  relevance: 0
};
const UNDERSCORE_TITLE_MODE = {
  scope: 'title',
  begin: UNDERSCORE_IDENT_RE,
  relevance: 0
};
const METHOD_GUARD = {
  // excludes method names from keyword processing
  begin: '\\.\\s*' + UNDERSCORE_IDENT_RE,
  relevance: 0
};

/**
 * Adds end same as begin mechanics to a mode
 *
 * Your mode must include at least a single () match group as that first match
 * group is what is used for comparison
 * @param {Partial<Mode>} mode
 */
const END_SAME_AS_BEGIN = function(mode) {
  return Object.assign(mode,
    {
      /** @type {ModeCallback} */
      'on:begin': (m, resp) => { resp.data._beginMatch = m[1]; },
      /** @type {ModeCallback} */
      'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); }
    });
};

var MODES = /*#__PURE__*/Object.freeze({
  __proto__: null,
  APOS_STRING_MODE: APOS_STRING_MODE,
  BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,
  BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,
  BINARY_NUMBER_RE: BINARY_NUMBER_RE,
  COMMENT: COMMENT,
  C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,
  C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,
  C_NUMBER_MODE: C_NUMBER_MODE,
  C_NUMBER_RE: C_NUMBER_RE,
  END_SAME_AS_BEGIN: END_SAME_AS_BEGIN,
  HASH_COMMENT_MODE: HASH_COMMENT_MODE,
  IDENT_RE: IDENT_RE,
  MATCH_NOTHING_RE: MATCH_NOTHING_RE,
  METHOD_GUARD: METHOD_GUARD,
  NUMBER_MODE: NUMBER_MODE,
  NUMBER_RE: NUMBER_RE,
  PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,
  QUOTE_STRING_MODE: QUOTE_STRING_MODE,
  REGEXP_MODE: REGEXP_MODE,
  RE_STARTERS_RE: RE_STARTERS_RE,
  SHEBANG: SHEBANG,
  TITLE_MODE: TITLE_MODE,
  UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,
  UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE
});

/**
@typedef {import('highlight.js').CallbackResponse} CallbackResponse
@typedef {import('highlight.js').CompilerExt} CompilerExt
*/

// Grammar extensions / plugins
// See: https://github.com/highlightjs/highlight.js/issues/2833

// Grammar extensions allow "syntactic sugar" to be added to the grammar modes
// without requiring any underlying changes to the compiler internals.

// `compileMatch` being the perfect small example of now allowing a grammar
// author to write `match` when they desire to match a single expression rather
// than being forced to use `begin`.  The extension then just moves `match` into
// `begin` when it runs.  Ie, no features have been added, but we've just made
// the experience of writing (and reading grammars) a little bit nicer.

// ------

// TODO: We need negative look-behind support to do this properly
/**
 * Skip a match if it has a preceding dot
 *
 * This is used for `beginKeywords` to prevent matching expressions such as
 * `bob.keyword.do()`. The mode compiler automatically wires this up as a
 * special _internal_ 'on:begin' callback for modes with `beginKeywords`
 * @param {RegExpMatchArray} match
 * @param {CallbackResponse} response
 */
function skipIfHasPrecedingDot(match, response) {
  const before = match.input[match.index - 1];
  if (before === ".") {
    response.ignoreMatch();
  }
}

/**
 *
 * @type {CompilerExt}
 */
function scopeClassName(mode, _parent) {
  // eslint-disable-next-line no-undefined
  if (mode.className !== undefined) {
    mode.scope = mode.className;
    delete mode.className;
  }
}

/**
 * `beginKeywords` syntactic sugar
 * @type {CompilerExt}
 */
function beginKeywords(mode, parent) {
  if (!parent) return;
  if (!mode.beginKeywords) return;

  // for languages with keywords that include non-word characters checking for
  // a word boundary is not sufficient, so instead we check for a word boundary
  // or whitespace - this does no harm in any case since our keyword engine
  // doesn't allow spaces in keywords anyways and we still check for the boundary
  // first
  mode.begin = '\\b(' + mode.beginKeywords.split(' ').join('|') + ')(?!\\.)(?=\\b|\\s)';
  mode.__beforeBegin = skipIfHasPrecedingDot;
  mode.keywords = mode.keywords || mode.beginKeywords;
  delete mode.beginKeywords;

  // prevents double relevance, the keywords themselves provide
  // relevance, the mode doesn't need to double it
  // eslint-disable-next-line no-undefined
  if (mode.relevance === undefined) mode.relevance = 0;
}

/**
 * Allow `illegal` to contain an array of illegal values
 * @type {CompilerExt}
 */
function compileIllegal(mode, _parent) {
  if (!Array.isArray(mode.illegal)) return;

  mode.illegal = either(...mode.illegal);
}

/**
 * `match` to match a single expression for readability
 * @type {CompilerExt}
 */
function compileMatch(mode, _parent) {
  if (!mode.match) return;
  if (mode.begin || mode.end) throw new Error("begin & end are not supported with match");

  mode.begin = mode.match;
  delete mode.match;
}

/**
 * provides the default 1 relevance to all modes
 * @type {CompilerExt}
 */
function compileRelevance(mode, _parent) {
  // eslint-disable-next-line no-undefined
  if (mode.relevance === undefined) mode.relevance = 1;
}

// allow beforeMatch to act as a "qualifier" for the match
// the full match begin must be [beforeMatch][begin]
const beforeMatchExt = (mode, parent) => {
  if (!mode.beforeMatch) return;
  // starts conflicts with endsParent which we need to make sure the child
  // rule is not matched multiple times
  if (mode.starts) throw new Error("beforeMatch cannot be used with starts");

  const originalMode = Object.assign({}, mode);
  Object.keys(mode).forEach((key) => { delete mode[key]; });

  mode.keywords = originalMode.keywords;
  mode.begin = concat(originalMode.beforeMatch, lookahead(originalMode.begin));
  mode.starts = {
    relevance: 0,
    contains: [
      Object.assign(originalMode, { endsParent: true })
    ]
  };
  mode.relevance = 0;

  delete originalMode.beforeMatch;
};

// keywords that should have no default relevance value
const COMMON_KEYWORDS = [
  'of',
  'and',
  'for',
  'in',
  'not',
  'or',
  'if',
  'then',
  'parent', // common variable name
  'list', // common variable name
  'value' // common variable name
];

const DEFAULT_KEYWORD_SCOPE = "keyword";

/**
 * Given raw keywords from a language definition, compile them.
 *
 * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords
 * @param {boolean} caseInsensitive
 */
function compileKeywords(rawKeywords, caseInsensitive, scopeName = DEFAULT_KEYWORD_SCOPE) {
  /** @type {import("highlight.js/private").KeywordDict} */
  const compiledKeywords = Object.create(null);

  // input can be a string of keywords, an array of keywords, or a object with
  // named keys representing scopeName (which can then point to a string or array)
  if (typeof rawKeywords === 'string') {
    compileList(scopeName, rawKeywords.split(" "));
  } else if (Array.isArray(rawKeywords)) {
    compileList(scopeName, rawKeywords);
  } else {
    Object.keys(rawKeywords).forEach(function(scopeName) {
      // collapse all our objects back into the parent object
      Object.assign(
        compiledKeywords,
        compileKeywords(rawKeywords[scopeName], caseInsensitive, scopeName)
      );
    });
  }
  return compiledKeywords;

  // ---

  /**
   * Compiles an individual list of keywords
   *
   * Ex: "for if when while|5"
   *
   * @param {string} scopeName
   * @param {Array<string>} keywordList
   */
  function compileList(scopeName, keywordList) {
    if (caseInsensitive) {
      keywordList = keywordList.map(x => x.toLowerCase());
    }
    keywordList.forEach(function(keyword) {
      const pair = keyword.split('|');
      compiledKeywords[pair[0]] = [scopeName, scoreForKeyword(pair[0], pair[1])];
    });
  }
}

/**
 * Returns the proper score for a given keyword
 *
 * Also takes into account comment keywords, which will be scored 0 UNLESS
 * another score has been manually assigned.
 * @param {string} keyword
 * @param {string} [providedScore]
 */
function scoreForKeyword(keyword, providedScore) {
  // manual scores always win over common keywords
  // so you can force a score of 1 if you really insist
  if (providedScore) {
    return Number(providedScore);
  }

  return commonKeyword(keyword) ? 0 : 1;
}

/**
 * Determines if a given keyword is common or not
 *
 * @param {string} keyword */
function commonKeyword(keyword) {
  return COMMON_KEYWORDS.includes(keyword.toLowerCase());
}

/*

For the reasoning behind this please see:
https://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419

*/

/**
 * @type {Record<string, boolean>}
 */
const seenDeprecations = {};

/**
 * @param {string} message
 */
const error = (message) => {
  console.error(message);
};

/**
 * @param {string} message
 * @param {any} args
 */
const warn = (message, ...args) => {
  console.log(`WARN: ${message}`, ...args);
};

/**
 * @param {string} version
 * @param {string} message
 */
const deprecated = (version, message) => {
  if (seenDeprecations[`${version}/${message}`]) return;

  console.log(`Deprecated as of ${version}. ${message}`);
  seenDeprecations[`${version}/${message}`] = true;
};

/* eslint-disable no-throw-literal */

/**
@typedef {import('highlight.js').CompiledMode} CompiledMode
*/

const MultiClassError = new Error();

/**
 * Renumbers labeled scope names to account for additional inner match
 * groups that otherwise would break everything.
 *
 * Lets say we 3 match scopes:
 *
 *   { 1 => ..., 2 => ..., 3 => ... }
 *
 * So what we need is a clean match like this:
 *
 *   (a)(b)(c) => [ "a", "b", "c" ]
 *
 * But this falls apart with inner match groups:
 *
 * (a)(((b)))(c) => ["a", "b", "b", "b", "c" ]
 *
 * Our scopes are now "out of alignment" and we're repeating `b` 3 times.
 * What needs to happen is the numbers are remapped:
 *
 *   { 1 => ..., 2 => ..., 5 => ... }
 *
 * We also need to know that the ONLY groups that should be output
 * are 1, 2, and 5.  This function handles this behavior.
 *
 * @param {CompiledMode} mode
 * @param {Array<RegExp | string>} regexes
 * @param {{key: "beginScope"|"endScope"}} opts
 */
function remapScopeNames(mode, regexes, { key }) {
  let offset = 0;
  const scopeNames = mode[key];
  /** @type Record<number,boolean> */
  const emit = {};
  /** @type Record<number,string> */
  const positions = {};

  for (let i = 1; i <= regexes.length; i++) {
    positions[i + offset] = scopeNames[i];
    emit[i + offset] = true;
    offset += countMatchGroups(regexes[i - 1]);
  }
  // we use _emit to keep track of which match groups are "top-level" to avoid double
  // output from inside match groups
  mode[key] = positions;
  mode[key]._emit = emit;
  mode[key]._multi = true;
}

/**
 * @param {CompiledMode} mode
 */
function beginMultiClass(mode) {
  if (!Array.isArray(mode.begin)) return;

  if (mode.skip || mode.excludeBegin || mode.returnBegin) {
    error("skip, excludeBegin, returnBegin not compatible with beginScope: {}");
    throw MultiClassError;
  }

  if (typeof mode.beginScope !== "object" || mode.beginScope === null) {
    error("beginScope must be object");
    throw MultiClassError;
  }

  remapScopeNames(mode, mode.begin, { key: "beginScope" });
  mode.begin = _rewriteBackreferences(mode.begin, { joinWith: "" });
}

/**
 * @param {CompiledMode} mode
 */
function endMultiClass(mode) {
  if (!Array.isArray(mode.end)) return;

  if (mode.skip || mode.excludeEnd || mode.returnEnd) {
    error("skip, excludeEnd, returnEnd not compatible with endScope: {}");
    throw MultiClassError;
  }

  if (typeof mode.endScope !== "object" || mode.endScope === null) {
    error("endScope must be object");
    throw MultiClassError;
  }

  remapScopeNames(mode, mode.end, { key: "endScope" });
  mode.end = _rewriteBackreferences(mode.end, { joinWith: "" });
}

/**
 * this exists only to allow `scope: {}` to be used beside `match:`
 * Otherwise `beginScope` would necessary and that would look weird

  {
    match: [ /def/, /\w+/ ]
    scope: { 1: "keyword" , 2: "title" }
  }

 * @param {CompiledMode} mode
 */
function scopeSugar(mode) {
  if (mode.scope && typeof mode.scope === "object" && mode.scope !== null) {
    mode.beginScope = mode.scope;
    delete mode.scope;
  }
}

/**
 * @param {CompiledMode} mode
 */
function MultiClass(mode) {
  scopeSugar(mode);

  if (typeof mode.beginScope === "string") {
    mode.beginScope = { _wrap: mode.beginScope };
  }
  if (typeof mode.endScope === "string") {
    mode.endScope = { _wrap: mode.endScope };
  }

  beginMultiClass(mode);
  endMultiClass(mode);
}

/**
@typedef {import('highlight.js').Mode} Mode
@typedef {import('highlight.js').CompiledMode} CompiledMode
@typedef {import('highlight.js').Language} Language
@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin
@typedef {import('highlight.js').CompiledLanguage} CompiledLanguage
*/

// compilation

/**
 * Compiles a language definition result
 *
 * Given the raw result of a language definition (Language), compiles this so
 * that it is ready for highlighting code.
 * @param {Language} language
 * @returns {CompiledLanguage}
 */
function compileLanguage(language) {
  /**
   * Builds a regex with the case sensitivity of the current language
   *
   * @param {RegExp | string} value
   * @param {boolean} [global]
   */
  function langRe(value, global) {
    return new RegExp(
      source(value),
      'm'
      + (language.case_insensitive ? 'i' : '')
      + (language.unicodeRegex ? 'u' : '')
      + (global ? 'g' : '')
    );
  }

  /**
    Stores multiple regular expressions and allows you to quickly search for
    them all in a string simultaneously - returning the first match.  It does
    this by creating a huge (a|b|c) regex - each individual item wrapped with ()
    and joined by `|` - using match groups to track position.  When a match is
    found checking which position in the array has content allows us to figure
    out which of the original regexes / match groups triggered the match.

    The match object itself (the result of `Regex.exec`) is returned but also
    enhanced by merging in any meta-data that was registered with the regex.
    This is how we keep track of which mode matched, and what type of rule
    (`illegal`, `begin`, end, etc).
  */
  class MultiRegex {
    constructor() {
      this.matchIndexes = {};
      // @ts-ignore
      this.regexes = [];
      this.matchAt = 1;
      this.position = 0;
    }

    // @ts-ignore
    addRule(re, opts) {
      opts.position = this.position++;
      // @ts-ignore
      this.matchIndexes[this.matchAt] = opts;
      this.regexes.push([opts, re]);
      this.matchAt += countMatchGroups(re) + 1;
    }

    compile() {
      if (this.regexes.length === 0) {
        // avoids the need to check length every time exec is called
        // @ts-ignore
        this.exec = () => null;
      }
      const terminators = this.regexes.map(el => el[1]);
      this.matcherRe = langRe(_rewriteBackreferences(terminators, { joinWith: '|' }), true);
      this.lastIndex = 0;
    }

    /** @param {string} s */
    exec(s) {
      this.matcherRe.lastIndex = this.lastIndex;
      const match = this.matcherRe.exec(s);
      if (!match) { return null; }

      // eslint-disable-next-line no-undefined
      const i = match.findIndex((el, i) => i > 0 && el !== undefined);
      // @ts-ignore
      const matchData = this.matchIndexes[i];
      // trim off any earlier non-relevant match groups (ie, the other regex
      // match groups that make up the multi-matcher)
      match.splice(0, i);

      return Object.assign(match, matchData);
    }
  }

  /*
    Created to solve the key deficiently with MultiRegex - there is no way to
    test for multiple matches at a single location.  Why would we need to do
    that?  In the future a more dynamic engine will allow certain matches to be
    ignored.  An example: if we matched say the 3rd regex in a large group but
    decided to ignore it - we'd need to started testing again at the 4th
    regex... but MultiRegex itself gives us no real way to do that.

    So what this class creates MultiRegexs on the fly for whatever search
    position they are needed.

    NOTE: These additional MultiRegex objects are created dynamically.  For most
    grammars most of the time we will never actually need anything more than the
    first MultiRegex - so this shouldn't have too much overhead.

    Say this is our search group, and we match regex3, but wish to ignore it.

      regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0

    What we need is a new MultiRegex that only includes the remaining
    possibilities:

      regex4 | regex5                               ' ie, startAt = 3

    This class wraps all that complexity up in a simple API... `startAt` decides
    where in the array of expressions to start doing the matching. It
    auto-increments, so if a match is found at position 2, then startAt will be
    set to 3.  If the end is reached startAt will return to 0.

    MOST of the time the parser will be setting startAt manually to 0.
  */
  class ResumableMultiRegex {
    constructor() {
      // @ts-ignore
      this.rules = [];
      // @ts-ignore
      this.multiRegexes = [];
      this.count = 0;

      this.lastIndex = 0;
      this.regexIndex = 0;
    }

    // @ts-ignore
    getMatcher(index) {
      if (this.multiRegexes[index]) return this.multiRegexes[index];

      const matcher = new MultiRegex();
      this.rules.slice(index).forEach(([re, opts]) => matcher.addRule(re, opts));
      matcher.compile();
      this.multiRegexes[index] = matcher;
      return matcher;
    }

    resumingScanAtSamePosition() {
      return this.regexIndex !== 0;
    }

    considerAll() {
      this.regexIndex = 0;
    }

    // @ts-ignore
    addRule(re, opts) {
      this.rules.push([re, opts]);
      if (opts.type === "begin") this.count++;
    }

    /** @param {string} s */
    exec(s) {
      const m = this.getMatcher(this.regexIndex);
      m.lastIndex = this.lastIndex;
      let result = m.exec(s);

      // The following is because we have no easy way to say "resume scanning at the
      // existing position but also skip the current rule ONLY". What happens is
      // all prior rules are also skipped which can result in matching the wrong
      // thing. Example of matching "booger":

      // our matcher is [string, "booger", number]
      //
      // ....booger....

      // if "booger" is ignored then we'd really need a regex to scan from the
      // SAME position for only: [string, number] but ignoring "booger" (if it
      // was the first match), a simple resume would scan ahead who knows how
      // far looking only for "number", ignoring potential string matches (or
      // future "booger" matches that might be valid.)

      // So what we do: We execute two matchers, one resuming at the same
      // position, but the second full matcher starting at the position after:

      //     /--- resume first regex match here (for [number])
      //     |/---- full match here for [string, "booger", number]
      //     vv
      // ....booger....

      // Which ever results in a match first is then used. So this 3-4 step
      // process essentially allows us to say "match at this position, excluding
      // a prior rule that was ignored".
      //
      // 1. Match "booger" first, ignore. Also proves that [string] does non match.
      // 2. Resume matching for [number]
      // 3. Match at index + 1 for [string, "booger", number]
      // 4. If #2 and #3 result in matches, which came first?
      if (this.resumingScanAtSamePosition()) {
        if (result && result.index === this.lastIndex) ; else { // use the second matcher result
          const m2 = this.getMatcher(0);
          m2.lastIndex = this.lastIndex + 1;
          result = m2.exec(s);
        }
      }

      if (result) {
        this.regexIndex += result.position + 1;
        if (this.regexIndex === this.count) {
          // wrap-around to considering all matches again
          this.considerAll();
        }
      }

      return result;
    }
  }

  /**
   * Given a mode, builds a huge ResumableMultiRegex that can be used to walk
   * the content and find matches.
   *
   * @param {CompiledMode} mode
   * @returns {ResumableMultiRegex}
   */
  function buildModeRegex(mode) {
    const mm = new ResumableMultiRegex();

    mode.contains.forEach(term => mm.addRule(term.begin, { rule: term, type: "begin" }));

    if (mode.terminatorEnd) {
      mm.addRule(mode.terminatorEnd, { type: "end" });
    }
    if (mode.illegal) {
      mm.addRule(mode.illegal, { type: "illegal" });
    }

    return mm;
  }

  /** skip vs abort vs ignore
   *
   * @skip   - The mode is still entered and exited normally (and contains rules apply),
   *           but all content is held and added to the parent buffer rather than being
   *           output when the mode ends.  Mostly used with `sublanguage` to build up
   *           a single large buffer than can be parsed by sublanguage.
   *
   *             - The mode begin ands ends normally.
   *             - Content matched is added to the parent mode buffer.
   *             - The parser cursor is moved forward normally.
   *
   * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it
   *           never matched) but DOES NOT continue to match subsequent `contains`
   *           modes.  Abort is bad/suboptimal because it can result in modes
   *           farther down not getting applied because an earlier rule eats the
   *           content but then aborts.
   *
   *             - The mode does not begin.
   *             - Content matched by `begin` is added to the mode buffer.
   *             - The parser cursor is moved forward accordingly.
   *
   * @ignore - Ignores the mode (as if it never matched) and continues to match any
   *           subsequent `contains` modes.  Ignore isn't technically possible with
   *           the current parser implementation.
   *
   *             - The mode does not begin.
   *             - Content matched by `begin` is ignored.
   *             - The parser cursor is not moved forward.
   */

  /**
   * Compiles an individual mode
   *
   * This can raise an error if the mode contains certain detectable known logic
   * issues.
   * @param {Mode} mode
   * @param {CompiledMode | null} [parent]
   * @returns {CompiledMode | never}
   */
  function compileMode(mode, parent) {
    const cmode = /** @type CompiledMode */ (mode);
    if (mode.isCompiled) return cmode;

    [
      scopeClassName,
      // do this early so compiler extensions generally don't have to worry about
      // the distinction between match/begin
      compileMatch,
      MultiClass,
      beforeMatchExt
    ].forEach(ext => ext(mode, parent));

    language.compilerExtensions.forEach(ext => ext(mode, parent));

    // __beforeBegin is considered private API, internal use only
    mode.__beforeBegin = null;

    [
      beginKeywords,
      // do this later so compiler extensions that come earlier have access to the
      // raw array if they wanted to perhaps manipulate it, etc.
      compileIllegal,
      // default to 1 relevance if not specified
      compileRelevance
    ].forEach(ext => ext(mode, parent));

    mode.isCompiled = true;

    let keywordPattern = null;
    if (typeof mode.keywords === "object" && mode.keywords.$pattern) {
      // we need a copy because keywords might be compiled multiple times
      // so we can't go deleting $pattern from the original on the first
      // pass
      mode.keywords = Object.assign({}, mode.keywords);
      keywordPattern = mode.keywords.$pattern;
      delete mode.keywords.$pattern;
    }
    keywordPattern = keywordPattern || /\w+/;

    if (mode.keywords) {
      mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);
    }

    cmode.keywordPatternRe = langRe(keywordPattern, true);

    if (parent) {
      if (!mode.begin) mode.begin = /\B|\b/;
      cmode.beginRe = langRe(cmode.begin);
      if (!mode.end && !mode.endsWithParent) mode.end = /\B|\b/;
      if (mode.end) cmode.endRe = langRe(cmode.end);
      cmode.terminatorEnd = source(cmode.end) || '';
      if (mode.endsWithParent && parent.terminatorEnd) {
        cmode.terminatorEnd += (mode.end ? '|' : '') + parent.terminatorEnd;
      }
    }
    if (mode.illegal) cmode.illegalRe = langRe(/** @type {RegExp | string} */ (mode.illegal));
    if (!mode.contains) mode.contains = [];

    mode.contains = [].concat(...mode.contains.map(function(c) {
      return expandOrCloneMode(c === 'self' ? mode : c);
    }));
    mode.contains.forEach(function(c) { compileMode(/** @type Mode */ (c), cmode); });

    if (mode.starts) {
      compileMode(mode.starts, parent);
    }

    cmode.matcher = buildModeRegex(cmode);
    return cmode;
  }

  if (!language.compilerExtensions) language.compilerExtensions = [];

  // self is not valid at the top-level
  if (language.contains && language.contains.includes('self')) {
    throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
  }

  // we need a null object, which inherit will guarantee
  language.classNameAliases = inherit$1(language.classNameAliases || {});

  return compileMode(/** @type Mode */ (language));
}

/**
 * Determines if a mode has a dependency on it's parent or not
 *
 * If a mode does have a parent dependency then often we need to clone it if
 * it's used in multiple places so that each copy points to the correct parent,
 * where-as modes without a parent can often safely be re-used at the bottom of
 * a mode chain.
 *
 * @param {Mode | null} mode
 * @returns {boolean} - is there a dependency on the parent?
 * */
function dependencyOnParent(mode) {
  if (!mode) return false;

  return mode.endsWithParent || dependencyOnParent(mode.starts);
}

/**
 * Expands a mode or clones it if necessary
 *
 * This is necessary for modes with parental dependenceis (see notes on
 * `dependencyOnParent`) and for nodes that have `variants` - which must then be
 * exploded into their own individual modes at compile time.
 *
 * @param {Mode} mode
 * @returns {Mode | Mode[]}
 * */
function expandOrCloneMode(mode) {
  if (mode.variants && !mode.cachedVariants) {
    mode.cachedVariants = mode.variants.map(function(variant) {
      return inherit$1(mode, { variants: null }, variant);
    });
  }

  // EXPAND
  // if we have variants then essentially "replace" the mode with the variants
  // this happens in compileMode, where this function is called from
  if (mode.cachedVariants) {
    return mode.cachedVariants;
  }

  // CLONE
  // if we have dependencies on parents then we need a unique
  // instance of ourselves, so we can be reused with many
  // different parents without issue
  if (dependencyOnParent(mode)) {
    return inherit$1(mode, { starts: mode.starts ? inherit$1(mode.starts) : null });
  }

  if (Object.isFrozen(mode)) {
    return inherit$1(mode);
  }

  // no special dependency issues, just return ourselves
  return mode;
}

var version = "11.9.0";

class HTMLInjectionError extends Error {
  constructor(reason, html) {
    super(reason);
    this.name = "HTMLInjectionError";
    this.html = html;
  }
}

/*
Syntax highlighting with language autodetection.
https://highlightjs.org/
*/



/**
@typedef {import('highlight.js').Mode} Mode
@typedef {import('highlight.js').CompiledMode} CompiledMode
@typedef {import('highlight.js').CompiledScope} CompiledScope
@typedef {import('highlight.js').Language} Language
@typedef {import('highlight.js').HLJSApi} HLJSApi
@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin
@typedef {import('highlight.js').PluginEvent} PluginEvent
@typedef {import('highlight.js').HLJSOptions} HLJSOptions
@typedef {import('highlight.js').LanguageFn} LanguageFn
@typedef {import('highlight.js').HighlightedHTMLElement} HighlightedHTMLElement
@typedef {import('highlight.js').BeforeHighlightContext} BeforeHighlightContext
@typedef {import('highlight.js/private').MatchType} MatchType
@typedef {import('highlight.js/private').KeywordData} KeywordData
@typedef {import('highlight.js/private').EnhancedMatch} EnhancedMatch
@typedef {import('highlight.js/private').AnnotatedError} AnnotatedError
@typedef {import('highlight.js').AutoHighlightResult} AutoHighlightResult
@typedef {import('highlight.js').HighlightOptions} HighlightOptions
@typedef {import('highlight.js').HighlightResult} HighlightResult
*/


const escape$1 = escapeHTML;
const inherit = inherit$1;
const NO_MATCH = Symbol("nomatch");
const MAX_KEYWORD_HITS = 7;

/**
 * @param {any} hljs - object that is extended (legacy)
 * @returns {HLJSApi}
 */
const HLJS = function(hljs) {
  // Global internal variables used within the highlight.js library.
  /** @type {Record<string, Language>} */
  const languages = Object.create(null);
  /** @type {Record<string, string>} */
  const aliases = Object.create(null);
  /** @type {HLJSPlugin[]} */
  const plugins = [];

  // safe/production mode - swallows more errors, tries to keep running
  // even if a single syntax or parse hits a fatal error
  let SAFE_MODE = true;
  const LANGUAGE_NOT_FOUND = "Could not find the language '{}', did you forget to load/include a language module?";
  /** @type {Language} */
  const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: 'Plain text', contains: [] };

  // Global options used when within external APIs. This is modified when
  // calling the `hljs.configure` function.
  /** @type HLJSOptions */
  let options = {
    ignoreUnescapedHTML: false,
    throwUnescapedHTML: false,
    noHighlightRe: /^(no-?highlight)$/i,
    languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
    classPrefix: 'hljs-',
    cssSelector: 'pre code',
    languages: null,
    // beta configuration options, subject to change, welcome to discuss
    // https://github.com/highlightjs/highlight.js/issues/1086
    __emitter: TokenTreeEmitter
  };

  /* Utility functions */

  /**
   * Tests a language name to see if highlighting should be skipped
   * @param {string} languageName
   */
  function shouldNotHighlight(languageName) {
    return options.noHighlightRe.test(languageName);
  }

  /**
   * @param {HighlightedHTMLElement} block - the HTML element to determine language for
   */
  function blockLanguage(block) {
    let classes = block.className + ' ';

    classes += block.parentNode ? block.parentNode.className : '';

    // language-* takes precedence over non-prefixed class names.
    const match = options.languageDetectRe.exec(classes);
    if (match) {
      const language = getLanguage(match[1]);
      if (!language) {
        warn(LANGUAGE_NOT_FOUND.replace("{}", match[1]));
        warn("Falling back to no-highlight mode for this block.", block);
      }
      return language ? match[1] : 'no-highlight';
    }

    return classes
      .split(/\s+/)
      .find((_class) => shouldNotHighlight(_class) || getLanguage(_class));
  }

  /**
   * Core highlighting function.
   *
   * OLD API
   * highlight(lang, code, ignoreIllegals, continuation)
   *
   * NEW API
   * highlight(code, {lang, ignoreIllegals})
   *
   * @param {string} codeOrLanguageName - the language to use for highlighting
   * @param {string | HighlightOptions} optionsOrCode - the code to highlight
   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
   *
   * @returns {HighlightResult} Result - an object that represents the result
   * @property {string} language - the language name
   * @property {number} relevance - the relevance score
   * @property {string} value - the highlighted HTML code
   * @property {string} code - the original raw code
   * @property {CompiledMode} top - top of the current mode stack
   * @property {boolean} illegal - indicates whether any illegal matches were found
  */
  function highlight(codeOrLanguageName, optionsOrCode, ignoreIllegals) {
    let code = "";
    let languageName = "";
    if (typeof optionsOrCode === "object") {
      code = codeOrLanguageName;
      ignoreIllegals = optionsOrCode.ignoreIllegals;
      languageName = optionsOrCode.language;
    } else {
      // old API
      deprecated("10.7.0", "highlight(lang, code, ...args) has been deprecated.");
      deprecated("10.7.0", "Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277");
      languageName = codeOrLanguageName;
      code = optionsOrCode;
    }

    // https://github.com/highlightjs/highlight.js/issues/3149
    // eslint-disable-next-line no-undefined
    if (ignoreIllegals === undefined) { ignoreIllegals = true; }

    /** @type {BeforeHighlightContext} */
    const context = {
      code,
      language: languageName
    };
    // the plugin can change the desired language or the code to be highlighted
    // just be changing the object it was passed
    fire("before:highlight", context);

    // a before plugin can usurp the result completely by providing it's own
    // in which case we don't even need to call highlight
    const result = context.result
      ? context.result
      : _highlight(context.language, context.code, ignoreIllegals);

    result.code = context.code;
    // the plugin can change anything in result to suite it
    fire("after:highlight", result);

    return result;
  }

  /**
   * private highlight that's used internally and does not fire callbacks
   *
   * @param {string} languageName - the language to use for highlighting
   * @param {string} codeToHighlight - the code to highlight
   * @param {boolean?} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
   * @param {CompiledMode?} [continuation] - current continuation mode, if any
   * @returns {HighlightResult} - result of the highlight operation
  */
  function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {
    const keywordHits = Object.create(null);

    /**
     * Return keyword data if a match is a keyword
     * @param {CompiledMode} mode - current mode
     * @param {string} matchText - the textual match
     * @returns {KeywordData | false}
     */
    function keywordData(mode, matchText) {
      return mode.keywords[matchText];
    }

    function processKeywords() {
      if (!top.keywords) {
        emitter.addText(modeBuffer);
        return;
      }

      let lastIndex = 0;
      top.keywordPatternRe.lastIndex = 0;
      let match = top.keywordPatternRe.exec(modeBuffer);
      let buf = "";

      while (match) {
        buf += modeBuffer.substring(lastIndex, match.index);
        const word = language.case_insensitive ? match[0].toLowerCase() : match[0];
        const data = keywordData(top, word);
        if (data) {
          const [kind, keywordRelevance] = data;
          emitter.addText(buf);
          buf = "";

          keywordHits[word] = (keywordHits[word] || 0) + 1;
          if (keywordHits[word] <= MAX_KEYWORD_HITS) relevance += keywordRelevance;
          if (kind.startsWith("_")) {
            // _ implied for relevance only, do not highlight
            // by applying a class name
            buf += match[0];
          } else {
            const cssClass = language.classNameAliases[kind] || kind;
            emitKeyword(match[0], cssClass);
          }
        } else {
          buf += match[0];
        }
        lastIndex = top.keywordPatternRe.lastIndex;
        match = top.keywordPatternRe.exec(modeBuffer);
      }
      buf += modeBuffer.substring(lastIndex);
      emitter.addText(buf);
    }

    function processSubLanguage() {
      if (modeBuffer === "") return;
      /** @type HighlightResult */
      let result = null;

      if (typeof top.subLanguage === 'string') {
        if (!languages[top.subLanguage]) {
          emitter.addText(modeBuffer);
          return;
        }
        result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);
        continuations[top.subLanguage] = /** @type {CompiledMode} */ (result._top);
      } else {
        result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);
      }

      // Counting embedded language score towards the host language may be disabled
      // with zeroing the containing mode relevance. Use case in point is Markdown that
      // allows XML everywhere and makes every XML snippet to have a much larger Markdown
      // score.
      if (top.relevance > 0) {
        relevance += result.relevance;
      }
      emitter.__addSublanguage(result._emitter, result.language);
    }

    function processBuffer() {
      if (top.subLanguage != null) {
        processSubLanguage();
      } else {
        processKeywords();
      }
      modeBuffer = '';
    }

    /**
     * @param {string} text
     * @param {string} scope
     */
    function emitKeyword(keyword, scope) {
      if (keyword === "") return;

      emitter.startScope(scope);
      emitter.addText(keyword);
      emitter.endScope();
    }

    /**
     * @param {CompiledScope} scope
     * @param {RegExpMatchArray} match
     */
    function emitMultiClass(scope, match) {
      let i = 1;
      const max = match.length - 1;
      while (i <= max) {
        if (!scope._emit[i]) { i++; continue; }
        const klass = language.classNameAliases[scope[i]] || scope[i];
        const text = match[i];
        if (klass) {
          emitKeyword(text, klass);
        } else {
          modeBuffer = text;
          processKeywords();
          modeBuffer = "";
        }
        i++;
      }
    }

    /**
     * @param {CompiledMode} mode - new mode to start
     * @param {RegExpMatchArray} match
     */
    function startNewMode(mode, match) {
      if (mode.scope && typeof mode.scope === "string") {
        emitter.openNode(language.classNameAliases[mode.scope] || mode.scope);
      }
      if (mode.beginScope) {
        // beginScope just wraps the begin match itself in a scope
        if (mode.beginScope._wrap) {
          emitKeyword(modeBuffer, language.classNameAliases[mode.beginScope._wrap] || mode.beginScope._wrap);
          modeBuffer = "";
        } else if (mode.beginScope._multi) {
          // at this point modeBuffer should just be the match
          emitMultiClass(mode.beginScope, match);
          modeBuffer = "";
        }
      }

      top = Object.create(mode, { parent: { value: top } });
      return top;
    }

    /**
     * @param {CompiledMode } mode - the mode to potentially end
     * @param {RegExpMatchArray} match - the latest match
     * @param {string} matchPlusRemainder - match plus remainder of content
     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode
     */
    function endOfMode(mode, match, matchPlusRemainder) {
      let matched = startsWith(mode.endRe, matchPlusRemainder);

      if (matched) {
        if (mode["on:end"]) {
          const resp = new Response(mode);
          mode["on:end"](match, resp);
          if (resp.isMatchIgnored) matched = false;
        }

        if (matched) {
          while (mode.endsParent && mode.parent) {
            mode = mode.parent;
          }
          return mode;
        }
      }
      // even if on:end fires an `ignore` it's still possible
      // that we might trigger the end node because of a parent mode
      if (mode.endsWithParent) {
        return endOfMode(mode.parent, match, matchPlusRemainder);
      }
    }

    /**
     * Handle matching but then ignoring a sequence of text
     *
     * @param {string} lexeme - string containing full match text
     */
    function doIgnore(lexeme) {
      if (top.matcher.regexIndex === 0) {
        // no more regexes to potentially match here, so we move the cursor forward one
        // space
        modeBuffer += lexeme[0];
        return 1;
      } else {
        // no need to move the cursor, we still have additional regexes to try and
        // match at this very spot
        resumeScanAtSamePosition = true;
        return 0;
      }
    }

    /**
     * Handle the start of a new potential mode match
     *
     * @param {EnhancedMatch} match - the current match
     * @returns {number} how far to advance the parse cursor
     */
    function doBeginMatch(match) {
      const lexeme = match[0];
      const newMode = match.rule;

      const resp = new Response(newMode);
      // first internal before callbacks, then the public ones
      const beforeCallbacks = [newMode.__beforeBegin, newMode["on:begin"]];
      for (const cb of beforeCallbacks) {
        if (!cb) continue;
        cb(match, resp);
        if (resp.isMatchIgnored) return doIgnore(lexeme);
      }

      if (newMode.skip) {
        modeBuffer += lexeme;
      } else {
        if (newMode.excludeBegin) {
          modeBuffer += lexeme;
        }
        processBuffer();
        if (!newMode.returnBegin && !newMode.excludeBegin) {
          modeBuffer = lexeme;
        }
      }
      startNewMode(newMode, match);
      return newMode.returnBegin ? 0 : lexeme.length;
    }

    /**
     * Handle the potential end of mode
     *
     * @param {RegExpMatchArray} match - the current match
     */
    function doEndMatch(match) {
      const lexeme = match[0];
      const matchPlusRemainder = codeToHighlight.substring(match.index);

      const endMode = endOfMode(top, match, matchPlusRemainder);
      if (!endMode) { return NO_MATCH; }

      const origin = top;
      if (top.endScope && top.endScope._wrap) {
        processBuffer();
        emitKeyword(lexeme, top.endScope._wrap);
      } else if (top.endScope && top.endScope._multi) {
        processBuffer();
        emitMultiClass(top.endScope, match);
      } else if (origin.skip) {
        modeBuffer += lexeme;
      } else {
        if (!(origin.returnEnd || origin.excludeEnd)) {
          modeBuffer += lexeme;
        }
        processBuffer();
        if (origin.excludeEnd) {
          modeBuffer = lexeme;
        }
      }
      do {
        if (top.scope) {
          emitter.closeNode();
        }
        if (!top.skip && !top.subLanguage) {
          relevance += top.relevance;
        }
        top = top.parent;
      } while (top !== endMode.parent);
      if (endMode.starts) {
        startNewMode(endMode.starts, match);
      }
      return origin.returnEnd ? 0 : lexeme.length;
    }

    function processContinuations() {
      const list = [];
      for (let current = top; current !== language; current = current.parent) {
        if (current.scope) {
          list.unshift(current.scope);
        }
      }
      list.forEach(item => emitter.openNode(item));
    }

    /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */
    let lastMatch = {};

    /**
     *  Process an individual match
     *
     * @param {string} textBeforeMatch - text preceding the match (since the last match)
     * @param {EnhancedMatch} [match] - the match itself
     */
    function processLexeme(textBeforeMatch, match) {
      const lexeme = match && match[0];

      // add non-matched text to the current mode buffer
      modeBuffer += textBeforeMatch;

      if (lexeme == null) {
        processBuffer();
        return 0;
      }

      // we've found a 0 width match and we're stuck, so we need to advance
      // this happens when we have badly behaved rules that have optional matchers to the degree that
      // sometimes they can end up matching nothing at all
      // Ref: https://github.com/highlightjs/highlight.js/issues/2140
      if (lastMatch.type === "begin" && match.type === "end" && lastMatch.index === match.index && lexeme === "") {
        // spit the "skipped" character that our regex choked on back into the output sequence
        modeBuffer += codeToHighlight.slice(match.index, match.index + 1);
        if (!SAFE_MODE) {
          /** @type {AnnotatedError} */
          const err = new Error(`0 width match regex (${languageName})`);
          err.languageName = languageName;
          err.badRule = lastMatch.rule;
          throw err;
        }
        return 1;
      }
      lastMatch = match;

      if (match.type === "begin") {
        return doBeginMatch(match);
      } else if (match.type === "illegal" && !ignoreIllegals) {
        // illegal match, we do not continue processing
        /** @type {AnnotatedError} */
        const err = new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.scope || '<unnamed>') + '"');
        err.mode = top;
        throw err;
      } else if (match.type === "end") {
        const processed = doEndMatch(match);
        if (processed !== NO_MATCH) {
          return processed;
        }
      }

      // edge case for when illegal matches $ (end of line) which is technically
      // a 0 width match but not a begin/end match so it's not caught by the
      // first handler (when ignoreIllegals is true)
      if (match.type === "illegal" && lexeme === "") {
        // advance so we aren't stuck in an infinite loop
        return 1;
      }

      // infinite loops are BAD, this is a last ditch catch all. if we have a
      // decent number of iterations yet our index (cursor position in our
      // parsing) still 3x behind our index then something is very wrong
      // so we bail
      if (iterations > 100000 && iterations > match.index * 3) {
        const err = new Error('potential infinite loop, way more iterations than matches');
        throw err;
      }

      /*
      Why might be find ourselves here?  An potential end match that was
      triggered but could not be completed.  IE, `doEndMatch` returned NO_MATCH.
      (this could be because a callback requests the match be ignored, etc)

      This causes no real harm other than stopping a few times too many.
      */

      modeBuffer += lexeme;
      return lexeme.length;
    }

    const language = getLanguage(languageName);
    if (!language) {
      error(LANGUAGE_NOT_FOUND.replace("{}", languageName));
      throw new Error('Unknown language: "' + languageName + '"');
    }

    const md = compileLanguage(language);
    let result = '';
    /** @type {CompiledMode} */
    let top = continuation || md;
    /** @type Record<string,CompiledMode> */
    const continuations = {}; // keep continuations for sub-languages
    const emitter = new options.__emitter(options);
    processContinuations();
    let modeBuffer = '';
    let relevance = 0;
    let index = 0;
    let iterations = 0;
    let resumeScanAtSamePosition = false;

    try {
      if (!language.__emitTokens) {
        top.matcher.considerAll();

        for (;;) {
          iterations++;
          if (resumeScanAtSamePosition) {
            // only regexes not matched previously will now be
            // considered for a potential match
            resumeScanAtSamePosition = false;
          } else {
            top.matcher.considerAll();
          }
          top.matcher.lastIndex = index;

          const match = top.matcher.exec(codeToHighlight);
          // console.log("match", match[0], match.rule && match.rule.begin)

          if (!match) break;

          const beforeMatch = codeToHighlight.substring(index, match.index);
          const processedCount = processLexeme(beforeMatch, match);
          index = match.index + processedCount;
        }
        processLexeme(codeToHighlight.substring(index));
      } else {
        language.__emitTokens(codeToHighlight, emitter);
      }

      emitter.finalize();
      result = emitter.toHTML();

      return {
        language: languageName,
        value: result,
        relevance,
        illegal: false,
        _emitter: emitter,
        _top: top
      };
    } catch (err) {
      if (err.message && err.message.includes('Illegal')) {
        return {
          language: languageName,
          value: escape$1(codeToHighlight),
          illegal: true,
          relevance: 0,
          _illegalBy: {
            message: err.message,
            index,
            context: codeToHighlight.slice(index - 100, index + 100),
            mode: err.mode,
            resultSoFar: result
          },
          _emitter: emitter
        };
      } else if (SAFE_MODE) {
        return {
          language: languageName,
          value: escape$1(codeToHighlight),
          illegal: false,
          relevance: 0,
          errorRaised: err,
          _emitter: emitter,
          _top: top
        };
      } else {
        throw err;
      }
    }
  }

  /**
   * returns a valid highlight result, without actually doing any actual work,
   * auto highlight starts with this and it's possible for small snippets that
   * auto-detection may not find a better match
   * @param {string} code
   * @returns {HighlightResult}
   */
  function justTextHighlightResult(code) {
    const result = {
      value: escape$1(code),
      illegal: false,
      relevance: 0,
      _top: PLAINTEXT_LANGUAGE,
      _emitter: new options.__emitter(options)
    };
    result._emitter.addText(code);
    return result;
  }

  /**
  Highlighting with language detection. Accepts a string with the code to
  highlight. Returns an object with the following properties:

  - language (detected language)
  - relevance (int)
  - value (an HTML string with highlighting markup)
  - secondBest (object with the same structure for second-best heuristically
    detected language, may be absent)

    @param {string} code
    @param {Array<string>} [languageSubset]
    @returns {AutoHighlightResult}
  */
  function highlightAuto(code, languageSubset) {
    languageSubset = languageSubset || options.languages || Object.keys(languages);
    const plaintext = justTextHighlightResult(code);

    const results = languageSubset.filter(getLanguage).filter(autoDetection).map(name =>
      _highlight(name, code, false)
    );
    results.unshift(plaintext); // plaintext is always an option

    const sorted = results.sort((a, b) => {
      // sort base on relevance
      if (a.relevance !== b.relevance) return b.relevance - a.relevance;

      // always award the tie to the base language
      // ie if C++ and Arduino are tied, it's more likely to be C++
      if (a.language && b.language) {
        if (getLanguage(a.language).supersetOf === b.language) {
          return 1;
        } else if (getLanguage(b.language).supersetOf === a.language) {
          return -1;
        }
      }

      // otherwise say they are equal, which has the effect of sorting on
      // relevance while preserving the original ordering - which is how ties
      // have historically been settled, ie the language that comes first always
      // wins in the case of a tie
      return 0;
    });

    const [best, secondBest] = sorted;

    /** @type {AutoHighlightResult} */
    const result = best;
    result.secondBest = secondBest;

    return result;
  }

  /**
   * Builds new class name for block given the language name
   *
   * @param {HTMLElement} element
   * @param {string} [currentLang]
   * @param {string} [resultLang]
   */
  function updateClassName(element, currentLang, resultLang) {
    const language = (currentLang && aliases[currentLang]) || resultLang;

    element.classList.add("hljs");
    element.classList.add(`language-${language}`);
  }

  /**
   * Applies highlighting to a DOM node containing code.
   *
   * @param {HighlightedHTMLElement} element - the HTML element to highlight
  */
  function highlightElement(element) {
    /** @type HTMLElement */
    let node = null;
    const language = blockLanguage(element);

    if (shouldNotHighlight(language)) return;

    fire("before:highlightElement",
      { el: element, language });

    if (element.dataset.highlighted) {
      console.log("Element previously highlighted. To highlight again, first unset `dataset.highlighted`.", element);
      return;
    }

    // we should be all text, no child nodes (unescaped HTML) - this is possibly
    // an HTML injection attack - it's likely too late if this is already in
    // production (the code has likely already done its damage by the time
    // we're seeing it)... but we yell loudly about this so that hopefully it's
    // more likely to be caught in development before making it to production
    if (element.children.length > 0) {
      if (!options.ignoreUnescapedHTML) {
        console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk.");
        console.warn("https://github.com/highlightjs/highlight.js/wiki/security");
        console.warn("The element with unescaped HTML:");
        console.warn(element);
      }
      if (options.throwUnescapedHTML) {
        const err = new HTMLInjectionError(
          "One of your code blocks includes unescaped HTML.",
          element.innerHTML
        );
        throw err;
      }
    }

    node = element;
    const text = node.textContent;
    const result = language ? highlight(text, { language, ignoreIllegals: true }) : highlightAuto(text);

    element.innerHTML = result.value;
    element.dataset.highlighted = "yes";
    updateClassName(element, language, result.language);
    element.result = {
      language: result.language,
      // TODO: remove with version 11.0
      re: result.relevance,
      relevance: result.relevance
    };
    if (result.secondBest) {
      element.secondBest = {
        language: result.secondBest.language,
        relevance: result.secondBest.relevance
      };
    }

    fire("after:highlightElement", { el: element, result, text });
  }

  /**
   * Updates highlight.js global options with the passed options
   *
   * @param {Partial<HLJSOptions>} userOptions
   */
  function configure(userOptions) {
    options = inherit(options, userOptions);
  }

  // TODO: remove v12, deprecated
  const initHighlighting = () => {
    highlightAll();
    deprecated("10.6.0", "initHighlighting() deprecated.  Use highlightAll() now.");
  };

  // TODO: remove v12, deprecated
  function initHighlightingOnLoad() {
    highlightAll();
    deprecated("10.6.0", "initHighlightingOnLoad() deprecated.  Use highlightAll() now.");
  }

  let wantsHighlight = false;

  /**
   * auto-highlights all pre>code elements on the page
   */
  function highlightAll() {
    // if we are called too early in the loading process
    if (document.readyState === "loading") {
      wantsHighlight = true;
      return;
    }

    const blocks = document.querySelectorAll(options.cssSelector);
    blocks.forEach(highlightElement);
  }

  function boot() {
    // if a highlight was requested before DOM was loaded, do now
    if (wantsHighlight) highlightAll();
  }

  // make sure we are in the browser environment
  if (typeof window !== 'undefined' && window.addEventListener) {
    window.addEventListener('DOMContentLoaded', boot, false);
  }

  /**
   * Register a language grammar module
   *
   * @param {string} languageName
   * @param {LanguageFn} languageDefinition
   */
  function registerLanguage(languageName, languageDefinition) {
    let lang = null;
    try {
      lang = languageDefinition(hljs);
    } catch (error$1) {
      error("Language definition for '{}' could not be registered.".replace("{}", languageName));
      // hard or soft error
      if (!SAFE_MODE) { throw error$1; } else { error(error$1); }
      // languages that have serious errors are replaced with essentially a
      // "plaintext" stand-in so that the code blocks will still get normal
      // css classes applied to them - and one bad language won't break the
      // entire highlighter
      lang = PLAINTEXT_LANGUAGE;
    }
    // give it a temporary name if it doesn't have one in the meta-data
    if (!lang.name) lang.name = languageName;
    languages[languageName] = lang;
    lang.rawDefinition = languageDefinition.bind(null, hljs);

    if (lang.aliases) {
      registerAliases(lang.aliases, { languageName });
    }
  }

  /**
   * Remove a language grammar module
   *
   * @param {string} languageName
   */
  function unregisterLanguage(languageName) {
    delete languages[languageName];
    for (const alias of Object.keys(aliases)) {
      if (aliases[alias] === languageName) {
        delete aliases[alias];
      }
    }
  }

  /**
   * @returns {string[]} List of language internal names
   */
  function listLanguages() {
    return Object.keys(languages);
  }

  /**
   * @param {string} name - name of the language to retrieve
   * @returns {Language | undefined}
   */
  function getLanguage(name) {
    name = (name || '').toLowerCase();
    return languages[name] || languages[aliases[name]];
  }

  /**
   *
   * @param {string|string[]} aliasList - single alias or list of aliases
   * @param {{languageName: string}} opts
   */
  function registerAliases(aliasList, { languageName }) {
    if (typeof aliasList === 'string') {
      aliasList = [aliasList];
    }
    aliasList.forEach(alias => { aliases[alias.toLowerCase()] = languageName; });
  }

  /**
   * Determines if a given language has auto-detection enabled
   * @param {string} name - name of the language
   */
  function autoDetection(name) {
    const lang = getLanguage(name);
    return lang && !lang.disableAutodetect;
  }

  /**
   * Upgrades the old highlightBlock plugins to the new
   * highlightElement API
   * @param {HLJSPlugin} plugin
   */
  function upgradePluginAPI(plugin) {
    // TODO: remove with v12
    if (plugin["before:highlightBlock"] && !plugin["before:highlightElement"]) {
      plugin["before:highlightElement"] = (data) => {
        plugin["before:highlightBlock"](
          Object.assign({ block: data.el }, data)
        );
      };
    }
    if (plugin["after:highlightBlock"] && !plugin["after:highlightElement"]) {
      plugin["after:highlightElement"] = (data) => {
        plugin["after:highlightBlock"](
          Object.assign({ block: data.el }, data)
        );
      };
    }
  }

  /**
   * @param {HLJSPlugin} plugin
   */
  function addPlugin(plugin) {
    upgradePluginAPI(plugin);
    plugins.push(plugin);
  }

  /**
   * @param {HLJSPlugin} plugin
   */
  function removePlugin(plugin) {
    const index = plugins.indexOf(plugin);
    if (index !== -1) {
      plugins.splice(index, 1);
    }
  }

  /**
   *
   * @param {PluginEvent} event
   * @param {any} args
   */
  function fire(event, args) {
    const cb = event;
    plugins.forEach(function(plugin) {
      if (plugin[cb]) {
        plugin[cb](args);
      }
    });
  }

  /**
   * DEPRECATED
   * @param {HighlightedHTMLElement} el
   */
  function deprecateHighlightBlock(el) {
    deprecated("10.7.0", "highlightBlock will be removed entirely in v12.0");
    deprecated("10.7.0", "Please use highlightElement now.");

    return highlightElement(el);
  }

  /* Interface definition */
  Object.assign(hljs, {
    highlight,
    highlightAuto,
    highlightAll,
    highlightElement,
    // TODO: Remove with v12 API
    highlightBlock: deprecateHighlightBlock,
    configure,
    initHighlighting,
    initHighlightingOnLoad,
    registerLanguage,
    unregisterLanguage,
    listLanguages,
    getLanguage,
    registerAliases,
    autoDetection,
    inherit,
    addPlugin,
    removePlugin
  });

  hljs.debugMode = function() { SAFE_MODE = false; };
  hljs.safeMode = function() { SAFE_MODE = true; };
  hljs.versionString = version;

  hljs.regex = {
    concat: concat,
    lookahead: lookahead,
    either: either,
    optional: optional,
    anyNumberOfTimes: anyNumberOfTimes
  };

  for (const key in MODES) {
    // @ts-ignore
    if (typeof MODES[key] === "object") {
      // @ts-ignore
      deepFreeze(MODES[key]);
    }
  }

  // merge all the modes/regexes into our main object
  Object.assign(hljs, MODES);

  return hljs;
};

// Other names for the variable may break build script
const highlight = HLJS({});

// returns a new instance of the highlighter to be used for extensions
// check https://github.com/wooorm/lowlight/issues/47
highlight.newInstance = () => HLJS({});

var core = highlight;
highlight.HighlightJS = highlight;
highlight.default = highlight;

/*
Language: 1C:Enterprise
Author: Stanislav Belov <stbelov@gmail.com>
Description: built-in language 1C:Enterprise (v7, v8)
Category: enterprise
*/

var _1c_1;
var hasRequired_1c;

function require_1c () {
	if (hasRequired_1c) return _1c_1;
	hasRequired_1c = 1;
	function _1c(hljs) {
	  // общий паттерн для определения идентификаторов
	  const UNDERSCORE_IDENT_RE = '[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]+';

	  // v7 уникальные ключевые слова, отсутствующие в v8 ==> keyword
	  const v7_keywords =
	  'далее ';

	  // v8 ключевые слова ==> keyword
	  const v8_keywords =
	  'возврат вызватьисключение выполнить для если и из или иначе иначеесли исключение каждого конецесли '
	  + 'конецпопытки конеццикла не новый перейти перем по пока попытка прервать продолжить тогда цикл экспорт ';

	  // keyword : ключевые слова
	  const KEYWORD = v7_keywords + v8_keywords;

	  // v7 уникальные директивы, отсутствующие в v8 ==> meta-keyword
	  const v7_meta_keywords =
	  'загрузитьизфайла ';

	  // v8 ключевые слова в инструкциях препроцессора, директивах компиляции, аннотациях ==> meta-keyword
	  const v8_meta_keywords =
	  'вебклиент вместо внешнеесоединение клиент конецобласти мобильноеприложениеклиент мобильноеприложениесервер '
	  + 'наклиенте наклиентенасервере наклиентенасерверебезконтекста насервере насерверебезконтекста область перед '
	  + 'после сервер толстыйклиентобычноеприложение толстыйклиентуправляемоеприложение тонкийклиент ';

	  // meta-keyword : ключевые слова в инструкциях препроцессора, директивах компиляции, аннотациях
	  const METAKEYWORD = v7_meta_keywords + v8_meta_keywords;

	  // v7 системные константы ==> built_in
	  const v7_system_constants =
	  'разделительстраниц разделительстрок символтабуляции ';

	  // v7 уникальные методы глобального контекста, отсутствующие в v8 ==> built_in
	  const v7_global_context_methods =
	  'ansitooem oemtoansi ввестивидсубконто ввестиперечисление ввестипериод ввестиплансчетов выбранныйплансчетов '
	  + 'датагод датамесяц датачисло заголовоксистемы значениевстроку значениеизстроки каталогиб каталогпользователя '
	  + 'кодсимв конгода конецпериодаби конецрассчитанногопериодаби конецстандартногоинтервала конквартала конмесяца '
	  + 'коннедели лог лог10 максимальноеколичествосубконто названиеинтерфейса названиенабораправ назначитьвид '
	  + 'назначитьсчет найтиссылки началопериодаби началостандартногоинтервала начгода начквартала начмесяца '
	  + 'начнедели номерднягода номерднянедели номернеделигода обработкаожидания основнойжурналрасчетов '
	  + 'основнойплансчетов основнойязык очиститьокносообщений периодстр получитьвремята получитьдатута '
	  + 'получитьдокументта получитьзначенияотбора получитьпозициюта получитьпустоезначение получитьта '
	  + 'префиксавтонумерации пропись пустоезначение разм разобратьпозициюдокумента рассчитатьрегистрына '
	  + 'рассчитатьрегистрыпо симв создатьобъект статусвозврата стрколичествострок сформироватьпозициюдокумента '
	  + 'счетпокоду текущеевремя типзначения типзначениястр установитьтана установитьтапо фиксшаблон шаблон ';

	  // v8 методы глобального контекста ==> built_in
	  const v8_global_context_methods =
	  'acos asin atan base64значение base64строка cos exp log log10 pow sin sqrt tan xmlзначение xmlстрока '
	  + 'xmlтип xmlтипзнч активноеокно безопасныйрежим безопасныйрежимразделенияданных булево ввестидату ввестизначение '
	  + 'ввестистроку ввестичисло возможностьчтенияxml вопрос восстановитьзначение врег выгрузитьжурналрегистрации '
	  + 'выполнитьобработкуоповещения выполнитьпроверкуправдоступа вычислить год данныеформывзначение дата день деньгода '
	  + 'деньнедели добавитьмесяц заблокироватьданныедляредактирования заблокироватьработупользователя завершитьработусистемы '
	  + 'загрузитьвнешнююкомпоненту закрытьсправку записатьjson записатьxml записатьдатуjson записьжурналарегистрации '
	  + 'заполнитьзначениясвойств запроситьразрешениепользователя запуститьприложение запуститьсистему зафиксироватьтранзакцию '
	  + 'значениевданныеформы значениевстрокувнутр значениевфайл значениезаполнено значениеизстрокивнутр значениеизфайла '
	  + 'изxmlтипа импортмоделиxdto имякомпьютера имяпользователя инициализироватьпредопределенныеданные информацияобошибке '
	  + 'каталогбиблиотекимобильногоустройства каталогвременныхфайлов каталогдокументов каталогпрограммы кодироватьстроку '
	  + 'кодлокализацииинформационнойбазы кодсимвола командасистемы конецгода конецдня конецквартала конецмесяца конецминуты '
	  + 'конецнедели конецчаса конфигурациябазыданныхизмененадинамически конфигурацияизменена копироватьданныеформы '
	  + 'копироватьфайл краткоепредставлениеошибки лев макс местноевремя месяц мин минута монопольныйрежим найти '
	  + 'найтинедопустимыесимволыxml найтиокнопонавигационнойссылке найтипомеченныенаудаление найтипоссылкам найтифайлы '
	  + 'началогода началодня началоквартала началомесяца началоминуты началонедели началочаса начатьзапросразрешенияпользователя '
	  + 'начатьзапускприложения начатькопированиефайла начатьперемещениефайла начатьподключениевнешнейкомпоненты '
	  + 'начатьподключениерасширенияработыскриптографией начатьподключениерасширенияработысфайлами начатьпоискфайлов '
	  + 'начатьполучениекаталогавременныхфайлов начатьполучениекаталогадокументов начатьполучениерабочегокаталогаданныхпользователя '
	  + 'начатьполучениефайлов начатьпомещениефайла начатьпомещениефайлов начатьсозданиедвоичныхданныхизфайла начатьсозданиекаталога '
	  + 'начатьтранзакцию начатьудалениефайлов начатьустановкувнешнейкомпоненты начатьустановкурасширенияработыскриптографией '
	  + 'начатьустановкурасширенияработысфайлами неделягода необходимостьзавершениясоединения номерсеансаинформационнойбазы '
	  + 'номерсоединенияинформационнойбазы нрег нстр обновитьинтерфейс обновитьнумерациюобъектов обновитьповторноиспользуемыезначения '
	  + 'обработкапрерыванияпользователя объединитьфайлы окр описаниеошибки оповестить оповеститьобизменении '
	  + 'отключитьобработчикзапросанастроекклиенталицензирования отключитьобработчикожидания отключитьобработчикоповещения '
	  + 'открытьзначение открытьиндекссправки открытьсодержаниесправки открытьсправку открытьформу открытьформумодально '
	  + 'отменитьтранзакцию очиститьжурналрегистрации очиститьнастройкипользователя очиститьсообщения параметрыдоступа '
	  + 'перейтипонавигационнойссылке переместитьфайл подключитьвнешнююкомпоненту '
	  + 'подключитьобработчикзапросанастроекклиенталицензирования подключитьобработчикожидания подключитьобработчикоповещения '
	  + 'подключитьрасширениеработыскриптографией подключитьрасширениеработысфайлами подробноепредставлениеошибки '
	  + 'показатьвводдаты показатьвводзначения показатьвводстроки показатьвводчисла показатьвопрос показатьзначение '
	  + 'показатьинформациюобошибке показатьнакарте показатьоповещениепользователя показатьпредупреждение полноеимяпользователя '
	  + 'получитьcomобъект получитьxmlтип получитьадреспоместоположению получитьблокировкусеансов получитьвремязавершенияспящегосеанса '
	  + 'получитьвремязасыпанияпассивногосеанса получитьвремяожиданияблокировкиданных получитьданныевыбора '
	  + 'получитьдополнительныйпараметрклиенталицензирования получитьдопустимыекодылокализации получитьдопустимыечасовыепояса '
	  + 'получитьзаголовокклиентскогоприложения получитьзаголовоксистемы получитьзначенияотборажурналарегистрации '
	  + 'получитьидентификаторконфигурации получитьизвременногохранилища получитьимявременногофайла '
	  + 'получитьимяклиенталицензирования получитьинформациюэкрановклиента получитьиспользованиежурналарегистрации '
	  + 'получитьиспользованиесобытияжурналарегистрации получитькраткийзаголовокприложения получитьмакетоформления '
	  + 'получитьмаскувсефайлы получитьмаскувсефайлыклиента получитьмаскувсефайлысервера получитьместоположениепоадресу '
	  + 'получитьминимальнуюдлинупаролейпользователей получитьнавигационнуюссылку получитьнавигационнуюссылкуинформационнойбазы '
	  + 'получитьобновлениеконфигурациибазыданных получитьобновлениепредопределенныхданныхинформационнойбазы получитьобщиймакет '
	  + 'получитьобщуюформу получитьокна получитьоперативнуюотметкувремени получитьотключениебезопасногорежима '
	  + 'получитьпараметрыфункциональныхопцийинтерфейса получитьполноеимяпредопределенногозначения '
	  + 'получитьпредставлениянавигационныхссылок получитьпроверкусложностипаролейпользователей получитьразделительпути '
	  + 'получитьразделительпутиклиента получитьразделительпутисервера получитьсеансыинформационнойбазы '
	  + 'получитьскоростьклиентскогосоединения получитьсоединенияинформационнойбазы получитьсообщенияпользователю '
	  + 'получитьсоответствиеобъектаиформы получитьсоставстандартногоинтерфейсаodata получитьструктурухранениябазыданных '
	  + 'получитьтекущийсеансинформационнойбазы получитьфайл получитьфайлы получитьформу получитьфункциональнуюопцию '
	  + 'получитьфункциональнуюопциюинтерфейса получитьчасовойпоясинформационнойбазы пользователиос поместитьвовременноехранилище '
	  + 'поместитьфайл поместитьфайлы прав праводоступа предопределенноезначение представлениекодалокализации представлениепериода '
	  + 'представлениеправа представлениеприложения представлениесобытияжурналарегистрации представлениечасовогопояса предупреждение '
	  + 'прекратитьработусистемы привилегированныйрежим продолжитьвызов прочитатьjson прочитатьxml прочитатьдатуjson пустаястрока '
	  + 'рабочийкаталогданныхпользователя разблокироватьданныедляредактирования разделитьфайл разорватьсоединениесвнешнимисточникомданных '
	  + 'раскодироватьстроку рольдоступна секунда сигнал символ скопироватьжурналрегистрации смещениелетнеговремени '
	  + 'смещениестандартноговремени соединитьбуферыдвоичныхданных создатькаталог создатьфабрикуxdto сокрл сокрлп сокрп сообщить '
	  + 'состояние сохранитьзначение сохранитьнастройкипользователя сред стрдлина стрзаканчиваетсяна стрзаменить стрнайти стрначинаетсяс '
	  + 'строка строкасоединенияинформационнойбазы стрполучитьстроку стрразделить стрсоединить стрсравнить стрчисловхождений '
	  + 'стрчислострок стршаблон текущаядата текущаядатасеанса текущаяуниверсальнаядата текущаяуниверсальнаядатавмиллисекундах '
	  + 'текущийвариантинтерфейсаклиентскогоприложения текущийвариантосновногошрифтаклиентскогоприложения текущийкодлокализации '
	  + 'текущийрежимзапуска текущийязык текущийязыксистемы тип типзнч транзакцияактивна трег удалитьданныеинформационнойбазы '
	  + 'удалитьизвременногохранилища удалитьобъекты удалитьфайлы универсальноевремя установитьбезопасныйрежим '
	  + 'установитьбезопасныйрежимразделенияданных установитьблокировкусеансов установитьвнешнююкомпоненту '
	  + 'установитьвремязавершенияспящегосеанса установитьвремязасыпанияпассивногосеанса установитьвремяожиданияблокировкиданных '
	  + 'установитьзаголовокклиентскогоприложения установитьзаголовоксистемы установитьиспользованиежурналарегистрации '
	  + 'установитьиспользованиесобытияжурналарегистрации установитькраткийзаголовокприложения '
	  + 'установитьминимальнуюдлинупаролейпользователей установитьмонопольныйрежим установитьнастройкиклиенталицензирования '
	  + 'установитьобновлениепредопределенныхданныхинформационнойбазы установитьотключениебезопасногорежима '
	  + 'установитьпараметрыфункциональныхопцийинтерфейса установитьпривилегированныйрежим '
	  + 'установитьпроверкусложностипаролейпользователей установитьрасширениеработыскриптографией '
	  + 'установитьрасширениеработысфайлами установитьсоединениесвнешнимисточникомданных установитьсоответствиеобъектаиформы '
	  + 'установитьсоставстандартногоинтерфейсаodata установитьчасовойпоясинформационнойбазы установитьчасовойпояссеанса '
	  + 'формат цел час часовойпояс часовойпояссеанса число числопрописью этоадресвременногохранилища ';

	  // v8 свойства глобального контекста ==> built_in
	  const v8_global_context_property =
	  'wsссылки библиотекакартинок библиотекамакетовоформлениякомпоновкиданных библиотекастилей бизнеспроцессы '
	  + 'внешниеисточникиданных внешниеобработки внешниеотчеты встроенныепокупки главныйинтерфейс главныйстиль '
	  + 'документы доставляемыеуведомления журналыдокументов задачи информацияобинтернетсоединении использованиерабочейдаты '
	  + 'историяработыпользователя константы критерииотбора метаданные обработки отображениерекламы отправкадоставляемыхуведомлений '
	  + 'отчеты панельзадачос параметрзапуска параметрысеанса перечисления планывидоврасчета планывидовхарактеристик '
	  + 'планыобмена планысчетов полнотекстовыйпоиск пользователиинформационнойбазы последовательности проверкавстроенныхпокупок '
	  + 'рабочаядата расширенияконфигурации регистрыбухгалтерии регистрынакопления регистрырасчета регистрысведений '
	  + 'регламентныезадания сериализаторxdto справочники средствагеопозиционирования средствакриптографии средствамультимедиа '
	  + 'средстваотображениярекламы средствапочты средствателефонии фабрикаxdto файловыепотоки фоновыезадания хранилищанастроек '
	  + 'хранилищевариантовотчетов хранилищенастроекданныхформ хранилищеобщихнастроек хранилищепользовательскихнастроекдинамическихсписков '
	  + 'хранилищепользовательскихнастроекотчетов хранилищесистемныхнастроек ';

	  // built_in : встроенные или библиотечные объекты (константы, классы, функции)
	  const BUILTIN =
	  v7_system_constants
	  + v7_global_context_methods + v8_global_context_methods
	  + v8_global_context_property;

	  // v8 системные наборы значений ==> class
	  const v8_system_sets_of_values =
	  'webцвета windowsцвета windowsшрифты библиотекакартинок рамкистиля символы цветастиля шрифтыстиля ';

	  // v8 системные перечисления - интерфейсные ==> class
	  const v8_system_enums_interface =
	  'автоматическоесохранениеданныхформывнастройках автонумерациявформе автораздвижениесерий '
	  + 'анимациядиаграммы вариантвыравниванияэлементовизаголовков вариантуправлениявысотойтаблицы '
	  + 'вертикальнаяпрокруткаформы вертикальноеположение вертикальноеположениеэлемента видгруппыформы '
	  + 'виддекорацииформы виддополненияэлементаформы видизмененияданных видкнопкиформы видпереключателя '
	  + 'видподписейкдиаграмме видполяформы видфлажка влияниеразмеранапузырекдиаграммы горизонтальноеположение '
	  + 'горизонтальноеположениеэлемента группировкаколонок группировкаподчиненныхэлементовформы '
	  + 'группыиэлементы действиеперетаскивания дополнительныйрежимотображения допустимыедействияперетаскивания '
	  + 'интервалмеждуэлементамиформы использованиевывода использованиеполосыпрокрутки '
	  + 'используемоезначениеточкибиржевойдиаграммы историявыборапривводе источникзначенийоситочекдиаграммы '
	  + 'источникзначенияразмерапузырькадиаграммы категориягруппыкоманд максимумсерий начальноеотображениедерева '
	  + 'начальноеотображениесписка обновлениетекстаредактирования ориентациядендрограммы ориентациядиаграммы '
	  + 'ориентацияметокдиаграммы ориентацияметоксводнойдиаграммы ориентацияэлементаформы отображениевдиаграмме '
	  + 'отображениевлегендедиаграммы отображениегруппыкнопок отображениезаголовкашкалыдиаграммы '
	  + 'отображениезначенийсводнойдиаграммы отображениезначенияизмерительнойдиаграммы '
	  + 'отображениеинтерваладиаграммыганта отображениекнопки отображениекнопкивыбора отображениеобсужденийформы '
	  + 'отображениеобычнойгруппы отображениеотрицательныхзначенийпузырьковойдиаграммы отображениепанелипоиска '
	  + 'отображениеподсказки отображениепредупрежденияприредактировании отображениеразметкиполосырегулирования '
	  + 'отображениестраницформы отображениетаблицы отображениетекстазначениядиаграммыганта '
	  + 'отображениеуправленияобычнойгруппы отображениефигурыкнопки палитрацветовдиаграммы поведениеобычнойгруппы '
	  + 'поддержкамасштабадендрограммы поддержкамасштабадиаграммыганта поддержкамасштабасводнойдиаграммы '
	  + 'поисквтаблицепривводе положениезаголовкаэлементаформы положениекартинкикнопкиформы '
	  + 'положениекартинкиэлементаграфическойсхемы положениекоманднойпанелиформы положениекоманднойпанелиэлементаформы '
	  + 'положениеопорнойточкиотрисовки положениеподписейкдиаграмме положениеподписейшкалызначенийизмерительнойдиаграммы '
	  + 'положениесостоянияпросмотра положениестрокипоиска положениетекстасоединительнойлинии положениеуправленияпоиском '
	  + 'положениешкалывремени порядокотображенияточекгоризонтальнойгистограммы порядоксерийвлегендедиаграммы '
	  + 'размеркартинки расположениезаголовкашкалыдиаграммы растягиваниеповертикалидиаграммыганта '
	  + 'режимавтоотображениясостояния режимвводастроктаблицы режимвыборанезаполненного режимвыделениядаты '
	  + 'режимвыделениястрокитаблицы режимвыделениятаблицы режимизмененияразмера режимизменениясвязанногозначения '
	  + 'режимиспользованиядиалогапечати режимиспользованияпараметракоманды режиммасштабированияпросмотра '
	  + 'режимосновногоокнаклиентскогоприложения режимоткрытияокнаформы режимотображениявыделения '
	  + 'режимотображениягеографическойсхемы режимотображениязначенийсерии режимотрисовкисеткиграфическойсхемы '
	  + 'режимполупрозрачностидиаграммы режимпробеловдиаграммы режимразмещениянастранице режимредактированияколонки '
	  + 'режимсглаживаниядиаграммы режимсглаживанияиндикатора режимсписказадач сквозноевыравнивание '
	  + 'сохранениеданныхформывнастройках способзаполнениятекстазаголовкашкалыдиаграммы '
	  + 'способопределенияограничивающегозначениядиаграммы стандартнаягруппакоманд стандартноеоформление '
	  + 'статусоповещенияпользователя стильстрелки типаппроксимациилиниитрендадиаграммы типдиаграммы '
	  + 'типединицышкалывремени типимпортасерийслоягеографическойсхемы типлиниигеографическойсхемы типлиниидиаграммы '
	  + 'типмаркерагеографическойсхемы типмаркерадиаграммы типобластиоформления '
	  + 'типорганизацииисточникаданныхгеографическойсхемы типотображениясериислоягеографическойсхемы '
	  + 'типотображенияточечногообъектагеографическойсхемы типотображенияшкалыэлементалегендыгеографическойсхемы '
	  + 'типпоискаобъектовгеографическойсхемы типпроекциигеографическойсхемы типразмещенияизмерений '
	  + 'типразмещенияреквизитовизмерений типрамкиэлементауправления типсводнойдиаграммы '
	  + 'типсвязидиаграммыганта типсоединениязначенийпосериямдиаграммы типсоединенияточекдиаграммы '
	  + 'типсоединительнойлинии типстороныэлементаграфическойсхемы типформыотчета типшкалырадарнойдиаграммы '
	  + 'факторлиниитрендадиаграммы фигуракнопки фигурыграфическойсхемы фиксациявтаблице форматдняшкалывремени '
	  + 'форматкартинки ширинаподчиненныхэлементовформы ';

	  // v8 системные перечисления - свойства прикладных объектов ==> class
	  const v8_system_enums_objects_properties =
	  'виддвижениябухгалтерии виддвижениянакопления видпериодарегистрарасчета видсчета видточкимаршрутабизнеспроцесса '
	  + 'использованиеагрегатарегистранакопления использованиегруппиэлементов использованиережимапроведения '
	  + 'использованиесреза периодичностьагрегатарегистранакопления режимавтовремя режимзаписидокумента режимпроведениядокумента ';

	  // v8 системные перечисления - планы обмена ==> class
	  const v8_system_enums_exchange_plans =
	  'авторегистрацияизменений допустимыйномерсообщения отправкаэлементаданных получениеэлементаданных ';

	  // v8 системные перечисления - табличный документ ==> class
	  const v8_system_enums_tabular_document =
	  'использованиерасшифровкитабличногодокумента ориентациястраницы положениеитоговколоноксводнойтаблицы '
	  + 'положениеитоговстроксводнойтаблицы положениетекстаотносительнокартинки расположениезаголовкагруппировкитабличногодокумента '
	  + 'способчтениязначенийтабличногодокумента типдвустороннейпечати типзаполненияобластитабличногодокумента '
	  + 'типкурсоровтабличногодокумента типлиниирисункатабличногодокумента типлинииячейкитабличногодокумента '
	  + 'типнаправленияпереходатабличногодокумента типотображениявыделениятабличногодокумента типотображениялинийсводнойтаблицы '
	  + 'типразмещениятекстатабличногодокумента типрисункатабличногодокумента типсмещениятабличногодокумента '
	  + 'типузоратабличногодокумента типфайлатабличногодокумента точностьпечати чередованиерасположениястраниц ';

	  // v8 системные перечисления - планировщик ==> class
	  const v8_system_enums_sheduler =
	  'отображениевремениэлементовпланировщика ';

	  // v8 системные перечисления - форматированный документ ==> class
	  const v8_system_enums_formatted_document =
	  'типфайлаформатированногодокумента ';

	  // v8 системные перечисления - запрос ==> class
	  const v8_system_enums_query =
	  'обходрезультатазапроса типзаписизапроса ';

	  // v8 системные перечисления - построитель отчета ==> class
	  const v8_system_enums_report_builder =
	  'видзаполнениярасшифровкипостроителяотчета типдобавленияпредставлений типизмеренияпостроителяотчета типразмещенияитогов ';

	  // v8 системные перечисления - работа с файлами ==> class
	  const v8_system_enums_files =
	  'доступкфайлу режимдиалогавыборафайла режимоткрытияфайла ';

	  // v8 системные перечисления - построитель запроса ==> class
	  const v8_system_enums_query_builder =
	  'типизмеренияпостроителязапроса ';

	  // v8 системные перечисления - анализ данных ==> class
	  const v8_system_enums_data_analysis =
	  'видданныханализа методкластеризации типединицыинтервалавременианализаданных типзаполнениятаблицырезультатаанализаданных '
	  + 'типиспользованиячисловыхзначенийанализаданных типисточникаданныхпоискаассоциаций типколонкианализаданныхдереворешений '
	  + 'типколонкианализаданныхкластеризация типколонкианализаданныхобщаястатистика типколонкианализаданныхпоискассоциаций '
	  + 'типколонкианализаданныхпоискпоследовательностей типколонкимоделипрогноза типмерырасстоянияанализаданных '
	  + 'типотсеченияправилассоциации типполяанализаданных типстандартизациианализаданных типупорядочиванияправилассоциациианализаданных '
	  + 'типупорядочиванияшаблоновпоследовательностейанализаданных типупрощениядереварешений ';

	  // v8 системные перечисления - xml, json, xs, dom, xdto, web-сервисы ==> class
	  const v8_system_enums_xml_json_xs_dom_xdto_ws =
	  'wsнаправлениепараметра вариантxpathxs вариантзаписидатыjson вариантпростоготипаxs видгруппымоделиxs видфасетаxdto '
	  + 'действиепостроителяdom завершенностьпростоготипаxs завершенностьсоставноготипаxs завершенностьсхемыxs запрещенныеподстановкиxs '
	  + 'исключениягруппподстановкиxs категорияиспользованияатрибутаxs категорияограниченияидентичностиxs категорияограниченияпространствименxs '
	  + 'методнаследованияxs модельсодержимогоxs назначениетипаxml недопустимыеподстановкиxs обработкапробельныхсимволовxs обработкасодержимогоxs '
	  + 'ограничениезначенияxs параметрыотбораузловdom переносстрокjson позициявдокументеdom пробельныесимволыxml типатрибутаxml типзначенияjson '
	  + 'типканоническогоxml типкомпонентыxs типпроверкиxml типрезультатаdomxpath типузлаdom типузлаxml формаxml формапредставленияxs '
	  + 'форматдатыjson экранированиесимволовjson ';

	  // v8 системные перечисления - система компоновки данных ==> class
	  const v8_system_enums_data_composition_system =
	  'видсравнениякомпоновкиданных действиеобработкирасшифровкикомпоновкиданных направлениесортировкикомпоновкиданных '
	  + 'расположениевложенныхэлементоврезультатакомпоновкиданных расположениеитоговкомпоновкиданных расположениегруппировкикомпоновкиданных '
	  + 'расположениеполейгруппировкикомпоновкиданных расположениеполякомпоновкиданных расположениереквизитовкомпоновкиданных '
	  + 'расположениересурсовкомпоновкиданных типбухгалтерскогоостаткакомпоновкиданных типвыводатекстакомпоновкиданных '
	  + 'типгруппировкикомпоновкиданных типгруппыэлементовотборакомпоновкиданных типдополненияпериодакомпоновкиданных '
	  + 'типзаголовкаполейкомпоновкиданных типмакетагруппировкикомпоновкиданных типмакетаобластикомпоновкиданных типостаткакомпоновкиданных '
	  + 'типпериодакомпоновкиданных типразмещениятекстакомпоновкиданных типсвязинаборовданныхкомпоновкиданных типэлементарезультатакомпоновкиданных '
	  + 'расположениелегендыдиаграммыкомпоновкиданных типпримененияотборакомпоновкиданных режимотображенияэлементанастройкикомпоновкиданных '
	  + 'режимотображениянастроеккомпоновкиданных состояниеэлементанастройкикомпоновкиданных способвосстановлениянастроеккомпоновкиданных '
	  + 'режимкомпоновкирезультата использованиепараметракомпоновкиданных автопозицияресурсовкомпоновкиданных '
	  + 'вариантиспользованиягруппировкикомпоновкиданных расположениересурсоввдиаграммекомпоновкиданных фиксациякомпоновкиданных '
	  + 'использованиеусловногооформлениякомпоновкиданных ';

	  // v8 системные перечисления - почта ==> class
	  const v8_system_enums_email =
	  'важностьинтернетпочтовогосообщения обработкатекстаинтернетпочтовогосообщения способкодированияинтернетпочтовоговложения '
	  + 'способкодированиянеasciiсимволовинтернетпочтовогосообщения типтекстапочтовогосообщения протоколинтернетпочты '
	  + 'статусразборапочтовогосообщения ';

	  // v8 системные перечисления - журнал регистрации ==> class
	  const v8_system_enums_logbook =
	  'режимтранзакциизаписижурналарегистрации статустранзакциизаписижурналарегистрации уровеньжурналарегистрации ';

	  // v8 системные перечисления - криптография ==> class
	  const v8_system_enums_cryptography =
	  'расположениехранилищасертификатовкриптографии режимвключениясертификатовкриптографии режимпроверкисертификатакриптографии '
	  + 'типхранилищасертификатовкриптографии ';

	  // v8 системные перечисления - ZIP ==> class
	  const v8_system_enums_zip =
	  'кодировкаименфайловвzipфайле методсжатияzip методшифрованияzip режимвосстановленияпутейфайловzip режимобработкиподкаталоговzip '
	  + 'режимсохраненияпутейzip уровеньсжатияzip ';

	  // v8 системные перечисления -
	  // Блокировка данных, Фоновые задания, Автоматизированное тестирование,
	  // Доставляемые уведомления, Встроенные покупки, Интернет, Работа с двоичными данными ==> class
	  const v8_system_enums_other =
	  'звуковоеоповещение направлениепереходакстроке позициявпотоке порядокбайтов режимблокировкиданных режимуправленияблокировкойданных '
	  + 'сервисвстроенныхпокупок состояниефоновогозадания типподписчикадоставляемыхуведомлений уровеньиспользованиязащищенногосоединенияftp ';

	  // v8 системные перечисления - схема запроса ==> class
	  const v8_system_enums_request_schema =
	  'направлениепорядкасхемызапроса типдополненияпериодамисхемызапроса типконтрольнойточкисхемызапроса типобъединениясхемызапроса '
	  + 'типпараметрадоступнойтаблицысхемызапроса типсоединениясхемызапроса ';

	  // v8 системные перечисления - свойства объектов метаданных ==> class
	  const v8_system_enums_properties_of_metadata_objects =
	  'httpметод автоиспользованиеобщегореквизита автопрефиксномеразадачи вариантвстроенногоязыка видиерархии видрегистранакопления '
	  + 'видтаблицывнешнегоисточникаданных записьдвиженийприпроведении заполнениепоследовательностей индексирование '
	  + 'использованиебазыпланавидоврасчета использованиебыстроговыбора использованиеобщегореквизита использованиеподчинения '
	  + 'использованиеполнотекстовогопоиска использованиеразделяемыхданныхобщегореквизита использованиереквизита '
	  + 'назначениеиспользованияприложения назначениерасширенияконфигурации направлениепередачи обновлениепредопределенныхданных '
	  + 'оперативноепроведение основноепредставлениевидарасчета основноепредставлениевидахарактеристики основноепредставлениезадачи '
	  + 'основноепредставлениепланаобмена основноепредставлениесправочника основноепредставлениесчета перемещениеграницыприпроведении '
	  + 'периодичностьномерабизнеспроцесса периодичностьномерадокумента периодичностьрегистрарасчета периодичностьрегистрасведений '
	  + 'повторноеиспользованиевозвращаемыхзначений полнотекстовыйпоискпривводепостроке принадлежностьобъекта проведение '
	  + 'разделениеаутентификацииобщегореквизита разделениеданныхобщегореквизита разделениерасширенийконфигурацииобщегореквизита '
	  + 'режимавтонумерацииобъектов режимзаписирегистра режимиспользованиямодальности '
	  + 'режимиспользованиясинхронныхвызововрасширенийплатформыивнешнихкомпонент режимповторногоиспользованиясеансов '
	  + 'режимполученияданныхвыборапривводепостроке режимсовместимости режимсовместимостиинтерфейса '
	  + 'режимуправленияблокировкойданныхпоумолчанию сериикодовпланавидовхарактеристик сериикодовпланасчетов '
	  + 'сериикодовсправочника созданиепривводе способвыбора способпоискастрокипривводепостроке способредактирования '
	  + 'типданныхтаблицывнешнегоисточникаданных типкодапланавидоврасчета типкодасправочника типмакета типномерабизнеспроцесса '
	  + 'типномерадокумента типномеразадачи типформы удалениедвижений ';

	  // v8 системные перечисления - разные ==> class
	  const v8_system_enums_differents =
	  'важностьпроблемыприменениярасширенияконфигурации вариантинтерфейсаклиентскогоприложения вариантмасштабаформклиентскогоприложения '
	  + 'вариантосновногошрифтаклиентскогоприложения вариантстандартногопериода вариантстандартнойдатыначала видграницы видкартинки '
	  + 'видотображенияполнотекстовогопоиска видрамки видсравнения видцвета видчисловогозначения видшрифта допустимаядлина допустимыйзнак '
	  + 'использованиеbyteordermark использованиеметаданныхполнотекстовогопоиска источникрасширенийконфигурации клавиша кодвозвратадиалога '
	  + 'кодировкаxbase кодировкатекста направлениепоиска направлениесортировки обновлениепредопределенныхданных обновлениеприизмененииданных '
	  + 'отображениепанелиразделов проверказаполнения режимдиалогавопрос режимзапускаклиентскогоприложения режимокругления режимоткрытияформприложения '
	  + 'режимполнотекстовогопоиска скоростьклиентскогосоединения состояниевнешнегоисточникаданных состояниеобновленияконфигурациибазыданных '
	  + 'способвыборасертификатаwindows способкодированиястроки статуссообщения типвнешнейкомпоненты типплатформы типповеденияклавишиenter '
	  + 'типэлементаинформацииовыполненииобновленияконфигурациибазыданных уровеньизоляциитранзакций хешфункция частидаты';

	  // class: встроенные наборы значений, системные перечисления (содержат дочерние значения, обращения к которым через разыменование)
	  const CLASS =
	  v8_system_sets_of_values
	  + v8_system_enums_interface
	  + v8_system_enums_objects_properties
	  + v8_system_enums_exchange_plans
	  + v8_system_enums_tabular_document
	  + v8_system_enums_sheduler
	  + v8_system_enums_formatted_document
	  + v8_system_enums_query
	  + v8_system_enums_report_builder
	  + v8_system_enums_files
	  + v8_system_enums_query_builder
	  + v8_system_enums_data_analysis
	  + v8_system_enums_xml_json_xs_dom_xdto_ws
	  + v8_system_enums_data_composition_system
	  + v8_system_enums_email
	  + v8_system_enums_logbook
	  + v8_system_enums_cryptography
	  + v8_system_enums_zip
	  + v8_system_enums_other
	  + v8_system_enums_request_schema
	  + v8_system_enums_properties_of_metadata_objects
	  + v8_system_enums_differents;

	  // v8 общие объекты (у объектов есть конструктор, экземпляры создаются методом НОВЫЙ) ==> type
	  const v8_shared_object =
	  'comобъект ftpсоединение httpзапрос httpсервисответ httpсоединение wsопределения wsпрокси xbase анализданных аннотацияxs '
	  + 'блокировкаданных буфердвоичныхданных включениеxs выражениекомпоновкиданных генераторслучайныхчисел географическаясхема '
	  + 'географическиекоординаты графическаясхема группамоделиxs данныерасшифровкикомпоновкиданных двоичныеданные дендрограмма '
	  + 'диаграмма диаграммаганта диалогвыборафайла диалогвыборацвета диалогвыборашрифта диалограсписаниярегламентногозадания '
	  + 'диалогредактированиястандартногопериода диапазон документdom документhtml документацияxs доставляемоеуведомление '
	  + 'записьdom записьfastinfoset записьhtml записьjson записьxml записьzipфайла записьданных записьтекста записьузловdom '
	  + 'запрос защищенноесоединениеopenssl значенияполейрасшифровкикомпоновкиданных извлечениетекста импортxs интернетпочта '
	  + 'интернетпочтовоесообщение интернетпочтовыйпрофиль интернетпрокси интернетсоединение информациядляприложенияxs '
	  + 'использованиеатрибутаxs использованиесобытияжурналарегистрации источникдоступныхнастроеккомпоновкиданных '
	  + 'итераторузловdom картинка квалификаторыдаты квалификаторыдвоичныхданных квалификаторыстроки квалификаторычисла '
	  + 'компоновщикмакетакомпоновкиданных компоновщикнастроеккомпоновкиданных конструктормакетаоформлениякомпоновкиданных '
	  + 'конструкторнастроеккомпоновкиданных конструкторформатнойстроки линия макеткомпоновкиданных макетобластикомпоновкиданных '
	  + 'макетоформлениякомпоновкиданных маскаxs менеджеркриптографии наборсхемxml настройкикомпоновкиданных настройкисериализацииjson '
	  + 'обработкакартинок обработкарасшифровкикомпоновкиданных обходдереваdom объявлениеатрибутаxs объявлениенотацииxs '
	  + 'объявлениеэлементаxs описаниеиспользованиясобытиядоступжурналарегистрации '
	  + 'описаниеиспользованиясобытияотказвдоступежурналарегистрации описаниеобработкирасшифровкикомпоновкиданных '
	  + 'описаниепередаваемогофайла описаниетипов определениегруппыатрибутовxs определениегруппымоделиxs '
	  + 'определениеограниченияидентичностиxs определениепростоготипаxs определениесоставноготипаxs определениетипадокументаdom '
	  + 'определенияxpathxs отборкомпоновкиданных пакетотображаемыхдокументов параметрвыбора параметркомпоновкиданных '
	  + 'параметрызаписиjson параметрызаписиxml параметрычтенияxml переопределениеxs планировщик полеанализаданных '
	  + 'полекомпоновкиданных построительdom построительзапроса построительотчета построительотчетаанализаданных '
	  + 'построительсхемxml поток потоквпамяти почта почтовоесообщение преобразованиеxsl преобразованиекканоническомуxml '
	  + 'процессорвыводарезультатакомпоновкиданныхвколлекциюзначений процессорвыводарезультатакомпоновкиданныхвтабличныйдокумент '
	  + 'процессоркомпоновкиданных разыменовательпространствименdom рамка расписаниерегламентногозадания расширенноеимяxml '
	  + 'результатчтенияданных своднаядиаграмма связьпараметравыбора связьпотипу связьпотипукомпоновкиданных сериализаторxdto '
	  + 'сертификатклиентаwindows сертификатклиентафайл сертификаткриптографии сертификатыудостоверяющихцентровwindows '
	  + 'сертификатыудостоверяющихцентровфайл сжатиеданных системнаяинформация сообщениепользователю сочетаниеклавиш '
	  + 'сравнениезначений стандартнаядатаначала стандартныйпериод схемаxml схемакомпоновкиданных табличныйдокумент '
	  + 'текстовыйдокумент тестируемоеприложение типданныхxml уникальныйидентификатор фабрикаxdto файл файловыйпоток '
	  + 'фасетдлиныxs фасетколичестваразрядовдробнойчастиxs фасетмаксимальноговключающегозначенияxs '
	  + 'фасетмаксимальногоисключающегозначенияxs фасетмаксимальнойдлиныxs фасетминимальноговключающегозначенияxs '
	  + 'фасетминимальногоисключающегозначенияxs фасетминимальнойдлиныxs фасетобразцаxs фасетобщегоколичестваразрядовxs '
	  + 'фасетперечисленияxs фасетпробельныхсимволовxs фильтрузловdom форматированнаястрока форматированныйдокумент '
	  + 'фрагментxs хешированиеданных хранилищезначения цвет чтениеfastinfoset чтениеhtml чтениеjson чтениеxml чтениеzipфайла '
	  + 'чтениеданных чтениетекста чтениеузловdom шрифт элементрезультатакомпоновкиданных ';

	  // v8 универсальные коллекции значений ==> type
	  const v8_universal_collection =
	  'comsafearray деревозначений массив соответствие списокзначений структура таблицазначений фиксированнаяструктура '
	  + 'фиксированноесоответствие фиксированныймассив ';

	  // type : встроенные типы
	  const TYPE =
	  v8_shared_object
	  + v8_universal_collection;

	  // literal : примитивные типы
	  const LITERAL = 'null истина ложь неопределено';

	  // number : числа
	  const NUMBERS = hljs.inherit(hljs.NUMBER_MODE);

	  // string : строки
	  const STRINGS = {
	    className: 'string',
	    begin: '"|\\|',
	    end: '"|$',
	    contains: [ { begin: '""' } ]
	  };

	  // number : даты
	  const DATE = {
	    begin: "'",
	    end: "'",
	    excludeBegin: true,
	    excludeEnd: true,
	    contains: [
	      {
	        className: 'number',
	        begin: '\\d{4}([\\.\\\\/:-]?\\d{2}){0,5}'
	      }
	    ]
	  };

	  // comment : комментарии
	  const COMMENTS = hljs.inherit(hljs.C_LINE_COMMENT_MODE);

	  // meta : инструкции препроцессора, директивы компиляции
	  const META = {
	    className: 'meta',

	    begin: '#|&',
	    end: '$',
	    keywords: {
	      $pattern: UNDERSCORE_IDENT_RE,
	      keyword: KEYWORD + METAKEYWORD
	    },
	    contains: [ COMMENTS ]
	  };

	  // symbol : метка goto
	  const SYMBOL = {
	    className: 'symbol',
	    begin: '~',
	    end: ';|:',
	    excludeEnd: true
	  };

	  // function : объявление процедур и функций
	  const FUNCTION = {
	    className: 'function',
	    variants: [
	      {
	        begin: 'процедура|функция',
	        end: '\\)',
	        keywords: 'процедура функция'
	      },
	      {
	        begin: 'конецпроцедуры|конецфункции',
	        keywords: 'конецпроцедуры конецфункции'
	      }
	    ],
	    contains: [
	      {
	        begin: '\\(',
	        end: '\\)',
	        endsParent: true,
	        contains: [
	          {
	            className: 'params',
	            begin: UNDERSCORE_IDENT_RE,
	            end: ',',
	            excludeEnd: true,
	            endsWithParent: true,
	            keywords: {
	              $pattern: UNDERSCORE_IDENT_RE,
	              keyword: 'знач',
	              literal: LITERAL
	            },
	            contains: [
	              NUMBERS,
	              STRINGS,
	              DATE
	            ]
	          },
	          COMMENTS
	        ]
	      },
	      hljs.inherit(hljs.TITLE_MODE, { begin: UNDERSCORE_IDENT_RE })
	    ]
	  };

	  return {
	    name: '1C:Enterprise',
	    case_insensitive: true,
	    keywords: {
	      $pattern: UNDERSCORE_IDENT_RE,
	      keyword: KEYWORD,
	      built_in: BUILTIN,
	      class: CLASS,
	      type: TYPE,
	      literal: LITERAL
	    },
	    contains: [
	      META,
	      FUNCTION,
	      COMMENTS,
	      SYMBOL,
	      NUMBERS,
	      STRINGS,
	      DATE
	    ]
	  };
	}

	_1c_1 = _1c;
	return _1c_1;
}

/*
Language: Augmented Backus-Naur Form
Author: Alex McKibben <alex@nullscope.net>
Website: https://tools.ietf.org/html/rfc5234
Audit: 2020
*/

var abnf_1;
var hasRequiredAbnf;

function requireAbnf () {
	if (hasRequiredAbnf) return abnf_1;
	hasRequiredAbnf = 1;
	/** @type LanguageFn */
	function abnf(hljs) {
	  const regex = hljs.regex;
	  const IDENT = /^[a-zA-Z][a-zA-Z0-9-]*/;

	  const KEYWORDS = [
	    "ALPHA",
	    "BIT",
	    "CHAR",
	    "CR",
	    "CRLF",
	    "CTL",
	    "DIGIT",
	    "DQUOTE",
	    "HEXDIG",
	    "HTAB",
	    "LF",
	    "LWSP",
	    "OCTET",
	    "SP",
	    "VCHAR",
	    "WSP"
	  ];

	  const COMMENT = hljs.COMMENT(/;/, /$/);

	  const TERMINAL_BINARY = {
	    scope: "symbol",
	    match: /%b[0-1]+(-[0-1]+|(\.[0-1]+)+)?/
	  };

	  const TERMINAL_DECIMAL = {
	    scope: "symbol",
	    match: /%d[0-9]+(-[0-9]+|(\.[0-9]+)+)?/
	  };

	  const TERMINAL_HEXADECIMAL = {
	    scope: "symbol",
	    match: /%x[0-9A-F]+(-[0-9A-F]+|(\.[0-9A-F]+)+)?/
	  };

	  const CASE_SENSITIVITY = {
	    scope: "symbol",
	    match: /%[si](?=".*")/
	  };

	  const RULE_DECLARATION = {
	    scope: "attribute",
	    match: regex.concat(IDENT, /(?=\s*=)/)
	  };

	  const ASSIGNMENT = {
	    scope: "operator",
	    match: /=\/?/
	  };

	  return {
	    name: 'Augmented Backus-Naur Form',
	    illegal: /[!@#$^&',?+~`|:]/,
	    keywords: KEYWORDS,
	    contains: [
	      ASSIGNMENT,
	      RULE_DECLARATION,
	      COMMENT,
	      TERMINAL_BINARY,
	      TERMINAL_DECIMAL,
	      TERMINAL_HEXADECIMAL,
	      CASE_SENSITIVITY,
	      hljs.QUOTE_STRING_MODE,
	      hljs.NUMBER_MODE
	    ]
	  };
	}

	abnf_1 = abnf;
	return abnf_1;
}

/*
 Language: Apache Access Log
 Author: Oleg Efimov <efimovov@gmail.com>
 Description: Apache/Nginx Access Logs
 Website: https://httpd.apache.org/docs/2.4/logs.html#accesslog
 Category: web, logs
 Audit: 2020
 */

var accesslog_1;
var hasRequiredAccesslog;

function requireAccesslog () {
	if (hasRequiredAccesslog) return accesslog_1;
	hasRequiredAccesslog = 1;
	/** @type LanguageFn */
	function accesslog(hljs) {
	  const regex = hljs.regex;
	  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
	  const HTTP_VERBS = [
	    "GET",
	    "POST",
	    "HEAD",
	    "PUT",
	    "DELETE",
	    "CONNECT",
	    "OPTIONS",
	    "PATCH",
	    "TRACE"
	  ];
	  return {
	    name: 'Apache Access Log',
	    contains: [
	      // IP
	      {
	        className: 'number',
	        begin: /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?\b/,
	        relevance: 5
	      },
	      // Other numbers
	      {
	        className: 'number',
	        begin: /\b\d+\b/,
	        relevance: 0
	      },
	      // Requests
	      {
	        className: 'string',
	        begin: regex.concat(/"/, regex.either(...HTTP_VERBS)),
	        end: /"/,
	        keywords: HTTP_VERBS,
	        illegal: /\n/,
	        relevance: 5,
	        contains: [
	          {
	            begin: /HTTP\/[12]\.\d'/,
	            relevance: 5
	          }
	        ]
	      },
	      // Dates
	      {
	        className: 'string',
	        // dates must have a certain length, this prevents matching
	        // simple array accesses a[123] and [] and other common patterns
	        // found in other languages
	        begin: /\[\d[^\]\n]{8,}\]/,
	        illegal: /\n/,
	        relevance: 1
	      },
	      {
	        className: 'string',
	        begin: /\[/,
	        end: /\]/,
	        illegal: /\n/,
	        relevance: 0
	      },
	      // User agent / relevance boost
	      {
	        className: 'string',
	        begin: /"Mozilla\/\d\.\d \(/,
	        end: /"/,
	        illegal: /\n/,
	        relevance: 3
	      },
	      // Strings
	      {
	        className: 'string',
	        begin: /"/,
	        end: /"/,
	        illegal: /\n/,
	        relevance: 0
	      }
	    ]
	  };
	}

	accesslog_1 = accesslog;
	return accesslog_1;
}

/*
Language: ActionScript
Author: Alexander Myadzel <myadzel@gmail.com>
Category: scripting
Audit: 2020
*/

var actionscript_1;
var hasRequiredActionscript;

function requireActionscript () {
	if (hasRequiredActionscript) return actionscript_1;
	hasRequiredActionscript = 1;
	/** @type LanguageFn */
	function actionscript(hljs) {
	  const regex = hljs.regex;
	  const IDENT_RE = /[a-zA-Z_$][a-zA-Z0-9_$]*/;
	  const PKG_NAME_RE = regex.concat(
	    IDENT_RE,
	    regex.concat("(\\.", IDENT_RE, ")*")
	  );
	  const IDENT_FUNC_RETURN_TYPE_RE = /([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)/;

	  const AS3_REST_ARG_MODE = {
	    className: 'rest_arg',
	    begin: /[.]{3}/,
	    end: IDENT_RE,
	    relevance: 10
	  };

	  const KEYWORDS = [
	    "as",
	    "break",
	    "case",
	    "catch",
	    "class",
	    "const",
	    "continue",
	    "default",
	    "delete",
	    "do",
	    "dynamic",
	    "each",
	    "else",
	    "extends",
	    "final",
	    "finally",
	    "for",
	    "function",
	    "get",
	    "if",
	    "implements",
	    "import",
	    "in",
	    "include",
	    "instanceof",
	    "interface",
	    "internal",
	    "is",
	    "namespace",
	    "native",
	    "new",
	    "override",
	    "package",
	    "private",
	    "protected",
	    "public",
	    "return",
	    "set",
	    "static",
	    "super",
	    "switch",
	    "this",
	    "throw",
	    "try",
	    "typeof",
	    "use",
	    "var",
	    "void",
	    "while",
	    "with"
	  ];
	  const LITERALS = [
	    "true",
	    "false",
	    "null",
	    "undefined"
	  ];

	  return {
	    name: 'ActionScript',
	    aliases: [ 'as' ],
	    keywords: {
	      keyword: KEYWORDS,
	      literal: LITERALS
	    },
	    contains: [
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.C_NUMBER_MODE,
	      {
	        match: [
	          /\bpackage/,
	          /\s+/,
	          PKG_NAME_RE
	        ],
	        className: {
	          1: "keyword",
	          3: "title.class"
	        }
	      },
	      {
	        match: [
	          /\b(?:class|interface|extends|implements)/,
	          /\s+/,
	          IDENT_RE
	        ],
	        className: {
	          1: "keyword",
	          3: "title.class"
	        }
	      },
	      {
	        className: 'meta',
	        beginKeywords: 'import include',
	        end: /;/,
	        keywords: { keyword: 'import include' }
	      },
	      {
	        beginKeywords: 'function',
	        end: /[{;]/,
	        excludeEnd: true,
	        illegal: /\S/,
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, { className: "title.function" }),
	          {
	            className: 'params',
	            begin: /\(/,
	            end: /\)/,
	            contains: [
	              hljs.APOS_STRING_MODE,
	              hljs.QUOTE_STRING_MODE,
	              hljs.C_LINE_COMMENT_MODE,
	              hljs.C_BLOCK_COMMENT_MODE,
	              AS3_REST_ARG_MODE
	            ]
	          },
	          { begin: regex.concat(/:\s*/, IDENT_FUNC_RETURN_TYPE_RE) }
	        ]
	      },
	      hljs.METHOD_GUARD
	    ],
	    illegal: /#/
	  };
	}

	actionscript_1 = actionscript;
	return actionscript_1;
}

/*
Language: Ada
Author: Lars Schulna <kartoffelbrei.mit.muskatnuss@gmail.org>
Description: Ada is a general-purpose programming language that has great support for saftey critical and real-time applications.
             It has been developed by the DoD and thus has been used in military and safety-critical applications (like civil aviation).
             The first version appeared in the 80s, but it's still actively developed today with
             the newest standard being Ada2012.
*/

var ada_1;
var hasRequiredAda;

function requireAda () {
	if (hasRequiredAda) return ada_1;
	hasRequiredAda = 1;
	// We try to support full Ada2012
	//
	// We highlight all appearances of types, keywords, literals (string, char, number, bool)
	// and titles (user defined function/procedure/package)
	// CSS classes are set accordingly
	//
	// Languages causing problems for language detection:
	// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)
	// sql (ada default.txt has a lot of sql keywords)

	/** @type LanguageFn */
	function ada(hljs) {
	  // Regular expression for Ada numeric literals.
	  // stolen form the VHDL highlighter

	  // Decimal literal:
	  const INTEGER_RE = '\\d(_|\\d)*';
	  const EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;
	  const DECIMAL_LITERAL_RE = INTEGER_RE + '(\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';

	  // Based literal:
	  const BASED_INTEGER_RE = '\\w+';
	  const BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';

	  const NUMBER_RE = '\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';

	  // Identifier regex
	  const ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';

	  // bad chars, only allowed in literals
	  const BAD_CHARS = `[]\\{\\}%#'"`;

	  // Ada doesn't have block comments, only line comments
	  const COMMENTS = hljs.COMMENT('--', '$');

	  // variable declarations of the form
	  // Foo : Bar := Baz;
	  // where only Bar will be highlighted
	  const VAR_DECLS = {
	    // TODO: These spaces are not required by the Ada syntax
	    // however, I have yet to see handwritten Ada code where
	    // someone does not put spaces around :
	    begin: '\\s+:\\s+',
	    end: '\\s*(:=|;|\\)|=>|$)',
	    // endsWithParent: true,
	    // returnBegin: true,
	    illegal: BAD_CHARS,
	    contains: [
	      {
	        // workaround to avoid highlighting
	        // named loops and declare blocks
	        beginKeywords: 'loop for declare others',
	        endsParent: true
	      },
	      {
	        // properly highlight all modifiers
	        className: 'keyword',
	        beginKeywords: 'not null constant access function procedure in out aliased exception'
	      },
	      {
	        className: 'type',
	        begin: ID_REGEX,
	        endsParent: true,
	        relevance: 0
	      }
	    ]
	  };

	  const KEYWORDS = [
	    "abort",
	    "else",
	    "new",
	    "return",
	    "abs",
	    "elsif",
	    "not",
	    "reverse",
	    "abstract",
	    "end",
	    "accept",
	    "entry",
	    "select",
	    "access",
	    "exception",
	    "of",
	    "separate",
	    "aliased",
	    "exit",
	    "or",
	    "some",
	    "all",
	    "others",
	    "subtype",
	    "and",
	    "for",
	    "out",
	    "synchronized",
	    "array",
	    "function",
	    "overriding",
	    "at",
	    "tagged",
	    "generic",
	    "package",
	    "task",
	    "begin",
	    "goto",
	    "pragma",
	    "terminate",
	    "body",
	    "private",
	    "then",
	    "if",
	    "procedure",
	    "type",
	    "case",
	    "in",
	    "protected",
	    "constant",
	    "interface",
	    "is",
	    "raise",
	    "use",
	    "declare",
	    "range",
	    "delay",
	    "limited",
	    "record",
	    "when",
	    "delta",
	    "loop",
	    "rem",
	    "while",
	    "digits",
	    "renames",
	    "with",
	    "do",
	    "mod",
	    "requeue",
	    "xor"
	  ];

	  return {
	    name: 'Ada',
	    case_insensitive: true,
	    keywords: {
	      keyword: KEYWORDS,
	      literal: [
	        "True",
	        "False"
	      ]
	    },
	    contains: [
	      COMMENTS,
	      // strings "foobar"
	      {
	        className: 'string',
	        begin: /"/,
	        end: /"/,
	        contains: [
	          {
	            begin: /""/,
	            relevance: 0
	          }
	        ]
	      },
	      // characters ''
	      {
	        // character literals always contain one char
	        className: 'string',
	        begin: /'.'/
	      },
	      {
	        // number literals
	        className: 'number',
	        begin: NUMBER_RE,
	        relevance: 0
	      },
	      {
	        // Attributes
	        className: 'symbol',
	        begin: "'" + ID_REGEX
	      },
	      {
	        // package definition, maybe inside generic
	        className: 'title',
	        begin: '(\\bwith\\s+)?(\\bprivate\\s+)?\\bpackage\\s+(\\bbody\\s+)?',
	        end: '(is|$)',
	        keywords: 'package body',
	        excludeBegin: true,
	        excludeEnd: true,
	        illegal: BAD_CHARS
	      },
	      {
	        // function/procedure declaration/definition
	        // maybe inside generic
	        begin: '(\\b(with|overriding)\\s+)?\\b(function|procedure)\\s+',
	        end: '(\\bis|\\bwith|\\brenames|\\)\\s*;)',
	        keywords: 'overriding function procedure with is renames return',
	        // we need to re-match the 'function' keyword, so that
	        // the title mode below matches only exactly once
	        returnBegin: true,
	        contains:
	                [
	                  COMMENTS,
	                  {
	                    // name of the function/procedure
	                    className: 'title',
	                    begin: '(\\bwith\\s+)?\\b(function|procedure)\\s+',
	                    end: '(\\(|\\s+|$)',
	                    excludeBegin: true,
	                    excludeEnd: true,
	                    illegal: BAD_CHARS
	                  },
	                  // 'self'
	                  // // parameter types
	                  VAR_DECLS,
	                  {
	                    // return type
	                    className: 'type',
	                    begin: '\\breturn\\s+',
	                    end: '(\\s+|;|$)',
	                    keywords: 'return',
	                    excludeBegin: true,
	                    excludeEnd: true,
	                    // we are done with functions
	                    endsParent: true,
	                    illegal: BAD_CHARS

	                  }
	                ]
	      },
	      {
	        // new type declarations
	        // maybe inside generic
	        className: 'type',
	        begin: '\\b(sub)?type\\s+',
	        end: '\\s+',
	        keywords: 'type',
	        excludeBegin: true,
	        illegal: BAD_CHARS
	      },

	      // see comment above the definition
	      VAR_DECLS

	      // no markup
	      // relevance boosters for small snippets
	      // {begin: '\\s*=>\\s*'},
	      // {begin: '\\s*:=\\s*'},
	      // {begin: '\\s+:=\\s+'},
	    ]
	  };
	}

	ada_1 = ada;
	return ada_1;
}

/*
Language: AngelScript
Author: Melissa Geels <melissa@nimble.tools>
Category: scripting
Website: https://www.angelcode.com/angelscript/
*/

var angelscript_1;
var hasRequiredAngelscript;

function requireAngelscript () {
	if (hasRequiredAngelscript) return angelscript_1;
	hasRequiredAngelscript = 1;
	/** @type LanguageFn */
	function angelscript(hljs) {
	  const builtInTypeMode = {
	    className: 'built_in',
	    begin: '\\b(void|bool|int8|int16|int32|int64|int|uint8|uint16|uint32|uint64|uint|string|ref|array|double|float|auto|dictionary)'
	  };

	  const objectHandleMode = {
	    className: 'symbol',
	    begin: '[a-zA-Z0-9_]+@'
	  };

	  const genericMode = {
	    className: 'keyword',
	    begin: '<',
	    end: '>',
	    contains: [
	      builtInTypeMode,
	      objectHandleMode
	    ]
	  };

	  builtInTypeMode.contains = [ genericMode ];
	  objectHandleMode.contains = [ genericMode ];

	  const KEYWORDS = [
	    "for",
	    "in|0",
	    "break",
	    "continue",
	    "while",
	    "do|0",
	    "return",
	    "if",
	    "else",
	    "case",
	    "switch",
	    "namespace",
	    "is",
	    "cast",
	    "or",
	    "and",
	    "xor",
	    "not",
	    "get|0",
	    "in",
	    "inout|10",
	    "out",
	    "override",
	    "set|0",
	    "private",
	    "public",
	    "const",
	    "default|0",
	    "final",
	    "shared",
	    "external",
	    "mixin|10",
	    "enum",
	    "typedef",
	    "funcdef",
	    "this",
	    "super",
	    "import",
	    "from",
	    "interface",
	    "abstract|0",
	    "try",
	    "catch",
	    "protected",
	    "explicit",
	    "property"
	  ];

	  return {
	    name: 'AngelScript',
	    aliases: [ 'asc' ],

	    keywords: KEYWORDS,

	    // avoid close detection with C# and JS
	    illegal: '(^using\\s+[A-Za-z0-9_\\.]+;$|\\bfunction\\s*[^\\(])',

	    contains: [
	      { // 'strings'
	        className: 'string',
	        begin: '\'',
	        end: '\'',
	        illegal: '\\n',
	        contains: [ hljs.BACKSLASH_ESCAPE ],
	        relevance: 0
	      },

	      // """heredoc strings"""
	      {
	        className: 'string',
	        begin: '"""',
	        end: '"""'
	      },

	      { // "strings"
	        className: 'string',
	        begin: '"',
	        end: '"',
	        illegal: '\\n',
	        contains: [ hljs.BACKSLASH_ESCAPE ],
	        relevance: 0
	      },

	      hljs.C_LINE_COMMENT_MODE, // single-line comments
	      hljs.C_BLOCK_COMMENT_MODE, // comment blocks

	      { // metadata
	        className: 'string',
	        begin: '^\\s*\\[',
	        end: '\\]'
	      },

	      { // interface or namespace declaration
	        beginKeywords: 'interface namespace',
	        end: /\{/,
	        illegal: '[;.\\-]',
	        contains: [
	          { // interface or namespace name
	            className: 'symbol',
	            begin: '[a-zA-Z0-9_]+'
	          }
	        ]
	      },

	      { // class declaration
	        beginKeywords: 'class',
	        end: /\{/,
	        illegal: '[;.\\-]',
	        contains: [
	          { // class name
	            className: 'symbol',
	            begin: '[a-zA-Z0-9_]+',
	            contains: [
	              {
	                begin: '[:,]\\s*',
	                contains: [
	                  {
	                    className: 'symbol',
	                    begin: '[a-zA-Z0-9_]+'
	                  }
	                ]
	              }
	            ]
	          }
	        ]
	      },

	      builtInTypeMode, // built-in types
	      objectHandleMode, // object handles

	      { // literals
	        className: 'literal',
	        begin: '\\b(null|true|false)'
	      },

	      { // numbers
	        className: 'number',
	        relevance: 0,
	        begin: '(-?)(\\b0[xXbBoOdD][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?f?|\\.\\d+f?)([eE][-+]?\\d+f?)?)'
	      }
	    ]
	  };
	}

	angelscript_1 = angelscript;
	return angelscript_1;
}

/*
Language: Apache config
Author: Ruslan Keba <rukeba@gmail.com>
Contributors: Ivan Sagalaev <maniac@softwaremaniacs.org>
Website: https://httpd.apache.org
Description: language definition for Apache configuration files (httpd.conf & .htaccess)
Category: config, web
Audit: 2020
*/

var apache_1;
var hasRequiredApache;

function requireApache () {
	if (hasRequiredApache) return apache_1;
	hasRequiredApache = 1;
	/** @type LanguageFn */
	function apache(hljs) {
	  const NUMBER_REF = {
	    className: 'number',
	    begin: /[$%]\d+/
	  };
	  const NUMBER = {
	    className: 'number',
	    begin: /\b\d+/
	  };
	  const IP_ADDRESS = {
	    className: "number",
	    begin: /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?/
	  };
	  const PORT_NUMBER = {
	    className: "number",
	    begin: /:\d{1,5}/
	  };
	  return {
	    name: 'Apache config',
	    aliases: [ 'apacheconf' ],
	    case_insensitive: true,
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      {
	        className: 'section',
	        begin: /<\/?/,
	        end: />/,
	        contains: [
	          IP_ADDRESS,
	          PORT_NUMBER,
	          // low relevance prevents us from claming XML/HTML where this rule would
	          // match strings inside of XML tags
	          hljs.inherit(hljs.QUOTE_STRING_MODE, { relevance: 0 })
	        ]
	      },
	      {
	        className: 'attribute',
	        begin: /\w+/,
	        relevance: 0,
	        // keywords aren’t needed for highlighting per se, they only boost relevance
	        // for a very generally defined mode (starts with a word, ends with line-end
	        keywords: { _: [
	          "order",
	          "deny",
	          "allow",
	          "setenv",
	          "rewriterule",
	          "rewriteengine",
	          "rewritecond",
	          "documentroot",
	          "sethandler",
	          "errordocument",
	          "loadmodule",
	          "options",
	          "header",
	          "listen",
	          "serverroot",
	          "servername"
	        ] },
	        starts: {
	          end: /$/,
	          relevance: 0,
	          keywords: { literal: 'on off all deny allow' },
	          contains: [
	            {
	              className: 'meta',
	              begin: /\s\[/,
	              end: /\]$/
	            },
	            {
	              className: 'variable',
	              begin: /[\$%]\{/,
	              end: /\}/,
	              contains: [
	                'self',
	                NUMBER_REF
	              ]
	            },
	            IP_ADDRESS,
	            NUMBER,
	            hljs.QUOTE_STRING_MODE
	          ]
	        }
	      }
	    ],
	    illegal: /\S/
	  };
	}

	apache_1 = apache;
	return apache_1;
}

/*
Language: AppleScript
Authors: Nathan Grigg <nathan@nathanamy.org>, Dr. Drang <drdrang@gmail.com>
Category: scripting
Website: https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html
Audit: 2020
*/

var applescript_1;
var hasRequiredApplescript;

function requireApplescript () {
	if (hasRequiredApplescript) return applescript_1;
	hasRequiredApplescript = 1;
	/** @type LanguageFn */
	function applescript(hljs) {
	  const regex = hljs.regex;
	  const STRING = hljs.inherit(
	    hljs.QUOTE_STRING_MODE, { illegal: null });
	  const PARAMS = {
	    className: 'params',
	    begin: /\(/,
	    end: /\)/,
	    contains: [
	      'self',
	      hljs.C_NUMBER_MODE,
	      STRING
	    ]
	  };
	  const COMMENT_MODE_1 = hljs.COMMENT(/--/, /$/);
	  const COMMENT_MODE_2 = hljs.COMMENT(
	    /\(\*/,
	    /\*\)/,
	    { contains: [
	      'self', // allow nesting
	      COMMENT_MODE_1
	    ] }
	  );
	  const COMMENTS = [
	    COMMENT_MODE_1,
	    COMMENT_MODE_2,
	    hljs.HASH_COMMENT_MODE
	  ];

	  const KEYWORD_PATTERNS = [
	    /apart from/,
	    /aside from/,
	    /instead of/,
	    /out of/,
	    /greater than/,
	    /isn't|(doesn't|does not) (equal|come before|come after|contain)/,
	    /(greater|less) than( or equal)?/,
	    /(starts?|ends|begins?) with/,
	    /contained by/,
	    /comes (before|after)/,
	    /a (ref|reference)/,
	    /POSIX (file|path)/,
	    /(date|time) string/,
	    /quoted form/
	  ];

	  const BUILT_IN_PATTERNS = [
	    /clipboard info/,
	    /the clipboard/,
	    /info for/,
	    /list (disks|folder)/,
	    /mount volume/,
	    /path to/,
	    /(close|open for) access/,
	    /(get|set) eof/,
	    /current date/,
	    /do shell script/,
	    /get volume settings/,
	    /random number/,
	    /set volume/,
	    /system attribute/,
	    /system info/,
	    /time to GMT/,
	    /(load|run|store) script/,
	    /scripting components/,
	    /ASCII (character|number)/,
	    /localized string/,
	    /choose (application|color|file|file name|folder|from list|remote application|URL)/,
	    /display (alert|dialog)/
	  ];

	  return {
	    name: 'AppleScript',
	    aliases: [ 'osascript' ],
	    keywords: {
	      keyword:
	        'about above after against and around as at back before beginning '
	        + 'behind below beneath beside between but by considering '
	        + 'contain contains continue copy div does eighth else end equal '
	        + 'equals error every exit fifth first for fourth from front '
	        + 'get given global if ignoring in into is it its last local me '
	        + 'middle mod my ninth not of on onto or over prop property put ref '
	        + 'reference repeat returning script second set seventh since '
	        + 'sixth some tell tenth that the|0 then third through thru '
	        + 'timeout times to transaction try until where while whose with '
	        + 'without',
	      literal:
	        'AppleScript false linefeed return pi quote result space tab true',
	      built_in:
	        'alias application boolean class constant date file integer list '
	        + 'number real record string text '
	        + 'activate beep count delay launch log offset read round '
	        + 'run say summarize write '
	        + 'character characters contents day frontmost id item length '
	        + 'month name|0 paragraph paragraphs rest reverse running time version '
	        + 'weekday word words year'
	    },
	    contains: [
	      STRING,
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'built_in',
	        begin: regex.concat(
	          /\b/,
	          regex.either(...BUILT_IN_PATTERNS),
	          /\b/
	        )
	      },
	      {
	        className: 'built_in',
	        begin: /^\s*return\b/
	      },
	      {
	        className: 'literal',
	        begin:
	          /\b(text item delimiters|current application|missing value)\b/
	      },
	      {
	        className: 'keyword',
	        begin: regex.concat(
	          /\b/,
	          regex.either(...KEYWORD_PATTERNS),
	          /\b/
	        )
	      },
	      {
	        beginKeywords: 'on',
	        illegal: /[${=;\n]/,
	        contains: [
	          hljs.UNDERSCORE_TITLE_MODE,
	          PARAMS
	        ]
	      },
	      ...COMMENTS
	    ],
	    illegal: /\/\/|->|=>|\[\[/
	  };
	}

	applescript_1 = applescript;
	return applescript_1;
}

/*
 Language: ArcGIS Arcade
 Category: scripting
 Author: John Foster <jfoster@esri.com>
 Website: https://developers.arcgis.com/arcade/
 Description: ArcGIS Arcade is an expression language used in many Esri ArcGIS products such as Pro, Online, Server, Runtime, JavaScript, and Python
*/

var arcade_1;
var hasRequiredArcade;

function requireArcade () {
	if (hasRequiredArcade) return arcade_1;
	hasRequiredArcade = 1;
	/** @type LanguageFn */
	function arcade(hljs) {
	  const IDENT_RE = '[A-Za-z_][0-9A-Za-z_]*';
	  const KEYWORDS = {
	    keyword: [
	      "if",
	      "for",
	      "while",
	      "var",
	      "new",
	      "function",
	      "do",
	      "return",
	      "void",
	      "else",
	      "break"
	    ],
	    literal: [
	      "BackSlash",
	      "DoubleQuote",
	      "false",
	      "ForwardSlash",
	      "Infinity",
	      "NaN",
	      "NewLine",
	      "null",
	      "PI",
	      "SingleQuote",
	      "Tab",
	      "TextFormatting",
	      "true",
	      "undefined"
	    ],
	    built_in: [
	      "Abs",
	      "Acos",
	      "All",
	      "Angle",
	      "Any",
	      "Area",
	      "AreaGeodetic",
	      "Array",
	      "Asin",
	      "Atan",
	      "Atan2",
	      "Attachments",
	      "Average",
	      "Back",
	      "Bearing",
	      "Boolean",
	      "Buffer",
	      "BufferGeodetic",
	      "Ceil",
	      "Centroid",
	      "Clip",
	      "Concatenate",
	      "Console",
	      "Constrain",
	      "Contains",
	      "ConvertDirection",
	      "Cos",
	      "Count",
	      "Crosses",
	      "Cut",
	      "Date",
	      "DateAdd",
	      "DateDiff",
	      "Day",
	      "Decode",
	      "DefaultValue",
	      "Densify",
	      "DensifyGeodetic",
	      "Dictionary",
	      "Difference",
	      "Disjoint",
	      "Distance",
	      "DistanceGeodetic",
	      "Distinct",
	      "Domain",
	      "DomainCode",
	      "DomainName",
	      "EnvelopeIntersects",
	      "Equals",
	      "Erase",
	      "Exp",
	      "Expects",
	      "Extent",
	      "Feature",
	      "FeatureSet",
	      "FeatureSetByAssociation",
	      "FeatureSetById",
	      "FeatureSetByName",
	      "FeatureSetByPortalItem",
	      "FeatureSetByRelationshipName",
	      "Filter",
	      "Find",
	      "First",
	      "Floor",
	      "FromCharCode",
	      "FromCodePoint",
	      "FromJSON",
	      "GdbVersion",
	      "Generalize",
	      "Geometry",
	      "GetFeatureSet",
	      "GetUser",
	      "GroupBy",
	      "Guid",
	      "Hash",
	      "HasKey",
	      "Hour",
	      "IIf",
	      "Includes",
	      "IndexOf",
	      "Insert",
	      "Intersection",
	      "Intersects",
	      "IsEmpty",
	      "IsNan",
	      "ISOMonth",
	      "ISOWeek",
	      "ISOWeekday",
	      "ISOYear",
	      "IsSelfIntersecting",
	      "IsSimple",
	      "Left|0",
	      "Length",
	      "Length3D",
	      "LengthGeodetic",
	      "Log",
	      "Lower",
	      "Map",
	      "Max",
	      "Mean",
	      "Mid",
	      "Millisecond",
	      "Min",
	      "Minute",
	      "Month",
	      "MultiPartToSinglePart",
	      "Multipoint",
	      "NextSequenceValue",
	      "None",
	      "Now",
	      "Number",
	      "Offset|0",
	      "OrderBy",
	      "Overlaps",
	      "Point",
	      "Polygon",
	      "Polyline",
	      "Pop",
	      "Portal",
	      "Pow",
	      "Proper",
	      "Push",
	      "Random",
	      "Reduce",
	      "Relate",
	      "Replace",
	      "Resize",
	      "Reverse",
	      "Right|0",
	      "RingIsClockwise",
	      "Rotate",
	      "Round",
	      "Schema",
	      "Second",
	      "SetGeometry",
	      "Simplify",
	      "Sin",
	      "Slice",
	      "Sort",
	      "Splice",
	      "Split",
	      "Sqrt",
	      "Stdev",
	      "SubtypeCode",
	      "SubtypeName",
	      "Subtypes",
	      "Sum",
	      "SymmetricDifference",
	      "Tan",
	      "Text",
	      "Timestamp",
	      "ToCharCode",
	      "ToCodePoint",
	      "Today",
	      "ToHex",
	      "ToLocal",
	      "Top|0",
	      "Touches",
	      "ToUTC",
	      "TrackAccelerationAt",
	      "TrackAccelerationWindow",
	      "TrackCurrentAcceleration",
	      "TrackCurrentDistance",
	      "TrackCurrentSpeed",
	      "TrackCurrentTime",
	      "TrackDistanceAt",
	      "TrackDistanceWindow",
	      "TrackDuration",
	      "TrackFieldWindow",
	      "TrackGeometryWindow",
	      "TrackIndex",
	      "TrackSpeedAt",
	      "TrackSpeedWindow",
	      "TrackStartTime",
	      "TrackWindow",
	      "Trim",
	      "TypeOf",
	      "Union",
	      "Upper",
	      "UrlEncode",
	      "Variance",
	      "Week",
	      "Weekday",
	      "When",
	      "Within",
	      "Year"
	    ]
	  };
	  const SYMBOL = {
	    className: 'symbol',
	    begin: '\\$[datastore|feature|layer|map|measure|sourcefeature|sourcelayer|targetfeature|targetlayer|value|view]+'
	  };
	  const NUMBER = {
	    className: 'number',
	    variants: [
	      { begin: '\\b(0[bB][01]+)' },
	      { begin: '\\b(0[oO][0-7]+)' },
	      { begin: hljs.C_NUMBER_RE }
	    ],
	    relevance: 0
	  };
	  const SUBST = {
	    className: 'subst',
	    begin: '\\$\\{',
	    end: '\\}',
	    keywords: KEYWORDS,
	    contains: [] // defined later
	  };
	  const TEMPLATE_STRING = {
	    className: 'string',
	    begin: '`',
	    end: '`',
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      SUBST
	    ]
	  };
	  SUBST.contains = [
	    hljs.APOS_STRING_MODE,
	    hljs.QUOTE_STRING_MODE,
	    TEMPLATE_STRING,
	    NUMBER,
	    hljs.REGEXP_MODE
	  ];
	  const PARAMS_CONTAINS = SUBST.contains.concat([
	    hljs.C_BLOCK_COMMENT_MODE,
	    hljs.C_LINE_COMMENT_MODE
	  ]);

	  return {
	    name: 'ArcGIS Arcade',
	    case_insensitive: true,
	    keywords: KEYWORDS,
	    contains: [
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      TEMPLATE_STRING,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      SYMBOL,
	      NUMBER,
	      { // object attr container
	        begin: /[{,]\s*/,
	        relevance: 0,
	        contains: [
	          {
	            begin: IDENT_RE + '\\s*:',
	            returnBegin: true,
	            relevance: 0,
	            contains: [
	              {
	                className: 'attr',
	                begin: IDENT_RE,
	                relevance: 0
	              }
	            ]
	          }
	        ]
	      },
	      { // "value" container
	        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(return)\\b)\\s*',
	        keywords: 'return',
	        contains: [
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE,
	          hljs.REGEXP_MODE,
	          {
	            className: 'function',
	            begin: '(\\(.*?\\)|' + IDENT_RE + ')\\s*=>',
	            returnBegin: true,
	            end: '\\s*=>',
	            contains: [
	              {
	                className: 'params',
	                variants: [
	                  { begin: IDENT_RE },
	                  { begin: /\(\s*\)/ },
	                  {
	                    begin: /\(/,
	                    end: /\)/,
	                    excludeBegin: true,
	                    excludeEnd: true,
	                    keywords: KEYWORDS,
	                    contains: PARAMS_CONTAINS
	                  }
	                ]
	              }
	            ]
	          }
	        ],
	        relevance: 0
	      },
	      {
	        beginKeywords: 'function',
	        end: /\{/,
	        excludeEnd: true,
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, {
	            className: "title.function",
	            begin: IDENT_RE
	          }),
	          {
	            className: 'params',
	            begin: /\(/,
	            end: /\)/,
	            excludeBegin: true,
	            excludeEnd: true,
	            contains: PARAMS_CONTAINS
	          }
	        ],
	        illegal: /\[|%/
	      },
	      { begin: /\$[(.]/ }
	    ],
	    illegal: /#(?!!)/
	  };
	}

	arcade_1 = arcade;
	return arcade_1;
}

/*
Language: C++
Category: common, system
Website: https://isocpp.org
*/

var arduino_1;
var hasRequiredArduino;

function requireArduino () {
	if (hasRequiredArduino) return arduino_1;
	hasRequiredArduino = 1;
	/** @type LanguageFn */
	function cPlusPlus(hljs) {
	  const regex = hljs.regex;
	  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does
	  // not include such support nor can we be sure all the grammars depending
	  // on it would desire this behavior
	  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', { contains: [ { begin: /\\\n/ } ] });
	  const DECLTYPE_AUTO_RE = 'decltype\\(auto\\)';
	  const NAMESPACE_RE = '[a-zA-Z_]\\w*::';
	  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';
	  const FUNCTION_TYPE_RE = '(?!struct)('
	    + DECLTYPE_AUTO_RE + '|'
	    + regex.optional(NAMESPACE_RE)
	    + '[a-zA-Z_]\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE)
	  + ')';

	  const CPP_PRIMITIVE_TYPES = {
	    className: 'type',
	    begin: '\\b[a-z\\d_]*_t\\b'
	  };

	  // https://en.cppreference.com/w/cpp/language/escape
	  // \\ \x \xFF \u2837 \u00323747 \374
	  const CHARACTER_ESCAPES = '\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)';
	  const STRINGS = {
	    className: 'string',
	    variants: [
	      {
	        begin: '(u8?|U|L)?"',
	        end: '"',
	        illegal: '\\n',
	        contains: [ hljs.BACKSLASH_ESCAPE ]
	      },
	      {
	        begin: '(u8?|U|L)?\'(' + CHARACTER_ESCAPES + '|.)',
	        end: '\'',
	        illegal: '.'
	      },
	      hljs.END_SAME_AS_BEGIN({
	        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
	        end: /\)([^()\\ ]{0,16})"/
	      })
	    ]
	  };

	  const NUMBERS = {
	    className: 'number',
	    variants: [
	      { begin: '\\b(0b[01\']+)' },
	      { begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)' },
	      { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
	    ],
	    relevance: 0
	  };

	  const PREPROCESSOR = {
	    className: 'meta',
	    begin: /#\s*[a-z]+\b/,
	    end: /$/,
	    keywords: { keyword:
	        'if else elif endif define undef warning error line '
	        + 'pragma _Pragma ifdef ifndef include' },
	    contains: [
	      {
	        begin: /\\\n/,
	        relevance: 0
	      },
	      hljs.inherit(STRINGS, { className: 'string' }),
	      {
	        className: 'string',
	        begin: /<.*?>/
	      },
	      C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE
	    ]
	  };

	  const TITLE_MODE = {
	    className: 'title',
	    begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,
	    relevance: 0
	  };

	  const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\s*\\(';

	  // https://en.cppreference.com/w/cpp/keyword
	  const RESERVED_KEYWORDS = [
	    'alignas',
	    'alignof',
	    'and',
	    'and_eq',
	    'asm',
	    'atomic_cancel',
	    'atomic_commit',
	    'atomic_noexcept',
	    'auto',
	    'bitand',
	    'bitor',
	    'break',
	    'case',
	    'catch',
	    'class',
	    'co_await',
	    'co_return',
	    'co_yield',
	    'compl',
	    'concept',
	    'const_cast|10',
	    'consteval',
	    'constexpr',
	    'constinit',
	    'continue',
	    'decltype',
	    'default',
	    'delete',
	    'do',
	    'dynamic_cast|10',
	    'else',
	    'enum',
	    'explicit',
	    'export',
	    'extern',
	    'false',
	    'final',
	    'for',
	    'friend',
	    'goto',
	    'if',
	    'import',
	    'inline',
	    'module',
	    'mutable',
	    'namespace',
	    'new',
	    'noexcept',
	    'not',
	    'not_eq',
	    'nullptr',
	    'operator',
	    'or',
	    'or_eq',
	    'override',
	    'private',
	    'protected',
	    'public',
	    'reflexpr',
	    'register',
	    'reinterpret_cast|10',
	    'requires',
	    'return',
	    'sizeof',
	    'static_assert',
	    'static_cast|10',
	    'struct',
	    'switch',
	    'synchronized',
	    'template',
	    'this',
	    'thread_local',
	    'throw',
	    'transaction_safe',
	    'transaction_safe_dynamic',
	    'true',
	    'try',
	    'typedef',
	    'typeid',
	    'typename',
	    'union',
	    'using',
	    'virtual',
	    'volatile',
	    'while',
	    'xor',
	    'xor_eq'
	  ];

	  // https://en.cppreference.com/w/cpp/keyword
	  const RESERVED_TYPES = [
	    'bool',
	    'char',
	    'char16_t',
	    'char32_t',
	    'char8_t',
	    'double',
	    'float',
	    'int',
	    'long',
	    'short',
	    'void',
	    'wchar_t',
	    'unsigned',
	    'signed',
	    'const',
	    'static'
	  ];

	  const TYPE_HINTS = [
	    'any',
	    'auto_ptr',
	    'barrier',
	    'binary_semaphore',
	    'bitset',
	    'complex',
	    'condition_variable',
	    'condition_variable_any',
	    'counting_semaphore',
	    'deque',
	    'false_type',
	    'future',
	    'imaginary',
	    'initializer_list',
	    'istringstream',
	    'jthread',
	    'latch',
	    'lock_guard',
	    'multimap',
	    'multiset',
	    'mutex',
	    'optional',
	    'ostringstream',
	    'packaged_task',
	    'pair',
	    'promise',
	    'priority_queue',
	    'queue',
	    'recursive_mutex',
	    'recursive_timed_mutex',
	    'scoped_lock',
	    'set',
	    'shared_future',
	    'shared_lock',
	    'shared_mutex',
	    'shared_timed_mutex',
	    'shared_ptr',
	    'stack',
	    'string_view',
	    'stringstream',
	    'timed_mutex',
	    'thread',
	    'true_type',
	    'tuple',
	    'unique_lock',
	    'unique_ptr',
	    'unordered_map',
	    'unordered_multimap',
	    'unordered_multiset',
	    'unordered_set',
	    'variant',
	    'vector',
	    'weak_ptr',
	    'wstring',
	    'wstring_view'
	  ];

	  const FUNCTION_HINTS = [
	    'abort',
	    'abs',
	    'acos',
	    'apply',
	    'as_const',
	    'asin',
	    'atan',
	    'atan2',
	    'calloc',
	    'ceil',
	    'cerr',
	    'cin',
	    'clog',
	    'cos',
	    'cosh',
	    'cout',
	    'declval',
	    'endl',
	    'exchange',
	    'exit',
	    'exp',
	    'fabs',
	    'floor',
	    'fmod',
	    'forward',
	    'fprintf',
	    'fputs',
	    'free',
	    'frexp',
	    'fscanf',
	    'future',
	    'invoke',
	    'isalnum',
	    'isalpha',
	    'iscntrl',
	    'isdigit',
	    'isgraph',
	    'islower',
	    'isprint',
	    'ispunct',
	    'isspace',
	    'isupper',
	    'isxdigit',
	    'labs',
	    'launder',
	    'ldexp',
	    'log',
	    'log10',
	    'make_pair',
	    'make_shared',
	    'make_shared_for_overwrite',
	    'make_tuple',
	    'make_unique',
	    'malloc',
	    'memchr',
	    'memcmp',
	    'memcpy',
	    'memset',
	    'modf',
	    'move',
	    'pow',
	    'printf',
	    'putchar',
	    'puts',
	    'realloc',
	    'scanf',
	    'sin',
	    'sinh',
	    'snprintf',
	    'sprintf',
	    'sqrt',
	    'sscanf',
	    'std',
	    'stderr',
	    'stdin',
	    'stdout',
	    'strcat',
	    'strchr',
	    'strcmp',
	    'strcpy',
	    'strcspn',
	    'strlen',
	    'strncat',
	    'strncmp',
	    'strncpy',
	    'strpbrk',
	    'strrchr',
	    'strspn',
	    'strstr',
	    'swap',
	    'tan',
	    'tanh',
	    'terminate',
	    'to_underlying',
	    'tolower',
	    'toupper',
	    'vfprintf',
	    'visit',
	    'vprintf',
	    'vsprintf'
	  ];

	  const LITERALS = [
	    'NULL',
	    'false',
	    'nullopt',
	    'nullptr',
	    'true'
	  ];

	  // https://en.cppreference.com/w/cpp/keyword
	  const BUILT_IN = [ '_Pragma' ];

	  const CPP_KEYWORDS = {
	    type: RESERVED_TYPES,
	    keyword: RESERVED_KEYWORDS,
	    literal: LITERALS,
	    built_in: BUILT_IN,
	    _type_hints: TYPE_HINTS
	  };

	  const FUNCTION_DISPATCH = {
	    className: 'function.dispatch',
	    relevance: 0,
	    keywords: {
	      // Only for relevance, not highlighting.
	      _hint: FUNCTION_HINTS },
	    begin: regex.concat(
	      /\b/,
	      /(?!decltype)/,
	      /(?!if)/,
	      /(?!for)/,
	      /(?!switch)/,
	      /(?!while)/,
	      hljs.IDENT_RE,
	      regex.lookahead(/(<[^<>]+>|)\s*\(/))
	  };

	  const EXPRESSION_CONTAINS = [
	    FUNCTION_DISPATCH,
	    PREPROCESSOR,
	    CPP_PRIMITIVE_TYPES,
	    C_LINE_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE,
	    NUMBERS,
	    STRINGS
	  ];

	  const EXPRESSION_CONTEXT = {
	    // This mode covers expression context where we can't expect a function
	    // definition and shouldn't highlight anything that looks like one:
	    // `return some()`, `else if()`, `(x*sum(1, 2))`
	    variants: [
	      {
	        begin: /=/,
	        end: /;/
	      },
	      {
	        begin: /\(/,
	        end: /\)/
	      },
	      {
	        beginKeywords: 'new throw return else',
	        end: /;/
	      }
	    ],
	    keywords: CPP_KEYWORDS,
	    contains: EXPRESSION_CONTAINS.concat([
	      {
	        begin: /\(/,
	        end: /\)/,
	        keywords: CPP_KEYWORDS,
	        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),
	        relevance: 0
	      }
	    ]),
	    relevance: 0
	  };

	  const FUNCTION_DECLARATION = {
	    className: 'function',
	    begin: '(' + FUNCTION_TYPE_RE + '[\\*&\\s]+)+' + FUNCTION_TITLE,
	    returnBegin: true,
	    end: /[{;=]/,
	    excludeEnd: true,
	    keywords: CPP_KEYWORDS,
	    illegal: /[^\w\s\*&:<>.]/,
	    contains: [
	      { // to prevent it from being confused as the function title
	        begin: DECLTYPE_AUTO_RE,
	        keywords: CPP_KEYWORDS,
	        relevance: 0
	      },
	      {
	        begin: FUNCTION_TITLE,
	        returnBegin: true,
	        contains: [ TITLE_MODE ],
	        relevance: 0
	      },
	      // needed because we do not have look-behind on the below rule
	      // to prevent it from grabbing the final : in a :: pair
	      {
	        begin: /::/,
	        relevance: 0
	      },
	      // initializers
	      {
	        begin: /:/,
	        endsWithParent: true,
	        contains: [
	          STRINGS,
	          NUMBERS
	        ]
	      },
	      // allow for multiple declarations, e.g.:
	      // extern void f(int), g(char);
	      {
	        relevance: 0,
	        match: /,/
	      },
	      {
	        className: 'params',
	        begin: /\(/,
	        end: /\)/,
	        keywords: CPP_KEYWORDS,
	        relevance: 0,
	        contains: [
	          C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE,
	          STRINGS,
	          NUMBERS,
	          CPP_PRIMITIVE_TYPES,
	          // Count matching parentheses.
	          {
	            begin: /\(/,
	            end: /\)/,
	            keywords: CPP_KEYWORDS,
	            relevance: 0,
	            contains: [
	              'self',
	              C_LINE_COMMENT_MODE,
	              hljs.C_BLOCK_COMMENT_MODE,
	              STRINGS,
	              NUMBERS,
	              CPP_PRIMITIVE_TYPES
	            ]
	          }
	        ]
	      },
	      CPP_PRIMITIVE_TYPES,
	      C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      PREPROCESSOR
	    ]
	  };

	  return {
	    name: 'C++',
	    aliases: [
	      'cc',
	      'c++',
	      'h++',
	      'hpp',
	      'hh',
	      'hxx',
	      'cxx'
	    ],
	    keywords: CPP_KEYWORDS,
	    illegal: '</',
	    classNameAliases: { 'function.dispatch': 'built_in' },
	    contains: [].concat(
	      EXPRESSION_CONTEXT,
	      FUNCTION_DECLARATION,
	      FUNCTION_DISPATCH,
	      EXPRESSION_CONTAINS,
	      [
	        PREPROCESSOR,
	        { // containers: ie, `vector <int> rooms (9);`
	          begin: '\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)',
	          end: '>',
	          keywords: CPP_KEYWORDS,
	          contains: [
	            'self',
	            CPP_PRIMITIVE_TYPES
	          ]
	        },
	        {
	          begin: hljs.IDENT_RE + '::',
	          keywords: CPP_KEYWORDS
	        },
	        {
	          match: [
	            // extra complexity to deal with `enum class` and `enum struct`
	            /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
	            /\s+/,
	            /\w+/
	          ],
	          className: {
	            1: 'keyword',
	            3: 'title.class'
	          }
	        }
	      ])
	  };
	}

	/*
	Language: Arduino
	Author: Stefania Mellai <s.mellai@arduino.cc>
	Description: The Arduino® Language is a superset of C++. This rules are designed to highlight the Arduino® source code. For info about language see http://www.arduino.cc.
	Website: https://www.arduino.cc
	*/


	/** @type LanguageFn */
	function arduino(hljs) {
	  const ARDUINO_KW = {
	    type: [
	      "boolean",
	      "byte",
	      "word",
	      "String"
	    ],
	    built_in: [
	      "KeyboardController",
	      "MouseController",
	      "SoftwareSerial",
	      "EthernetServer",
	      "EthernetClient",
	      "LiquidCrystal",
	      "RobotControl",
	      "GSMVoiceCall",
	      "EthernetUDP",
	      "EsploraTFT",
	      "HttpClient",
	      "RobotMotor",
	      "WiFiClient",
	      "GSMScanner",
	      "FileSystem",
	      "Scheduler",
	      "GSMServer",
	      "YunClient",
	      "YunServer",
	      "IPAddress",
	      "GSMClient",
	      "GSMModem",
	      "Keyboard",
	      "Ethernet",
	      "Console",
	      "GSMBand",
	      "Esplora",
	      "Stepper",
	      "Process",
	      "WiFiUDP",
	      "GSM_SMS",
	      "Mailbox",
	      "USBHost",
	      "Firmata",
	      "PImage",
	      "Client",
	      "Server",
	      "GSMPIN",
	      "FileIO",
	      "Bridge",
	      "Serial",
	      "EEPROM",
	      "Stream",
	      "Mouse",
	      "Audio",
	      "Servo",
	      "File",
	      "Task",
	      "GPRS",
	      "WiFi",
	      "Wire",
	      "TFT",
	      "GSM",
	      "SPI",
	      "SD"
	    ],
	    _hints: [
	      "setup",
	      "loop",
	      "runShellCommandAsynchronously",
	      "analogWriteResolution",
	      "retrieveCallingNumber",
	      "printFirmwareVersion",
	      "analogReadResolution",
	      "sendDigitalPortPair",
	      "noListenOnLocalhost",
	      "readJoystickButton",
	      "setFirmwareVersion",
	      "readJoystickSwitch",
	      "scrollDisplayRight",
	      "getVoiceCallStatus",
	      "scrollDisplayLeft",
	      "writeMicroseconds",
	      "delayMicroseconds",
	      "beginTransmission",
	      "getSignalStrength",
	      "runAsynchronously",
	      "getAsynchronously",
	      "listenOnLocalhost",
	      "getCurrentCarrier",
	      "readAccelerometer",
	      "messageAvailable",
	      "sendDigitalPorts",
	      "lineFollowConfig",
	      "countryNameWrite",
	      "runShellCommand",
	      "readStringUntil",
	      "rewindDirectory",
	      "readTemperature",
	      "setClockDivider",
	      "readLightSensor",
	      "endTransmission",
	      "analogReference",
	      "detachInterrupt",
	      "countryNameRead",
	      "attachInterrupt",
	      "encryptionType",
	      "readBytesUntil",
	      "robotNameWrite",
	      "readMicrophone",
	      "robotNameRead",
	      "cityNameWrite",
	      "userNameWrite",
	      "readJoystickY",
	      "readJoystickX",
	      "mouseReleased",
	      "openNextFile",
	      "scanNetworks",
	      "noInterrupts",
	      "digitalWrite",
	      "beginSpeaker",
	      "mousePressed",
	      "isActionDone",
	      "mouseDragged",
	      "displayLogos",
	      "noAutoscroll",
	      "addParameter",
	      "remoteNumber",
	      "getModifiers",
	      "keyboardRead",
	      "userNameRead",
	      "waitContinue",
	      "processInput",
	      "parseCommand",
	      "printVersion",
	      "readNetworks",
	      "writeMessage",
	      "blinkVersion",
	      "cityNameRead",
	      "readMessage",
	      "setDataMode",
	      "parsePacket",
	      "isListening",
	      "setBitOrder",
	      "beginPacket",
	      "isDirectory",
	      "motorsWrite",
	      "drawCompass",
	      "digitalRead",
	      "clearScreen",
	      "serialEvent",
	      "rightToLeft",
	      "setTextSize",
	      "leftToRight",
	      "requestFrom",
	      "keyReleased",
	      "compassRead",
	      "analogWrite",
	      "interrupts",
	      "WiFiServer",
	      "disconnect",
	      "playMelody",
	      "parseFloat",
	      "autoscroll",
	      "getPINUsed",
	      "setPINUsed",
	      "setTimeout",
	      "sendAnalog",
	      "readSlider",
	      "analogRead",
	      "beginWrite",
	      "createChar",
	      "motorsStop",
	      "keyPressed",
	      "tempoWrite",
	      "readButton",
	      "subnetMask",
	      "debugPrint",
	      "macAddress",
	      "writeGreen",
	      "randomSeed",
	      "attachGPRS",
	      "readString",
	      "sendString",
	      "remotePort",
	      "releaseAll",
	      "mouseMoved",
	      "background",
	      "getXChange",
	      "getYChange",
	      "answerCall",
	      "getResult",
	      "voiceCall",
	      "endPacket",
	      "constrain",
	      "getSocket",
	      "writeJSON",
	      "getButton",
	      "available",
	      "connected",
	      "findUntil",
	      "readBytes",
	      "exitValue",
	      "readGreen",
	      "writeBlue",
	      "startLoop",
	      "IPAddress",
	      "isPressed",
	      "sendSysex",
	      "pauseMode",
	      "gatewayIP",
	      "setCursor",
	      "getOemKey",
	      "tuneWrite",
	      "noDisplay",
	      "loadImage",
	      "switchPIN",
	      "onRequest",
	      "onReceive",
	      "changePIN",
	      "playFile",
	      "noBuffer",
	      "parseInt",
	      "overflow",
	      "checkPIN",
	      "knobRead",
	      "beginTFT",
	      "bitClear",
	      "updateIR",
	      "bitWrite",
	      "position",
	      "writeRGB",
	      "highByte",
	      "writeRed",
	      "setSpeed",
	      "readBlue",
	      "noStroke",
	      "remoteIP",
	      "transfer",
	      "shutdown",
	      "hangCall",
	      "beginSMS",
	      "endWrite",
	      "attached",
	      "maintain",
	      "noCursor",
	      "checkReg",
	      "checkPUK",
	      "shiftOut",
	      "isValid",
	      "shiftIn",
	      "pulseIn",
	      "connect",
	      "println",
	      "localIP",
	      "pinMode",
	      "getIMEI",
	      "display",
	      "noBlink",
	      "process",
	      "getBand",
	      "running",
	      "beginSD",
	      "drawBMP",
	      "lowByte",
	      "setBand",
	      "release",
	      "bitRead",
	      "prepare",
	      "pointTo",
	      "readRed",
	      "setMode",
	      "noFill",
	      "remove",
	      "listen",
	      "stroke",
	      "detach",
	      "attach",
	      "noTone",
	      "exists",
	      "buffer",
	      "height",
	      "bitSet",
	      "circle",
	      "config",
	      "cursor",
	      "random",
	      "IRread",
	      "setDNS",
	      "endSMS",
	      "getKey",
	      "micros",
	      "millis",
	      "begin",
	      "print",
	      "write",
	      "ready",
	      "flush",
	      "width",
	      "isPIN",
	      "blink",
	      "clear",
	      "press",
	      "mkdir",
	      "rmdir",
	      "close",
	      "point",
	      "yield",
	      "image",
	      "BSSID",
	      "click",
	      "delay",
	      "read",
	      "text",
	      "move",
	      "peek",
	      "beep",
	      "rect",
	      "line",
	      "open",
	      "seek",
	      "fill",
	      "size",
	      "turn",
	      "stop",
	      "home",
	      "find",
	      "step",
	      "tone",
	      "sqrt",
	      "RSSI",
	      "SSID",
	      "end",
	      "bit",
	      "tan",
	      "cos",
	      "sin",
	      "pow",
	      "map",
	      "abs",
	      "max",
	      "min",
	      "get",
	      "run",
	      "put"
	    ],
	    literal: [
	      "DIGITAL_MESSAGE",
	      "FIRMATA_STRING",
	      "ANALOG_MESSAGE",
	      "REPORT_DIGITAL",
	      "REPORT_ANALOG",
	      "INPUT_PULLUP",
	      "SET_PIN_MODE",
	      "INTERNAL2V56",
	      "SYSTEM_RESET",
	      "LED_BUILTIN",
	      "INTERNAL1V1",
	      "SYSEX_START",
	      "INTERNAL",
	      "EXTERNAL",
	      "DEFAULT",
	      "OUTPUT",
	      "INPUT",
	      "HIGH",
	      "LOW"
	    ]
	  };

	  const ARDUINO = cPlusPlus(hljs);

	  const kws = /** @type {Record<string,any>} */ (ARDUINO.keywords);

	  kws.type = [
	    ...kws.type,
	    ...ARDUINO_KW.type
	  ];
	  kws.literal = [
	    ...kws.literal,
	    ...ARDUINO_KW.literal
	  ];
	  kws.built_in = [
	    ...kws.built_in,
	    ...ARDUINO_KW.built_in
	  ];
	  kws._hints = ARDUINO_KW._hints;

	  ARDUINO.name = 'Arduino';
	  ARDUINO.aliases = [ 'ino' ];
	  ARDUINO.supersetOf = "cpp";

	  return ARDUINO;
	}

	arduino_1 = arduino;
	return arduino_1;
}

/*
Language: ARM Assembly
Author: Dan Panzarella <alsoelp@gmail.com>
Description: ARM Assembly including Thumb and Thumb2 instructions
Category: assembler
*/

var armasm_1;
var hasRequiredArmasm;

function requireArmasm () {
	if (hasRequiredArmasm) return armasm_1;
	hasRequiredArmasm = 1;
	/** @type LanguageFn */
	function armasm(hljs) {
	  // local labels: %?[FB]?[AT]?\d{1,2}\w+

	  const COMMENT = { variants: [
	    hljs.COMMENT('^[ \\t]*(?=#)', '$', {
	      relevance: 0,
	      excludeBegin: true
	    }),
	    hljs.COMMENT('[;@]', '$', { relevance: 0 }),
	    hljs.C_LINE_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE
	  ] };

	  return {
	    name: 'ARM Assembly',
	    case_insensitive: true,
	    aliases: [ 'arm' ],
	    keywords: {
	      $pattern: '\\.?' + hljs.IDENT_RE,
	      meta:
	        // GNU preprocs
	        '.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg '
	        // ARM directives
	        + 'ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND ',
	      built_in:
	        'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 ' // standard registers
	        + 'w0 w1 w2 w3 w4 w5 w6 w7 w8 w9 w10 w11 w12 w13 w14 w15 ' // 32 bit ARMv8 registers
	        + 'w16 w17 w18 w19 w20 w21 w22 w23 w24 w25 w26 w27 w28 w29 w30 '
	        + 'x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 ' // 64 bit ARMv8 registers
	        + 'x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 '
	        + 'pc lr sp ip sl sb fp ' // typical regs plus backward compatibility
	        + 'a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 ' // more regs and fp
	        + 'p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 ' // coprocessor regs
	        + 'c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 ' // more coproc
	        + 'q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 ' // advanced SIMD NEON regs

	        // program status registers
	        + 'cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf '
	        + 'spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf '

	        // NEON and VFP registers
	        + 's0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 '
	        + 's16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 '
	        + 'd0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 '
	        + 'd16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 '

	        + '{PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @'
	    },
	    contains: [
	      {
	        className: 'keyword',
	        begin: '\\b(' // mnemonics
	            + 'adc|'
	            + '(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|'
	            + 'and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|'
	            + 'bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|'
	            + 'setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|'
	            + 'ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|'
	            + 'mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|'
	            + 'mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|'
	            + 'mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|'
	            + 'rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|'
	            + 'stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|'
	            + '[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|'
	            + 'wfe|wfi|yield'
	        + ')'
	        + '(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?' // condition codes
	        + '[sptrx]?' // legal postfixes
	        + '(?=\\s)' // followed by space
	      },
	      COMMENT,
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'string',
	        begin: '\'',
	        end: '[^\\\\]\'',
	        relevance: 0
	      },
	      {
	        className: 'title',
	        begin: '\\|',
	        end: '\\|',
	        illegal: '\\n',
	        relevance: 0
	      },
	      {
	        className: 'number',
	        variants: [
	          { // hex
	            begin: '[#$=]?0x[0-9a-f]+' },
	          { // bin
	            begin: '[#$=]?0b[01]+' },
	          { // literal
	            begin: '[#$=]\\d+' },
	          { // bare number
	            begin: '\\b\\d+' }
	        ],
	        relevance: 0
	      },
	      {
	        className: 'symbol',
	        variants: [
	          { // GNU ARM syntax
	            begin: '^[ \\t]*[a-z_\\.\\$][a-z0-9_\\.\\$]+:' },
	          { // ARM syntax
	            begin: '^[a-z_\\.\\$][a-z0-9_\\.\\$]+' },
	          { // label reference
	            begin: '[=#]\\w+' }
	        ],
	        relevance: 0
	      }
	    ]
	  };
	}

	armasm_1 = armasm;
	return armasm_1;
}

/*
Language: HTML, XML
Website: https://www.w3.org/XML/
Category: common, web
Audit: 2020
*/

var xml_1;
var hasRequiredXml;

function requireXml () {
	if (hasRequiredXml) return xml_1;
	hasRequiredXml = 1;
	/** @type LanguageFn */
	function xml(hljs) {
	  const regex = hljs.regex;
	  // XML names can have the following additional letters: https://www.w3.org/TR/xml/#NT-NameChar
	  // OTHER_NAME_CHARS = /[:\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]/;
	  // Element names start with NAME_START_CHAR followed by optional other Unicode letters, ASCII digits, hyphens, underscores, and periods
	  // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/, regex.optional(/[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*:/), /[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*/);;
	  // const XML_IDENT_RE = /[A-Z_a-z:\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]+/;
	  // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/, regex.optional(/[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*:/), /[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*/);
	  // however, to cater for performance and more Unicode support rely simply on the Unicode letter class
	  const TAG_NAME_RE = regex.concat(/[\p{L}_]/u, regex.optional(/[\p{L}0-9_.-]*:/u), /[\p{L}0-9_.-]*/u);
	  const XML_IDENT_RE = /[\p{L}0-9._:-]+/u;
	  const XML_ENTITIES = {
	    className: 'symbol',
	    begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/
	  };
	  const XML_META_KEYWORDS = {
	    begin: /\s/,
	    contains: [
	      {
	        className: 'keyword',
	        begin: /#?[a-z_][a-z1-9_-]+/,
	        illegal: /\n/
	      }
	    ]
	  };
	  const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {
	    begin: /\(/,
	    end: /\)/
	  });
	  const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, { className: 'string' });
	  const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'string' });
	  const TAG_INTERNALS = {
	    endsWithParent: true,
	    illegal: /</,
	    relevance: 0,
	    contains: [
	      {
	        className: 'attr',
	        begin: XML_IDENT_RE,
	        relevance: 0
	      },
	      {
	        begin: /=\s*/,
	        relevance: 0,
	        contains: [
	          {
	            className: 'string',
	            endsParent: true,
	            variants: [
	              {
	                begin: /"/,
	                end: /"/,
	                contains: [ XML_ENTITIES ]
	              },
	              {
	                begin: /'/,
	                end: /'/,
	                contains: [ XML_ENTITIES ]
	              },
	              { begin: /[^\s"'=<>`]+/ }
	            ]
	          }
	        ]
	      }
	    ]
	  };
	  return {
	    name: 'HTML, XML',
	    aliases: [
	      'html',
	      'xhtml',
	      'rss',
	      'atom',
	      'xjb',
	      'xsd',
	      'xsl',
	      'plist',
	      'wsf',
	      'svg'
	    ],
	    case_insensitive: true,
	    unicodeRegex: true,
	    contains: [
	      {
	        className: 'meta',
	        begin: /<![a-z]/,
	        end: />/,
	        relevance: 10,
	        contains: [
	          XML_META_KEYWORDS,
	          QUOTE_META_STRING_MODE,
	          APOS_META_STRING_MODE,
	          XML_META_PAR_KEYWORDS,
	          {
	            begin: /\[/,
	            end: /\]/,
	            contains: [
	              {
	                className: 'meta',
	                begin: /<![a-z]/,
	                end: />/,
	                contains: [
	                  XML_META_KEYWORDS,
	                  XML_META_PAR_KEYWORDS,
	                  QUOTE_META_STRING_MODE,
	                  APOS_META_STRING_MODE
	                ]
	              }
	            ]
	          }
	        ]
	      },
	      hljs.COMMENT(
	        /<!--/,
	        /-->/,
	        { relevance: 10 }
	      ),
	      {
	        begin: /<!\[CDATA\[/,
	        end: /\]\]>/,
	        relevance: 10
	      },
	      XML_ENTITIES,
	      // xml processing instructions
	      {
	        className: 'meta',
	        end: /\?>/,
	        variants: [
	          {
	            begin: /<\?xml/,
	            relevance: 10,
	            contains: [
	              QUOTE_META_STRING_MODE
	            ]
	          },
	          {
	            begin: /<\?[a-z][a-z0-9]+/,
	          }
	        ]

	      },
	      {
	        className: 'tag',
	        /*
	        The lookahead pattern (?=...) ensures that 'begin' only matches
	        '<style' as a single word, followed by a whitespace or an
	        ending bracket.
	        */
	        begin: /<style(?=\s|>)/,
	        end: />/,
	        keywords: { name: 'style' },
	        contains: [ TAG_INTERNALS ],
	        starts: {
	          end: /<\/style>/,
	          returnEnd: true,
	          subLanguage: [
	            'css',
	            'xml'
	          ]
	        }
	      },
	      {
	        className: 'tag',
	        // See the comment in the <style tag about the lookahead pattern
	        begin: /<script(?=\s|>)/,
	        end: />/,
	        keywords: { name: 'script' },
	        contains: [ TAG_INTERNALS ],
	        starts: {
	          end: /<\/script>/,
	          returnEnd: true,
	          subLanguage: [
	            'javascript',
	            'handlebars',
	            'xml'
	          ]
	        }
	      },
	      // we need this for now for jSX
	      {
	        className: 'tag',
	        begin: /<>|<\/>/
	      },
	      // open tag
	      {
	        className: 'tag',
	        begin: regex.concat(
	          /</,
	          regex.lookahead(regex.concat(
	            TAG_NAME_RE,
	            // <tag/>
	            // <tag>
	            // <tag ...
	            regex.either(/\/>/, />/, /\s/)
	          ))
	        ),
	        end: /\/?>/,
	        contains: [
	          {
	            className: 'name',
	            begin: TAG_NAME_RE,
	            relevance: 0,
	            starts: TAG_INTERNALS
	          }
	        ]
	      },
	      // close tag
	      {
	        className: 'tag',
	        begin: regex.concat(
	          /<\//,
	          regex.lookahead(regex.concat(
	            TAG_NAME_RE, />/
	          ))
	        ),
	        contains: [
	          {
	            className: 'name',
	            begin: TAG_NAME_RE,
	            relevance: 0
	          },
	          {
	            begin: />/,
	            relevance: 0,
	            endsParent: true
	          }
	        ]
	      }
	    ]
	  };
	}

	xml_1 = xml;
	return xml_1;
}

/*
Language: AsciiDoc
Requires: xml.js
Author: Dan Allen <dan.j.allen@gmail.com>
Website: http://asciidoc.org
Description: A semantic, text-based document format that can be exported to HTML, DocBook and other backends.
Category: markup
*/

var asciidoc_1;
var hasRequiredAsciidoc;

function requireAsciidoc () {
	if (hasRequiredAsciidoc) return asciidoc_1;
	hasRequiredAsciidoc = 1;
	/** @type LanguageFn */
	function asciidoc(hljs) {
	  const regex = hljs.regex;
	  const HORIZONTAL_RULE = {
	    begin: '^\'{3,}[ \\t]*$',
	    relevance: 10
	  };
	  const ESCAPED_FORMATTING = [
	    // escaped constrained formatting marks (i.e., \* \_ or \`)
	    { begin: /\\[*_`]/ },
	    // escaped unconstrained formatting marks (i.e., \\** \\__ or \\``)
	    // must ignore until the next formatting marks
	    // this rule might not be 100% compliant with Asciidoctor 2.0 but we are entering undefined behavior territory...
	    { begin: /\\\\\*{2}[^\n]*?\*{2}/ },
	    { begin: /\\\\_{2}[^\n]*_{2}/ },
	    { begin: /\\\\`{2}[^\n]*`{2}/ },
	    // guard: constrained formatting mark may not be preceded by ":", ";" or
	    // "}". match these so the constrained rule doesn't see them
	    { begin: /[:;}][*_`](?![*_`])/ }
	  ];
	  const STRONG = [
	    // inline unconstrained strong (single line)
	    {
	      className: 'strong',
	      begin: /\*{2}([^\n]+?)\*{2}/
	    },
	    // inline unconstrained strong (multi-line)
	    {
	      className: 'strong',
	      begin: regex.concat(
	        /\*\*/,
	        /((\*(?!\*)|\\[^\n]|[^*\n\\])+\n)+/,
	        /(\*(?!\*)|\\[^\n]|[^*\n\\])*/,
	        /\*\*/
	      ),
	      relevance: 0
	    },
	    // inline constrained strong (single line)
	    {
	      className: 'strong',
	      // must not precede or follow a word character
	      begin: /\B\*(\S|\S[^\n]*?\S)\*(?!\w)/
	    },
	    // inline constrained strong (multi-line)
	    {
	      className: 'strong',
	      // must not precede or follow a word character
	      begin: /\*[^\s]([^\n]+\n)+([^\n]+)\*/
	    }
	  ];
	  const EMPHASIS = [
	    // inline unconstrained emphasis (single line)
	    {
	      className: 'emphasis',
	      begin: /_{2}([^\n]+?)_{2}/
	    },
	    // inline unconstrained emphasis (multi-line)
	    {
	      className: 'emphasis',
	      begin: regex.concat(
	        /__/,
	        /((_(?!_)|\\[^\n]|[^_\n\\])+\n)+/,
	        /(_(?!_)|\\[^\n]|[^_\n\\])*/,
	        /__/
	      ),
	      relevance: 0
	    },
	    // inline constrained emphasis (single line)
	    {
	      className: 'emphasis',
	      // must not precede or follow a word character
	      begin: /\b_(\S|\S[^\n]*?\S)_(?!\w)/
	    },
	    // inline constrained emphasis (multi-line)
	    {
	      className: 'emphasis',
	      // must not precede or follow a word character
	      begin: /_[^\s]([^\n]+\n)+([^\n]+)_/
	    },
	    // inline constrained emphasis using single quote (legacy)
	    {
	      className: 'emphasis',
	      // must not follow a word character or be followed by a single quote or space
	      begin: '\\B\'(?![\'\\s])',
	      end: '(\\n{2}|\')',
	      // allow escaped single quote followed by word char
	      contains: [
	        {
	          begin: '\\\\\'\\w',
	          relevance: 0
	        }
	      ],
	      relevance: 0
	    }
	  ];
	  const ADMONITION = {
	    className: 'symbol',
	    begin: '^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\s+',
	    relevance: 10
	  };
	  const BULLET_LIST = {
	    className: 'bullet',
	    begin: '^(\\*+|-+|\\.+|[^\\n]+?::)\\s+'
	  };

	  return {
	    name: 'AsciiDoc',
	    aliases: [ 'adoc' ],
	    contains: [
	      // block comment
	      hljs.COMMENT(
	        '^/{4,}\\n',
	        '\\n/{4,}$',
	        // can also be done as...
	        // '^/{4,}$',
	        // '^/{4,}$',
	        { relevance: 10 }
	      ),
	      // line comment
	      hljs.COMMENT(
	        '^//',
	        '$',
	        { relevance: 0 }
	      ),
	      // title
	      {
	        className: 'title',
	        begin: '^\\.\\w.*$'
	      },
	      // example, admonition & sidebar blocks
	      {
	        begin: '^[=\\*]{4,}\\n',
	        end: '\\n^[=\\*]{4,}$',
	        relevance: 10
	      },
	      // headings
	      {
	        className: 'section',
	        relevance: 10,
	        variants: [
	          { begin: '^(={1,6})[ \t].+?([ \t]\\1)?$' },
	          { begin: '^[^\\[\\]\\n]+?\\n[=\\-~\\^\\+]{2,}$' }
	        ]
	      },
	      // document attributes
	      {
	        className: 'meta',
	        begin: '^:.+?:',
	        end: '\\s',
	        excludeEnd: true,
	        relevance: 10
	      },
	      // block attributes
	      {
	        className: 'meta',
	        begin: '^\\[.+?\\]$',
	        relevance: 0
	      },
	      // quoteblocks
	      {
	        className: 'quote',
	        begin: '^_{4,}\\n',
	        end: '\\n_{4,}$',
	        relevance: 10
	      },
	      // listing and literal blocks
	      {
	        className: 'code',
	        begin: '^[\\-\\.]{4,}\\n',
	        end: '\\n[\\-\\.]{4,}$',
	        relevance: 10
	      },
	      // passthrough blocks
	      {
	        begin: '^\\+{4,}\\n',
	        end: '\\n\\+{4,}$',
	        contains: [
	          {
	            begin: '<',
	            end: '>',
	            subLanguage: 'xml',
	            relevance: 0
	          }
	        ],
	        relevance: 10
	      },

	      BULLET_LIST,
	      ADMONITION,
	      ...ESCAPED_FORMATTING,
	      ...STRONG,
	      ...EMPHASIS,

	      // inline smart quotes
	      {
	        className: 'string',
	        variants: [
	          { begin: "``.+?''" },
	          { begin: "`.+?'" }
	        ]
	      },
	      // inline unconstrained emphasis
	      {
	        className: 'code',
	        begin: /`{2}/,
	        end: /(\n{2}|`{2})/
	      },
	      // inline code snippets (TODO should get same treatment as strong and emphasis)
	      {
	        className: 'code',
	        begin: '(`.+?`|\\+.+?\\+)',
	        relevance: 0
	      },
	      // indented literal block
	      {
	        className: 'code',
	        begin: '^[ \\t]',
	        end: '$',
	        relevance: 0
	      },
	      HORIZONTAL_RULE,
	      // images and links
	      {
	        begin: '(link:)?(http|https|ftp|file|irc|image:?):\\S+?\\[[^[]*?\\]',
	        returnBegin: true,
	        contains: [
	          {
	            begin: '(link|image:?):',
	            relevance: 0
	          },
	          {
	            className: 'link',
	            begin: '\\w',
	            end: '[^\\[]+',
	            relevance: 0
	          },
	          {
	            className: 'string',
	            begin: '\\[',
	            end: '\\]',
	            excludeBegin: true,
	            excludeEnd: true,
	            relevance: 0
	          }
	        ],
	        relevance: 10
	      }
	    ]
	  };
	}

	asciidoc_1 = asciidoc;
	return asciidoc_1;
}

/*
Language: AspectJ
Author: Hakan Ozler <ozler.hakan@gmail.com>
Website: https://www.eclipse.org/aspectj/
Description: Syntax Highlighting for the AspectJ Language which is a general-purpose aspect-oriented extension to the Java programming language.
Audit: 2020
*/

var aspectj_1;
var hasRequiredAspectj;

function requireAspectj () {
	if (hasRequiredAspectj) return aspectj_1;
	hasRequiredAspectj = 1;
	/** @type LanguageFn */
	function aspectj(hljs) {
	  const regex = hljs.regex;
	  const KEYWORDS = [
	    "false",
	    "synchronized",
	    "int",
	    "abstract",
	    "float",
	    "private",
	    "char",
	    "boolean",
	    "static",
	    "null",
	    "if",
	    "const",
	    "for",
	    "true",
	    "while",
	    "long",
	    "throw",
	    "strictfp",
	    "finally",
	    "protected",
	    "import",
	    "native",
	    "final",
	    "return",
	    "void",
	    "enum",
	    "else",
	    "extends",
	    "implements",
	    "break",
	    "transient",
	    "new",
	    "catch",
	    "instanceof",
	    "byte",
	    "super",
	    "volatile",
	    "case",
	    "assert",
	    "short",
	    "package",
	    "default",
	    "double",
	    "public",
	    "try",
	    "this",
	    "switch",
	    "continue",
	    "throws",
	    "privileged",
	    "aspectOf",
	    "adviceexecution",
	    "proceed",
	    "cflowbelow",
	    "cflow",
	    "initialization",
	    "preinitialization",
	    "staticinitialization",
	    "withincode",
	    "target",
	    "within",
	    "execution",
	    "getWithinTypeName",
	    "handler",
	    "thisJoinPoint",
	    "thisJoinPointStaticPart",
	    "thisEnclosingJoinPointStaticPart",
	    "declare",
	    "parents",
	    "warning",
	    "error",
	    "soft",
	    "precedence",
	    "thisAspectInstance"
	  ];
	  const SHORTKEYS = [
	    "get",
	    "set",
	    "args",
	    "call"
	  ];

	  return {
	    name: 'AspectJ',
	    keywords: KEYWORDS,
	    illegal: /<\/|#/,
	    contains: [
	      hljs.COMMENT(
	        /\/\*\*/,
	        /\*\//,
	        {
	          relevance: 0,
	          contains: [
	            {
	              // eat up @'s in emails to prevent them to be recognized as doctags
	              begin: /\w+@/,
	              relevance: 0
	            },
	            {
	              className: 'doctag',
	              begin: /@[A-Za-z]+/
	            }
	          ]
	        }
	      ),
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'class',
	        beginKeywords: 'aspect',
	        end: /[{;=]/,
	        excludeEnd: true,
	        illegal: /[:;"\[\]]/,
	        contains: [
	          { beginKeywords: 'extends implements pertypewithin perthis pertarget percflowbelow percflow issingleton' },
	          hljs.UNDERSCORE_TITLE_MODE,
	          {
	            begin: /\([^\)]*/,
	            end: /[)]+/,
	            keywords: KEYWORDS.concat(SHORTKEYS),
	            excludeEnd: false
	          }
	        ]
	      },
	      {
	        className: 'class',
	        beginKeywords: 'class interface',
	        end: /[{;=]/,
	        excludeEnd: true,
	        relevance: 0,
	        keywords: 'class interface',
	        illegal: /[:"\[\]]/,
	        contains: [
	          { beginKeywords: 'extends implements' },
	          hljs.UNDERSCORE_TITLE_MODE
	        ]
	      },
	      {
	        // AspectJ Constructs
	        beginKeywords: 'pointcut after before around throwing returning',
	        end: /[)]/,
	        excludeEnd: false,
	        illegal: /["\[\]]/,
	        contains: [
	          {
	            begin: regex.concat(hljs.UNDERSCORE_IDENT_RE, /\s*\(/),
	            returnBegin: true,
	            contains: [ hljs.UNDERSCORE_TITLE_MODE ]
	          }
	        ]
	      },
	      {
	        begin: /[:]/,
	        returnBegin: true,
	        end: /[{;]/,
	        relevance: 0,
	        excludeEnd: false,
	        keywords: KEYWORDS,
	        illegal: /["\[\]]/,
	        contains: [
	          {
	            begin: regex.concat(hljs.UNDERSCORE_IDENT_RE, /\s*\(/),
	            keywords: KEYWORDS.concat(SHORTKEYS),
	            relevance: 0
	          },
	          hljs.QUOTE_STRING_MODE
	        ]
	      },
	      {
	        // this prevents 'new Name(...), or throw ...' from being recognized as a function definition
	        beginKeywords: 'new throw',
	        relevance: 0
	      },
	      {
	        // the function class is a bit different for AspectJ compared to the Java language
	        className: 'function',
	        begin: /\w+ +\w+(\.\w+)?\s*\([^\)]*\)\s*((throws)[\w\s,]+)?[\{;]/,
	        returnBegin: true,
	        end: /[{;=]/,
	        keywords: KEYWORDS,
	        excludeEnd: true,
	        contains: [
	          {
	            begin: regex.concat(hljs.UNDERSCORE_IDENT_RE, /\s*\(/),
	            returnBegin: true,
	            relevance: 0,
	            contains: [ hljs.UNDERSCORE_TITLE_MODE ]
	          },
	          {
	            className: 'params',
	            begin: /\(/,
	            end: /\)/,
	            relevance: 0,
	            keywords: KEYWORDS,
	            contains: [
	              hljs.APOS_STRING_MODE,
	              hljs.QUOTE_STRING_MODE,
	              hljs.C_NUMBER_MODE,
	              hljs.C_BLOCK_COMMENT_MODE
	            ]
	          },
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      },
	      hljs.C_NUMBER_MODE,
	      {
	        // annotation is also used in this language
	        className: 'meta',
	        begin: /@[A-Za-z]+/
	      }
	    ]
	  };
	}

	aspectj_1 = aspectj;
	return aspectj_1;
}

/*
Language: AutoHotkey
Author: Seongwon Lee <dlimpid@gmail.com>
Description: AutoHotkey language definition
Category: scripting
*/

var autohotkey_1;
var hasRequiredAutohotkey;

function requireAutohotkey () {
	if (hasRequiredAutohotkey) return autohotkey_1;
	hasRequiredAutohotkey = 1;
	/** @type LanguageFn */
	function autohotkey(hljs) {
	  const BACKTICK_ESCAPE = { begin: '`[\\s\\S]' };

	  return {
	    name: 'AutoHotkey',
	    case_insensitive: true,
	    aliases: [ 'ahk' ],
	    keywords: {
	      keyword: 'Break Continue Critical Exit ExitApp Gosub Goto New OnExit Pause return SetBatchLines SetTimer Suspend Thread Throw Until ahk_id ahk_class ahk_pid ahk_exe ahk_group',
	      literal: 'true false NOT AND OR',
	      built_in: 'ComSpec Clipboard ClipboardAll ErrorLevel'
	    },
	    contains: [
	      BACKTICK_ESCAPE,
	      hljs.inherit(hljs.QUOTE_STRING_MODE, { contains: [ BACKTICK_ESCAPE ] }),
	      hljs.COMMENT(';', '$', { relevance: 0 }),
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'number',
	        begin: hljs.NUMBER_RE,
	        relevance: 0
	      },
	      {
	        // subst would be the most accurate however fails the point of
	        // highlighting. variable is comparably the most accurate that actually
	        // has some effect
	        className: 'variable',
	        begin: '%[a-zA-Z0-9#_$@]+%'
	      },
	      {
	        className: 'built_in',
	        begin: '^\\s*\\w+\\s*(,|%)'
	        // I don't really know if this is totally relevant
	      },
	      {
	        // symbol would be most accurate however is highlighted just like
	        // built_in and that makes up a lot of AutoHotkey code meaning that it
	        // would fail to highlight anything
	        className: 'title',
	        variants: [
	          { begin: '^[^\\n";]+::(?!=)' },
	          {
	            begin: '^[^\\n";]+:(?!=)',
	            // zero relevance as it catches a lot of things
	            // followed by a single ':' in many languages
	            relevance: 0
	          }
	        ]
	      },
	      {
	        className: 'meta',
	        begin: '^\\s*#\\w+',
	        end: '$',
	        relevance: 0
	      },
	      {
	        className: 'built_in',
	        begin: 'A_[a-zA-Z0-9]+'
	      },
	      {
	        // consecutive commas, not for highlighting but just for relevance
	        begin: ',\\s*,' }
	    ]
	  };
	}

	autohotkey_1 = autohotkey;
	return autohotkey_1;
}

/*
Language: AutoIt
Author: Manh Tuan <junookyo@gmail.com>
Description: AutoIt language definition
Category: scripting
*/

var autoit_1;
var hasRequiredAutoit;

function requireAutoit () {
	if (hasRequiredAutoit) return autoit_1;
	hasRequiredAutoit = 1;
	/** @type LanguageFn */
	function autoit(hljs) {
	  const KEYWORDS = 'ByRef Case Const ContinueCase ContinueLoop '
	        + 'Dim Do Else ElseIf EndFunc EndIf EndSelect '
	        + 'EndSwitch EndWith Enum Exit ExitLoop For Func '
	        + 'Global If In Local Next ReDim Return Select Static '
	        + 'Step Switch Then To Until Volatile WEnd While With';

	  const DIRECTIVES = [
	    "EndRegion",
	    "forcedef",
	    "forceref",
	    "ignorefunc",
	    "include",
	    "include-once",
	    "NoTrayIcon",
	    "OnAutoItStartRegister",
	    "pragma",
	    "Region",
	    "RequireAdmin",
	    "Tidy_Off",
	    "Tidy_On",
	    "Tidy_Parameters"
	  ];

	  const LITERAL = 'True False And Null Not Or Default';

	  const BUILT_IN =
	          'Abs ACos AdlibRegister AdlibUnRegister Asc AscW ASin Assign ATan AutoItSetOption AutoItWinGetTitle AutoItWinSetTitle Beep Binary BinaryLen BinaryMid BinaryToString BitAND BitNOT BitOR BitRotate BitShift BitXOR BlockInput Break Call CDTray Ceiling Chr ChrW ClipGet ClipPut ConsoleRead ConsoleWrite ConsoleWriteError ControlClick ControlCommand ControlDisable ControlEnable ControlFocus ControlGetFocus ControlGetHandle ControlGetPos ControlGetText ControlHide ControlListView ControlMove ControlSend ControlSetText ControlShow ControlTreeView Cos Dec DirCopy DirCreate DirGetSize DirMove DirRemove DllCall DllCallAddress DllCallbackFree DllCallbackGetPtr DllCallbackRegister DllClose DllOpen DllStructCreate DllStructGetData DllStructGetPtr DllStructGetSize DllStructSetData DriveGetDrive DriveGetFileSystem DriveGetLabel DriveGetSerial DriveGetType DriveMapAdd DriveMapDel DriveMapGet DriveSetLabel DriveSpaceFree DriveSpaceTotal DriveStatus EnvGet EnvSet EnvUpdate Eval Execute Exp FileChangeDir FileClose FileCopy FileCreateNTFSLink FileCreateShortcut FileDelete FileExists FileFindFirstFile FileFindNextFile FileFlush FileGetAttrib FileGetEncoding FileGetLongName FileGetPos FileGetShortcut FileGetShortName FileGetSize FileGetTime FileGetVersion FileInstall FileMove FileOpen FileOpenDialog FileRead FileReadLine FileReadToArray FileRecycle FileRecycleEmpty FileSaveDialog FileSelectFolder FileSetAttrib FileSetEnd FileSetPos FileSetTime FileWrite FileWriteLine Floor FtpSetProxy FuncName GUICreate GUICtrlCreateAvi GUICtrlCreateButton GUICtrlCreateCheckbox GUICtrlCreateCombo GUICtrlCreateContextMenu GUICtrlCreateDate GUICtrlCreateDummy GUICtrlCreateEdit GUICtrlCreateGraphic GUICtrlCreateGroup GUICtrlCreateIcon GUICtrlCreateInput GUICtrlCreateLabel GUICtrlCreateList GUICtrlCreateListView GUICtrlCreateListViewItem GUICtrlCreateMenu GUICtrlCreateMenuItem GUICtrlCreateMonthCal GUICtrlCreateObj GUICtrlCreatePic GUICtrlCreateProgress GUICtrlCreateRadio GUICtrlCreateSlider GUICtrlCreateTab GUICtrlCreateTabItem GUICtrlCreateTreeView GUICtrlCreateTreeViewItem GUICtrlCreateUpdown GUICtrlDelete GUICtrlGetHandle GUICtrlGetState GUICtrlRead GUICtrlRecvMsg GUICtrlRegisterListViewSort GUICtrlSendMsg GUICtrlSendToDummy GUICtrlSetBkColor GUICtrlSetColor GUICtrlSetCursor GUICtrlSetData GUICtrlSetDefBkColor GUICtrlSetDefColor GUICtrlSetFont GUICtrlSetGraphic GUICtrlSetImage GUICtrlSetLimit GUICtrlSetOnEvent GUICtrlSetPos GUICtrlSetResizing GUICtrlSetState GUICtrlSetStyle GUICtrlSetTip GUIDelete GUIGetCursorInfo GUIGetMsg GUIGetStyle GUIRegisterMsg GUISetAccelerators GUISetBkColor GUISetCoord GUISetCursor GUISetFont GUISetHelp GUISetIcon GUISetOnEvent GUISetState GUISetStyle GUIStartGroup GUISwitch Hex HotKeySet HttpSetProxy HttpSetUserAgent HWnd InetClose InetGet InetGetInfo InetGetSize InetRead IniDelete IniRead IniReadSection IniReadSectionNames IniRenameSection IniWrite IniWriteSection InputBox Int IsAdmin IsArray IsBinary IsBool IsDeclared IsDllStruct IsFloat IsFunc IsHWnd IsInt IsKeyword IsNumber IsObj IsPtr IsString Log MemGetStats Mod MouseClick MouseClickDrag MouseDown MouseGetCursor MouseGetPos MouseMove MouseUp MouseWheel MsgBox Number ObjCreate ObjCreateInterface ObjEvent ObjGet ObjName OnAutoItExitRegister OnAutoItExitUnRegister Ping PixelChecksum PixelGetColor PixelSearch ProcessClose ProcessExists ProcessGetStats ProcessList ProcessSetPriority ProcessWait ProcessWaitClose ProgressOff ProgressOn ProgressSet Ptr Random RegDelete RegEnumKey RegEnumVal RegRead RegWrite Round Run RunAs RunAsWait RunWait Send SendKeepActive SetError SetExtended ShellExecute ShellExecuteWait Shutdown Sin Sleep SoundPlay SoundSetWaveVolume SplashImageOn SplashOff SplashTextOn Sqrt SRandom StatusbarGetText StderrRead StdinWrite StdioClose StdoutRead String StringAddCR StringCompare StringFormat StringFromASCIIArray StringInStr StringIsAlNum StringIsAlpha StringIsASCII StringIsDigit StringIsFloat StringIsInt StringIsLower StringIsSpace StringIsUpper StringIsXDigit StringLeft StringLen StringLower StringMid StringRegExp StringRegExpReplace StringReplace StringReverse StringRight StringSplit StringStripCR StringStripWS StringToASCIIArray StringToBinary StringTrimLeft StringTrimRight StringUpper Tan TCPAccept TCPCloseSocket TCPConnect TCPListen TCPNameToIP TCPRecv TCPSend TCPShutdown, UDPShutdown TCPStartup, UDPStartup TimerDiff TimerInit ToolTip TrayCreateItem TrayCreateMenu TrayGetMsg TrayItemDelete TrayItemGetHandle TrayItemGetState TrayItemGetText TrayItemSetOnEvent TrayItemSetState TrayItemSetText TraySetClick TraySetIcon TraySetOnEvent TraySetPauseIcon TraySetState TraySetToolTip TrayTip UBound UDPBind UDPCloseSocket UDPOpen UDPRecv UDPSend VarGetType WinActivate WinActive WinClose WinExists WinFlash WinGetCaretPos WinGetClassList WinGetClientSize WinGetHandle WinGetPos WinGetProcess WinGetState WinGetText WinGetTitle WinKill WinList WinMenuSelectItem WinMinimizeAll WinMinimizeAllUndo WinMove WinSetOnTop WinSetState WinSetTitle WinSetTrans WinWait WinWaitActive WinWaitClose WinWaitNotActive';

	  const COMMENT = { variants: [
	    hljs.COMMENT(';', '$', { relevance: 0 }),
	    hljs.COMMENT('#cs', '#ce'),
	    hljs.COMMENT('#comments-start', '#comments-end')
	  ] };

	  const VARIABLE = { begin: '\\$[A-z0-9_]+' };

	  const STRING = {
	    className: 'string',
	    variants: [
	      {
	        begin: /"/,
	        end: /"/,
	        contains: [
	          {
	            begin: /""/,
	            relevance: 0
	          }
	        ]
	      },
	      {
	        begin: /'/,
	        end: /'/,
	        contains: [
	          {
	            begin: /''/,
	            relevance: 0
	          }
	        ]
	      }
	    ]
	  };

	  const NUMBER = { variants: [
	    hljs.BINARY_NUMBER_MODE,
	    hljs.C_NUMBER_MODE
	  ] };

	  const PREPROCESSOR = {
	    className: 'meta',
	    begin: '#',
	    end: '$',
	    keywords: { keyword: DIRECTIVES },
	    contains: [
	      {
	        begin: /\\\n/,
	        relevance: 0
	      },
	      {
	        beginKeywords: 'include',
	        keywords: { keyword: 'include' },
	        end: '$',
	        contains: [
	          STRING,
	          {
	            className: 'string',
	            variants: [
	              {
	                begin: '<',
	                end: '>'
	              },
	              {
	                begin: /"/,
	                end: /"/,
	                contains: [
	                  {
	                    begin: /""/,
	                    relevance: 0
	                  }
	                ]
	              },
	              {
	                begin: /'/,
	                end: /'/,
	                contains: [
	                  {
	                    begin: /''/,
	                    relevance: 0
	                  }
	                ]
	              }
	            ]
	          }
	        ]
	      },
	      STRING,
	      COMMENT
	    ]
	  };

	  const CONSTANT = {
	    className: 'symbol',
	    // begin: '@',
	    // end: '$',
	    // keywords: 'AppDataCommonDir AppDataDir AutoItExe AutoItPID AutoItVersion AutoItX64 COM_EventObj CommonFilesDir Compiled ComputerName ComSpec CPUArch CR CRLF DesktopCommonDir DesktopDepth DesktopDir DesktopHeight DesktopRefresh DesktopWidth DocumentsCommonDir error exitCode exitMethod extended FavoritesCommonDir FavoritesDir GUI_CtrlHandle GUI_CtrlId GUI_DragFile GUI_DragId GUI_DropId GUI_WinHandle HomeDrive HomePath HomeShare HotKeyPressed HOUR IPAddress1 IPAddress2 IPAddress3 IPAddress4 KBLayout LF LocalAppDataDir LogonDNSDomain LogonDomain LogonServer MDAY MIN MON MSEC MUILang MyDocumentsDir NumParams OSArch OSBuild OSLang OSServicePack OSType OSVersion ProgramFilesDir ProgramsCommonDir ProgramsDir ScriptDir ScriptFullPath ScriptLineNumber ScriptName SEC StartMenuCommonDir StartMenuDir StartupCommonDir StartupDir SW_DISABLE SW_ENABLE SW_HIDE SW_LOCK SW_MAXIMIZE SW_MINIMIZE SW_RESTORE SW_SHOW SW_SHOWDEFAULT SW_SHOWMAXIMIZED SW_SHOWMINIMIZED SW_SHOWMINNOACTIVE SW_SHOWNA SW_SHOWNOACTIVATE SW_SHOWNORMAL SW_UNLOCK SystemDir TAB TempDir TRAY_ID TrayIconFlashing TrayIconVisible UserName UserProfileDir WDAY WindowsDir WorkingDir YDAY YEAR',
	    // relevance: 5
	    begin: '@[A-z0-9_]+'
	  };

	  const FUNCTION = {
	    beginKeywords: 'Func',
	    end: '$',
	    illegal: '\\$|\\[|%',
	    contains: [
	      hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, { className: "title.function" }),
	      {
	        className: 'params',
	        begin: '\\(',
	        end: '\\)',
	        contains: [
	          VARIABLE,
	          STRING,
	          NUMBER
	        ]
	      }
	    ]
	  };

	  return {
	    name: 'AutoIt',
	    case_insensitive: true,
	    illegal: /\/\*/,
	    keywords: {
	      keyword: KEYWORDS,
	      built_in: BUILT_IN,
	      literal: LITERAL
	    },
	    contains: [
	      COMMENT,
	      VARIABLE,
	      STRING,
	      NUMBER,
	      PREPROCESSOR,
	      CONSTANT,
	      FUNCTION
	    ]
	  };
	}

	autoit_1 = autoit;
	return autoit_1;
}

/*
Language: AVR Assembly
Author: Vladimir Ermakov <vooon341@gmail.com>
Category: assembler
Website: https://www.microchip.com/webdoc/avrassembler/avrassembler.wb_instruction_list.html
*/

var avrasm_1;
var hasRequiredAvrasm;

function requireAvrasm () {
	if (hasRequiredAvrasm) return avrasm_1;
	hasRequiredAvrasm = 1;
	/** @type LanguageFn */
	function avrasm(hljs) {
	  return {
	    name: 'AVR Assembly',
	    case_insensitive: true,
	    keywords: {
	      $pattern: '\\.?' + hljs.IDENT_RE,
	      keyword:
	        /* mnemonic */
	        'adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs '
	        + 'brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr '
	        + 'clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor '
	        + 'fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul '
	        + 'muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs '
	        + 'sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub '
	        + 'subi swap tst wdr',
	      built_in:
	        /* general purpose registers */
	        'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 '
	        + 'r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl '
	        /* IO Registers (ATMega128) */
	        + 'ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h '
	        + 'tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c '
	        + 'ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg '
	        + 'ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk '
	        + 'tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al '
	        + 'ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr '
	        + 'porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 '
	        + 'ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf',
	      meta:
	        '.byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list '
	        + '.listmac .macro .nolist .org .set'
	    },
	    contains: [
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.COMMENT(
	        ';',
	        '$',
	        { relevance: 0 }
	      ),
	      hljs.C_NUMBER_MODE, // 0x..., decimal, float
	      hljs.BINARY_NUMBER_MODE, // 0b...
	      {
	        className: 'number',
	        begin: '\\b(\\$[a-zA-Z0-9]+|0o[0-7]+)' // $..., 0o...
	      },
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'string',
	        begin: '\'',
	        end: '[^\\\\]\'',
	        illegal: '[^\\\\][^\']'
	      },
	      {
	        className: 'symbol',
	        begin: '^[A-Za-z0-9_.$]+:'
	      },
	      {
	        className: 'meta',
	        begin: '#',
	        end: '$'
	      },
	      { // substitution within a macro
	        className: 'subst',
	        begin: '@[0-9]+'
	      }
	    ]
	  };
	}

	avrasm_1 = avrasm;
	return avrasm_1;
}

/*
Language: Awk
Author: Matthew Daly <matthewbdaly@gmail.com>
Website: https://www.gnu.org/software/gawk/manual/gawk.html
Description: language definition for Awk scripts
*/

var awk_1;
var hasRequiredAwk;

function requireAwk () {
	if (hasRequiredAwk) return awk_1;
	hasRequiredAwk = 1;
	/** @type LanguageFn */
	function awk(hljs) {
	  const VARIABLE = {
	    className: 'variable',
	    variants: [
	      { begin: /\$[\w\d#@][\w\d_]*/ },
	      { begin: /\$\{(.*?)\}/ }
	    ]
	  };
	  const KEYWORDS = 'BEGIN END if else while do for in break continue delete next nextfile function func exit|10';
	  const STRING = {
	    className: 'string',
	    contains: [ hljs.BACKSLASH_ESCAPE ],
	    variants: [
	      {
	        begin: /(u|b)?r?'''/,
	        end: /'''/,
	        relevance: 10
	      },
	      {
	        begin: /(u|b)?r?"""/,
	        end: /"""/,
	        relevance: 10
	      },
	      {
	        begin: /(u|r|ur)'/,
	        end: /'/,
	        relevance: 10
	      },
	      {
	        begin: /(u|r|ur)"/,
	        end: /"/,
	        relevance: 10
	      },
	      {
	        begin: /(b|br)'/,
	        end: /'/
	      },
	      {
	        begin: /(b|br)"/,
	        end: /"/
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE
	    ]
	  };
	  return {
	    name: 'Awk',
	    keywords: { keyword: KEYWORDS },
	    contains: [
	      VARIABLE,
	      STRING,
	      hljs.REGEXP_MODE,
	      hljs.HASH_COMMENT_MODE,
	      hljs.NUMBER_MODE
	    ]
	  };
	}

	awk_1 = awk;
	return awk_1;
}

/*
Language: Microsoft X++
Description: X++ is a language used in Microsoft Dynamics 365, Dynamics AX, and Axapta.
Author: Dmitri Roudakov <dmitri@roudakov.ru>
Website: https://dynamics.microsoft.com/en-us/ax-overview/
Category: enterprise
*/

var axapta_1;
var hasRequiredAxapta;

function requireAxapta () {
	if (hasRequiredAxapta) return axapta_1;
	hasRequiredAxapta = 1;
	/** @type LanguageFn */
	function axapta(hljs) {
	  const IDENT_RE = hljs.UNDERSCORE_IDENT_RE;
	  const BUILT_IN_KEYWORDS = [
	    'anytype',
	    'boolean',
	    'byte',
	    'char',
	    'container',
	    'date',
	    'double',
	    'enum',
	    'guid',
	    'int',
	    'int64',
	    'long',
	    'real',
	    'short',
	    'str',
	    'utcdatetime',
	    'var'
	  ];

	  const LITERAL_KEYWORDS = [
	    'default',
	    'false',
	    'null',
	    'true'
	  ];

	  const NORMAL_KEYWORDS = [
	    'abstract',
	    'as',
	    'asc',
	    'avg',
	    'break',
	    'breakpoint',
	    'by',
	    'byref',
	    'case',
	    'catch',
	    'changecompany',
	    'class',
	    'client',
	    'client',
	    'common',
	    'const',
	    'continue',
	    'count',
	    'crosscompany',
	    'delegate',
	    'delete_from',
	    'desc',
	    'display',
	    'div',
	    'do',
	    'edit',
	    'else',
	    'eventhandler',
	    'exists',
	    'extends',
	    'final',
	    'finally',
	    'firstfast',
	    'firstonly',
	    'firstonly1',
	    'firstonly10',
	    'firstonly100',
	    'firstonly1000',
	    'flush',
	    'for',
	    'forceliterals',
	    'forcenestedloop',
	    'forceplaceholders',
	    'forceselectorder',
	    'forupdate',
	    'from',
	    'generateonly',
	    'group',
	    'hint',
	    'if',
	    'implements',
	    'in',
	    'index',
	    'insert_recordset',
	    'interface',
	    'internal',
	    'is',
	    'join',
	    'like',
	    'maxof',
	    'minof',
	    'mod',
	    'namespace',
	    'new',
	    'next',
	    'nofetch',
	    'notexists',
	    'optimisticlock',
	    'order',
	    'outer',
	    'pessimisticlock',
	    'print',
	    'private',
	    'protected',
	    'public',
	    'readonly',
	    'repeatableread',
	    'retry',
	    'return',
	    'reverse',
	    'select',
	    'server',
	    'setting',
	    'static',
	    'sum',
	    'super',
	    'switch',
	    'this',
	    'throw',
	    'try',
	    'ttsabort',
	    'ttsbegin',
	    'ttscommit',
	    'unchecked',
	    'update_recordset',
	    'using',
	    'validtimestate',
	    'void',
	    'where',
	    'while'
	  ];

	  const KEYWORDS = {
	    keyword: NORMAL_KEYWORDS,
	    built_in: BUILT_IN_KEYWORDS,
	    literal: LITERAL_KEYWORDS
	  };

	  const CLASS_DEFINITION = {
	    variants: [
	      { match: [
	        /(class|interface)\s+/,
	        IDENT_RE,
	        /\s+(extends|implements)\s+/,
	        IDENT_RE
	      ] },
	      { match: [
	        /class\s+/,
	        IDENT_RE
	      ] }
	    ],
	    scope: {
	      2: "title.class",
	      4: "title.class.inherited"
	    },
	    keywords: KEYWORDS
	  };

	  return {
	    name: 'X++',
	    aliases: [ 'x++' ],
	    keywords: KEYWORDS,
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'meta',
	        begin: '#',
	        end: '$'
	      },
	      CLASS_DEFINITION
	    ]
	  };
	}

	axapta_1 = axapta;
	return axapta_1;
}

/*
Language: Bash
Author: vah <vahtenberg@gmail.com>
Contributrors: Benjamin Pannell <contact@sierrasoftworks.com>
Website: https://www.gnu.org/software/bash/
Category: common
*/

var bash_1;
var hasRequiredBash;

function requireBash () {
	if (hasRequiredBash) return bash_1;
	hasRequiredBash = 1;
	/** @type LanguageFn */
	function bash(hljs) {
	  const regex = hljs.regex;
	  const VAR = {};
	  const BRACED_VAR = {
	    begin: /\$\{/,
	    end: /\}/,
	    contains: [
	      "self",
	      {
	        begin: /:-/,
	        contains: [ VAR ]
	      } // default values
	    ]
	  };
	  Object.assign(VAR, {
	    className: 'variable',
	    variants: [
	      { begin: regex.concat(/\$[\w\d#@][\w\d_]*/,
	        // negative look-ahead tries to avoid matching patterns that are not
	        // Perl at all like $ident$, @ident@, etc.
	        `(?![\\w\\d])(?![$])`) },
	      BRACED_VAR
	    ]
	  });

	  const SUBST = {
	    className: 'subst',
	    begin: /\$\(/,
	    end: /\)/,
	    contains: [ hljs.BACKSLASH_ESCAPE ]
	  };
	  const HERE_DOC = {
	    begin: /<<-?\s*(?=\w+)/,
	    starts: { contains: [
	      hljs.END_SAME_AS_BEGIN({
	        begin: /(\w+)/,
	        end: /(\w+)/,
	        className: 'string'
	      })
	    ] }
	  };
	  const QUOTE_STRING = {
	    className: 'string',
	    begin: /"/,
	    end: /"/,
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      VAR,
	      SUBST
	    ]
	  };
	  SUBST.contains.push(QUOTE_STRING);
	  const ESCAPED_QUOTE = {
	    match: /\\"/
	  };
	  const APOS_STRING = {
	    className: 'string',
	    begin: /'/,
	    end: /'/
	  };
	  const ESCAPED_APOS = {
	    match: /\\'/
	  };
	  const ARITHMETIC = {
	    begin: /\$?\(\(/,
	    end: /\)\)/,
	    contains: [
	      {
	        begin: /\d+#[0-9a-f]+/,
	        className: "number"
	      },
	      hljs.NUMBER_MODE,
	      VAR
	    ]
	  };
	  const SH_LIKE_SHELLS = [
	    "fish",
	    "bash",
	    "zsh",
	    "sh",
	    "csh",
	    "ksh",
	    "tcsh",
	    "dash",
	    "scsh",
	  ];
	  const KNOWN_SHEBANG = hljs.SHEBANG({
	    binary: `(${SH_LIKE_SHELLS.join("|")})`,
	    relevance: 10
	  });
	  const FUNCTION = {
	    className: 'function',
	    begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
	    returnBegin: true,
	    contains: [ hljs.inherit(hljs.TITLE_MODE, { begin: /\w[\w\d_]*/ }) ],
	    relevance: 0
	  };

	  const KEYWORDS = [
	    "if",
	    "then",
	    "else",
	    "elif",
	    "fi",
	    "for",
	    "while",
	    "until",
	    "in",
	    "do",
	    "done",
	    "case",
	    "esac",
	    "function",
	    "select"
	  ];

	  const LITERALS = [
	    "true",
	    "false"
	  ];

	  // to consume paths to prevent keyword matches inside them
	  const PATH_MODE = { match: /(\/[a-z._-]+)+/ };

	  // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
	  const SHELL_BUILT_INS = [
	    "break",
	    "cd",
	    "continue",
	    "eval",
	    "exec",
	    "exit",
	    "export",
	    "getopts",
	    "hash",
	    "pwd",
	    "readonly",
	    "return",
	    "shift",
	    "test",
	    "times",
	    "trap",
	    "umask",
	    "unset"
	  ];

	  const BASH_BUILT_INS = [
	    "alias",
	    "bind",
	    "builtin",
	    "caller",
	    "command",
	    "declare",
	    "echo",
	    "enable",
	    "help",
	    "let",
	    "local",
	    "logout",
	    "mapfile",
	    "printf",
	    "read",
	    "readarray",
	    "source",
	    "type",
	    "typeset",
	    "ulimit",
	    "unalias"
	  ];

	  const ZSH_BUILT_INS = [
	    "autoload",
	    "bg",
	    "bindkey",
	    "bye",
	    "cap",
	    "chdir",
	    "clone",
	    "comparguments",
	    "compcall",
	    "compctl",
	    "compdescribe",
	    "compfiles",
	    "compgroups",
	    "compquote",
	    "comptags",
	    "comptry",
	    "compvalues",
	    "dirs",
	    "disable",
	    "disown",
	    "echotc",
	    "echoti",
	    "emulate",
	    "fc",
	    "fg",
	    "float",
	    "functions",
	    "getcap",
	    "getln",
	    "history",
	    "integer",
	    "jobs",
	    "kill",
	    "limit",
	    "log",
	    "noglob",
	    "popd",
	    "print",
	    "pushd",
	    "pushln",
	    "rehash",
	    "sched",
	    "setcap",
	    "setopt",
	    "stat",
	    "suspend",
	    "ttyctl",
	    "unfunction",
	    "unhash",
	    "unlimit",
	    "unsetopt",
	    "vared",
	    "wait",
	    "whence",
	    "where",
	    "which",
	    "zcompile",
	    "zformat",
	    "zftp",
	    "zle",
	    "zmodload",
	    "zparseopts",
	    "zprof",
	    "zpty",
	    "zregexparse",
	    "zsocket",
	    "zstyle",
	    "ztcp"
	  ];

	  const GNU_CORE_UTILS = [
	    "chcon",
	    "chgrp",
	    "chown",
	    "chmod",
	    "cp",
	    "dd",
	    "df",
	    "dir",
	    "dircolors",
	    "ln",
	    "ls",
	    "mkdir",
	    "mkfifo",
	    "mknod",
	    "mktemp",
	    "mv",
	    "realpath",
	    "rm",
	    "rmdir",
	    "shred",
	    "sync",
	    "touch",
	    "truncate",
	    "vdir",
	    "b2sum",
	    "base32",
	    "base64",
	    "cat",
	    "cksum",
	    "comm",
	    "csplit",
	    "cut",
	    "expand",
	    "fmt",
	    "fold",
	    "head",
	    "join",
	    "md5sum",
	    "nl",
	    "numfmt",
	    "od",
	    "paste",
	    "ptx",
	    "pr",
	    "sha1sum",
	    "sha224sum",
	    "sha256sum",
	    "sha384sum",
	    "sha512sum",
	    "shuf",
	    "sort",
	    "split",
	    "sum",
	    "tac",
	    "tail",
	    "tr",
	    "tsort",
	    "unexpand",
	    "uniq",
	    "wc",
	    "arch",
	    "basename",
	    "chroot",
	    "date",
	    "dirname",
	    "du",
	    "echo",
	    "env",
	    "expr",
	    "factor",
	    // "false", // keyword literal already
	    "groups",
	    "hostid",
	    "id",
	    "link",
	    "logname",
	    "nice",
	    "nohup",
	    "nproc",
	    "pathchk",
	    "pinky",
	    "printenv",
	    "printf",
	    "pwd",
	    "readlink",
	    "runcon",
	    "seq",
	    "sleep",
	    "stat",
	    "stdbuf",
	    "stty",
	    "tee",
	    "test",
	    "timeout",
	    // "true", // keyword literal already
	    "tty",
	    "uname",
	    "unlink",
	    "uptime",
	    "users",
	    "who",
	    "whoami",
	    "yes"
	  ];

	  return {
	    name: 'Bash',
	    aliases: [ 'sh' ],
	    keywords: {
	      $pattern: /\b[a-z][a-z0-9._-]+\b/,
	      keyword: KEYWORDS,
	      literal: LITERALS,
	      built_in: [
	        ...SHELL_BUILT_INS,
	        ...BASH_BUILT_INS,
	        // Shell modifiers
	        "set",
	        "shopt",
	        ...ZSH_BUILT_INS,
	        ...GNU_CORE_UTILS
	      ]
	    },
	    contains: [
	      KNOWN_SHEBANG, // to catch known shells and boost relevancy
	      hljs.SHEBANG(), // to catch unknown shells but still highlight the shebang
	      FUNCTION,
	      ARITHMETIC,
	      hljs.HASH_COMMENT_MODE,
	      HERE_DOC,
	      PATH_MODE,
	      QUOTE_STRING,
	      ESCAPED_QUOTE,
	      APOS_STRING,
	      ESCAPED_APOS,
	      VAR
	    ]
	  };
	}

	bash_1 = bash;
	return bash_1;
}

/*
Language: BASIC
Author: Raphaël Assénat <raph@raphnet.net>
Description: Based on the BASIC reference from the Tandy 1000 guide
Website: https://en.wikipedia.org/wiki/Tandy_1000
*/

var basic_1;
var hasRequiredBasic;

function requireBasic () {
	if (hasRequiredBasic) return basic_1;
	hasRequiredBasic = 1;
	/** @type LanguageFn */
	function basic(hljs) {
	  const KEYWORDS = [
	    "ABS",
	    "ASC",
	    "AND",
	    "ATN",
	    "AUTO|0",
	    "BEEP",
	    "BLOAD|10",
	    "BSAVE|10",
	    "CALL",
	    "CALLS",
	    "CDBL",
	    "CHAIN",
	    "CHDIR",
	    "CHR$|10",
	    "CINT",
	    "CIRCLE",
	    "CLEAR",
	    "CLOSE",
	    "CLS",
	    "COLOR",
	    "COM",
	    "COMMON",
	    "CONT",
	    "COS",
	    "CSNG",
	    "CSRLIN",
	    "CVD",
	    "CVI",
	    "CVS",
	    "DATA",
	    "DATE$",
	    "DEFDBL",
	    "DEFINT",
	    "DEFSNG",
	    "DEFSTR",
	    "DEF|0",
	    "SEG",
	    "USR",
	    "DELETE",
	    "DIM",
	    "DRAW",
	    "EDIT",
	    "END",
	    "ENVIRON",
	    "ENVIRON$",
	    "EOF",
	    "EQV",
	    "ERASE",
	    "ERDEV",
	    "ERDEV$",
	    "ERL",
	    "ERR",
	    "ERROR",
	    "EXP",
	    "FIELD",
	    "FILES",
	    "FIX",
	    "FOR|0",
	    "FRE",
	    "GET",
	    "GOSUB|10",
	    "GOTO",
	    "HEX$",
	    "IF",
	    "THEN",
	    "ELSE|0",
	    "INKEY$",
	    "INP",
	    "INPUT",
	    "INPUT#",
	    "INPUT$",
	    "INSTR",
	    "IMP",
	    "INT",
	    "IOCTL",
	    "IOCTL$",
	    "KEY",
	    "ON",
	    "OFF",
	    "LIST",
	    "KILL",
	    "LEFT$",
	    "LEN",
	    "LET",
	    "LINE",
	    "LLIST",
	    "LOAD",
	    "LOC",
	    "LOCATE",
	    "LOF",
	    "LOG",
	    "LPRINT",
	    "USING",
	    "LSET",
	    "MERGE",
	    "MID$",
	    "MKDIR",
	    "MKD$",
	    "MKI$",
	    "MKS$",
	    "MOD",
	    "NAME",
	    "NEW",
	    "NEXT",
	    "NOISE",
	    "NOT",
	    "OCT$",
	    "ON",
	    "OR",
	    "PEN",
	    "PLAY",
	    "STRIG",
	    "OPEN",
	    "OPTION",
	    "BASE",
	    "OUT",
	    "PAINT",
	    "PALETTE",
	    "PCOPY",
	    "PEEK",
	    "PMAP",
	    "POINT",
	    "POKE",
	    "POS",
	    "PRINT",
	    "PRINT]",
	    "PSET",
	    "PRESET",
	    "PUT",
	    "RANDOMIZE",
	    "READ",
	    "REM",
	    "RENUM",
	    "RESET|0",
	    "RESTORE",
	    "RESUME",
	    "RETURN|0",
	    "RIGHT$",
	    "RMDIR",
	    "RND",
	    "RSET",
	    "RUN",
	    "SAVE",
	    "SCREEN",
	    "SGN",
	    "SHELL",
	    "SIN",
	    "SOUND",
	    "SPACE$",
	    "SPC",
	    "SQR",
	    "STEP",
	    "STICK",
	    "STOP",
	    "STR$",
	    "STRING$",
	    "SWAP",
	    "SYSTEM",
	    "TAB",
	    "TAN",
	    "TIME$",
	    "TIMER",
	    "TROFF",
	    "TRON",
	    "TO",
	    "USR",
	    "VAL",
	    "VARPTR",
	    "VARPTR$",
	    "VIEW",
	    "WAIT",
	    "WHILE",
	    "WEND",
	    "WIDTH",
	    "WINDOW",
	    "WRITE",
	    "XOR"
	  ];

	  return {
	    name: 'BASIC',
	    case_insensitive: true,
	    illegal: '^\.',
	    // Support explicitly typed variables that end with $%! or #.
	    keywords: {
	      $pattern: '[a-zA-Z][a-zA-Z0-9_$%!#]*',
	      keyword: KEYWORDS
	    },
	    contains: [
	      hljs.QUOTE_STRING_MODE,
	      hljs.COMMENT('REM', '$', { relevance: 10 }),
	      hljs.COMMENT('\'', '$', { relevance: 0 }),
	      {
	        // Match line numbers
	        className: 'symbol',
	        begin: '^[0-9]+ ',
	        relevance: 10
	      },
	      {
	        // Match typed numeric constants (1000, 12.34!, 1.2e5, 1.5#, 1.2D2)
	        className: 'number',
	        begin: '\\b\\d+(\\.\\d+)?([edED]\\d+)?[#\!]?',
	        relevance: 0
	      },
	      {
	        // Match hexadecimal numbers (&Hxxxx)
	        className: 'number',
	        begin: '(&[hH][0-9a-fA-F]{1,4})'
	      },
	      {
	        // Match octal numbers (&Oxxxxxx)
	        className: 'number',
	        begin: '(&[oO][0-7]{1,6})'
	      }
	    ]
	  };
	}

	basic_1 = basic;
	return basic_1;
}

/*
Language: Backus–Naur Form
Website: https://en.wikipedia.org/wiki/Backus–Naur_form
Author: Oleg Efimov <efimovov@gmail.com>
*/

var bnf_1;
var hasRequiredBnf;

function requireBnf () {
	if (hasRequiredBnf) return bnf_1;
	hasRequiredBnf = 1;
	/** @type LanguageFn */
	function bnf(hljs) {
	  return {
	    name: 'Backus–Naur Form',
	    contains: [
	      // Attribute
	      {
	        className: 'attribute',
	        begin: /</,
	        end: />/
	      },
	      // Specific
	      {
	        begin: /::=/,
	        end: /$/,
	        contains: [
	          {
	            begin: /</,
	            end: />/
	          },
	          // Common
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE,
	          hljs.APOS_STRING_MODE,
	          hljs.QUOTE_STRING_MODE
	        ]
	      }
	    ]
	  };
	}

	bnf_1 = bnf;
	return bnf_1;
}

/*
Language: Brainfuck
Author: Evgeny Stepanischev <imbolk@gmail.com>
Website: https://esolangs.org/wiki/Brainfuck
*/

var brainfuck_1;
var hasRequiredBrainfuck;

function requireBrainfuck () {
	if (hasRequiredBrainfuck) return brainfuck_1;
	hasRequiredBrainfuck = 1;
	/** @type LanguageFn */
	function brainfuck(hljs) {
	  const LITERAL = {
	    className: 'literal',
	    begin: /[+-]+/,
	    relevance: 0
	  };
	  return {
	    name: 'Brainfuck',
	    aliases: [ 'bf' ],
	    contains: [
	      hljs.COMMENT(
	        /[^\[\]\.,\+\-<> \r\n]/,
	        /[\[\]\.,\+\-<> \r\n]/,
	        {
	          contains: [
	            {
	              match: /[ ]+[^\[\]\.,\+\-<> \r\n]/,
	              relevance: 0
	            }
	          ],
	          returnEnd: true,
	          relevance: 0
	        }
	      ),
	      {
	        className: 'title',
	        begin: '[\\[\\]]',
	        relevance: 0
	      },
	      {
	        className: 'string',
	        begin: '[\\.,]',
	        relevance: 0
	      },
	      {
	        // this mode works as the only relevance counter
	        // it looks ahead to find the start of a run of literals
	        // so only the runs are counted as relevant
	        begin: /(?=\+\+|--)/,
	        contains: [ LITERAL ]
	      },
	      LITERAL
	    ]
	  };
	}

	brainfuck_1 = brainfuck;
	return brainfuck_1;
}

/*
Language: C
Category: common, system
Website: https://en.wikipedia.org/wiki/C_(programming_language)
*/

var c_1;
var hasRequiredC;

function requireC () {
	if (hasRequiredC) return c_1;
	hasRequiredC = 1;
	/** @type LanguageFn */
	function c(hljs) {
	  const regex = hljs.regex;
	  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does
	  // not include such support nor can we be sure all the grammars depending
	  // on it would desire this behavior
	  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', { contains: [ { begin: /\\\n/ } ] });
	  const DECLTYPE_AUTO_RE = 'decltype\\(auto\\)';
	  const NAMESPACE_RE = '[a-zA-Z_]\\w*::';
	  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';
	  const FUNCTION_TYPE_RE = '('
	    + DECLTYPE_AUTO_RE + '|'
	    + regex.optional(NAMESPACE_RE)
	    + '[a-zA-Z_]\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE)
	  + ')';


	  const TYPES = {
	    className: 'type',
	    variants: [
	      { begin: '\\b[a-z\\d_]*_t\\b' },
	      { match: /\batomic_[a-z]{3,6}\b/ }
	    ]

	  };

	  // https://en.cppreference.com/w/cpp/language/escape
	  // \\ \x \xFF \u2837 \u00323747 \374
	  const CHARACTER_ESCAPES = '\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)';
	  const STRINGS = {
	    className: 'string',
	    variants: [
	      {
	        begin: '(u8?|U|L)?"',
	        end: '"',
	        illegal: '\\n',
	        contains: [ hljs.BACKSLASH_ESCAPE ]
	      },
	      {
	        begin: '(u8?|U|L)?\'(' + CHARACTER_ESCAPES + "|.)",
	        end: '\'',
	        illegal: '.'
	      },
	      hljs.END_SAME_AS_BEGIN({
	        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
	        end: /\)([^()\\ ]{0,16})"/
	      })
	    ]
	  };

	  const NUMBERS = {
	    className: 'number',
	    variants: [
	      { begin: '\\b(0b[01\']+)' },
	      { begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)' },
	      { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
	    ],
	    relevance: 0
	  };

	  const PREPROCESSOR = {
	    className: 'meta',
	    begin: /#\s*[a-z]+\b/,
	    end: /$/,
	    keywords: { keyword:
	        'if else elif endif define undef warning error line '
	        + 'pragma _Pragma ifdef ifndef include' },
	    contains: [
	      {
	        begin: /\\\n/,
	        relevance: 0
	      },
	      hljs.inherit(STRINGS, { className: 'string' }),
	      {
	        className: 'string',
	        begin: /<.*?>/
	      },
	      C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE
	    ]
	  };

	  const TITLE_MODE = {
	    className: 'title',
	    begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,
	    relevance: 0
	  };

	  const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\s*\\(';

	  const C_KEYWORDS = [
	    "asm",
	    "auto",
	    "break",
	    "case",
	    "continue",
	    "default",
	    "do",
	    "else",
	    "enum",
	    "extern",
	    "for",
	    "fortran",
	    "goto",
	    "if",
	    "inline",
	    "register",
	    "restrict",
	    "return",
	    "sizeof",
	    "struct",
	    "switch",
	    "typedef",
	    "union",
	    "volatile",
	    "while",
	    "_Alignas",
	    "_Alignof",
	    "_Atomic",
	    "_Generic",
	    "_Noreturn",
	    "_Static_assert",
	    "_Thread_local",
	    // aliases
	    "alignas",
	    "alignof",
	    "noreturn",
	    "static_assert",
	    "thread_local",
	    // not a C keyword but is, for all intents and purposes, treated exactly like one.
	    "_Pragma"
	  ];

	  const C_TYPES = [
	    "float",
	    "double",
	    "signed",
	    "unsigned",
	    "int",
	    "short",
	    "long",
	    "char",
	    "void",
	    "_Bool",
	    "_Complex",
	    "_Imaginary",
	    "_Decimal32",
	    "_Decimal64",
	    "_Decimal128",
	    // modifiers
	    "const",
	    "static",
	    // aliases
	    "complex",
	    "bool",
	    "imaginary"
	  ];

	  const KEYWORDS = {
	    keyword: C_KEYWORDS,
	    type: C_TYPES,
	    literal: 'true false NULL',
	    // TODO: apply hinting work similar to what was done in cpp.js
	    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream '
	      + 'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set '
	      + 'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos '
	      + 'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp '
	      + 'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper '
	      + 'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow '
	      + 'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp '
	      + 'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan '
	      + 'vfprintf vprintf vsprintf endl initializer_list unique_ptr',
	  };

	  const EXPRESSION_CONTAINS = [
	    PREPROCESSOR,
	    TYPES,
	    C_LINE_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE,
	    NUMBERS,
	    STRINGS
	  ];

	  const EXPRESSION_CONTEXT = {
	    // This mode covers expression context where we can't expect a function
	    // definition and shouldn't highlight anything that looks like one:
	    // `return some()`, `else if()`, `(x*sum(1, 2))`
	    variants: [
	      {
	        begin: /=/,
	        end: /;/
	      },
	      {
	        begin: /\(/,
	        end: /\)/
	      },
	      {
	        beginKeywords: 'new throw return else',
	        end: /;/
	      }
	    ],
	    keywords: KEYWORDS,
	    contains: EXPRESSION_CONTAINS.concat([
	      {
	        begin: /\(/,
	        end: /\)/,
	        keywords: KEYWORDS,
	        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),
	        relevance: 0
	      }
	    ]),
	    relevance: 0
	  };

	  const FUNCTION_DECLARATION = {
	    begin: '(' + FUNCTION_TYPE_RE + '[\\*&\\s]+)+' + FUNCTION_TITLE,
	    returnBegin: true,
	    end: /[{;=]/,
	    excludeEnd: true,
	    keywords: KEYWORDS,
	    illegal: /[^\w\s\*&:<>.]/,
	    contains: [
	      { // to prevent it from being confused as the function title
	        begin: DECLTYPE_AUTO_RE,
	        keywords: KEYWORDS,
	        relevance: 0
	      },
	      {
	        begin: FUNCTION_TITLE,
	        returnBegin: true,
	        contains: [ hljs.inherit(TITLE_MODE, { className: "title.function" }) ],
	        relevance: 0
	      },
	      // allow for multiple declarations, e.g.:
	      // extern void f(int), g(char);
	      {
	        relevance: 0,
	        match: /,/
	      },
	      {
	        className: 'params',
	        begin: /\(/,
	        end: /\)/,
	        keywords: KEYWORDS,
	        relevance: 0,
	        contains: [
	          C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE,
	          STRINGS,
	          NUMBERS,
	          TYPES,
	          // Count matching parentheses.
	          {
	            begin: /\(/,
	            end: /\)/,
	            keywords: KEYWORDS,
	            relevance: 0,
	            contains: [
	              'self',
	              C_LINE_COMMENT_MODE,
	              hljs.C_BLOCK_COMMENT_MODE,
	              STRINGS,
	              NUMBERS,
	              TYPES
	            ]
	          }
	        ]
	      },
	      TYPES,
	      C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      PREPROCESSOR
	    ]
	  };

	  return {
	    name: "C",
	    aliases: [ 'h' ],
	    keywords: KEYWORDS,
	    // Until differentiations are added between `c` and `cpp`, `c` will
	    // not be auto-detected to avoid auto-detect conflicts between C and C++
	    disableAutodetect: true,
	    illegal: '</',
	    contains: [].concat(
	      EXPRESSION_CONTEXT,
	      FUNCTION_DECLARATION,
	      EXPRESSION_CONTAINS,
	      [
	        PREPROCESSOR,
	        {
	          begin: hljs.IDENT_RE + '::',
	          keywords: KEYWORDS
	        },
	        {
	          className: 'class',
	          beginKeywords: 'enum class struct union',
	          end: /[{;:<>=]/,
	          contains: [
	            { beginKeywords: "final class struct" },
	            hljs.TITLE_MODE
	          ]
	        }
	      ]),
	    exports: {
	      preprocessor: PREPROCESSOR,
	      strings: STRINGS,
	      keywords: KEYWORDS
	    }
	  };
	}

	c_1 = c;
	return c_1;
}

/*
Language: C/AL
Author: Kenneth Fuglsang Christensen <kfuglsang@gmail.com>
Description: Provides highlighting of Microsoft Dynamics NAV C/AL code files
Website: https://docs.microsoft.com/en-us/dynamics-nav/programming-in-c-al
*/

var cal_1;
var hasRequiredCal;

function requireCal () {
	if (hasRequiredCal) return cal_1;
	hasRequiredCal = 1;
	/** @type LanguageFn */
	function cal(hljs) {
	  const regex = hljs.regex;
	  const KEYWORDS = [
	    "div",
	    "mod",
	    "in",
	    "and",
	    "or",
	    "not",
	    "xor",
	    "asserterror",
	    "begin",
	    "case",
	    "do",
	    "downto",
	    "else",
	    "end",
	    "exit",
	    "for",
	    "local",
	    "if",
	    "of",
	    "repeat",
	    "then",
	    "to",
	    "until",
	    "while",
	    "with",
	    "var"
	  ];
	  const LITERALS = 'false true';
	  const COMMENT_MODES = [
	    hljs.C_LINE_COMMENT_MODE,
	    hljs.COMMENT(
	      /\{/,
	      /\}/,
	      { relevance: 0 }
	    ),
	    hljs.COMMENT(
	      /\(\*/,
	      /\*\)/,
	      { relevance: 10 }
	    )
	  ];
	  const STRING = {
	    className: 'string',
	    begin: /'/,
	    end: /'/,
	    contains: [ { begin: /''/ } ]
	  };
	  const CHAR_STRING = {
	    className: 'string',
	    begin: /(#\d+)+/
	  };
	  const DATE = {
	    className: 'number',
	    begin: '\\b\\d+(\\.\\d+)?(DT|D|T)',
	    relevance: 0
	  };
	  const DBL_QUOTED_VARIABLE = {
	    className: 'string', // not a string technically but makes sense to be highlighted in the same style
	    begin: '"',
	    end: '"'
	  };

	  const PROCEDURE = {
	    match: [
	      /procedure/,
	      /\s+/,
	      /[a-zA-Z_][\w@]*/,
	      /\s*/
	    ],
	    scope: {
	      1: "keyword",
	      3: "title.function"
	    },
	    contains: [
	      {
	        className: 'params',
	        begin: /\(/,
	        end: /\)/,
	        keywords: KEYWORDS,
	        contains: [
	          STRING,
	          CHAR_STRING,
	          hljs.NUMBER_MODE
	        ]
	      },
	      ...COMMENT_MODES
	    ]
	  };

	  const OBJECT_TYPES = [
	    "Table",
	    "Form",
	    "Report",
	    "Dataport",
	    "Codeunit",
	    "XMLport",
	    "MenuSuite",
	    "Page",
	    "Query"
	  ];
	  const OBJECT = {
	    match: [
	      /OBJECT/,
	      /\s+/,
	      regex.either(...OBJECT_TYPES),
	      /\s+/,
	      /\d+/,
	      /\s+(?=[^\s])/,
	      /.*/,
	      /$/
	    ],
	    relevance: 3,
	    scope: {
	      1: "keyword",
	      3: "type",
	      5: "number",
	      7: "title"
	    }
	  };

	  const PROPERTY = {
	    match: /[\w]+(?=\=)/,
	    scope: "attribute",
	    relevance: 0
	  };

	  return {
	    name: 'C/AL',
	    case_insensitive: true,
	    keywords: {
	      keyword: KEYWORDS,
	      literal: LITERALS
	    },
	    illegal: /\/\*/,
	    contains: [
	      PROPERTY,
	      STRING,
	      CHAR_STRING,
	      DATE,
	      DBL_QUOTED_VARIABLE,
	      hljs.NUMBER_MODE,
	      OBJECT,
	      PROCEDURE
	    ]
	  };
	}

	cal_1 = cal;
	return cal_1;
}

/*
Language: Cap’n Proto
Author: Oleg Efimov <efimovov@gmail.com>
Description: Cap’n Proto message definition format
Website: https://capnproto.org/capnp-tool.html
Category: protocols
*/

var capnproto_1;
var hasRequiredCapnproto;

function requireCapnproto () {
	if (hasRequiredCapnproto) return capnproto_1;
	hasRequiredCapnproto = 1;
	/** @type LanguageFn */
	function capnproto(hljs) {
	  const KEYWORDS = [
	    "struct",
	    "enum",
	    "interface",
	    "union",
	    "group",
	    "import",
	    "using",
	    "const",
	    "annotation",
	    "extends",
	    "in",
	    "of",
	    "on",
	    "as",
	    "with",
	    "from",
	    "fixed"
	  ];
	  const TYPES = [
	    "Void",
	    "Bool",
	    "Int8",
	    "Int16",
	    "Int32",
	    "Int64",
	    "UInt8",
	    "UInt16",
	    "UInt32",
	    "UInt64",
	    "Float32",
	    "Float64",
	    "Text",
	    "Data",
	    "AnyPointer",
	    "AnyStruct",
	    "Capability",
	    "List"
	  ];
	  const LITERALS = [
	    "true",
	    "false"
	  ];
	  const CLASS_DEFINITION = {
	    variants: [
	      { match: [
	        /(struct|enum|interface)/,
	        /\s+/,
	        hljs.IDENT_RE
	      ] },
	      { match: [
	        /extends/,
	        /\s*\(/,
	        hljs.IDENT_RE,
	        /\s*\)/
	      ] }
	    ],
	    scope: {
	      1: "keyword",
	      3: "title.class"
	    }
	  };
	  return {
	    name: 'Cap’n Proto',
	    aliases: [ 'capnp' ],
	    keywords: {
	      keyword: KEYWORDS,
	      type: TYPES,
	      literal: LITERALS
	    },
	    contains: [
	      hljs.QUOTE_STRING_MODE,
	      hljs.NUMBER_MODE,
	      hljs.HASH_COMMENT_MODE,
	      {
	        className: 'meta',
	        begin: /@0x[\w\d]{16};/,
	        illegal: /\n/
	      },
	      {
	        className: 'symbol',
	        begin: /@\d+\b/
	      },
	      CLASS_DEFINITION
	    ]
	  };
	}

	capnproto_1 = capnproto;
	return capnproto_1;
}

/*
Language: Ceylon
Author: Lucas Werkmeister <mail@lucaswerkmeister.de>
Website: https://ceylon-lang.org
*/

var ceylon_1;
var hasRequiredCeylon;

function requireCeylon () {
	if (hasRequiredCeylon) return ceylon_1;
	hasRequiredCeylon = 1;
	/** @type LanguageFn */
	function ceylon(hljs) {
	  // 2.3. Identifiers and keywords
	  const KEYWORDS = [
	    "assembly",
	    "module",
	    "package",
	    "import",
	    "alias",
	    "class",
	    "interface",
	    "object",
	    "given",
	    "value",
	    "assign",
	    "void",
	    "function",
	    "new",
	    "of",
	    "extends",
	    "satisfies",
	    "abstracts",
	    "in",
	    "out",
	    "return",
	    "break",
	    "continue",
	    "throw",
	    "assert",
	    "dynamic",
	    "if",
	    "else",
	    "switch",
	    "case",
	    "for",
	    "while",
	    "try",
	    "catch",
	    "finally",
	    "then",
	    "let",
	    "this",
	    "outer",
	    "super",
	    "is",
	    "exists",
	    "nonempty"
	  ];
	  // 7.4.1 Declaration Modifiers
	  const DECLARATION_MODIFIERS = [
	    "shared",
	    "abstract",
	    "formal",
	    "default",
	    "actual",
	    "variable",
	    "late",
	    "native",
	    "deprecated",
	    "final",
	    "sealed",
	    "annotation",
	    "suppressWarnings",
	    "small"
	  ];
	  // 7.4.2 Documentation
	  const DOCUMENTATION = [
	    "doc",
	    "by",
	    "license",
	    "see",
	    "throws",
	    "tagged"
	  ];
	  const SUBST = {
	    className: 'subst',
	    excludeBegin: true,
	    excludeEnd: true,
	    begin: /``/,
	    end: /``/,
	    keywords: KEYWORDS,
	    relevance: 10
	  };
	  const EXPRESSIONS = [
	    {
	      // verbatim string
	      className: 'string',
	      begin: '"""',
	      end: '"""',
	      relevance: 10
	    },
	    {
	      // string literal or template
	      className: 'string',
	      begin: '"',
	      end: '"',
	      contains: [ SUBST ]
	    },
	    {
	      // character literal
	      className: 'string',
	      begin: "'",
	      end: "'"
	    },
	    {
	      // numeric literal
	      className: 'number',
	      begin: '#[0-9a-fA-F_]+|\\$[01_]+|[0-9_]+(?:\\.[0-9_](?:[eE][+-]?\\d+)?)?[kMGTPmunpf]?',
	      relevance: 0
	    }
	  ];
	  SUBST.contains = EXPRESSIONS;

	  return {
	    name: 'Ceylon',
	    keywords: {
	      keyword: KEYWORDS.concat(DECLARATION_MODIFIERS),
	      meta: DOCUMENTATION
	    },
	    illegal: '\\$[^01]|#[^0-9a-fA-F]',
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.COMMENT('/\\*', '\\*/', { contains: [ 'self' ] }),
	      {
	        // compiler annotation
	        className: 'meta',
	        begin: '@[a-z]\\w*(?::"[^"]*")?'
	      }
	    ].concat(EXPRESSIONS)
	  };
	}

	ceylon_1 = ceylon;
	return ceylon_1;
}

/*
Language: Clean
Author: Camil Staps <info@camilstaps.nl>
Category: functional
Website: http://clean.cs.ru.nl
*/

var clean_1;
var hasRequiredClean;

function requireClean () {
	if (hasRequiredClean) return clean_1;
	hasRequiredClean = 1;
	/** @type LanguageFn */
	function clean(hljs) {
	  const KEYWORDS = [
	    "if",
	    "let",
	    "in",
	    "with",
	    "where",
	    "case",
	    "of",
	    "class",
	    "instance",
	    "otherwise",
	    "implementation",
	    "definition",
	    "system",
	    "module",
	    "from",
	    "import",
	    "qualified",
	    "as",
	    "special",
	    "code",
	    "inline",
	    "foreign",
	    "export",
	    "ccall",
	    "stdcall",
	    "generic",
	    "derive",
	    "infix",
	    "infixl",
	    "infixr"
	  ];
	  return {
	    name: 'Clean',
	    aliases: [
	      'icl',
	      'dcl'
	    ],
	    keywords: {
	      keyword: KEYWORDS,
	      built_in:
	        'Int Real Char Bool',
	      literal:
	        'True False'
	    },
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_NUMBER_MODE,
	      { // relevance booster
	        begin: '->|<-[|:]?|#!?|>>=|\\{\\||\\|\\}|:==|=:|<>' }
	    ]
	  };
	}

	clean_1 = clean;
	return clean_1;
}

/*
Language: Clojure
Description: Clojure syntax (based on lisp.js)
Author: mfornos
Website: https://clojure.org
Category: lisp
*/

var clojure_1;
var hasRequiredClojure;

function requireClojure () {
	if (hasRequiredClojure) return clojure_1;
	hasRequiredClojure = 1;
	/** @type LanguageFn */
	function clojure(hljs) {
	  const SYMBOLSTART = 'a-zA-Z_\\-!.?+*=<>&\'';
	  const SYMBOL_RE = '[#]?[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:$#]*';
	  const globals = 'def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord';
	  const keywords = {
	    $pattern: SYMBOL_RE,
	    built_in:
	      // Clojure keywords
	      globals + ' '
	      + 'cond apply if-not if-let if not not= =|0 <|0 >|0 <=|0 >=|0 ==|0 +|0 /|0 *|0 -|0 rem '
	      + 'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? '
	      + 'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? '
	      + 'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? '
	      + 'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . '
	      + 'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last '
	      + 'drop-while while intern condp case reduced cycle split-at split-with repeat replicate '
	      + 'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext '
	      + 'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends '
	      + 'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler '
	      + 'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter '
	      + 'monitor-exit macroexpand macroexpand-1 for dosync and or '
	      + 'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert '
	      + 'peek pop doto proxy first rest cons cast coll last butlast '
	      + 'sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import '
	      + 'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! '
	      + 'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger '
	      + 'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline '
	      + 'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking '
	      + 'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! '
	      + 'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! '
	      + 'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty '
	      + 'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list '
	      + 'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer '
	      + 'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate '
	      + 'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta '
	      + 'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'
	  };

	  const SYMBOL = {
	    begin: SYMBOL_RE,
	    relevance: 0
	  };
	  const NUMBER = {
	    scope: 'number',
	    relevance: 0,
	    variants: [
	      { match: /[-+]?0[xX][0-9a-fA-F]+N?/ }, // hexadecimal                 // 0x2a
	      { match: /[-+]?0[0-7]+N?/ }, // octal                       // 052
	      { match: /[-+]?[1-9][0-9]?[rR][0-9a-zA-Z]+N?/ }, // variable radix from 2 to 36 // 2r101010, 8r52, 36r16
	      { match: /[-+]?[0-9]+\/[0-9]+N?/ }, // ratio                       // 1/2
	      { match: /[-+]?[0-9]+((\.[0-9]*([eE][+-]?[0-9]+)?M?)|([eE][+-]?[0-9]+M?|M))/ }, // float        // 0.42 4.2E-1M 42E1 42M
	      { match: /[-+]?([1-9][0-9]*|0)N?/ }, // int (don't match leading 0) // 42 42N
	    ]
	  };
	  const CHARACTER = {
	    scope: 'character',
	    variants: [
	      { match: /\\o[0-3]?[0-7]{1,2}/ }, // Unicode Octal 0 - 377
	      { match: /\\u[0-9a-fA-F]{4}/ }, // Unicode Hex 0000 - FFFF
	      { match: /\\(newline|space|tab|formfeed|backspace|return)/ }, // special characters
	      {
	        match: /\\\S/,
	        relevance: 0
	      } // any non-whitespace char
	    ]
	  };
	  const REGEX = {
	    scope: 'regex',
	    begin: /#"/,
	    end: /"/,
	    contains: [ hljs.BACKSLASH_ESCAPE ]
	  };
	  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
	  const COMMA = {
	    scope: 'punctuation',
	    match: /,/,
	    relevance: 0
	  };
	  const COMMENT = hljs.COMMENT(
	    ';',
	    '$',
	    { relevance: 0 }
	  );
	  const LITERAL = {
	    className: 'literal',
	    begin: /\b(true|false|nil)\b/
	  };
	  const COLLECTION = {
	    begin: "\\[|(#::?" + SYMBOL_RE + ")?\\{",
	    end: '[\\]\\}]',
	    relevance: 0
	  };
	  const KEY = {
	    className: 'symbol',
	    begin: '[:]{1,2}' + SYMBOL_RE
	  };
	  const LIST = {
	    begin: '\\(',
	    end: '\\)'
	  };
	  const BODY = {
	    endsWithParent: true,
	    relevance: 0
	  };
	  const NAME = {
	    keywords: keywords,
	    className: 'name',
	    begin: SYMBOL_RE,
	    relevance: 0,
	    starts: BODY
	  };
	  const DEFAULT_CONTAINS = [
	    COMMA,
	    LIST,
	    CHARACTER,
	    REGEX,
	    STRING,
	    COMMENT,
	    KEY,
	    COLLECTION,
	    NUMBER,
	    LITERAL,
	    SYMBOL
	  ];

	  const GLOBAL = {
	    beginKeywords: globals,
	    keywords: {
	      $pattern: SYMBOL_RE,
	      keyword: globals
	    },
	    end: '(\\[|#|\\d|"|:|\\{|\\)|\\(|$)',
	    contains: [
	      {
	        className: 'title',
	        begin: SYMBOL_RE,
	        relevance: 0,
	        excludeEnd: true,
	        // we can only have a single title
	        endsParent: true
	      }
	    ].concat(DEFAULT_CONTAINS)
	  };

	  LIST.contains = [
	    GLOBAL,
	    NAME,
	    BODY
	  ];
	  BODY.contains = DEFAULT_CONTAINS;
	  COLLECTION.contains = DEFAULT_CONTAINS;

	  return {
	    name: 'Clojure',
	    aliases: [
	      'clj',
	      'edn'
	    ],
	    illegal: /\S/,
	    contains: [
	      COMMA,
	      LIST,
	      CHARACTER,
	      REGEX,
	      STRING,
	      COMMENT,
	      KEY,
	      COLLECTION,
	      NUMBER,
	      LITERAL
	    ]
	  };
	}

	clojure_1 = clojure;
	return clojure_1;
}

/*
Language: Clojure REPL
Description: Clojure REPL sessions
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Requires: clojure.js
Website: https://clojure.org
Category: lisp
*/

var clojureRepl_1;
var hasRequiredClojureRepl;

function requireClojureRepl () {
	if (hasRequiredClojureRepl) return clojureRepl_1;
	hasRequiredClojureRepl = 1;
	/** @type LanguageFn */
	function clojureRepl(hljs) {
	  return {
	    name: 'Clojure REPL',
	    contains: [
	      {
	        className: 'meta.prompt',
	        begin: /^([\w.-]+|\s*#_)?=>/,
	        starts: {
	          end: /$/,
	          subLanguage: 'clojure'
	        }
	      }
	    ]
	  };
	}

	clojureRepl_1 = clojureRepl;
	return clojureRepl_1;
}

/*
Language: CMake
Description: CMake is an open-source cross-platform system for build automation.
Author: Igor Kalnitsky <igor@kalnitsky.org>
Website: https://cmake.org
*/

var cmake_1;
var hasRequiredCmake;

function requireCmake () {
	if (hasRequiredCmake) return cmake_1;
	hasRequiredCmake = 1;
	/** @type LanguageFn */
	function cmake(hljs) {
	  return {
	    name: 'CMake',
	    aliases: [ 'cmake.in' ],
	    case_insensitive: true,
	    keywords: { keyword:
	        // scripting commands
	        'break cmake_host_system_information cmake_minimum_required cmake_parse_arguments '
	        + 'cmake_policy configure_file continue elseif else endforeach endfunction endif endmacro '
	        + 'endwhile execute_process file find_file find_library find_package find_path '
	        + 'find_program foreach function get_cmake_property get_directory_property '
	        + 'get_filename_component get_property if include include_guard list macro '
	        + 'mark_as_advanced math message option return separate_arguments '
	        + 'set_directory_properties set_property set site_name string unset variable_watch while '
	        // project commands
	        + 'add_compile_definitions add_compile_options add_custom_command add_custom_target '
	        + 'add_definitions add_dependencies add_executable add_library add_link_options '
	        + 'add_subdirectory add_test aux_source_directory build_command create_test_sourcelist '
	        + 'define_property enable_language enable_testing export fltk_wrap_ui '
	        + 'get_source_file_property get_target_property get_test_property include_directories '
	        + 'include_external_msproject include_regular_expression install link_directories '
	        + 'link_libraries load_cache project qt_wrap_cpp qt_wrap_ui remove_definitions '
	        + 'set_source_files_properties set_target_properties set_tests_properties source_group '
	        + 'target_compile_definitions target_compile_features target_compile_options '
	        + 'target_include_directories target_link_directories target_link_libraries '
	        + 'target_link_options target_sources try_compile try_run '
	        // CTest commands
	        + 'ctest_build ctest_configure ctest_coverage ctest_empty_binary_directory ctest_memcheck '
	        + 'ctest_read_custom_files ctest_run_script ctest_sleep ctest_start ctest_submit '
	        + 'ctest_test ctest_update ctest_upload '
	        // deprecated commands
	        + 'build_name exec_program export_library_dependencies install_files install_programs '
	        + 'install_targets load_command make_directory output_required_files remove '
	        + 'subdir_depends subdirs use_mangled_mesa utility_source variable_requires write_file '
	        + 'qt5_use_modules qt5_use_package qt5_wrap_cpp '
	        // core keywords
	        + 'on off true false and or not command policy target test exists is_newer_than '
	        + 'is_directory is_symlink is_absolute matches less greater equal less_equal '
	        + 'greater_equal strless strgreater strequal strless_equal strgreater_equal version_less '
	        + 'version_greater version_equal version_less_equal version_greater_equal in_list defined' },
	    contains: [
	      {
	        className: 'variable',
	        begin: /\$\{/,
	        end: /\}/
	      },
	      hljs.COMMENT(/#\[\[/, /]]/),
	      hljs.HASH_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.NUMBER_MODE
	    ]
	  };
	}

	cmake_1 = cmake;
	return cmake_1;
}

var coffeescript_1;
var hasRequiredCoffeescript;

function requireCoffeescript () {
	if (hasRequiredCoffeescript) return coffeescript_1;
	hasRequiredCoffeescript = 1;
	const KEYWORDS = [
	  "as", // for exports
	  "in",
	  "of",
	  "if",
	  "for",
	  "while",
	  "finally",
	  "var",
	  "new",
	  "function",
	  "do",
	  "return",
	  "void",
	  "else",
	  "break",
	  "catch",
	  "instanceof",
	  "with",
	  "throw",
	  "case",
	  "default",
	  "try",
	  "switch",
	  "continue",
	  "typeof",
	  "delete",
	  "let",
	  "yield",
	  "const",
	  "class",
	  // JS handles these with a special rule
	  // "get",
	  // "set",
	  "debugger",
	  "async",
	  "await",
	  "static",
	  "import",
	  "from",
	  "export",
	  "extends"
	];
	const LITERALS = [
	  "true",
	  "false",
	  "null",
	  "undefined",
	  "NaN",
	  "Infinity"
	];

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
	const TYPES = [
	  // Fundamental objects
	  "Object",
	  "Function",
	  "Boolean",
	  "Symbol",
	  // numbers and dates
	  "Math",
	  "Date",
	  "Number",
	  "BigInt",
	  // text
	  "String",
	  "RegExp",
	  // Indexed collections
	  "Array",
	  "Float32Array",
	  "Float64Array",
	  "Int8Array",
	  "Uint8Array",
	  "Uint8ClampedArray",
	  "Int16Array",
	  "Int32Array",
	  "Uint16Array",
	  "Uint32Array",
	  "BigInt64Array",
	  "BigUint64Array",
	  // Keyed collections
	  "Set",
	  "Map",
	  "WeakSet",
	  "WeakMap",
	  // Structured data
	  "ArrayBuffer",
	  "SharedArrayBuffer",
	  "Atomics",
	  "DataView",
	  "JSON",
	  // Control abstraction objects
	  "Promise",
	  "Generator",
	  "GeneratorFunction",
	  "AsyncFunction",
	  // Reflection
	  "Reflect",
	  "Proxy",
	  // Internationalization
	  "Intl",
	  // WebAssembly
	  "WebAssembly"
	];

	const ERROR_TYPES = [
	  "Error",
	  "EvalError",
	  "InternalError",
	  "RangeError",
	  "ReferenceError",
	  "SyntaxError",
	  "TypeError",
	  "URIError"
	];

	const BUILT_IN_GLOBALS = [
	  "setInterval",
	  "setTimeout",
	  "clearInterval",
	  "clearTimeout",

	  "require",
	  "exports",

	  "eval",
	  "isFinite",
	  "isNaN",
	  "parseFloat",
	  "parseInt",
	  "decodeURI",
	  "decodeURIComponent",
	  "encodeURI",
	  "encodeURIComponent",
	  "escape",
	  "unescape"
	];

	const BUILT_INS = [].concat(
	  BUILT_IN_GLOBALS,
	  TYPES,
	  ERROR_TYPES
	);

	/*
	Language: CoffeeScript
	Author: Dmytrii Nagirniak <dnagir@gmail.com>
	Contributors: Oleg Efimov <efimovov@gmail.com>, Cédric Néhémie <cedric.nehemie@gmail.com>
	Description: CoffeeScript is a programming language that transcompiles to JavaScript. For info about language see http://coffeescript.org/
	Category: scripting
	Website: https://coffeescript.org
	*/


	/** @type LanguageFn */
	function coffeescript(hljs) {
	  const COFFEE_BUILT_INS = [
	    'npm',
	    'print'
	  ];
	  const COFFEE_LITERALS = [
	    'yes',
	    'no',
	    'on',
	    'off'
	  ];
	  const COFFEE_KEYWORDS = [
	    'then',
	    'unless',
	    'until',
	    'loop',
	    'by',
	    'when',
	    'and',
	    'or',
	    'is',
	    'isnt',
	    'not'
	  ];
	  const NOT_VALID_KEYWORDS = [
	    "var",
	    "const",
	    "let",
	    "function",
	    "static"
	  ];
	  const excluding = (list) =>
	    (kw) => !list.includes(kw);
	  const KEYWORDS$1 = {
	    keyword: KEYWORDS.concat(COFFEE_KEYWORDS).filter(excluding(NOT_VALID_KEYWORDS)),
	    literal: LITERALS.concat(COFFEE_LITERALS),
	    built_in: BUILT_INS.concat(COFFEE_BUILT_INS)
	  };
	  const JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
	  const SUBST = {
	    className: 'subst',
	    begin: /#\{/,
	    end: /\}/,
	    keywords: KEYWORDS$1
	  };
	  const EXPRESSIONS = [
	    hljs.BINARY_NUMBER_MODE,
	    hljs.inherit(hljs.C_NUMBER_MODE, { starts: {
	      end: '(\\s*/)?',
	      relevance: 0
	    } }), // a number tries to eat the following slash to prevent treating it as a regexp
	    {
	      className: 'string',
	      variants: [
	        {
	          begin: /'''/,
	          end: /'''/,
	          contains: [ hljs.BACKSLASH_ESCAPE ]
	        },
	        {
	          begin: /'/,
	          end: /'/,
	          contains: [ hljs.BACKSLASH_ESCAPE ]
	        },
	        {
	          begin: /"""/,
	          end: /"""/,
	          contains: [
	            hljs.BACKSLASH_ESCAPE,
	            SUBST
	          ]
	        },
	        {
	          begin: /"/,
	          end: /"/,
	          contains: [
	            hljs.BACKSLASH_ESCAPE,
	            SUBST
	          ]
	        }
	      ]
	    },
	    {
	      className: 'regexp',
	      variants: [
	        {
	          begin: '///',
	          end: '///',
	          contains: [
	            SUBST,
	            hljs.HASH_COMMENT_MODE
	          ]
	        },
	        {
	          begin: '//[gim]{0,3}(?=\\W)',
	          relevance: 0
	        },
	        {
	          // regex can't start with space to parse x / 2 / 3 as two divisions
	          // regex can't start with *, and it supports an "illegal" in the main mode
	          begin: /\/(?![ *]).*?(?![\\]).\/[gim]{0,3}(?=\W)/ }
	      ]
	    },
	    { begin: '@' + JS_IDENT_RE // relevance booster
	    },
	    {
	      subLanguage: 'javascript',
	      excludeBegin: true,
	      excludeEnd: true,
	      variants: [
	        {
	          begin: '```',
	          end: '```'
	        },
	        {
	          begin: '`',
	          end: '`'
	        }
	      ]
	    }
	  ];
	  SUBST.contains = EXPRESSIONS;

	  const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
	  const POSSIBLE_PARAMS_RE = '(\\(.*\\)\\s*)?\\B[-=]>';
	  const PARAMS = {
	    className: 'params',
	    begin: '\\([^\\(]',
	    returnBegin: true,
	    /* We need another contained nameless mode to not have every nested
	    pair of parens to be called "params" */
	    contains: [
	      {
	        begin: /\(/,
	        end: /\)/,
	        keywords: KEYWORDS$1,
	        contains: [ 'self' ].concat(EXPRESSIONS)
	      }
	    ]
	  };

	  const CLASS_DEFINITION = {
	    variants: [
	      { match: [
	        /class\s+/,
	        JS_IDENT_RE,
	        /\s+extends\s+/,
	        JS_IDENT_RE
	      ] },
	      { match: [
	        /class\s+/,
	        JS_IDENT_RE
	      ] }
	    ],
	    scope: {
	      2: "title.class",
	      4: "title.class.inherited"
	    },
	    keywords: KEYWORDS$1
	  };

	  return {
	    name: 'CoffeeScript',
	    aliases: [
	      'coffee',
	      'cson',
	      'iced'
	    ],
	    keywords: KEYWORDS$1,
	    illegal: /\/\*/,
	    contains: [
	      ...EXPRESSIONS,
	      hljs.COMMENT('###', '###'),
	      hljs.HASH_COMMENT_MODE,
	      {
	        className: 'function',
	        begin: '^\\s*' + JS_IDENT_RE + '\\s*=\\s*' + POSSIBLE_PARAMS_RE,
	        end: '[-=]>',
	        returnBegin: true,
	        contains: [
	          TITLE,
	          PARAMS
	        ]
	      },
	      {
	        // anonymous function start
	        begin: /[:\(,=]\s*/,
	        relevance: 0,
	        contains: [
	          {
	            className: 'function',
	            begin: POSSIBLE_PARAMS_RE,
	            end: '[-=]>',
	            returnBegin: true,
	            contains: [ PARAMS ]
	          }
	        ]
	      },
	      CLASS_DEFINITION,
	      {
	        begin: JS_IDENT_RE + ':',
	        end: ':',
	        returnBegin: true,
	        returnEnd: true,
	        relevance: 0
	      }
	    ]
	  };
	}

	coffeescript_1 = coffeescript;
	return coffeescript_1;
}

/*
Language: Coq
Author: Stephan Boyer <stephan@stephanboyer.com>
Category: functional
Website: https://coq.inria.fr
*/

var coq_1;
var hasRequiredCoq;

function requireCoq () {
	if (hasRequiredCoq) return coq_1;
	hasRequiredCoq = 1;
	/** @type LanguageFn */
	function coq(hljs) {
	  const KEYWORDS = [
	    "_|0",
	    "as",
	    "at",
	    "cofix",
	    "else",
	    "end",
	    "exists",
	    "exists2",
	    "fix",
	    "for",
	    "forall",
	    "fun",
	    "if",
	    "IF",
	    "in",
	    "let",
	    "match",
	    "mod",
	    "Prop",
	    "return",
	    "Set",
	    "then",
	    "Type",
	    "using",
	    "where",
	    "with",
	    "Abort",
	    "About",
	    "Add",
	    "Admit",
	    "Admitted",
	    "All",
	    "Arguments",
	    "Assumptions",
	    "Axiom",
	    "Back",
	    "BackTo",
	    "Backtrack",
	    "Bind",
	    "Blacklist",
	    "Canonical",
	    "Cd",
	    "Check",
	    "Class",
	    "Classes",
	    "Close",
	    "Coercion",
	    "Coercions",
	    "CoFixpoint",
	    "CoInductive",
	    "Collection",
	    "Combined",
	    "Compute",
	    "Conjecture",
	    "Conjectures",
	    "Constant",
	    "constr",
	    "Constraint",
	    "Constructors",
	    "Context",
	    "Corollary",
	    "CreateHintDb",
	    "Cut",
	    "Declare",
	    "Defined",
	    "Definition",
	    "Delimit",
	    "Dependencies",
	    "Dependent",
	    "Derive",
	    "Drop",
	    "eauto",
	    "End",
	    "Equality",
	    "Eval",
	    "Example",
	    "Existential",
	    "Existentials",
	    "Existing",
	    "Export",
	    "exporting",
	    "Extern",
	    "Extract",
	    "Extraction",
	    "Fact",
	    "Field",
	    "Fields",
	    "File",
	    "Fixpoint",
	    "Focus",
	    "for",
	    "From",
	    "Function",
	    "Functional",
	    "Generalizable",
	    "Global",
	    "Goal",
	    "Grab",
	    "Grammar",
	    "Graph",
	    "Guarded",
	    "Heap",
	    "Hint",
	    "HintDb",
	    "Hints",
	    "Hypotheses",
	    "Hypothesis",
	    "ident",
	    "Identity",
	    "If",
	    "Immediate",
	    "Implicit",
	    "Import",
	    "Include",
	    "Inductive",
	    "Infix",
	    "Info",
	    "Initial",
	    "Inline",
	    "Inspect",
	    "Instance",
	    "Instances",
	    "Intro",
	    "Intros",
	    "Inversion",
	    "Inversion_clear",
	    "Language",
	    "Left",
	    "Lemma",
	    "Let",
	    "Libraries",
	    "Library",
	    "Load",
	    "LoadPath",
	    "Local",
	    "Locate",
	    "Ltac",
	    "ML",
	    "Mode",
	    "Module",
	    "Modules",
	    "Monomorphic",
	    "Morphism",
	    "Next",
	    "NoInline",
	    "Notation",
	    "Obligation",
	    "Obligations",
	    "Opaque",
	    "Open",
	    "Optimize",
	    "Options",
	    "Parameter",
	    "Parameters",
	    "Parametric",
	    "Path",
	    "Paths",
	    "pattern",
	    "Polymorphic",
	    "Preterm",
	    "Print",
	    "Printing",
	    "Program",
	    "Projections",
	    "Proof",
	    "Proposition",
	    "Pwd",
	    "Qed",
	    "Quit",
	    "Rec",
	    "Record",
	    "Recursive",
	    "Redirect",
	    "Relation",
	    "Remark",
	    "Remove",
	    "Require",
	    "Reserved",
	    "Reset",
	    "Resolve",
	    "Restart",
	    "Rewrite",
	    "Right",
	    "Ring",
	    "Rings",
	    "Save",
	    "Scheme",
	    "Scope",
	    "Scopes",
	    "Script",
	    "Search",
	    "SearchAbout",
	    "SearchHead",
	    "SearchPattern",
	    "SearchRewrite",
	    "Section",
	    "Separate",
	    "Set",
	    "Setoid",
	    "Show",
	    "Solve",
	    "Sorted",
	    "Step",
	    "Strategies",
	    "Strategy",
	    "Structure",
	    "SubClass",
	    "Table",
	    "Tables",
	    "Tactic",
	    "Term",
	    "Test",
	    "Theorem",
	    "Time",
	    "Timeout",
	    "Transparent",
	    "Type",
	    "Typeclasses",
	    "Types",
	    "Undelimit",
	    "Undo",
	    "Unfocus",
	    "Unfocused",
	    "Unfold",
	    "Universe",
	    "Universes",
	    "Unset",
	    "Unshelve",
	    "using",
	    "Variable",
	    "Variables",
	    "Variant",
	    "Verbose",
	    "Visibility",
	    "where",
	    "with"
	  ];
	  const BUILT_INS = [
	    "abstract",
	    "absurd",
	    "admit",
	    "after",
	    "apply",
	    "as",
	    "assert",
	    "assumption",
	    "at",
	    "auto",
	    "autorewrite",
	    "autounfold",
	    "before",
	    "bottom",
	    "btauto",
	    "by",
	    "case",
	    "case_eq",
	    "cbn",
	    "cbv",
	    "change",
	    "classical_left",
	    "classical_right",
	    "clear",
	    "clearbody",
	    "cofix",
	    "compare",
	    "compute",
	    "congruence",
	    "constr_eq",
	    "constructor",
	    "contradict",
	    "contradiction",
	    "cut",
	    "cutrewrite",
	    "cycle",
	    "decide",
	    "decompose",
	    "dependent",
	    "destruct",
	    "destruction",
	    "dintuition",
	    "discriminate",
	    "discrR",
	    "do",
	    "double",
	    "dtauto",
	    "eapply",
	    "eassumption",
	    "eauto",
	    "ecase",
	    "econstructor",
	    "edestruct",
	    "ediscriminate",
	    "eelim",
	    "eexact",
	    "eexists",
	    "einduction",
	    "einjection",
	    "eleft",
	    "elim",
	    "elimtype",
	    "enough",
	    "equality",
	    "erewrite",
	    "eright",
	    "esimplify_eq",
	    "esplit",
	    "evar",
	    "exact",
	    "exactly_once",
	    "exfalso",
	    "exists",
	    "f_equal",
	    "fail",
	    "field",
	    "field_simplify",
	    "field_simplify_eq",
	    "first",
	    "firstorder",
	    "fix",
	    "fold",
	    "fourier",
	    "functional",
	    "generalize",
	    "generalizing",
	    "gfail",
	    "give_up",
	    "has_evar",
	    "hnf",
	    "idtac",
	    "in",
	    "induction",
	    "injection",
	    "instantiate",
	    "intro",
	    "intro_pattern",
	    "intros",
	    "intuition",
	    "inversion",
	    "inversion_clear",
	    "is_evar",
	    "is_var",
	    "lapply",
	    "lazy",
	    "left",
	    "lia",
	    "lra",
	    "move",
	    "native_compute",
	    "nia",
	    "nsatz",
	    "omega",
	    "once",
	    "pattern",
	    "pose",
	    "progress",
	    "proof",
	    "psatz",
	    "quote",
	    "record",
	    "red",
	    "refine",
	    "reflexivity",
	    "remember",
	    "rename",
	    "repeat",
	    "replace",
	    "revert",
	    "revgoals",
	    "rewrite",
	    "rewrite_strat",
	    "right",
	    "ring",
	    "ring_simplify",
	    "rtauto",
	    "set",
	    "setoid_reflexivity",
	    "setoid_replace",
	    "setoid_rewrite",
	    "setoid_symmetry",
	    "setoid_transitivity",
	    "shelve",
	    "shelve_unifiable",
	    "simpl",
	    "simple",
	    "simplify_eq",
	    "solve",
	    "specialize",
	    "split",
	    "split_Rabs",
	    "split_Rmult",
	    "stepl",
	    "stepr",
	    "subst",
	    "sum",
	    "swap",
	    "symmetry",
	    "tactic",
	    "tauto",
	    "time",
	    "timeout",
	    "top",
	    "transitivity",
	    "trivial",
	    "try",
	    "tryif",
	    "unfold",
	    "unify",
	    "until",
	    "using",
	    "vm_compute",
	    "with"
	  ];
	  return {
	    name: 'Coq',
	    keywords: {
	      keyword: KEYWORDS,
	      built_in: BUILT_INS
	    },
	    contains: [
	      hljs.QUOTE_STRING_MODE,
	      hljs.COMMENT('\\(\\*', '\\*\\)'),
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'type',
	        excludeBegin: true,
	        begin: '\\|\\s*',
	        end: '\\w+'
	      },
	      { // relevance booster
	        begin: /[-=]>/ }
	    ]
	  };
	}

	coq_1 = coq;
	return coq_1;
}

/*
Language: Caché Object Script
Author: Nikita Savchenko <zitros.lab@gmail.com>
Category: enterprise, scripting
Website: https://cedocs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls
*/

var cos_1;
var hasRequiredCos;

function requireCos () {
	if (hasRequiredCos) return cos_1;
	hasRequiredCos = 1;
	/** @type LanguageFn */
	function cos(hljs) {
	  const STRINGS = {
	    className: 'string',
	    variants: [
	      {
	        begin: '"',
	        end: '"',
	        contains: [
	          { // escaped
	            begin: "\"\"",
	            relevance: 0
	          }
	        ]
	      }
	    ]
	  };

	  const NUMBERS = {
	    className: "number",
	    begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)",
	    relevance: 0
	  };

	  const COS_KEYWORDS =
	    'property parameter class classmethod clientmethod extends as break '
	    + 'catch close continue do d|0 else elseif for goto halt hang h|0 if job '
	    + 'j|0 kill k|0 lock l|0 merge new open quit q|0 read r|0 return set s|0 '
	    + 'tcommit throw trollback try tstart use view while write w|0 xecute x|0 '
	    + 'zkill znspace zn ztrap zwrite zw zzdump zzwrite print zbreak zinsert '
	    + 'zload zprint zremove zsave zzprint mv mvcall mvcrt mvdim mvprint zquit '
	    + 'zsync ascii';

	  // registered function - no need in them due to all functions are highlighted,
	  // but I'll just leave this here.

	  // "$bit", "$bitcount",
	  // "$bitfind", "$bitlogic", "$case", "$char", "$classmethod", "$classname",
	  // "$compile", "$data", "$decimal", "$double", "$extract", "$factor",
	  // "$find", "$fnumber", "$get", "$increment", "$inumber", "$isobject",
	  // "$isvaliddouble", "$isvalidnum", "$justify", "$length", "$list",
	  // "$listbuild", "$listdata", "$listfind", "$listfromstring", "$listget",
	  // "$listlength", "$listnext", "$listsame", "$listtostring", "$listvalid",
	  // "$locate", "$match", "$method", "$name", "$nconvert", "$next",
	  // "$normalize", "$now", "$number", "$order", "$parameter", "$piece",
	  // "$prefetchoff", "$prefetchon", "$property", "$qlength", "$qsubscript",
	  // "$query", "$random", "$replace", "$reverse", "$sconvert", "$select",
	  // "$sortbegin", "$sortend", "$stack", "$text", "$translate", "$view",
	  // "$wascii", "$wchar", "$wextract", "$wfind", "$wiswide", "$wlength",
	  // "$wreverse", "$xecute", "$zabs", "$zarccos", "$zarcsin", "$zarctan",
	  // "$zcos", "$zcot", "$zcsc", "$zdate", "$zdateh", "$zdatetime",
	  // "$zdatetimeh", "$zexp", "$zhex", "$zln", "$zlog", "$zpower", "$zsec",
	  // "$zsin", "$zsqr", "$ztan", "$ztime", "$ztimeh", "$zboolean",
	  // "$zconvert", "$zcrc", "$zcyc", "$zdascii", "$zdchar", "$zf",
	  // "$ziswide", "$zlascii", "$zlchar", "$zname", "$zposition", "$zqascii",
	  // "$zqchar", "$zsearch", "$zseek", "$zstrip", "$zwascii", "$zwchar",
	  // "$zwidth", "$zwpack", "$zwbpack", "$zwunpack", "$zwbunpack", "$zzenkaku",
	  // "$change", "$mv", "$mvat", "$mvfmt", "$mvfmts", "$mviconv",
	  // "$mviconvs", "$mvinmat", "$mvlover", "$mvoconv", "$mvoconvs", "$mvraise",
	  // "$mvtrans", "$mvv", "$mvname", "$zbitand", "$zbitcount", "$zbitfind",
	  // "$zbitget", "$zbitlen", "$zbitnot", "$zbitor", "$zbitset", "$zbitstr",
	  // "$zbitxor", "$zincrement", "$znext", "$zorder", "$zprevious", "$zsort",
	  // "device", "$ecode", "$estack", "$etrap", "$halt", "$horolog",
	  // "$io", "$job", "$key", "$namespace", "$principal", "$quit", "$roles",
	  // "$storage", "$system", "$test", "$this", "$tlevel", "$username",
	  // "$x", "$y", "$za", "$zb", "$zchild", "$zeof", "$zeos", "$zerror",
	  // "$zhorolog", "$zio", "$zjob", "$zmode", "$znspace", "$zparent", "$zpi",
	  // "$zpos", "$zreference", "$zstorage", "$ztimestamp", "$ztimezone",
	  // "$ztrap", "$zversion"

	  return {
	    name: 'Caché Object Script',
	    case_insensitive: true,
	    aliases: [ "cls" ],
	    keywords: COS_KEYWORDS,
	    contains: [
	      NUMBERS,
	      STRINGS,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: "comment",
	        begin: /;/,
	        end: "$",
	        relevance: 0
	      },
	      { // Functions and user-defined functions: write $ztime(60*60*3), $$myFunc(10), $$^Val(1)
	        className: "built_in",
	        begin: /(?:\$\$?|\.\.)\^?[a-zA-Z]+/
	      },
	      { // Macro command: quit $$$OK
	        className: "built_in",
	        begin: /\$\$\$[a-zA-Z]+/
	      },
	      { // Special (global) variables: write %request.Content; Built-in classes: %Library.Integer
	        className: "built_in",
	        begin: /%[a-z]+(?:\.[a-z]+)*/
	      },
	      { // Global variable: set ^globalName = 12 write ^globalName
	        className: "symbol",
	        begin: /\^%?[a-zA-Z][\w]*/
	      },
	      { // Some control constructions: do ##class(Package.ClassName).Method(), ##super()
	        className: "keyword",
	        begin: /##class|##super|#define|#dim/
	      },
	      // sub-languages: are not fully supported by hljs by 11/15/2015
	      // left for the future implementation.
	      {
	        begin: /&sql\(/,
	        end: /\)/,
	        excludeBegin: true,
	        excludeEnd: true,
	        subLanguage: "sql"
	      },
	      {
	        begin: /&(js|jscript|javascript)</,
	        end: />/,
	        excludeBegin: true,
	        excludeEnd: true,
	        subLanguage: "javascript"
	      },
	      {
	        // this brakes first and last tag, but this is the only way to embed a valid html
	        begin: /&html<\s*</,
	        end: />\s*>/,
	        subLanguage: "xml"
	      }
	    ]
	  };
	}

	cos_1 = cos;
	return cos_1;
}

/*
Language: C++
Category: common, system
Website: https://isocpp.org
*/

var cpp_1;
var hasRequiredCpp;

function requireCpp () {
	if (hasRequiredCpp) return cpp_1;
	hasRequiredCpp = 1;
	/** @type LanguageFn */
	function cpp(hljs) {
	  const regex = hljs.regex;
	  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does
	  // not include such support nor can we be sure all the grammars depending
	  // on it would desire this behavior
	  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', { contains: [ { begin: /\\\n/ } ] });
	  const DECLTYPE_AUTO_RE = 'decltype\\(auto\\)';
	  const NAMESPACE_RE = '[a-zA-Z_]\\w*::';
	  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';
	  const FUNCTION_TYPE_RE = '(?!struct)('
	    + DECLTYPE_AUTO_RE + '|'
	    + regex.optional(NAMESPACE_RE)
	    + '[a-zA-Z_]\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE)
	  + ')';

	  const CPP_PRIMITIVE_TYPES = {
	    className: 'type',
	    begin: '\\b[a-z\\d_]*_t\\b'
	  };

	  // https://en.cppreference.com/w/cpp/language/escape
	  // \\ \x \xFF \u2837 \u00323747 \374
	  const CHARACTER_ESCAPES = '\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)';
	  const STRINGS = {
	    className: 'string',
	    variants: [
	      {
	        begin: '(u8?|U|L)?"',
	        end: '"',
	        illegal: '\\n',
	        contains: [ hljs.BACKSLASH_ESCAPE ]
	      },
	      {
	        begin: '(u8?|U|L)?\'(' + CHARACTER_ESCAPES + '|.)',
	        end: '\'',
	        illegal: '.'
	      },
	      hljs.END_SAME_AS_BEGIN({
	        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
	        end: /\)([^()\\ ]{0,16})"/
	      })
	    ]
	  };

	  const NUMBERS = {
	    className: 'number',
	    variants: [
	      { begin: '\\b(0b[01\']+)' },
	      { begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)' },
	      { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
	    ],
	    relevance: 0
	  };

	  const PREPROCESSOR = {
	    className: 'meta',
	    begin: /#\s*[a-z]+\b/,
	    end: /$/,
	    keywords: { keyword:
	        'if else elif endif define undef warning error line '
	        + 'pragma _Pragma ifdef ifndef include' },
	    contains: [
	      {
	        begin: /\\\n/,
	        relevance: 0
	      },
	      hljs.inherit(STRINGS, { className: 'string' }),
	      {
	        className: 'string',
	        begin: /<.*?>/
	      },
	      C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE
	    ]
	  };

	  const TITLE_MODE = {
	    className: 'title',
	    begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,
	    relevance: 0
	  };

	  const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\s*\\(';

	  // https://en.cppreference.com/w/cpp/keyword
	  const RESERVED_KEYWORDS = [
	    'alignas',
	    'alignof',
	    'and',
	    'and_eq',
	    'asm',
	    'atomic_cancel',
	    'atomic_commit',
	    'atomic_noexcept',
	    'auto',
	    'bitand',
	    'bitor',
	    'break',
	    'case',
	    'catch',
	    'class',
	    'co_await',
	    'co_return',
	    'co_yield',
	    'compl',
	    'concept',
	    'const_cast|10',
	    'consteval',
	    'constexpr',
	    'constinit',
	    'continue',
	    'decltype',
	    'default',
	    'delete',
	    'do',
	    'dynamic_cast|10',
	    'else',
	    'enum',
	    'explicit',
	    'export',
	    'extern',
	    'false',
	    'final',
	    'for',
	    'friend',
	    'goto',
	    'if',
	    'import',
	    'inline',
	    'module',
	    'mutable',
	    'namespace',
	    'new',
	    'noexcept',
	    'not',
	    'not_eq',
	    'nullptr',
	    'operator',
	    'or',
	    'or_eq',
	    'override',
	    'private',
	    'protected',
	    'public',
	    'reflexpr',
	    'register',
	    'reinterpret_cast|10',
	    'requires',
	    'return',
	    'sizeof',
	    'static_assert',
	    'static_cast|10',
	    'struct',
	    'switch',
	    'synchronized',
	    'template',
	    'this',
	    'thread_local',
	    'throw',
	    'transaction_safe',
	    'transaction_safe_dynamic',
	    'true',
	    'try',
	    'typedef',
	    'typeid',
	    'typename',
	    'union',
	    'using',
	    'virtual',
	    'volatile',
	    'while',
	    'xor',
	    'xor_eq'
	  ];

	  // https://en.cppreference.com/w/cpp/keyword
	  const RESERVED_TYPES = [
	    'bool',
	    'char',
	    'char16_t',
	    'char32_t',
	    'char8_t',
	    'double',
	    'float',
	    'int',
	    'long',
	    'short',
	    'void',
	    'wchar_t',
	    'unsigned',
	    'signed',
	    'const',
	    'static'
	  ];

	  const TYPE_HINTS = [
	    'any',
	    'auto_ptr',
	    'barrier',
	    'binary_semaphore',
	    'bitset',
	    'complex',
	    'condition_variable',
	    'condition_variable_any',
	    'counting_semaphore',
	    'deque',
	    'false_type',
	    'future',
	    'imaginary',
	    'initializer_list',
	    'istringstream',
	    'jthread',
	    'latch',
	    'lock_guard',
	    'multimap',
	    'multiset',
	    'mutex',
	    'optional',
	    'ostringstream',
	    'packaged_task',
	    'pair',
	    'promise',
	    'priority_queue',
	    'queue',
	    'recursive_mutex',
	    'recursive_timed_mutex',
	    'scoped_lock',
	    'set',
	    'shared_future',
	    'shared_lock',
	    'shared_mutex',
	    'shared_timed_mutex',
	    'shared_ptr',
	    'stack',
	    'string_view',
	    'stringstream',
	    'timed_mutex',
	    'thread',
	    'true_type',
	    'tuple',
	    'unique_lock',
	    'unique_ptr',
	    'unordered_map',
	    'unordered_multimap',
	    'unordered_multiset',
	    'unordered_set',
	    'variant',
	    'vector',
	    'weak_ptr',
	    'wstring',
	    'wstring_view'
	  ];

	  const FUNCTION_HINTS = [
	    'abort',
	    'abs',
	    'acos',
	    'apply',
	    'as_const',
	    'asin',
	    'atan',
	    'atan2',
	    'calloc',
	    'ceil',
	    'cerr',
	    'cin',
	    'clog',
	    'cos',
	    'cosh',
	    'cout',
	    'declval',
	    'endl',
	    'exchange',
	    'exit',
	    'exp',
	    'fabs',
	    'floor',
	    'fmod',
	    'forward',
	    'fprintf',
	    'fputs',
	    'free',
	    'frexp',
	    'fscanf',
	    'future',
	    'invoke',
	    'isalnum',
	    'isalpha',
	    'iscntrl',
	    'isdigit',
	    'isgraph',
	    'islower',
	    'isprint',
	    'ispunct',
	    'isspace',
	    'isupper',
	    'isxdigit',
	    'labs',
	    'launder',
	    'ldexp',
	    'log',
	    'log10',
	    'make_pair',
	    'make_shared',
	    'make_shared_for_overwrite',
	    'make_tuple',
	    'make_unique',
	    'malloc',
	    'memchr',
	    'memcmp',
	    'memcpy',
	    'memset',
	    'modf',
	    'move',
	    'pow',
	    'printf',
	    'putchar',
	    'puts',
	    'realloc',
	    'scanf',
	    'sin',
	    'sinh',
	    'snprintf',
	    'sprintf',
	    'sqrt',
	    'sscanf',
	    'std',
	    'stderr',
	    'stdin',
	    'stdout',
	    'strcat',
	    'strchr',
	    'strcmp',
	    'strcpy',
	    'strcspn',
	    'strlen',
	    'strncat',
	    'strncmp',
	    'strncpy',
	    'strpbrk',
	    'strrchr',
	    'strspn',
	    'strstr',
	    'swap',
	    'tan',
	    'tanh',
	    'terminate',
	    'to_underlying',
	    'tolower',
	    'toupper',
	    'vfprintf',
	    'visit',
	    'vprintf',
	    'vsprintf'
	  ];

	  const LITERALS = [
	    'NULL',
	    'false',
	    'nullopt',
	    'nullptr',
	    'true'
	  ];

	  // https://en.cppreference.com/w/cpp/keyword
	  const BUILT_IN = [ '_Pragma' ];

	  const CPP_KEYWORDS = {
	    type: RESERVED_TYPES,
	    keyword: RESERVED_KEYWORDS,
	    literal: LITERALS,
	    built_in: BUILT_IN,
	    _type_hints: TYPE_HINTS
	  };

	  const FUNCTION_DISPATCH = {
	    className: 'function.dispatch',
	    relevance: 0,
	    keywords: {
	      // Only for relevance, not highlighting.
	      _hint: FUNCTION_HINTS },
	    begin: regex.concat(
	      /\b/,
	      /(?!decltype)/,
	      /(?!if)/,
	      /(?!for)/,
	      /(?!switch)/,
	      /(?!while)/,
	      hljs.IDENT_RE,
	      regex.lookahead(/(<[^<>]+>|)\s*\(/))
	  };

	  const EXPRESSION_CONTAINS = [
	    FUNCTION_DISPATCH,
	    PREPROCESSOR,
	    CPP_PRIMITIVE_TYPES,
	    C_LINE_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE,
	    NUMBERS,
	    STRINGS
	  ];

	  const EXPRESSION_CONTEXT = {
	    // This mode covers expression context where we can't expect a function
	    // definition and shouldn't highlight anything that looks like one:
	    // `return some()`, `else if()`, `(x*sum(1, 2))`
	    variants: [
	      {
	        begin: /=/,
	        end: /;/
	      },
	      {
	        begin: /\(/,
	        end: /\)/
	      },
	      {
	        beginKeywords: 'new throw return else',
	        end: /;/
	      }
	    ],
	    keywords: CPP_KEYWORDS,
	    contains: EXPRESSION_CONTAINS.concat([
	      {
	        begin: /\(/,
	        end: /\)/,
	        keywords: CPP_KEYWORDS,
	        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),
	        relevance: 0
	      }
	    ]),
	    relevance: 0
	  };

	  const FUNCTION_DECLARATION = {
	    className: 'function',
	    begin: '(' + FUNCTION_TYPE_RE + '[\\*&\\s]+)+' + FUNCTION_TITLE,
	    returnBegin: true,
	    end: /[{;=]/,
	    excludeEnd: true,
	    keywords: CPP_KEYWORDS,
	    illegal: /[^\w\s\*&:<>.]/,
	    contains: [
	      { // to prevent it from being confused as the function title
	        begin: DECLTYPE_AUTO_RE,
	        keywords: CPP_KEYWORDS,
	        relevance: 0
	      },
	      {
	        begin: FUNCTION_TITLE,
	        returnBegin: true,
	        contains: [ TITLE_MODE ],
	        relevance: 0
	      },
	      // needed because we do not have look-behind on the below rule
	      // to prevent it from grabbing the final : in a :: pair
	      {
	        begin: /::/,
	        relevance: 0
	      },
	      // initializers
	      {
	        begin: /:/,
	        endsWithParent: true,
	        contains: [
	          STRINGS,
	          NUMBERS
	        ]
	      },
	      // allow for multiple declarations, e.g.:
	      // extern void f(int), g(char);
	      {
	        relevance: 0,
	        match: /,/
	      },
	      {
	        className: 'params',
	        begin: /\(/,
	        end: /\)/,
	        keywords: CPP_KEYWORDS,
	        relevance: 0,
	        contains: [
	          C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE,
	          STRINGS,
	          NUMBERS,
	          CPP_PRIMITIVE_TYPES,
	          // Count matching parentheses.
	          {
	            begin: /\(/,
	            end: /\)/,
	            keywords: CPP_KEYWORDS,
	            relevance: 0,
	            contains: [
	              'self',
	              C_LINE_COMMENT_MODE,
	              hljs.C_BLOCK_COMMENT_MODE,
	              STRINGS,
	              NUMBERS,
	              CPP_PRIMITIVE_TYPES
	            ]
	          }
	        ]
	      },
	      CPP_PRIMITIVE_TYPES,
	      C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      PREPROCESSOR
	    ]
	  };

	  return {
	    name: 'C++',
	    aliases: [
	      'cc',
	      'c++',
	      'h++',
	      'hpp',
	      'hh',
	      'hxx',
	      'cxx'
	    ],
	    keywords: CPP_KEYWORDS,
	    illegal: '</',
	    classNameAliases: { 'function.dispatch': 'built_in' },
	    contains: [].concat(
	      EXPRESSION_CONTEXT,
	      FUNCTION_DECLARATION,
	      FUNCTION_DISPATCH,
	      EXPRESSION_CONTAINS,
	      [
	        PREPROCESSOR,
	        { // containers: ie, `vector <int> rooms (9);`
	          begin: '\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)',
	          end: '>',
	          keywords: CPP_KEYWORDS,
	          contains: [
	            'self',
	            CPP_PRIMITIVE_TYPES
	          ]
	        },
	        {
	          begin: hljs.IDENT_RE + '::',
	          keywords: CPP_KEYWORDS
	        },
	        {
	          match: [
	            // extra complexity to deal with `enum class` and `enum struct`
	            /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
	            /\s+/,
	            /\w+/
	          ],
	          className: {
	            1: 'keyword',
	            3: 'title.class'
	          }
	        }
	      ])
	  };
	}

	cpp_1 = cpp;
	return cpp_1;
}

/*
Language: crmsh
Author: Kristoffer Gronlund <kgronlund@suse.com>
Website: http://crmsh.github.io
Description: Syntax Highlighting for the crmsh DSL
Category: config
*/

var crmsh_1;
var hasRequiredCrmsh;

function requireCrmsh () {
	if (hasRequiredCrmsh) return crmsh_1;
	hasRequiredCrmsh = 1;
	/** @type LanguageFn */
	function crmsh(hljs) {
	  const RESOURCES = 'primitive rsc_template';
	  const COMMANDS = 'group clone ms master location colocation order fencing_topology '
	      + 'rsc_ticket acl_target acl_group user role '
	      + 'tag xml';
	  const PROPERTY_SETS = 'property rsc_defaults op_defaults';
	  const KEYWORDS = 'params meta operations op rule attributes utilization';
	  const OPERATORS = 'read write deny defined not_defined in_range date spec in '
	      + 'ref reference attribute type xpath version and or lt gt tag '
	      + 'lte gte eq ne \\';
	  const TYPES = 'number string';
	  const LITERALS = 'Master Started Slave Stopped start promote demote stop monitor true false';

	  return {
	    name: 'crmsh',
	    aliases: [
	      'crm',
	      'pcmk'
	    ],
	    case_insensitive: true,
	    keywords: {
	      keyword: KEYWORDS + ' ' + OPERATORS + ' ' + TYPES,
	      literal: LITERALS
	    },
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      {
	        beginKeywords: 'node',
	        starts: {
	          end: '\\s*([\\w_-]+:)?',
	          starts: {
	            className: 'title',
	            end: '\\s*[\\$\\w_][\\w_-]*'
	          }
	        }
	      },
	      {
	        beginKeywords: RESOURCES,
	        starts: {
	          className: 'title',
	          end: '\\s*[\\$\\w_][\\w_-]*',
	          starts: { end: '\\s*@?[\\w_][\\w_\\.:-]*' }
	        }
	      },
	      {
	        begin: '\\b(' + COMMANDS.split(' ').join('|') + ')\\s+',
	        keywords: COMMANDS,
	        starts: {
	          className: 'title',
	          end: '[\\$\\w_][\\w_-]*'
	        }
	      },
	      {
	        beginKeywords: PROPERTY_SETS,
	        starts: {
	          className: 'title',
	          end: '\\s*([\\w_-]+:)?'
	        }
	      },
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'meta',
	        begin: '(ocf|systemd|service|lsb):[\\w_:-]+',
	        relevance: 0
	      },
	      {
	        className: 'number',
	        begin: '\\b\\d+(\\.\\d+)?(ms|s|h|m)?',
	        relevance: 0
	      },
	      {
	        className: 'literal',
	        begin: '[-]?(infinity|inf)',
	        relevance: 0
	      },
	      {
	        className: 'attr',
	        begin: /([A-Za-z$_#][\w_-]+)=/,
	        relevance: 0
	      },
	      {
	        className: 'tag',
	        begin: '</?',
	        end: '/?>',
	        relevance: 0
	      }
	    ]
	  };
	}

	crmsh_1 = crmsh;
	return crmsh_1;
}

/*
Language: Crystal
Author: TSUYUSATO Kitsune <make.just.on@gmail.com>
Website: https://crystal-lang.org
*/

var crystal_1;
var hasRequiredCrystal;

function requireCrystal () {
	if (hasRequiredCrystal) return crystal_1;
	hasRequiredCrystal = 1;
	/** @type LanguageFn */
	function crystal(hljs) {
	  const INT_SUFFIX = '(_?[ui](8|16|32|64|128))?';
	  const FLOAT_SUFFIX = '(_?f(32|64))?';
	  const CRYSTAL_IDENT_RE = '[a-zA-Z_]\\w*[!?=]?';
	  const CRYSTAL_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|[=!]~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~|]|//|//=|&[-+*]=?|&\\*\\*|\\[\\][=?]?';
	  const CRYSTAL_PATH_RE = '[A-Za-z_]\\w*(::\\w+)*(\\?|!)?';
	  const CRYSTAL_KEYWORDS = {
	    $pattern: CRYSTAL_IDENT_RE,
	    keyword:
	      'abstract alias annotation as as? asm begin break case class def do else elsif end ensure enum extend for fun if '
	      + 'include instance_sizeof is_a? lib macro module next nil? of out pointerof private protected rescue responds_to? '
	      + 'return require select self sizeof struct super then type typeof union uninitialized unless until verbatim when while with yield '
	      + '__DIR__ __END_LINE__ __FILE__ __LINE__',
	    literal: 'false nil true'
	  };
	  const SUBST = {
	    className: 'subst',
	    begin: /#\{/,
	    end: /\}/,
	    keywords: CRYSTAL_KEYWORDS
	  };
	  // borrowed from Ruby
	  const VARIABLE = {
	    // negative-look forward attemps to prevent false matches like:
	    // @ident@ or $ident$ that might indicate this is not ruby at all
	    className: "variable",
	    begin: '(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])' + `(?![A-Za-z])(?![@$?'])`
	  };
	  const EXPANSION = {
	    className: 'template-variable',
	    variants: [
	      {
	        begin: '\\{\\{',
	        end: '\\}\\}'
	      },
	      {
	        begin: '\\{%',
	        end: '%\\}'
	      }
	    ],
	    keywords: CRYSTAL_KEYWORDS
	  };

	  function recursiveParen(begin, end) {
	    const
	        contains = [
	          {
	            begin: begin,
	            end: end
	          }
	        ];
	    contains[0].contains = contains;
	    return contains;
	  }
	  const STRING = {
	    className: 'string',
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      SUBST
	    ],
	    variants: [
	      {
	        begin: /'/,
	        end: /'/
	      },
	      {
	        begin: /"/,
	        end: /"/
	      },
	      {
	        begin: /`/,
	        end: /`/
	      },
	      {
	        begin: '%[Qwi]?\\(',
	        end: '\\)',
	        contains: recursiveParen('\\(', '\\)')
	      },
	      {
	        begin: '%[Qwi]?\\[',
	        end: '\\]',
	        contains: recursiveParen('\\[', '\\]')
	      },
	      {
	        begin: '%[Qwi]?\\{',
	        end: /\}/,
	        contains: recursiveParen(/\{/, /\}/)
	      },
	      {
	        begin: '%[Qwi]?<',
	        end: '>',
	        contains: recursiveParen('<', '>')
	      },
	      {
	        begin: '%[Qwi]?\\|',
	        end: '\\|'
	      },
	      {
	        begin: /<<-\w+$/,
	        end: /^\s*\w+$/
	      }
	    ],
	    relevance: 0
	  };
	  const Q_STRING = {
	    className: 'string',
	    variants: [
	      {
	        begin: '%q\\(',
	        end: '\\)',
	        contains: recursiveParen('\\(', '\\)')
	      },
	      {
	        begin: '%q\\[',
	        end: '\\]',
	        contains: recursiveParen('\\[', '\\]')
	      },
	      {
	        begin: '%q\\{',
	        end: /\}/,
	        contains: recursiveParen(/\{/, /\}/)
	      },
	      {
	        begin: '%q<',
	        end: '>',
	        contains: recursiveParen('<', '>')
	      },
	      {
	        begin: '%q\\|',
	        end: '\\|'
	      },
	      {
	        begin: /<<-'\w+'$/,
	        end: /^\s*\w+$/
	      }
	    ],
	    relevance: 0
	  };
	  const REGEXP = {
	    begin: '(?!%\\})(' + hljs.RE_STARTERS_RE + '|\\n|\\b(case|if|select|unless|until|when|while)\\b)\\s*',
	    keywords: 'case if select unless until when while',
	    contains: [
	      {
	        className: 'regexp',
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          SUBST
	        ],
	        variants: [
	          {
	            begin: '//[a-z]*',
	            relevance: 0
	          },
	          {
	            begin: '/(?!\\/)',
	            end: '/[a-z]*'
	          }
	        ]
	      }
	    ],
	    relevance: 0
	  };
	  const REGEXP2 = {
	    className: 'regexp',
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      SUBST
	    ],
	    variants: [
	      {
	        begin: '%r\\(',
	        end: '\\)',
	        contains: recursiveParen('\\(', '\\)')
	      },
	      {
	        begin: '%r\\[',
	        end: '\\]',
	        contains: recursiveParen('\\[', '\\]')
	      },
	      {
	        begin: '%r\\{',
	        end: /\}/,
	        contains: recursiveParen(/\{/, /\}/)
	      },
	      {
	        begin: '%r<',
	        end: '>',
	        contains: recursiveParen('<', '>')
	      },
	      {
	        begin: '%r\\|',
	        end: '\\|'
	      }
	    ],
	    relevance: 0
	  };
	  const ATTRIBUTE = {
	    className: 'meta',
	    begin: '@\\[',
	    end: '\\]',
	    contains: [ hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'string' }) ]
	  };
	  const CRYSTAL_DEFAULT_CONTAINS = [
	    EXPANSION,
	    STRING,
	    Q_STRING,
	    REGEXP2,
	    REGEXP,
	    ATTRIBUTE,
	    VARIABLE,
	    hljs.HASH_COMMENT_MODE,
	    {
	      className: 'class',
	      beginKeywords: 'class module struct',
	      end: '$|;',
	      illegal: /=/,
	      contains: [
	        hljs.HASH_COMMENT_MODE,
	        hljs.inherit(hljs.TITLE_MODE, { begin: CRYSTAL_PATH_RE }),
	        { // relevance booster for inheritance
	          begin: '<' }
	      ]
	    },
	    {
	      className: 'class',
	      beginKeywords: 'lib enum union',
	      end: '$|;',
	      illegal: /=/,
	      contains: [
	        hljs.HASH_COMMENT_MODE,
	        hljs.inherit(hljs.TITLE_MODE, { begin: CRYSTAL_PATH_RE })
	      ]
	    },
	    {
	      beginKeywords: 'annotation',
	      end: '$|;',
	      illegal: /=/,
	      contains: [
	        hljs.HASH_COMMENT_MODE,
	        hljs.inherit(hljs.TITLE_MODE, { begin: CRYSTAL_PATH_RE })
	      ],
	      relevance: 2
	    },
	    {
	      className: 'function',
	      beginKeywords: 'def',
	      end: /\B\b/,
	      contains: [
	        hljs.inherit(hljs.TITLE_MODE, {
	          begin: CRYSTAL_METHOD_RE,
	          endsParent: true
	        })
	      ]
	    },
	    {
	      className: 'function',
	      beginKeywords: 'fun macro',
	      end: /\B\b/,
	      contains: [
	        hljs.inherit(hljs.TITLE_MODE, {
	          begin: CRYSTAL_METHOD_RE,
	          endsParent: true
	        })
	      ],
	      relevance: 2
	    },
	    {
	      className: 'symbol',
	      begin: hljs.UNDERSCORE_IDENT_RE + '(!|\\?)?:',
	      relevance: 0
	    },
	    {
	      className: 'symbol',
	      begin: ':',
	      contains: [
	        STRING,
	        { begin: CRYSTAL_METHOD_RE }
	      ],
	      relevance: 0
	    },
	    {
	      className: 'number',
	      variants: [
	        { begin: '\\b0b([01_]+)' + INT_SUFFIX },
	        { begin: '\\b0o([0-7_]+)' + INT_SUFFIX },
	        { begin: '\\b0x([A-Fa-f0-9_]+)' + INT_SUFFIX },
	        { begin: '\\b([1-9][0-9_]*[0-9]|[0-9])(\\.[0-9][0-9_]*)?([eE]_?[-+]?[0-9_]*)?' + FLOAT_SUFFIX + '(?!_)' },
	        { begin: '\\b([1-9][0-9_]*|0)' + INT_SUFFIX }
	      ],
	      relevance: 0
	    }
	  ];
	  SUBST.contains = CRYSTAL_DEFAULT_CONTAINS;
	  EXPANSION.contains = CRYSTAL_DEFAULT_CONTAINS.slice(1); // without EXPANSION

	  return {
	    name: 'Crystal',
	    aliases: [ 'cr' ],
	    keywords: CRYSTAL_KEYWORDS,
	    contains: CRYSTAL_DEFAULT_CONTAINS
	  };
	}

	crystal_1 = crystal;
	return crystal_1;
}

/*
Language: C#
Author: Jason Diamond <jason@diamond.name>
Contributor: Nicolas LLOBERA <nllobera@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, David Pine <david.pine@microsoft.com>
Website: https://docs.microsoft.com/dotnet/csharp/
Category: common
*/

var csharp_1;
var hasRequiredCsharp;

function requireCsharp () {
	if (hasRequiredCsharp) return csharp_1;
	hasRequiredCsharp = 1;
	/** @type LanguageFn */
	function csharp(hljs) {
	  const BUILT_IN_KEYWORDS = [
	    'bool',
	    'byte',
	    'char',
	    'decimal',
	    'delegate',
	    'double',
	    'dynamic',
	    'enum',
	    'float',
	    'int',
	    'long',
	    'nint',
	    'nuint',
	    'object',
	    'sbyte',
	    'short',
	    'string',
	    'ulong',
	    'uint',
	    'ushort'
	  ];
	  const FUNCTION_MODIFIERS = [
	    'public',
	    'private',
	    'protected',
	    'static',
	    'internal',
	    'protected',
	    'abstract',
	    'async',
	    'extern',
	    'override',
	    'unsafe',
	    'virtual',
	    'new',
	    'sealed',
	    'partial'
	  ];
	  const LITERAL_KEYWORDS = [
	    'default',
	    'false',
	    'null',
	    'true'
	  ];
	  const NORMAL_KEYWORDS = [
	    'abstract',
	    'as',
	    'base',
	    'break',
	    'case',
	    'catch',
	    'class',
	    'const',
	    'continue',
	    'do',
	    'else',
	    'event',
	    'explicit',
	    'extern',
	    'finally',
	    'fixed',
	    'for',
	    'foreach',
	    'goto',
	    'if',
	    'implicit',
	    'in',
	    'interface',
	    'internal',
	    'is',
	    'lock',
	    'namespace',
	    'new',
	    'operator',
	    'out',
	    'override',
	    'params',
	    'private',
	    'protected',
	    'public',
	    'readonly',
	    'record',
	    'ref',
	    'return',
	    'scoped',
	    'sealed',
	    'sizeof',
	    'stackalloc',
	    'static',
	    'struct',
	    'switch',
	    'this',
	    'throw',
	    'try',
	    'typeof',
	    'unchecked',
	    'unsafe',
	    'using',
	    'virtual',
	    'void',
	    'volatile',
	    'while'
	  ];
	  const CONTEXTUAL_KEYWORDS = [
	    'add',
	    'alias',
	    'and',
	    'ascending',
	    'async',
	    'await',
	    'by',
	    'descending',
	    'equals',
	    'from',
	    'get',
	    'global',
	    'group',
	    'init',
	    'into',
	    'join',
	    'let',
	    'nameof',
	    'not',
	    'notnull',
	    'on',
	    'or',
	    'orderby',
	    'partial',
	    'remove',
	    'select',
	    'set',
	    'unmanaged',
	    'value|0',
	    'var',
	    'when',
	    'where',
	    'with',
	    'yield'
	  ];

	  const KEYWORDS = {
	    keyword: NORMAL_KEYWORDS.concat(CONTEXTUAL_KEYWORDS),
	    built_in: BUILT_IN_KEYWORDS,
	    literal: LITERAL_KEYWORDS
	  };
	  const TITLE_MODE = hljs.inherit(hljs.TITLE_MODE, { begin: '[a-zA-Z](\\.?\\w)*' });
	  const NUMBERS = {
	    className: 'number',
	    variants: [
	      { begin: '\\b(0b[01\']+)' },
	      { begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)(u|U|l|L|ul|UL|f|F|b|B)' },
	      { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
	    ],
	    relevance: 0
	  };
	  const VERBATIM_STRING = {
	    className: 'string',
	    begin: '@"',
	    end: '"',
	    contains: [ { begin: '""' } ]
	  };
	  const VERBATIM_STRING_NO_LF = hljs.inherit(VERBATIM_STRING, { illegal: /\n/ });
	  const SUBST = {
	    className: 'subst',
	    begin: /\{/,
	    end: /\}/,
	    keywords: KEYWORDS
	  };
	  const SUBST_NO_LF = hljs.inherit(SUBST, { illegal: /\n/ });
	  const INTERPOLATED_STRING = {
	    className: 'string',
	    begin: /\$"/,
	    end: '"',
	    illegal: /\n/,
	    contains: [
	      { begin: /\{\{/ },
	      { begin: /\}\}/ },
	      hljs.BACKSLASH_ESCAPE,
	      SUBST_NO_LF
	    ]
	  };
	  const INTERPOLATED_VERBATIM_STRING = {
	    className: 'string',
	    begin: /\$@"/,
	    end: '"',
	    contains: [
	      { begin: /\{\{/ },
	      { begin: /\}\}/ },
	      { begin: '""' },
	      SUBST
	    ]
	  };
	  const INTERPOLATED_VERBATIM_STRING_NO_LF = hljs.inherit(INTERPOLATED_VERBATIM_STRING, {
	    illegal: /\n/,
	    contains: [
	      { begin: /\{\{/ },
	      { begin: /\}\}/ },
	      { begin: '""' },
	      SUBST_NO_LF
	    ]
	  });
	  SUBST.contains = [
	    INTERPOLATED_VERBATIM_STRING,
	    INTERPOLATED_STRING,
	    VERBATIM_STRING,
	    hljs.APOS_STRING_MODE,
	    hljs.QUOTE_STRING_MODE,
	    NUMBERS,
	    hljs.C_BLOCK_COMMENT_MODE
	  ];
	  SUBST_NO_LF.contains = [
	    INTERPOLATED_VERBATIM_STRING_NO_LF,
	    INTERPOLATED_STRING,
	    VERBATIM_STRING_NO_LF,
	    hljs.APOS_STRING_MODE,
	    hljs.QUOTE_STRING_MODE,
	    NUMBERS,
	    hljs.inherit(hljs.C_BLOCK_COMMENT_MODE, { illegal: /\n/ })
	  ];
	  const STRING = { variants: [
	    INTERPOLATED_VERBATIM_STRING,
	    INTERPOLATED_STRING,
	    VERBATIM_STRING,
	    hljs.APOS_STRING_MODE,
	    hljs.QUOTE_STRING_MODE
	  ] };

	  const GENERIC_MODIFIER = {
	    begin: "<",
	    end: ">",
	    contains: [
	      { beginKeywords: "in out" },
	      TITLE_MODE
	    ]
	  };
	  const TYPE_IDENT_RE = hljs.IDENT_RE + '(<' + hljs.IDENT_RE + '(\\s*,\\s*' + hljs.IDENT_RE + ')*>)?(\\[\\])?';
	  const AT_IDENTIFIER = {
	    // prevents expressions like `@class` from incorrect flagging
	    // `class` as a keyword
	    begin: "@" + hljs.IDENT_RE,
	    relevance: 0
	  };

	  return {
	    name: 'C#',
	    aliases: [
	      'cs',
	      'c#'
	    ],
	    keywords: KEYWORDS,
	    illegal: /::/,
	    contains: [
	      hljs.COMMENT(
	        '///',
	        '$',
	        {
	          returnBegin: true,
	          contains: [
	            {
	              className: 'doctag',
	              variants: [
	                {
	                  begin: '///',
	                  relevance: 0
	                },
	                { begin: '<!--|-->' },
	                {
	                  begin: '</?',
	                  end: '>'
	                }
	              ]
	            }
	          ]
	        }
	      ),
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'meta',
	        begin: '#',
	        end: '$',
	        keywords: { keyword: 'if else elif endif define undef warning error line region endregion pragma checksum' }
	      },
	      STRING,
	      NUMBERS,
	      {
	        beginKeywords: 'class interface',
	        relevance: 0,
	        end: /[{;=]/,
	        illegal: /[^\s:,]/,
	        contains: [
	          { beginKeywords: "where class" },
	          TITLE_MODE,
	          GENERIC_MODIFIER,
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      },
	      {
	        beginKeywords: 'namespace',
	        relevance: 0,
	        end: /[{;=]/,
	        illegal: /[^\s:]/,
	        contains: [
	          TITLE_MODE,
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      },
	      {
	        beginKeywords: 'record',
	        relevance: 0,
	        end: /[{;=]/,
	        illegal: /[^\s:]/,
	        contains: [
	          TITLE_MODE,
	          GENERIC_MODIFIER,
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      },
	      {
	        // [Attributes("")]
	        className: 'meta',
	        begin: '^\\s*\\[(?=[\\w])',
	        excludeBegin: true,
	        end: '\\]',
	        excludeEnd: true,
	        contains: [
	          {
	            className: 'string',
	            begin: /"/,
	            end: /"/
	          }
	        ]
	      },
	      {
	        // Expression keywords prevent 'keyword Name(...)' from being
	        // recognized as a function definition
	        beginKeywords: 'new return throw await else',
	        relevance: 0
	      },
	      {
	        className: 'function',
	        begin: '(' + TYPE_IDENT_RE + '\\s+)+' + hljs.IDENT_RE + '\\s*(<[^=]+>\\s*)?\\(',
	        returnBegin: true,
	        end: /\s*[{;=]/,
	        excludeEnd: true,
	        keywords: KEYWORDS,
	        contains: [
	          // prevents these from being highlighted `title`
	          {
	            beginKeywords: FUNCTION_MODIFIERS.join(" "),
	            relevance: 0
	          },
	          {
	            begin: hljs.IDENT_RE + '\\s*(<[^=]+>\\s*)?\\(',
	            returnBegin: true,
	            contains: [
	              hljs.TITLE_MODE,
	              GENERIC_MODIFIER
	            ],
	            relevance: 0
	          },
	          { match: /\(\)/ },
	          {
	            className: 'params',
	            begin: /\(/,
	            end: /\)/,
	            excludeBegin: true,
	            excludeEnd: true,
	            keywords: KEYWORDS,
	            relevance: 0,
	            contains: [
	              STRING,
	              NUMBERS,
	              hljs.C_BLOCK_COMMENT_MODE
	            ]
	          },
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      },
	      AT_IDENTIFIER
	    ]
	  };
	}

	csharp_1 = csharp;
	return csharp_1;
}

/*
Language: CSP
Description: Content Security Policy definition highlighting
Author: Taras <oxdef@oxdef.info>
Website: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP

vim: ts=2 sw=2 st=2
*/

var csp_1;
var hasRequiredCsp;

function requireCsp () {
	if (hasRequiredCsp) return csp_1;
	hasRequiredCsp = 1;
	/** @type LanguageFn */
	function csp(hljs) {
	  const KEYWORDS = [
	    "base-uri",
	    "child-src",
	    "connect-src",
	    "default-src",
	    "font-src",
	    "form-action",
	    "frame-ancestors",
	    "frame-src",
	    "img-src",
	    "manifest-src",
	    "media-src",
	    "object-src",
	    "plugin-types",
	    "report-uri",
	    "sandbox",
	    "script-src",
	    "style-src",
	    "trusted-types",
	    "unsafe-hashes",
	    "worker-src"
	  ];
	  return {
	    name: 'CSP',
	    case_insensitive: false,
	    keywords: {
	      $pattern: '[a-zA-Z][a-zA-Z0-9_-]*',
	      keyword: KEYWORDS
	    },
	    contains: [
	      {
	        className: 'string',
	        begin: "'",
	        end: "'"
	      },
	      {
	        className: 'attribute',
	        begin: '^Content',
	        end: ':',
	        excludeEnd: true
	      }
	    ]
	  };
	}

	csp_1 = csp;
	return csp_1;
}

var css_1;
var hasRequiredCss;

function requireCss () {
	if (hasRequiredCss) return css_1;
	hasRequiredCss = 1;
	const MODES = (hljs) => {
	  return {
	    IMPORTANT: {
	      scope: 'meta',
	      begin: '!important'
	    },
	    BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
	    HEXCOLOR: {
	      scope: 'number',
	      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
	    },
	    FUNCTION_DISPATCH: {
	      className: "built_in",
	      begin: /[\w-]+(?=\()/
	    },
	    ATTRIBUTE_SELECTOR_MODE: {
	      scope: 'selector-attr',
	      begin: /\[/,
	      end: /\]/,
	      illegal: '$',
	      contains: [
	        hljs.APOS_STRING_MODE,
	        hljs.QUOTE_STRING_MODE
	      ]
	    },
	    CSS_NUMBER_MODE: {
	      scope: 'number',
	      begin: hljs.NUMBER_RE + '(' +
	        '%|em|ex|ch|rem' +
	        '|vw|vh|vmin|vmax' +
	        '|cm|mm|in|pt|pc|px' +
	        '|deg|grad|rad|turn' +
	        '|s|ms' +
	        '|Hz|kHz' +
	        '|dpi|dpcm|dppx' +
	        ')?',
	      relevance: 0
	    },
	    CSS_VARIABLE: {
	      className: "attr",
	      begin: /--[A-Za-z_][A-Za-z0-9_-]*/
	    }
	  };
	};

	const TAGS = [
	  'a',
	  'abbr',
	  'address',
	  'article',
	  'aside',
	  'audio',
	  'b',
	  'blockquote',
	  'body',
	  'button',
	  'canvas',
	  'caption',
	  'cite',
	  'code',
	  'dd',
	  'del',
	  'details',
	  'dfn',
	  'div',
	  'dl',
	  'dt',
	  'em',
	  'fieldset',
	  'figcaption',
	  'figure',
	  'footer',
	  'form',
	  'h1',
	  'h2',
	  'h3',
	  'h4',
	  'h5',
	  'h6',
	  'header',
	  'hgroup',
	  'html',
	  'i',
	  'iframe',
	  'img',
	  'input',
	  'ins',
	  'kbd',
	  'label',
	  'legend',
	  'li',
	  'main',
	  'mark',
	  'menu',
	  'nav',
	  'object',
	  'ol',
	  'p',
	  'q',
	  'quote',
	  'samp',
	  'section',
	  'span',
	  'strong',
	  'summary',
	  'sup',
	  'table',
	  'tbody',
	  'td',
	  'textarea',
	  'tfoot',
	  'th',
	  'thead',
	  'time',
	  'tr',
	  'ul',
	  'var',
	  'video'
	];

	const MEDIA_FEATURES = [
	  'any-hover',
	  'any-pointer',
	  'aspect-ratio',
	  'color',
	  'color-gamut',
	  'color-index',
	  'device-aspect-ratio',
	  'device-height',
	  'device-width',
	  'display-mode',
	  'forced-colors',
	  'grid',
	  'height',
	  'hover',
	  'inverted-colors',
	  'monochrome',
	  'orientation',
	  'overflow-block',
	  'overflow-inline',
	  'pointer',
	  'prefers-color-scheme',
	  'prefers-contrast',
	  'prefers-reduced-motion',
	  'prefers-reduced-transparency',
	  'resolution',
	  'scan',
	  'scripting',
	  'update',
	  'width',
	  // TODO: find a better solution?
	  'min-width',
	  'max-width',
	  'min-height',
	  'max-height'
	];

	// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
	const PSEUDO_CLASSES = [
	  'active',
	  'any-link',
	  'blank',
	  'checked',
	  'current',
	  'default',
	  'defined',
	  'dir', // dir()
	  'disabled',
	  'drop',
	  'empty',
	  'enabled',
	  'first',
	  'first-child',
	  'first-of-type',
	  'fullscreen',
	  'future',
	  'focus',
	  'focus-visible',
	  'focus-within',
	  'has', // has()
	  'host', // host or host()
	  'host-context', // host-context()
	  'hover',
	  'indeterminate',
	  'in-range',
	  'invalid',
	  'is', // is()
	  'lang', // lang()
	  'last-child',
	  'last-of-type',
	  'left',
	  'link',
	  'local-link',
	  'not', // not()
	  'nth-child', // nth-child()
	  'nth-col', // nth-col()
	  'nth-last-child', // nth-last-child()
	  'nth-last-col', // nth-last-col()
	  'nth-last-of-type', //nth-last-of-type()
	  'nth-of-type', //nth-of-type()
	  'only-child',
	  'only-of-type',
	  'optional',
	  'out-of-range',
	  'past',
	  'placeholder-shown',
	  'read-only',
	  'read-write',
	  'required',
	  'right',
	  'root',
	  'scope',
	  'target',
	  'target-within',
	  'user-invalid',
	  'valid',
	  'visited',
	  'where' // where()
	];

	// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
	const PSEUDO_ELEMENTS = [
	  'after',
	  'backdrop',
	  'before',
	  'cue',
	  'cue-region',
	  'first-letter',
	  'first-line',
	  'grammar-error',
	  'marker',
	  'part',
	  'placeholder',
	  'selection',
	  'slotted',
	  'spelling-error'
	];

	const ATTRIBUTES = [
	  'align-content',
	  'align-items',
	  'align-self',
	  'all',
	  'animation',
	  'animation-delay',
	  'animation-direction',
	  'animation-duration',
	  'animation-fill-mode',
	  'animation-iteration-count',
	  'animation-name',
	  'animation-play-state',
	  'animation-timing-function',
	  'backface-visibility',
	  'background',
	  'background-attachment',
	  'background-blend-mode',
	  'background-clip',
	  'background-color',
	  'background-image',
	  'background-origin',
	  'background-position',
	  'background-repeat',
	  'background-size',
	  'block-size',
	  'border',
	  'border-block',
	  'border-block-color',
	  'border-block-end',
	  'border-block-end-color',
	  'border-block-end-style',
	  'border-block-end-width',
	  'border-block-start',
	  'border-block-start-color',
	  'border-block-start-style',
	  'border-block-start-width',
	  'border-block-style',
	  'border-block-width',
	  'border-bottom',
	  'border-bottom-color',
	  'border-bottom-left-radius',
	  'border-bottom-right-radius',
	  'border-bottom-style',
	  'border-bottom-width',
	  'border-collapse',
	  'border-color',
	  'border-image',
	  'border-image-outset',
	  'border-image-repeat',
	  'border-image-slice',
	  'border-image-source',
	  'border-image-width',
	  'border-inline',
	  'border-inline-color',
	  'border-inline-end',
	  'border-inline-end-color',
	  'border-inline-end-style',
	  'border-inline-end-width',
	  'border-inline-start',
	  'border-inline-start-color',
	  'border-inline-start-style',
	  'border-inline-start-width',
	  'border-inline-style',
	  'border-inline-width',
	  'border-left',
	  'border-left-color',
	  'border-left-style',
	  'border-left-width',
	  'border-radius',
	  'border-right',
	  'border-right-color',
	  'border-right-style',
	  'border-right-width',
	  'border-spacing',
	  'border-style',
	  'border-top',
	  'border-top-color',
	  'border-top-left-radius',
	  'border-top-right-radius',
	  'border-top-style',
	  'border-top-width',
	  'border-width',
	  'bottom',
	  'box-decoration-break',
	  'box-shadow',
	  'box-sizing',
	  'break-after',
	  'break-before',
	  'break-inside',
	  'caption-side',
	  'caret-color',
	  'clear',
	  'clip',
	  'clip-path',
	  'clip-rule',
	  'color',
	  'column-count',
	  'column-fill',
	  'column-gap',
	  'column-rule',
	  'column-rule-color',
	  'column-rule-style',
	  'column-rule-width',
	  'column-span',
	  'column-width',
	  'columns',
	  'contain',
	  'content',
	  'content-visibility',
	  'counter-increment',
	  'counter-reset',
	  'cue',
	  'cue-after',
	  'cue-before',
	  'cursor',
	  'direction',
	  'display',
	  'empty-cells',
	  'filter',
	  'flex',
	  'flex-basis',
	  'flex-direction',
	  'flex-flow',
	  'flex-grow',
	  'flex-shrink',
	  'flex-wrap',
	  'float',
	  'flow',
	  'font',
	  'font-display',
	  'font-family',
	  'font-feature-settings',
	  'font-kerning',
	  'font-language-override',
	  'font-size',
	  'font-size-adjust',
	  'font-smoothing',
	  'font-stretch',
	  'font-style',
	  'font-synthesis',
	  'font-variant',
	  'font-variant-caps',
	  'font-variant-east-asian',
	  'font-variant-ligatures',
	  'font-variant-numeric',
	  'font-variant-position',
	  'font-variation-settings',
	  'font-weight',
	  'gap',
	  'glyph-orientation-vertical',
	  'grid',
	  'grid-area',
	  'grid-auto-columns',
	  'grid-auto-flow',
	  'grid-auto-rows',
	  'grid-column',
	  'grid-column-end',
	  'grid-column-start',
	  'grid-gap',
	  'grid-row',
	  'grid-row-end',
	  'grid-row-start',
	  'grid-template',
	  'grid-template-areas',
	  'grid-template-columns',
	  'grid-template-rows',
	  'hanging-punctuation',
	  'height',
	  'hyphens',
	  'icon',
	  'image-orientation',
	  'image-rendering',
	  'image-resolution',
	  'ime-mode',
	  'inline-size',
	  'isolation',
	  'justify-content',
	  'left',
	  'letter-spacing',
	  'line-break',
	  'line-height',
	  'list-style',
	  'list-style-image',
	  'list-style-position',
	  'list-style-type',
	  'margin',
	  'margin-block',
	  'margin-block-end',
	  'margin-block-start',
	  'margin-bottom',
	  'margin-inline',
	  'margin-inline-end',
	  'margin-inline-start',
	  'margin-left',
	  'margin-right',
	  'margin-top',
	  'marks',
	  'mask',
	  'mask-border',
	  'mask-border-mode',
	  'mask-border-outset',
	  'mask-border-repeat',
	  'mask-border-slice',
	  'mask-border-source',
	  'mask-border-width',
	  'mask-clip',
	  'mask-composite',
	  'mask-image',
	  'mask-mode',
	  'mask-origin',
	  'mask-position',
	  'mask-repeat',
	  'mask-size',
	  'mask-type',
	  'max-block-size',
	  'max-height',
	  'max-inline-size',
	  'max-width',
	  'min-block-size',
	  'min-height',
	  'min-inline-size',
	  'min-width',
	  'mix-blend-mode',
	  'nav-down',
	  'nav-index',
	  'nav-left',
	  'nav-right',
	  'nav-up',
	  'none',
	  'normal',
	  'object-fit',
	  'object-position',
	  'opacity',
	  'order',
	  'orphans',
	  'outline',
	  'outline-color',
	  'outline-offset',
	  'outline-style',
	  'outline-width',
	  'overflow',
	  'overflow-wrap',
	  'overflow-x',
	  'overflow-y',
	  'padding',
	  'padding-block',
	  'padding-block-end',
	  'padding-block-start',
	  'padding-bottom',
	  'padding-inline',
	  'padding-inline-end',
	  'padding-inline-start',
	  'padding-left',
	  'padding-right',
	  'padding-top',
	  'page-break-after',
	  'page-break-before',
	  'page-break-inside',
	  'pause',
	  'pause-after',
	  'pause-before',
	  'perspective',
	  'perspective-origin',
	  'pointer-events',
	  'position',
	  'quotes',
	  'resize',
	  'rest',
	  'rest-after',
	  'rest-before',
	  'right',
	  'row-gap',
	  'scroll-margin',
	  'scroll-margin-block',
	  'scroll-margin-block-end',
	  'scroll-margin-block-start',
	  'scroll-margin-bottom',
	  'scroll-margin-inline',
	  'scroll-margin-inline-end',
	  'scroll-margin-inline-start',
	  'scroll-margin-left',
	  'scroll-margin-right',
	  'scroll-margin-top',
	  'scroll-padding',
	  'scroll-padding-block',
	  'scroll-padding-block-end',
	  'scroll-padding-block-start',
	  'scroll-padding-bottom',
	  'scroll-padding-inline',
	  'scroll-padding-inline-end',
	  'scroll-padding-inline-start',
	  'scroll-padding-left',
	  'scroll-padding-right',
	  'scroll-padding-top',
	  'scroll-snap-align',
	  'scroll-snap-stop',
	  'scroll-snap-type',
	  'scrollbar-color',
	  'scrollbar-gutter',
	  'scrollbar-width',
	  'shape-image-threshold',
	  'shape-margin',
	  'shape-outside',
	  'speak',
	  'speak-as',
	  'src', // @font-face
	  'tab-size',
	  'table-layout',
	  'text-align',
	  'text-align-all',
	  'text-align-last',
	  'text-combine-upright',
	  'text-decoration',
	  'text-decoration-color',
	  'text-decoration-line',
	  'text-decoration-style',
	  'text-emphasis',
	  'text-emphasis-color',
	  'text-emphasis-position',
	  'text-emphasis-style',
	  'text-indent',
	  'text-justify',
	  'text-orientation',
	  'text-overflow',
	  'text-rendering',
	  'text-shadow',
	  'text-transform',
	  'text-underline-position',
	  'top',
	  'transform',
	  'transform-box',
	  'transform-origin',
	  'transform-style',
	  'transition',
	  'transition-delay',
	  'transition-duration',
	  'transition-property',
	  'transition-timing-function',
	  'unicode-bidi',
	  'vertical-align',
	  'visibility',
	  'voice-balance',
	  'voice-duration',
	  'voice-family',
	  'voice-pitch',
	  'voice-range',
	  'voice-rate',
	  'voice-stress',
	  'voice-volume',
	  'white-space',
	  'widows',
	  'width',
	  'will-change',
	  'word-break',
	  'word-spacing',
	  'word-wrap',
	  'writing-mode',
	  'z-index'
	  // reverse makes sure longer attributes `font-weight` are matched fully
	  // instead of getting false positives on say `font`
	].reverse();

	/*
	Language: CSS
	Category: common, css, web
	Website: https://developer.mozilla.org/en-US/docs/Web/CSS
	*/


	/** @type LanguageFn */
	function css(hljs) {
	  const regex = hljs.regex;
	  const modes = MODES(hljs);
	  const VENDOR_PREFIX = { begin: /-(webkit|moz|ms|o)-(?=[a-z])/ };
	  const AT_MODIFIERS = "and or not only";
	  const AT_PROPERTY_RE = /@-?\w[\w]*(-\w+)*/; // @-webkit-keyframes
	  const IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
	  const STRINGS = [
	    hljs.APOS_STRING_MODE,
	    hljs.QUOTE_STRING_MODE
	  ];

	  return {
	    name: 'CSS',
	    case_insensitive: true,
	    illegal: /[=|'\$]/,
	    keywords: { keyframePosition: "from to" },
	    classNameAliases: {
	      // for visual continuity with `tag {}` and because we
	      // don't have a great class for this?
	      keyframePosition: "selector-tag" },
	    contains: [
	      modes.BLOCK_COMMENT,
	      VENDOR_PREFIX,
	      // to recognize keyframe 40% etc which are outside the scope of our
	      // attribute value mode
	      modes.CSS_NUMBER_MODE,
	      {
	        className: 'selector-id',
	        begin: /#[A-Za-z0-9_-]+/,
	        relevance: 0
	      },
	      {
	        className: 'selector-class',
	        begin: '\\.' + IDENT_RE,
	        relevance: 0
	      },
	      modes.ATTRIBUTE_SELECTOR_MODE,
	      {
	        className: 'selector-pseudo',
	        variants: [
	          { begin: ':(' + PSEUDO_CLASSES.join('|') + ')' },
	          { begin: ':(:)?(' + PSEUDO_ELEMENTS.join('|') + ')' }
	        ]
	      },
	      // we may actually need this (12/2020)
	      // { // pseudo-selector params
	      //   begin: /\(/,
	      //   end: /\)/,
	      //   contains: [ hljs.CSS_NUMBER_MODE ]
	      // },
	      modes.CSS_VARIABLE,
	      {
	        className: 'attribute',
	        begin: '\\b(' + ATTRIBUTES.join('|') + ')\\b'
	      },
	      // attribute values
	      {
	        begin: /:/,
	        end: /[;}{]/,
	        contains: [
	          modes.BLOCK_COMMENT,
	          modes.HEXCOLOR,
	          modes.IMPORTANT,
	          modes.CSS_NUMBER_MODE,
	          ...STRINGS,
	          // needed to highlight these as strings and to avoid issues with
	          // illegal characters that might be inside urls that would tigger the
	          // languages illegal stack
	          {
	            begin: /(url|data-uri)\(/,
	            end: /\)/,
	            relevance: 0, // from keywords
	            keywords: { built_in: "url data-uri" },
	            contains: [
	              ...STRINGS,
	              {
	                className: "string",
	                // any character other than `)` as in `url()` will be the start
	                // of a string, which ends with `)` (from the parent mode)
	                begin: /[^)]/,
	                endsWithParent: true,
	                excludeEnd: true
	              }
	            ]
	          },
	          modes.FUNCTION_DISPATCH
	        ]
	      },
	      {
	        begin: regex.lookahead(/@/),
	        end: '[{;]',
	        relevance: 0,
	        illegal: /:/, // break on Less variables @var: ...
	        contains: [
	          {
	            className: 'keyword',
	            begin: AT_PROPERTY_RE
	          },
	          {
	            begin: /\s/,
	            endsWithParent: true,
	            excludeEnd: true,
	            relevance: 0,
	            keywords: {
	              $pattern: /[a-z-]+/,
	              keyword: AT_MODIFIERS,
	              attribute: MEDIA_FEATURES.join(" ")
	            },
	            contains: [
	              {
	                begin: /[a-z-]+(?=:)/,
	                className: "attribute"
	              },
	              ...STRINGS,
	              modes.CSS_NUMBER_MODE
	            ]
	          }
	        ]
	      },
	      {
	        className: 'selector-tag',
	        begin: '\\b(' + TAGS.join('|') + ')\\b'
	      }
	    ]
	  };
	}

	css_1 = css;
	return css_1;
}

/*
Language: D
Author: Aleksandar Ruzicic <aleksandar@ruzicic.info>
Description: D is a language with C-like syntax and static typing. It pragmatically combines efficiency, control, and modeling power, with safety and programmer productivity.
Version: 1.0a
Website: https://dlang.org
Date: 2012-04-08
*/

var d_1;
var hasRequiredD;

function requireD () {
	if (hasRequiredD) return d_1;
	hasRequiredD = 1;
	/**
	 * Known issues:
	 *
	 * - invalid hex string literals will be recognized as a double quoted strings
	 *   but 'x' at the beginning of string will not be matched
	 *
	 * - delimited string literals are not checked for matching end delimiter
	 *   (not possible to do with js regexp)
	 *
	 * - content of token string is colored as a string (i.e. no keyword coloring inside a token string)
	 *   also, content of token string is not validated to contain only valid D tokens
	 *
	 * - special token sequence rule is not strictly following D grammar (anything following #line
	 *   up to the end of line is matched as special token sequence)
	 */

	/** @type LanguageFn */
	function d(hljs) {
	  /**
	   * Language keywords
	   *
	   * @type {Object}
	   */
	  const D_KEYWORDS = {
	    $pattern: hljs.UNDERSCORE_IDENT_RE,
	    keyword:
	      'abstract alias align asm assert auto body break byte case cast catch class '
	      + 'const continue debug default delete deprecated do else enum export extern final '
	      + 'finally for foreach foreach_reverse|10 goto if immutable import in inout int '
	      + 'interface invariant is lazy macro mixin module new nothrow out override package '
	      + 'pragma private protected public pure ref return scope shared static struct '
	      + 'super switch synchronized template this throw try typedef typeid typeof union '
	      + 'unittest version void volatile while with __FILE__ __LINE__ __gshared|10 '
	      + '__thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__',
	    built_in:
	      'bool cdouble cent cfloat char creal dchar delegate double dstring float function '
	      + 'idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar '
	      + 'wstring',
	    literal:
	      'false null true'
	  };

	  /**
	   * Number literal regexps
	   *
	   * @type {String}
	   */
	  const decimal_integer_re = '(0|[1-9][\\d_]*)';
	  const decimal_integer_nosus_re = '(0|[1-9][\\d_]*|\\d[\\d_]*|[\\d_]+?\\d)';
	  const binary_integer_re = '0[bB][01_]+';
	  const hexadecimal_digits_re = '([\\da-fA-F][\\da-fA-F_]*|_[\\da-fA-F][\\da-fA-F_]*)';
	  const hexadecimal_integer_re = '0[xX]' + hexadecimal_digits_re;

	  const decimal_exponent_re = '([eE][+-]?' + decimal_integer_nosus_re + ')';
	  const decimal_float_re = '(' + decimal_integer_nosus_re + '(\\.\\d*|' + decimal_exponent_re + ')|'
	                + '\\d+\\.' + decimal_integer_nosus_re + '|'
	                + '\\.' + decimal_integer_re + decimal_exponent_re + '?'
	              + ')';
	  const hexadecimal_float_re = '(0[xX]('
	                  + hexadecimal_digits_re + '\\.' + hexadecimal_digits_re + '|'
	                  + '\\.?' + hexadecimal_digits_re
	                 + ')[pP][+-]?' + decimal_integer_nosus_re + ')';

	  const integer_re = '('
	      + decimal_integer_re + '|'
	      + binary_integer_re + '|'
	       + hexadecimal_integer_re
	    + ')';

	  const float_re = '('
	      + hexadecimal_float_re + '|'
	      + decimal_float_re
	    + ')';

	  /**
	   * Escape sequence supported in D string and character literals
	   *
	   * @type {String}
	   */
	  const escape_sequence_re = '\\\\('
	              + '[\'"\\?\\\\abfnrtv]|' // common escapes
	              + 'u[\\dA-Fa-f]{4}|' // four hex digit unicode codepoint
	              + '[0-7]{1,3}|' // one to three octal digit ascii char code
	              + 'x[\\dA-Fa-f]{2}|' // two hex digit ascii char code
	              + 'U[\\dA-Fa-f]{8}' // eight hex digit unicode codepoint
	              + ')|'
	              + '&[a-zA-Z\\d]{2,};'; // named character entity

	  /**
	   * D integer number literals
	   *
	   * @type {Object}
	   */
	  const D_INTEGER_MODE = {
	    className: 'number',
	    begin: '\\b' + integer_re + '(L|u|U|Lu|LU|uL|UL)?',
	    relevance: 0
	  };

	  /**
	   * [D_FLOAT_MODE description]
	   * @type {Object}
	   */
	  const D_FLOAT_MODE = {
	    className: 'number',
	    begin: '\\b('
	        + float_re + '([fF]|L|i|[fF]i|Li)?|'
	        + integer_re + '(i|[fF]i|Li)'
	      + ')',
	    relevance: 0
	  };

	  /**
	   * D character literal
	   *
	   * @type {Object}
	   */
	  const D_CHARACTER_MODE = {
	    className: 'string',
	    begin: '\'(' + escape_sequence_re + '|.)',
	    end: '\'',
	    illegal: '.'
	  };

	  /**
	   * D string escape sequence
	   *
	   * @type {Object}
	   */
	  const D_ESCAPE_SEQUENCE = {
	    begin: escape_sequence_re,
	    relevance: 0
	  };

	  /**
	   * D double quoted string literal
	   *
	   * @type {Object}
	   */
	  const D_STRING_MODE = {
	    className: 'string',
	    begin: '"',
	    contains: [ D_ESCAPE_SEQUENCE ],
	    end: '"[cwd]?'
	  };

	  /**
	   * D wysiwyg and delimited string literals
	   *
	   * @type {Object}
	   */
	  const D_WYSIWYG_DELIMITED_STRING_MODE = {
	    className: 'string',
	    begin: '[rq]"',
	    end: '"[cwd]?',
	    relevance: 5
	  };

	  /**
	   * D alternate wysiwyg string literal
	   *
	   * @type {Object}
	   */
	  const D_ALTERNATE_WYSIWYG_STRING_MODE = {
	    className: 'string',
	    begin: '`',
	    end: '`[cwd]?'
	  };

	  /**
	   * D hexadecimal string literal
	   *
	   * @type {Object}
	   */
	  const D_HEX_STRING_MODE = {
	    className: 'string',
	    begin: 'x"[\\da-fA-F\\s\\n\\r]*"[cwd]?',
	    relevance: 10
	  };

	  /**
	   * D delimited string literal
	   *
	   * @type {Object}
	   */
	  const D_TOKEN_STRING_MODE = {
	    className: 'string',
	    begin: 'q"\\{',
	    end: '\\}"'
	  };

	  /**
	   * Hashbang support
	   *
	   * @type {Object}
	   */
	  const D_HASHBANG_MODE = {
	    className: 'meta',
	    begin: '^#!',
	    end: '$',
	    relevance: 5
	  };

	  /**
	   * D special token sequence
	   *
	   * @type {Object}
	   */
	  const D_SPECIAL_TOKEN_SEQUENCE_MODE = {
	    className: 'meta',
	    begin: '#(line)',
	    end: '$',
	    relevance: 5
	  };

	  /**
	   * D attributes
	   *
	   * @type {Object}
	   */
	  const D_ATTRIBUTE_MODE = {
	    className: 'keyword',
	    begin: '@[a-zA-Z_][a-zA-Z_\\d]*'
	  };

	  /**
	   * D nesting comment
	   *
	   * @type {Object}
	   */
	  const D_NESTING_COMMENT_MODE = hljs.COMMENT(
	    '\\/\\+',
	    '\\+\\/',
	    {
	      contains: [ 'self' ],
	      relevance: 10
	    }
	  );

	  return {
	    name: 'D',
	    keywords: D_KEYWORDS,
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      D_NESTING_COMMENT_MODE,
	      D_HEX_STRING_MODE,
	      D_STRING_MODE,
	      D_WYSIWYG_DELIMITED_STRING_MODE,
	      D_ALTERNATE_WYSIWYG_STRING_MODE,
	      D_TOKEN_STRING_MODE,
	      D_FLOAT_MODE,
	      D_INTEGER_MODE,
	      D_CHARACTER_MODE,
	      D_HASHBANG_MODE,
	      D_SPECIAL_TOKEN_SEQUENCE_MODE,
	      D_ATTRIBUTE_MODE
	    ]
	  };
	}

	d_1 = d;
	return d_1;
}

/*
Language: Markdown
Requires: xml.js
Author: John Crepezzi <john.crepezzi@gmail.com>
Website: https://daringfireball.net/projects/markdown/
Category: common, markup
*/

var markdown_1;
var hasRequiredMarkdown;

function requireMarkdown () {
	if (hasRequiredMarkdown) return markdown_1;
	hasRequiredMarkdown = 1;
	function markdown(hljs) {
	  const regex = hljs.regex;
	  const INLINE_HTML = {
	    begin: /<\/?[A-Za-z_]/,
	    end: '>',
	    subLanguage: 'xml',
	    relevance: 0
	  };
	  const HORIZONTAL_RULE = {
	    begin: '^[-\\*]{3,}',
	    end: '$'
	  };
	  const CODE = {
	    className: 'code',
	    variants: [
	      // TODO: fix to allow these to work with sublanguage also
	      { begin: '(`{3,})[^`](.|\\n)*?\\1`*[ ]*' },
	      { begin: '(~{3,})[^~](.|\\n)*?\\1~*[ ]*' },
	      // needed to allow markdown as a sublanguage to work
	      {
	        begin: '```',
	        end: '```+[ ]*$'
	      },
	      {
	        begin: '~~~',
	        end: '~~~+[ ]*$'
	      },
	      { begin: '`.+?`' },
	      {
	        begin: '(?=^( {4}|\\t))',
	        // use contains to gobble up multiple lines to allow the block to be whatever size
	        // but only have a single open/close tag vs one per line
	        contains: [
	          {
	            begin: '^( {4}|\\t)',
	            end: '(\\n)$'
	          }
	        ],
	        relevance: 0
	      }
	    ]
	  };
	  const LIST = {
	    className: 'bullet',
	    begin: '^[ \t]*([*+-]|(\\d+\\.))(?=\\s+)',
	    end: '\\s+',
	    excludeEnd: true
	  };
	  const LINK_REFERENCE = {
	    begin: /^\[[^\n]+\]:/,
	    returnBegin: true,
	    contains: [
	      {
	        className: 'symbol',
	        begin: /\[/,
	        end: /\]/,
	        excludeBegin: true,
	        excludeEnd: true
	      },
	      {
	        className: 'link',
	        begin: /:\s*/,
	        end: /$/,
	        excludeBegin: true
	      }
	    ]
	  };
	  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;
	  const LINK = {
	    variants: [
	      // too much like nested array access in so many languages
	      // to have any real relevance
	      {
	        begin: /\[.+?\]\[.*?\]/,
	        relevance: 0
	      },
	      // popular internet URLs
	      {
	        begin: /\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,
	        relevance: 2
	      },
	      {
	        begin: regex.concat(/\[.+?\]\(/, URL_SCHEME, /:\/\/.*?\)/),
	        relevance: 2
	      },
	      // relative urls
	      {
	        begin: /\[.+?\]\([./?&#].*?\)/,
	        relevance: 1
	      },
	      // whatever else, lower relevance (might not be a link at all)
	      {
	        begin: /\[.*?\]\(.*?\)/,
	        relevance: 0
	      }
	    ],
	    returnBegin: true,
	    contains: [
	      {
	        // empty strings for alt or link text
	        match: /\[(?=\])/ },
	      {
	        className: 'string',
	        relevance: 0,
	        begin: '\\[',
	        end: '\\]',
	        excludeBegin: true,
	        returnEnd: true
	      },
	      {
	        className: 'link',
	        relevance: 0,
	        begin: '\\]\\(',
	        end: '\\)',
	        excludeBegin: true,
	        excludeEnd: true
	      },
	      {
	        className: 'symbol',
	        relevance: 0,
	        begin: '\\]\\[',
	        end: '\\]',
	        excludeBegin: true,
	        excludeEnd: true
	      }
	    ]
	  };
	  const BOLD = {
	    className: 'strong',
	    contains: [], // defined later
	    variants: [
	      {
	        begin: /_{2}(?!\s)/,
	        end: /_{2}/
	      },
	      {
	        begin: /\*{2}(?!\s)/,
	        end: /\*{2}/
	      }
	    ]
	  };
	  const ITALIC = {
	    className: 'emphasis',
	    contains: [], // defined later
	    variants: [
	      {
	        begin: /\*(?![*\s])/,
	        end: /\*/
	      },
	      {
	        begin: /_(?![_\s])/,
	        end: /_/,
	        relevance: 0
	      }
	    ]
	  };

	  // 3 level deep nesting is not allowed because it would create confusion
	  // in cases like `***testing***` because where we don't know if the last
	  // `***` is starting a new bold/italic or finishing the last one
	  const BOLD_WITHOUT_ITALIC = hljs.inherit(BOLD, { contains: [] });
	  const ITALIC_WITHOUT_BOLD = hljs.inherit(ITALIC, { contains: [] });
	  BOLD.contains.push(ITALIC_WITHOUT_BOLD);
	  ITALIC.contains.push(BOLD_WITHOUT_ITALIC);

	  let CONTAINABLE = [
	    INLINE_HTML,
	    LINK
	  ];

	  [
	    BOLD,
	    ITALIC,
	    BOLD_WITHOUT_ITALIC,
	    ITALIC_WITHOUT_BOLD
	  ].forEach(m => {
	    m.contains = m.contains.concat(CONTAINABLE);
	  });

	  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);

	  const HEADER = {
	    className: 'section',
	    variants: [
	      {
	        begin: '^#{1,6}',
	        end: '$',
	        contains: CONTAINABLE
	      },
	      {
	        begin: '(?=^.+?\\n[=-]{2,}$)',
	        contains: [
	          { begin: '^[=-]*$' },
	          {
	            begin: '^',
	            end: "\\n",
	            contains: CONTAINABLE
	          }
	        ]
	      }
	    ]
	  };

	  const BLOCKQUOTE = {
	    className: 'quote',
	    begin: '^>\\s+',
	    contains: CONTAINABLE,
	    end: '$'
	  };

	  return {
	    name: 'Markdown',
	    aliases: [
	      'md',
	      'mkdown',
	      'mkd'
	    ],
	    contains: [
	      HEADER,
	      INLINE_HTML,
	      LIST,
	      BOLD,
	      ITALIC,
	      BLOCKQUOTE,
	      CODE,
	      HORIZONTAL_RULE,
	      LINK,
	      LINK_REFERENCE
	    ]
	  };
	}

	markdown_1 = markdown;
	return markdown_1;
}

/*
Language: Dart
Requires: markdown.js
Author: Maxim Dikun <dikmax@gmail.com>
Description: Dart a modern, object-oriented language developed by Google. For more information see https://www.dartlang.org/
Website: https://dart.dev
Category: scripting
*/

var dart_1;
var hasRequiredDart;

function requireDart () {
	if (hasRequiredDart) return dart_1;
	hasRequiredDart = 1;
	/** @type LanguageFn */
	function dart(hljs) {
	  const SUBST = {
	    className: 'subst',
	    variants: [ { begin: '\\$[A-Za-z0-9_]+' } ]
	  };

	  const BRACED_SUBST = {
	    className: 'subst',
	    variants: [
	      {
	        begin: /\$\{/,
	        end: /\}/
	      }
	    ],
	    keywords: 'true false null this is new super'
	  };

	  const STRING = {
	    className: 'string',
	    variants: [
	      {
	        begin: 'r\'\'\'',
	        end: '\'\'\''
	      },
	      {
	        begin: 'r"""',
	        end: '"""'
	      },
	      {
	        begin: 'r\'',
	        end: '\'',
	        illegal: '\\n'
	      },
	      {
	        begin: 'r"',
	        end: '"',
	        illegal: '\\n'
	      },
	      {
	        begin: '\'\'\'',
	        end: '\'\'\'',
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          SUBST,
	          BRACED_SUBST
	        ]
	      },
	      {
	        begin: '"""',
	        end: '"""',
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          SUBST,
	          BRACED_SUBST
	        ]
	      },
	      {
	        begin: '\'',
	        end: '\'',
	        illegal: '\\n',
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          SUBST,
	          BRACED_SUBST
	        ]
	      },
	      {
	        begin: '"',
	        end: '"',
	        illegal: '\\n',
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          SUBST,
	          BRACED_SUBST
	        ]
	      }
	    ]
	  };
	  BRACED_SUBST.contains = [
	    hljs.C_NUMBER_MODE,
	    STRING
	  ];

	  const BUILT_IN_TYPES = [
	    // dart:core
	    'Comparable',
	    'DateTime',
	    'Duration',
	    'Function',
	    'Iterable',
	    'Iterator',
	    'List',
	    'Map',
	    'Match',
	    'Object',
	    'Pattern',
	    'RegExp',
	    'Set',
	    'Stopwatch',
	    'String',
	    'StringBuffer',
	    'StringSink',
	    'Symbol',
	    'Type',
	    'Uri',
	    'bool',
	    'double',
	    'int',
	    'num',
	    // dart:html
	    'Element',
	    'ElementList'
	  ];
	  const NULLABLE_BUILT_IN_TYPES = BUILT_IN_TYPES.map((e) => `${e}?`);

	  const BASIC_KEYWORDS = [
	    "abstract",
	    "as",
	    "assert",
	    "async",
	    "await",
	    "base",
	    "break",
	    "case",
	    "catch",
	    "class",
	    "const",
	    "continue",
	    "covariant",
	    "default",
	    "deferred",
	    "do",
	    "dynamic",
	    "else",
	    "enum",
	    "export",
	    "extends",
	    "extension",
	    "external",
	    "factory",
	    "false",
	    "final",
	    "finally",
	    "for",
	    "Function",
	    "get",
	    "hide",
	    "if",
	    "implements",
	    "import",
	    "in",
	    "interface",
	    "is",
	    "late",
	    "library",
	    "mixin",
	    "new",
	    "null",
	    "on",
	    "operator",
	    "part",
	    "required",
	    "rethrow",
	    "return",
	    "sealed",
	    "set",
	    "show",
	    "static",
	    "super",
	    "switch",
	    "sync",
	    "this",
	    "throw",
	    "true",
	    "try",
	    "typedef",
	    "var",
	    "void",
	    "when",
	    "while",
	    "with",
	    "yield"
	  ];

	  const KEYWORDS = {
	    keyword: BASIC_KEYWORDS,
	    built_in:
	      BUILT_IN_TYPES
	        .concat(NULLABLE_BUILT_IN_TYPES)
	        .concat([
	          // dart:core
	          'Never',
	          'Null',
	          'dynamic',
	          'print',
	          // dart:html
	          'document',
	          'querySelector',
	          'querySelectorAll',
	          'window'
	        ]),
	    $pattern: /[A-Za-z][A-Za-z0-9_]*\??/
	  };

	  return {
	    name: 'Dart',
	    keywords: KEYWORDS,
	    contains: [
	      STRING,
	      hljs.COMMENT(
	        /\/\*\*(?!\/)/,
	        /\*\//,
	        {
	          subLanguage: 'markdown',
	          relevance: 0
	        }
	      ),
	      hljs.COMMENT(
	        /\/{3,} ?/,
	        /$/, { contains: [
	          {
	            subLanguage: 'markdown',
	            begin: '.',
	            end: '$',
	            relevance: 0
	          }
	        ] }
	      ),
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'class',
	        beginKeywords: 'class interface',
	        end: /\{/,
	        excludeEnd: true,
	        contains: [
	          { beginKeywords: 'extends implements' },
	          hljs.UNDERSCORE_TITLE_MODE
	        ]
	      },
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'meta',
	        begin: '@[A-Za-z]+'
	      },
	      { begin: '=>' // No markup, just a relevance booster
	      }
	    ]
	  };
	}

	dart_1 = dart;
	return dart_1;
}

/*
Language: Delphi
Website: https://www.embarcadero.com/products/delphi
*/

var delphi_1;
var hasRequiredDelphi;

function requireDelphi () {
	if (hasRequiredDelphi) return delphi_1;
	hasRequiredDelphi = 1;
	/** @type LanguageFn */
	function delphi(hljs) {
	  const KEYWORDS = [
	    "exports",
	    "register",
	    "file",
	    "shl",
	    "array",
	    "record",
	    "property",
	    "for",
	    "mod",
	    "while",
	    "set",
	    "ally",
	    "label",
	    "uses",
	    "raise",
	    "not",
	    "stored",
	    "class",
	    "safecall",
	    "var",
	    "interface",
	    "or",
	    "private",
	    "static",
	    "exit",
	    "index",
	    "inherited",
	    "to",
	    "else",
	    "stdcall",
	    "override",
	    "shr",
	    "asm",
	    "far",
	    "resourcestring",
	    "finalization",
	    "packed",
	    "virtual",
	    "out",
	    "and",
	    "protected",
	    "library",
	    "do",
	    "xorwrite",
	    "goto",
	    "near",
	    "function",
	    "end",
	    "div",
	    "overload",
	    "object",
	    "unit",
	    "begin",
	    "string",
	    "on",
	    "inline",
	    "repeat",
	    "until",
	    "destructor",
	    "write",
	    "message",
	    "program",
	    "with",
	    "read",
	    "initialization",
	    "except",
	    "default",
	    "nil",
	    "if",
	    "case",
	    "cdecl",
	    "in",
	    "downto",
	    "threadvar",
	    "of",
	    "try",
	    "pascal",
	    "const",
	    "external",
	    "constructor",
	    "type",
	    "public",
	    "then",
	    "implementation",
	    "finally",
	    "published",
	    "procedure",
	    "absolute",
	    "reintroduce",
	    "operator",
	    "as",
	    "is",
	    "abstract",
	    "alias",
	    "assembler",
	    "bitpacked",
	    "break",
	    "continue",
	    "cppdecl",
	    "cvar",
	    "enumerator",
	    "experimental",
	    "platform",
	    "deprecated",
	    "unimplemented",
	    "dynamic",
	    "export",
	    "far16",
	    "forward",
	    "generic",
	    "helper",
	    "implements",
	    "interrupt",
	    "iochecks",
	    "local",
	    "name",
	    "nodefault",
	    "noreturn",
	    "nostackframe",
	    "oldfpccall",
	    "otherwise",
	    "saveregisters",
	    "softfloat",
	    "specialize",
	    "strict",
	    "unaligned",
	    "varargs"
	  ];
	  const COMMENT_MODES = [
	    hljs.C_LINE_COMMENT_MODE,
	    hljs.COMMENT(/\{/, /\}/, { relevance: 0 }),
	    hljs.COMMENT(/\(\*/, /\*\)/, { relevance: 10 })
	  ];
	  const DIRECTIVE = {
	    className: 'meta',
	    variants: [
	      {
	        begin: /\{\$/,
	        end: /\}/
	      },
	      {
	        begin: /\(\*\$/,
	        end: /\*\)/
	      }
	    ]
	  };
	  const STRING = {
	    className: 'string',
	    begin: /'/,
	    end: /'/,
	    contains: [ { begin: /''/ } ]
	  };
	  const NUMBER = {
	    className: 'number',
	    relevance: 0,
	    // Source: https://www.freepascal.org/docs-html/ref/refse6.html
	    variants: [
	      {
	        // Hexadecimal notation, e.g., $7F.
	        begin: '\\$[0-9A-Fa-f]+' },
	      {
	        // Octal notation, e.g., &42.
	        begin: '&[0-7]+' },
	      {
	        // Binary notation, e.g., %1010.
	        begin: '%[01]+' }
	    ]
	  };
	  const CHAR_STRING = {
	    className: 'string',
	    begin: /(#\d+)+/
	  };
	  const CLASS = {
	    begin: hljs.IDENT_RE + '\\s*=\\s*class\\s*\\(',
	    returnBegin: true,
	    contains: [ hljs.TITLE_MODE ]
	  };
	  const FUNCTION = {
	    className: 'function',
	    beginKeywords: 'function constructor destructor procedure',
	    end: /[:;]/,
	    keywords: 'function constructor|10 destructor|10 procedure|10',
	    contains: [
	      hljs.TITLE_MODE,
	      {
	        className: 'params',
	        begin: /\(/,
	        end: /\)/,
	        keywords: KEYWORDS,
	        contains: [
	          STRING,
	          CHAR_STRING,
	          DIRECTIVE
	        ].concat(COMMENT_MODES)
	      },
	      DIRECTIVE
	    ].concat(COMMENT_MODES)
	  };
	  return {
	    name: 'Delphi',
	    aliases: [
	      'dpr',
	      'dfm',
	      'pas',
	      'pascal'
	    ],
	    case_insensitive: true,
	    keywords: KEYWORDS,
	    illegal: /"|\$[G-Zg-z]|\/\*|<\/|\|/,
	    contains: [
	      STRING,
	      CHAR_STRING,
	      hljs.NUMBER_MODE,
	      NUMBER,
	      CLASS,
	      FUNCTION,
	      DIRECTIVE
	    ].concat(COMMENT_MODES)
	  };
	}

	delphi_1 = delphi;
	return delphi_1;
}

/*
Language: Diff
Description: Unified and context diff
Author: Vasily Polovnyov <vast@whiteants.net>
Website: https://www.gnu.org/software/diffutils/
Category: common
*/

var diff_1;
var hasRequiredDiff;

function requireDiff () {
	if (hasRequiredDiff) return diff_1;
	hasRequiredDiff = 1;
	/** @type LanguageFn */
	function diff(hljs) {
	  const regex = hljs.regex;
	  return {
	    name: 'Diff',
	    aliases: [ 'patch' ],
	    contains: [
	      {
	        className: 'meta',
	        relevance: 10,
	        match: regex.either(
	          /^@@ +-\d+,\d+ +\+\d+,\d+ +@@/,
	          /^\*\*\* +\d+,\d+ +\*\*\*\*$/,
	          /^--- +\d+,\d+ +----$/
	        )
	      },
	      {
	        className: 'comment',
	        variants: [
	          {
	            begin: regex.either(
	              /Index: /,
	              /^index/,
	              /={3,}/,
	              /^-{3}/,
	              /^\*{3} /,
	              /^\+{3}/,
	              /^diff --git/
	            ),
	            end: /$/
	          },
	          { match: /^\*{15}$/ }
	        ]
	      },
	      {
	        className: 'addition',
	        begin: /^\+/,
	        end: /$/
	      },
	      {
	        className: 'deletion',
	        begin: /^-/,
	        end: /$/
	      },
	      {
	        className: 'addition',
	        begin: /^!/,
	        end: /$/
	      }
	    ]
	  };
	}

	diff_1 = diff;
	return diff_1;
}

/*
Language: Django
Description: Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design.
Requires: xml.js
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Contributors: Ilya Baryshev <baryshev@gmail.com>
Website: https://www.djangoproject.com
Category: template
*/

var django_1;
var hasRequiredDjango;

function requireDjango () {
	if (hasRequiredDjango) return django_1;
	hasRequiredDjango = 1;
	/** @type LanguageFn */
	function django(hljs) {
	  const FILTER = {
	    begin: /\|[A-Za-z]+:?/,
	    keywords: { name:
	        'truncatewords removetags linebreaksbr yesno get_digit timesince random striptags '
	        + 'filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands '
	        + 'title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode '
	        + 'timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort '
	        + 'dictsortreversed default_if_none pluralize lower join center default '
	        + 'truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first '
	        + 'escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize '
	        + 'localtime utc timezone' },
	    contains: [
	      hljs.QUOTE_STRING_MODE,
	      hljs.APOS_STRING_MODE
	    ]
	  };

	  return {
	    name: 'Django',
	    aliases: [ 'jinja' ],
	    case_insensitive: true,
	    subLanguage: 'xml',
	    contains: [
	      hljs.COMMENT(/\{%\s*comment\s*%\}/, /\{%\s*endcomment\s*%\}/),
	      hljs.COMMENT(/\{#/, /#\}/),
	      {
	        className: 'template-tag',
	        begin: /\{%/,
	        end: /%\}/,
	        contains: [
	          {
	            className: 'name',
	            begin: /\w+/,
	            keywords: { name:
	                'comment endcomment load templatetag ifchanged endifchanged if endif firstof for '
	                + 'endfor ifnotequal endifnotequal widthratio extends include spaceless '
	                + 'endspaceless regroup ifequal endifequal ssi now with cycle url filter '
	                + 'endfilter debug block endblock else autoescape endautoescape csrf_token empty elif '
	                + 'endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix '
	                + 'plural get_current_language language get_available_languages '
	                + 'get_current_language_bidi get_language_info get_language_info_list localize '
	                + 'endlocalize localtime endlocaltime timezone endtimezone get_current_timezone '
	                + 'verbatim' },
	            starts: {
	              endsWithParent: true,
	              keywords: 'in by as',
	              contains: [ FILTER ],
	              relevance: 0
	            }
	          }
	        ]
	      },
	      {
	        className: 'template-variable',
	        begin: /\{\{/,
	        end: /\}\}/,
	        contains: [ FILTER ]
	      }
	    ]
	  };
	}

	django_1 = django;
	return django_1;
}

/*
Language: DNS Zone
Author: Tim Schumacher <tim@datenknoten.me>
Category: config
Website: https://en.wikipedia.org/wiki/Zone_file
*/

var dns_1;
var hasRequiredDns;

function requireDns () {
	if (hasRequiredDns) return dns_1;
	hasRequiredDns = 1;
	/** @type LanguageFn */
	function dns(hljs) {
	  const KEYWORDS = [
	    "IN",
	    "A",
	    "AAAA",
	    "AFSDB",
	    "APL",
	    "CAA",
	    "CDNSKEY",
	    "CDS",
	    "CERT",
	    "CNAME",
	    "DHCID",
	    "DLV",
	    "DNAME",
	    "DNSKEY",
	    "DS",
	    "HIP",
	    "IPSECKEY",
	    "KEY",
	    "KX",
	    "LOC",
	    "MX",
	    "NAPTR",
	    "NS",
	    "NSEC",
	    "NSEC3",
	    "NSEC3PARAM",
	    "PTR",
	    "RRSIG",
	    "RP",
	    "SIG",
	    "SOA",
	    "SRV",
	    "SSHFP",
	    "TA",
	    "TKEY",
	    "TLSA",
	    "TSIG",
	    "TXT"
	  ];
	  return {
	    name: 'DNS Zone',
	    aliases: [
	      'bind',
	      'zone'
	    ],
	    keywords: KEYWORDS,
	    contains: [
	      hljs.COMMENT(';', '$', { relevance: 0 }),
	      {
	        className: 'meta',
	        begin: /^\$(TTL|GENERATE|INCLUDE|ORIGIN)\b/
	      },
	      // IPv6
	      {
	        className: 'number',
	        begin: '((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))\\b'
	      },
	      // IPv4
	      {
	        className: 'number',
	        begin: '((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\b'
	      },
	      hljs.inherit(hljs.NUMBER_MODE, { begin: /\b\d+[dhwm]?/ })
	    ]
	  };
	}

	dns_1 = dns;
	return dns_1;
}

/*
Language: Dockerfile
Requires: bash.js
Author: Alexis Hénaut <alexis@henaut.net>
Description: language definition for Dockerfile files
Website: https://docs.docker.com/engine/reference/builder/
Category: config
*/

var dockerfile_1;
var hasRequiredDockerfile;

function requireDockerfile () {
	if (hasRequiredDockerfile) return dockerfile_1;
	hasRequiredDockerfile = 1;
	/** @type LanguageFn */
	function dockerfile(hljs) {
	  const KEYWORDS = [
	    "from",
	    "maintainer",
	    "expose",
	    "env",
	    "arg",
	    "user",
	    "onbuild",
	    "stopsignal"
	  ];
	  return {
	    name: 'Dockerfile',
	    aliases: [ 'docker' ],
	    case_insensitive: true,
	    keywords: KEYWORDS,
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.NUMBER_MODE,
	      {
	        beginKeywords: 'run cmd entrypoint volume add copy workdir label healthcheck shell',
	        starts: {
	          end: /[^\\]$/,
	          subLanguage: 'bash'
	        }
	      }
	    ],
	    illegal: '</'
	  };
	}

	dockerfile_1 = dockerfile;
	return dockerfile_1;
}

/*
Language: Batch file (DOS)
Author: Alexander Makarov <sam@rmcreative.ru>
Contributors: Anton Kochkov <anton.kochkov@gmail.com>
Website: https://en.wikipedia.org/wiki/Batch_file
*/

var dos_1;
var hasRequiredDos;

function requireDos () {
	if (hasRequiredDos) return dos_1;
	hasRequiredDos = 1;
	/** @type LanguageFn */
	function dos(hljs) {
	  const COMMENT = hljs.COMMENT(
	    /^\s*@?rem\b/, /$/,
	    { relevance: 10 }
	  );
	  const LABEL = {
	    className: 'symbol',
	    begin: '^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)',
	    relevance: 0
	  };
	  const KEYWORDS = [
	    "if",
	    "else",
	    "goto",
	    "for",
	    "in",
	    "do",
	    "call",
	    "exit",
	    "not",
	    "exist",
	    "errorlevel",
	    "defined",
	    "equ",
	    "neq",
	    "lss",
	    "leq",
	    "gtr",
	    "geq"
	  ];
	  const BUILT_INS = [
	    "prn",
	    "nul",
	    "lpt3",
	    "lpt2",
	    "lpt1",
	    "con",
	    "com4",
	    "com3",
	    "com2",
	    "com1",
	    "aux",
	    "shift",
	    "cd",
	    "dir",
	    "echo",
	    "setlocal",
	    "endlocal",
	    "set",
	    "pause",
	    "copy",
	    "append",
	    "assoc",
	    "at",
	    "attrib",
	    "break",
	    "cacls",
	    "cd",
	    "chcp",
	    "chdir",
	    "chkdsk",
	    "chkntfs",
	    "cls",
	    "cmd",
	    "color",
	    "comp",
	    "compact",
	    "convert",
	    "date",
	    "dir",
	    "diskcomp",
	    "diskcopy",
	    "doskey",
	    "erase",
	    "fs",
	    "find",
	    "findstr",
	    "format",
	    "ftype",
	    "graftabl",
	    "help",
	    "keyb",
	    "label",
	    "md",
	    "mkdir",
	    "mode",
	    "more",
	    "move",
	    "path",
	    "pause",
	    "print",
	    "popd",
	    "pushd",
	    "promt",
	    "rd",
	    "recover",
	    "rem",
	    "rename",
	    "replace",
	    "restore",
	    "rmdir",
	    "shift",
	    "sort",
	    "start",
	    "subst",
	    "time",
	    "title",
	    "tree",
	    "type",
	    "ver",
	    "verify",
	    "vol",
	    // winutils
	    "ping",
	    "net",
	    "ipconfig",
	    "taskkill",
	    "xcopy",
	    "ren",
	    "del"
	  ];
	  return {
	    name: 'Batch file (DOS)',
	    aliases: [
	      'bat',
	      'cmd'
	    ],
	    case_insensitive: true,
	    illegal: /\/\*/,
	    keywords: {
	      keyword: KEYWORDS,
	      built_in: BUILT_INS
	    },
	    contains: [
	      {
	        className: 'variable',
	        begin: /%%[^ ]|%[^ ]+?%|![^ ]+?!/
	      },
	      {
	        className: 'function',
	        begin: LABEL.begin,
	        end: 'goto:eof',
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, { begin: '([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*' }),
	          COMMENT
	        ]
	      },
	      {
	        className: 'number',
	        begin: '\\b\\d+',
	        relevance: 0
	      },
	      COMMENT
	    ]
	  };
	}

	dos_1 = dos;
	return dos_1;
}

/*
 Language: dsconfig
 Description: dsconfig batch configuration language for LDAP directory servers
 Contributors: Jacob Childress <jacobc@gmail.com>
 Category: enterprise, config
 */

var dsconfig_1;
var hasRequiredDsconfig;

function requireDsconfig () {
	if (hasRequiredDsconfig) return dsconfig_1;
	hasRequiredDsconfig = 1;
	/** @type LanguageFn */
	function dsconfig(hljs) {
	  const QUOTED_PROPERTY = {
	    className: 'string',
	    begin: /"/,
	    end: /"/
	  };
	  const APOS_PROPERTY = {
	    className: 'string',
	    begin: /'/,
	    end: /'/
	  };
	  const UNQUOTED_PROPERTY = {
	    className: 'string',
	    begin: /[\w\-?]+:\w+/,
	    end: /\W/,
	    relevance: 0
	  };
	  const VALUELESS_PROPERTY = {
	    className: 'string',
	    begin: /\w+(\-\w+)*/,
	    end: /(?=\W)/,
	    relevance: 0
	  };

	  return {
	    keywords: 'dsconfig',
	    contains: [
	      {
	        className: 'keyword',
	        begin: '^dsconfig',
	        end: /\s/,
	        excludeEnd: true,
	        relevance: 10
	      },
	      {
	        className: 'built_in',
	        begin: /(list|create|get|set|delete)-(\w+)/,
	        end: /\s/,
	        excludeEnd: true,
	        illegal: '!@#$%^&*()',
	        relevance: 10
	      },
	      {
	        className: 'built_in',
	        begin: /--(\w+)/,
	        end: /\s/,
	        excludeEnd: true
	      },
	      QUOTED_PROPERTY,
	      APOS_PROPERTY,
	      UNQUOTED_PROPERTY,
	      VALUELESS_PROPERTY,
	      hljs.HASH_COMMENT_MODE
	    ]
	  };
	}

	dsconfig_1 = dsconfig;
	return dsconfig_1;
}

/*
Language: Device Tree
Description: *.dts files used in the Linux kernel
Author: Martin Braun <martin.braun@ettus.com>, Moritz Fischer <moritz.fischer@ettus.com>
Website: https://elinux.org/Device_Tree_Reference
Category: config
*/

var dts_1;
var hasRequiredDts;

function requireDts () {
	if (hasRequiredDts) return dts_1;
	hasRequiredDts = 1;
	/** @type LanguageFn */
	function dts(hljs) {
	  const STRINGS = {
	    className: 'string',
	    variants: [
	      hljs.inherit(hljs.QUOTE_STRING_MODE, { begin: '((u8?|U)|L)?"' }),
	      {
	        begin: '(u8?|U)?R"',
	        end: '"',
	        contains: [ hljs.BACKSLASH_ESCAPE ]
	      },
	      {
	        begin: '\'\\\\?.',
	        end: '\'',
	        illegal: '.'
	      }
	    ]
	  };

	  const NUMBERS = {
	    className: 'number',
	    variants: [
	      { begin: '\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)' },
	      { begin: hljs.C_NUMBER_RE }
	    ],
	    relevance: 0
	  };

	  const PREPROCESSOR = {
	    className: 'meta',
	    begin: '#',
	    end: '$',
	    keywords: { keyword: 'if else elif endif define undef ifdef ifndef' },
	    contains: [
	      {
	        begin: /\\\n/,
	        relevance: 0
	      },
	      {
	        beginKeywords: 'include',
	        end: '$',
	        keywords: { keyword: 'include' },
	        contains: [
	          hljs.inherit(STRINGS, { className: 'string' }),
	          {
	            className: 'string',
	            begin: '<',
	            end: '>',
	            illegal: '\\n'
	          }
	        ]
	      },
	      STRINGS,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE
	    ]
	  };

	  const REFERENCE = {
	    className: 'variable',
	    begin: /&[a-z\d_]*\b/
	  };

	  const KEYWORD = {
	    className: 'keyword',
	    begin: '/[a-z][a-z\\d-]*/'
	  };

	  const LABEL = {
	    className: 'symbol',
	    begin: '^\\s*[a-zA-Z_][a-zA-Z\\d_]*:'
	  };

	  const CELL_PROPERTY = {
	    className: 'params',
	    relevance: 0,
	    begin: '<',
	    end: '>',
	    contains: [
	      NUMBERS,
	      REFERENCE
	    ]
	  };

	  const NODE = {
	    className: 'title.class',
	    begin: /[a-zA-Z_][a-zA-Z\d_@-]*(?=\s\{)/,
	    relevance: 0.2
	  };

	  const ROOT_NODE = {
	    className: 'title.class',
	    begin: /^\/(?=\s*\{)/,
	    relevance: 10
	  };

	  // TODO: `attribute` might be the right scope here, unsure
	  // I'm not sure if all these key names have semantic meaning or not
	  const ATTR_NO_VALUE = {
	    match: /[a-z][a-z-,]+(?=;)/,
	    relevance: 0,
	    scope: "attr"
	  };
	  const ATTR = {
	    relevance: 0,
	    match: [
	      /[a-z][a-z-,]+/,
	      /\s*/,
	      /=/
	    ],
	    scope: {
	      1: "attr",
	      3: "operator"
	    }
	  };

	  const PUNC = {
	    scope: "punctuation",
	    relevance: 0,
	    // `};` combined is just to avoid tons of useless punctuation nodes
	    match: /\};|[;{}]/
	  };

	  return {
	    name: 'Device Tree',
	    contains: [
	      ROOT_NODE,
	      REFERENCE,
	      KEYWORD,
	      LABEL,
	      NODE,
	      ATTR,
	      ATTR_NO_VALUE,
	      CELL_PROPERTY,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      NUMBERS,
	      STRINGS,
	      PREPROCESSOR,
	      PUNC,
	      {
	        begin: hljs.IDENT_RE + '::',
	        keywords: ""
	      }
	    ]
	  };
	}

	dts_1 = dts;
	return dts_1;
}

/*
Language: Dust
Requires: xml.js
Author: Michael Allen <michael.allen@benefitfocus.com>
Description: Matcher for dust.js templates.
Website: https://www.dustjs.com
Category: template
*/

var dust_1;
var hasRequiredDust;

function requireDust () {
	if (hasRequiredDust) return dust_1;
	hasRequiredDust = 1;
	/** @type LanguageFn */
	function dust(hljs) {
	  const EXPRESSION_KEYWORDS = 'if eq ne lt lte gt gte select default math sep';
	  return {
	    name: 'Dust',
	    aliases: [ 'dst' ],
	    case_insensitive: true,
	    subLanguage: 'xml',
	    contains: [
	      {
	        className: 'template-tag',
	        begin: /\{[#\/]/,
	        end: /\}/,
	        illegal: /;/,
	        contains: [
	          {
	            className: 'name',
	            begin: /[a-zA-Z\.-]+/,
	            starts: {
	              endsWithParent: true,
	              relevance: 0,
	              contains: [ hljs.QUOTE_STRING_MODE ]
	            }
	          }
	        ]
	      },
	      {
	        className: 'template-variable',
	        begin: /\{/,
	        end: /\}/,
	        illegal: /;/,
	        keywords: EXPRESSION_KEYWORDS
	      }
	    ]
	  };
	}

	dust_1 = dust;
	return dust_1;
}

/*
Language: Extended Backus-Naur Form
Author: Alex McKibben <alex@nullscope.net>
Website: https://en.wikipedia.org/wiki/Extended_Backus–Naur_form
*/

var ebnf_1;
var hasRequiredEbnf;

function requireEbnf () {
	if (hasRequiredEbnf) return ebnf_1;
	hasRequiredEbnf = 1;
	/** @type LanguageFn */
	function ebnf(hljs) {
	  const commentMode = hljs.COMMENT(/\(\*/, /\*\)/);

	  const nonTerminalMode = {
	    className: "attribute",
	    begin: /^[ ]*[a-zA-Z]+([\s_-]+[a-zA-Z]+)*/
	  };

	  const specialSequenceMode = {
	    className: "meta",
	    begin: /\?.*\?/
	  };

	  const ruleBodyMode = {
	    begin: /=/,
	    end: /[.;]/,
	    contains: [
	      commentMode,
	      specialSequenceMode,
	      {
	        // terminals
	        className: 'string',
	        variants: [
	          hljs.APOS_STRING_MODE,
	          hljs.QUOTE_STRING_MODE,
	          {
	            begin: '`',
	            end: '`'
	          }
	        ]
	      }
	    ]
	  };

	  return {
	    name: 'Extended Backus-Naur Form',
	    illegal: /\S/,
	    contains: [
	      commentMode,
	      nonTerminalMode,
	      ruleBodyMode
	    ]
	  };
	}

	ebnf_1 = ebnf;
	return ebnf_1;
}

/*
Language: Elixir
Author: Josh Adams <josh@isotope11.com>
Description: language definition for Elixir source code files (.ex and .exs).  Based on ruby language support.
Category: functional
Website: https://elixir-lang.org
*/

var elixir_1;
var hasRequiredElixir;

function requireElixir () {
	if (hasRequiredElixir) return elixir_1;
	hasRequiredElixir = 1;
	/** @type LanguageFn */
	function elixir(hljs) {
	  const regex = hljs.regex;
	  const ELIXIR_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_.]*(!|\\?)?';
	  const ELIXIR_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?';
	  const KEYWORDS = [
	    "after",
	    "alias",
	    "and",
	    "case",
	    "catch",
	    "cond",
	    "defstruct",
	    "defguard",
	    "do",
	    "else",
	    "end",
	    "fn",
	    "for",
	    "if",
	    "import",
	    "in",
	    "not",
	    "or",
	    "quote",
	    "raise",
	    "receive",
	    "require",
	    "reraise",
	    "rescue",
	    "try",
	    "unless",
	    "unquote",
	    "unquote_splicing",
	    "use",
	    "when",
	    "with|0"
	  ];
	  const LITERALS = [
	    "false",
	    "nil",
	    "true"
	  ];
	  const KWS = {
	    $pattern: ELIXIR_IDENT_RE,
	    keyword: KEYWORDS,
	    literal: LITERALS
	  };
	  const SUBST = {
	    className: 'subst',
	    begin: /#\{/,
	    end: /\}/,
	    keywords: KWS
	  };
	  const NUMBER = {
	    className: 'number',
	    begin: '(\\b0o[0-7_]+)|(\\b0b[01_]+)|(\\b0x[0-9a-fA-F_]+)|(-?\\b[0-9][0-9_]*(\\.[0-9_]+([eE][-+]?[0-9]+)?)?)',
	    relevance: 0
	  };
	  // TODO: could be tightened
	  // https://elixir-lang.readthedocs.io/en/latest/intro/18.html
	  // but you also need to include closing delemeters in the escape list per
	  // individual sigil mode from what I can tell,
	  // ie: \} might or might not be an escape depending on the sigil used
	  const ESCAPES_RE = /\\[\s\S]/;
	  // const ESCAPES_RE = /\\["'\\abdefnrstv0]/;
	  const BACKSLASH_ESCAPE = {
	    match: ESCAPES_RE,
	    scope: "char.escape",
	    relevance: 0
	  };
	  const SIGIL_DELIMITERS = '[/|([{<"\']';
	  const SIGIL_DELIMITER_MODES = [
	    {
	      begin: /"/,
	      end: /"/
	    },
	    {
	      begin: /'/,
	      end: /'/
	    },
	    {
	      begin: /\//,
	      end: /\//
	    },
	    {
	      begin: /\|/,
	      end: /\|/
	    },
	    {
	      begin: /\(/,
	      end: /\)/
	    },
	    {
	      begin: /\[/,
	      end: /\]/
	    },
	    {
	      begin: /\{/,
	      end: /\}/
	    },
	    {
	      begin: /</,
	      end: />/
	    }
	  ];
	  const escapeSigilEnd = (end) => {
	    return {
	      scope: "char.escape",
	      begin: regex.concat(/\\/, end),
	      relevance: 0
	    };
	  };
	  const LOWERCASE_SIGIL = {
	    className: 'string',
	    begin: '~[a-z]' + '(?=' + SIGIL_DELIMITERS + ')',
	    contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,
	      { contains: [
	        escapeSigilEnd(x.end),
	        BACKSLASH_ESCAPE,
	        SUBST
	      ] }
	    ))
	  };

	  const UPCASE_SIGIL = {
	    className: 'string',
	    begin: '~[A-Z]' + '(?=' + SIGIL_DELIMITERS + ')',
	    contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,
	      { contains: [ escapeSigilEnd(x.end) ] }
	    ))
	  };

	  const REGEX_SIGIL = {
	    className: 'regex',
	    variants: [
	      {
	        begin: '~r' + '(?=' + SIGIL_DELIMITERS + ')',
	        contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,
	          {
	            end: regex.concat(x.end, /[uismxfU]{0,7}/),
	            contains: [
	              escapeSigilEnd(x.end),
	              BACKSLASH_ESCAPE,
	              SUBST
	            ]
	          }
	        ))
	      },
	      {
	        begin: '~R' + '(?=' + SIGIL_DELIMITERS + ')',
	        contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,
	          {
	            end: regex.concat(x.end, /[uismxfU]{0,7}/),
	            contains: [ escapeSigilEnd(x.end) ]
	          })
	        )
	      }
	    ]
	  };

	  const STRING = {
	    className: 'string',
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      SUBST
	    ],
	    variants: [
	      {
	        begin: /"""/,
	        end: /"""/
	      },
	      {
	        begin: /'''/,
	        end: /'''/
	      },
	      {
	        begin: /~S"""/,
	        end: /"""/,
	        contains: [] // override default
	      },
	      {
	        begin: /~S"/,
	        end: /"/,
	        contains: [] // override default
	      },
	      {
	        begin: /~S'''/,
	        end: /'''/,
	        contains: [] // override default
	      },
	      {
	        begin: /~S'/,
	        end: /'/,
	        contains: [] // override default
	      },
	      {
	        begin: /'/,
	        end: /'/
	      },
	      {
	        begin: /"/,
	        end: /"/
	      }
	    ]
	  };
	  const FUNCTION = {
	    className: 'function',
	    beginKeywords: 'def defp defmacro defmacrop',
	    end: /\B\b/, // the mode is ended by the title
	    contains: [
	      hljs.inherit(hljs.TITLE_MODE, {
	        begin: ELIXIR_IDENT_RE,
	        endsParent: true
	      })
	    ]
	  };
	  const CLASS = hljs.inherit(FUNCTION, {
	    className: 'class',
	    beginKeywords: 'defimpl defmodule defprotocol defrecord',
	    end: /\bdo\b|$|;/
	  });
	  const ELIXIR_DEFAULT_CONTAINS = [
	    STRING,
	    REGEX_SIGIL,
	    UPCASE_SIGIL,
	    LOWERCASE_SIGIL,
	    hljs.HASH_COMMENT_MODE,
	    CLASS,
	    FUNCTION,
	    { begin: '::' },
	    {
	      className: 'symbol',
	      begin: ':(?![\\s:])',
	      contains: [
	        STRING,
	        { begin: ELIXIR_METHOD_RE }
	      ],
	      relevance: 0
	    },
	    {
	      className: 'symbol',
	      begin: ELIXIR_IDENT_RE + ':(?!:)',
	      relevance: 0
	    },
	    { // Usage of a module, struct, etc.
	      className: 'title.class',
	      begin: /(\b[A-Z][a-zA-Z0-9_]+)/,
	      relevance: 0
	    },
	    NUMBER,
	    {
	      className: 'variable',
	      begin: '(\\$\\W)|((\\$|@@?)(\\w+))'
	    }
	    // -> has been removed, capnproto always uses this grammar construct
	  ];
	  SUBST.contains = ELIXIR_DEFAULT_CONTAINS;

	  return {
	    name: 'Elixir',
	    aliases: [
	      'ex',
	      'exs'
	    ],
	    keywords: KWS,
	    contains: ELIXIR_DEFAULT_CONTAINS
	  };
	}

	elixir_1 = elixir;
	return elixir_1;
}

/*
Language: Elm
Author: Janis Voigtlaender <janis.voigtlaender@gmail.com>
Website: https://elm-lang.org
Category: functional
*/

var elm_1;
var hasRequiredElm;

function requireElm () {
	if (hasRequiredElm) return elm_1;
	hasRequiredElm = 1;
	/** @type LanguageFn */
	function elm(hljs) {
	  const COMMENT = { variants: [
	    hljs.COMMENT('--', '$'),
	    hljs.COMMENT(
	      /\{-/,
	      /-\}/,
	      { contains: [ 'self' ] }
	    )
	  ] };

	  const CONSTRUCTOR = {
	    className: 'type',
	    begin: '\\b[A-Z][\\w\']*', // TODO: other constructors (built-in, infix).
	    relevance: 0
	  };

	  const LIST = {
	    begin: '\\(',
	    end: '\\)',
	    illegal: '"',
	    contains: [
	      {
	        className: 'type',
	        begin: '\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?'
	      },
	      COMMENT
	    ]
	  };

	  const RECORD = {
	    begin: /\{/,
	    end: /\}/,
	    contains: LIST.contains
	  };

	  const CHARACTER = {
	    className: 'string',
	    begin: '\'\\\\?.',
	    end: '\'',
	    illegal: '.'
	  };

	  const KEYWORDS = [
	    "let",
	    "in",
	    "if",
	    "then",
	    "else",
	    "case",
	    "of",
	    "where",
	    "module",
	    "import",
	    "exposing",
	    "type",
	    "alias",
	    "as",
	    "infix",
	    "infixl",
	    "infixr",
	    "port",
	    "effect",
	    "command",
	    "subscription"
	  ];

	  return {
	    name: 'Elm',
	    keywords: KEYWORDS,
	    contains: [

	      // Top-level constructions.

	      {
	        beginKeywords: 'port effect module',
	        end: 'exposing',
	        keywords: 'port effect module where command subscription exposing',
	        contains: [
	          LIST,
	          COMMENT
	        ],
	        illegal: '\\W\\.|;'
	      },
	      {
	        begin: 'import',
	        end: '$',
	        keywords: 'import as exposing',
	        contains: [
	          LIST,
	          COMMENT
	        ],
	        illegal: '\\W\\.|;'
	      },
	      {
	        begin: 'type',
	        end: '$',
	        keywords: 'type alias',
	        contains: [
	          CONSTRUCTOR,
	          LIST,
	          RECORD,
	          COMMENT
	        ]
	      },
	      {
	        beginKeywords: 'infix infixl infixr',
	        end: '$',
	        contains: [
	          hljs.C_NUMBER_MODE,
	          COMMENT
	        ]
	      },
	      {
	        begin: 'port',
	        end: '$',
	        keywords: 'port',
	        contains: [ COMMENT ]
	      },

	      // Literals and names.
	      CHARACTER,
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_NUMBER_MODE,
	      CONSTRUCTOR,
	      hljs.inherit(hljs.TITLE_MODE, { begin: '^[_a-z][\\w\']*' }),
	      COMMENT,

	      { // No markup, relevance booster
	        begin: '->|<-' }
	    ],
	    illegal: /;/
	  };
	}

	elm_1 = elm;
	return elm_1;
}

/*
Language: Ruby
Description: Ruby is a dynamic, open source programming language with a focus on simplicity and productivity.
Website: https://www.ruby-lang.org/
Author: Anton Kovalyov <anton@kovalyov.net>
Contributors: Peter Leonov <gojpeg@yandex.ru>, Vasily Polovnyov <vast@whiteants.net>, Loren Segal <lsegal@soen.ca>, Pascal Hurni <phi@ruby-reactive.org>, Cedric Sohrauer <sohrauer@googlemail.com>
Category: common
*/

var ruby_1;
var hasRequiredRuby;

function requireRuby () {
	if (hasRequiredRuby) return ruby_1;
	hasRequiredRuby = 1;
	function ruby(hljs) {
	  const regex = hljs.regex;
	  const RUBY_METHOD_RE = '([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)';
	  // TODO: move concepts like CAMEL_CASE into `modes.js`
	  const CLASS_NAME_RE = regex.either(
	    /\b([A-Z]+[a-z0-9]+)+/,
	    // ends in caps
	    /\b([A-Z]+[a-z0-9]+)+[A-Z]+/,
	  )
	  ;
	  const CLASS_NAME_WITH_NAMESPACE_RE = regex.concat(CLASS_NAME_RE, /(::\w+)*/);
	  // very popular ruby built-ins that one might even assume
	  // are actual keywords (despite that not being the case)
	  const PSEUDO_KWS = [
	    "include",
	    "extend",
	    "prepend",
	    "public",
	    "private",
	    "protected",
	    "raise",
	    "throw"
	  ];
	  const RUBY_KEYWORDS = {
	    "variable.constant": [
	      "__FILE__",
	      "__LINE__",
	      "__ENCODING__"
	    ],
	    "variable.language": [
	      "self",
	      "super",
	    ],
	    keyword: [
	      "alias",
	      "and",
	      "begin",
	      "BEGIN",
	      "break",
	      "case",
	      "class",
	      "defined",
	      "do",
	      "else",
	      "elsif",
	      "end",
	      "END",
	      "ensure",
	      "for",
	      "if",
	      "in",
	      "module",
	      "next",
	      "not",
	      "or",
	      "redo",
	      "require",
	      "rescue",
	      "retry",
	      "return",
	      "then",
	      "undef",
	      "unless",
	      "until",
	      "when",
	      "while",
	      "yield",
	      ...PSEUDO_KWS
	    ],
	    built_in: [
	      "proc",
	      "lambda",
	      "attr_accessor",
	      "attr_reader",
	      "attr_writer",
	      "define_method",
	      "private_constant",
	      "module_function"
	    ],
	    literal: [
	      "true",
	      "false",
	      "nil"
	    ]
	  };
	  const YARDOCTAG = {
	    className: 'doctag',
	    begin: '@[A-Za-z]+'
	  };
	  const IRB_OBJECT = {
	    begin: '#<',
	    end: '>'
	  };
	  const COMMENT_MODES = [
	    hljs.COMMENT(
	      '#',
	      '$',
	      { contains: [ YARDOCTAG ] }
	    ),
	    hljs.COMMENT(
	      '^=begin',
	      '^=end',
	      {
	        contains: [ YARDOCTAG ],
	        relevance: 10
	      }
	    ),
	    hljs.COMMENT('^__END__', hljs.MATCH_NOTHING_RE)
	  ];
	  const SUBST = {
	    className: 'subst',
	    begin: /#\{/,
	    end: /\}/,
	    keywords: RUBY_KEYWORDS
	  };
	  const STRING = {
	    className: 'string',
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      SUBST
	    ],
	    variants: [
	      {
	        begin: /'/,
	        end: /'/
	      },
	      {
	        begin: /"/,
	        end: /"/
	      },
	      {
	        begin: /`/,
	        end: /`/
	      },
	      {
	        begin: /%[qQwWx]?\(/,
	        end: /\)/
	      },
	      {
	        begin: /%[qQwWx]?\[/,
	        end: /\]/
	      },
	      {
	        begin: /%[qQwWx]?\{/,
	        end: /\}/
	      },
	      {
	        begin: /%[qQwWx]?</,
	        end: />/
	      },
	      {
	        begin: /%[qQwWx]?\//,
	        end: /\//
	      },
	      {
	        begin: /%[qQwWx]?%/,
	        end: /%/
	      },
	      {
	        begin: /%[qQwWx]?-/,
	        end: /-/
	      },
	      {
	        begin: /%[qQwWx]?\|/,
	        end: /\|/
	      },
	      // in the following expressions, \B in the beginning suppresses recognition of ?-sequences
	      // where ? is the last character of a preceding identifier, as in: `func?4`
	      { begin: /\B\?(\\\d{1,3})/ },
	      { begin: /\B\?(\\x[A-Fa-f0-9]{1,2})/ },
	      { begin: /\B\?(\\u\{?[A-Fa-f0-9]{1,6}\}?)/ },
	      { begin: /\B\?(\\M-\\C-|\\M-\\c|\\c\\M-|\\M-|\\C-\\M-)[\x20-\x7e]/ },
	      { begin: /\B\?\\(c|C-)[\x20-\x7e]/ },
	      { begin: /\B\?\\?\S/ },
	      // heredocs
	      {
	        // this guard makes sure that we have an entire heredoc and not a false
	        // positive (auto-detect, etc.)
	        begin: regex.concat(
	          /<<[-~]?'?/,
	          regex.lookahead(/(\w+)(?=\W)[^\n]*\n(?:[^\n]*\n)*?\s*\1\b/)
	        ),
	        contains: [
	          hljs.END_SAME_AS_BEGIN({
	            begin: /(\w+)/,
	            end: /(\w+)/,
	            contains: [
	              hljs.BACKSLASH_ESCAPE,
	              SUBST
	            ]
	          })
	        ]
	      }
	    ]
	  };

	  // Ruby syntax is underdocumented, but this grammar seems to be accurate
	  // as of version 2.7.2 (confirmed with (irb and `Ripper.sexp(...)`)
	  // https://docs.ruby-lang.org/en/2.7.0/doc/syntax/literals_rdoc.html#label-Numbers
	  const decimal = '[1-9](_?[0-9])*|0';
	  const digits = '[0-9](_?[0-9])*';
	  const NUMBER = {
	    className: 'number',
	    relevance: 0,
	    variants: [
	      // decimal integer/float, optionally exponential or rational, optionally imaginary
	      { begin: `\\b(${decimal})(\\.(${digits}))?([eE][+-]?(${digits})|r)?i?\\b` },

	      // explicit decimal/binary/octal/hexadecimal integer,
	      // optionally rational and/or imaginary
	      { begin: "\\b0[dD][0-9](_?[0-9])*r?i?\\b" },
	      { begin: "\\b0[bB][0-1](_?[0-1])*r?i?\\b" },
	      { begin: "\\b0[oO][0-7](_?[0-7])*r?i?\\b" },
	      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b" },

	      // 0-prefixed implicit octal integer, optionally rational and/or imaginary
	      { begin: "\\b0(_?[0-7])+r?i?\\b" }
	    ]
	  };

	  const PARAMS = {
	    variants: [
	      {
	        match: /\(\)/,
	      },
	      {
	        className: 'params',
	        begin: /\(/,
	        end: /(?=\))/,
	        excludeBegin: true,
	        endsParent: true,
	        keywords: RUBY_KEYWORDS,
	      }
	    ]
	  };

	  const INCLUDE_EXTEND = {
	    match: [
	      /(include|extend)\s+/,
	      CLASS_NAME_WITH_NAMESPACE_RE
	    ],
	    scope: {
	      2: "title.class"
	    },
	    keywords: RUBY_KEYWORDS
	  };

	  const CLASS_DEFINITION = {
	    variants: [
	      {
	        match: [
	          /class\s+/,
	          CLASS_NAME_WITH_NAMESPACE_RE,
	          /\s+<\s+/,
	          CLASS_NAME_WITH_NAMESPACE_RE
	        ]
	      },
	      {
	        match: [
	          /\b(class|module)\s+/,
	          CLASS_NAME_WITH_NAMESPACE_RE
	        ]
	      }
	    ],
	    scope: {
	      2: "title.class",
	      4: "title.class.inherited"
	    },
	    keywords: RUBY_KEYWORDS
	  };

	  const UPPER_CASE_CONSTANT = {
	    relevance: 0,
	    match: /\b[A-Z][A-Z_0-9]+\b/,
	    className: "variable.constant"
	  };

	  const METHOD_DEFINITION = {
	    match: [
	      /def/, /\s+/,
	      RUBY_METHOD_RE
	    ],
	    scope: {
	      1: "keyword",
	      3: "title.function"
	    },
	    contains: [
	      PARAMS
	    ]
	  };

	  const OBJECT_CREATION = {
	    relevance: 0,
	    match: [
	      CLASS_NAME_WITH_NAMESPACE_RE,
	      /\.new[. (]/
	    ],
	    scope: {
	      1: "title.class"
	    }
	  };

	  // CamelCase
	  const CLASS_REFERENCE = {
	    relevance: 0,
	    match: CLASS_NAME_RE,
	    scope: "title.class"
	  };

	  const RUBY_DEFAULT_CONTAINS = [
	    STRING,
	    CLASS_DEFINITION,
	    INCLUDE_EXTEND,
	    OBJECT_CREATION,
	    UPPER_CASE_CONSTANT,
	    CLASS_REFERENCE,
	    METHOD_DEFINITION,
	    {
	      // swallow namespace qualifiers before symbols
	      begin: hljs.IDENT_RE + '::' },
	    {
	      className: 'symbol',
	      begin: hljs.UNDERSCORE_IDENT_RE + '(!|\\?)?:',
	      relevance: 0
	    },
	    {
	      className: 'symbol',
	      begin: ':(?!\\s)',
	      contains: [
	        STRING,
	        { begin: RUBY_METHOD_RE }
	      ],
	      relevance: 0
	    },
	    NUMBER,
	    {
	      // negative-look forward attempts to prevent false matches like:
	      // @ident@ or $ident$ that might indicate this is not ruby at all
	      className: "variable",
	      begin: '(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])' + `(?![A-Za-z])(?![@$?'])`
	    },
	    {
	      className: 'params',
	      begin: /\|/,
	      end: /\|/,
	      excludeBegin: true,
	      excludeEnd: true,
	      relevance: 0, // this could be a lot of things (in other languages) other than params
	      keywords: RUBY_KEYWORDS
	    },
	    { // regexp container
	      begin: '(' + hljs.RE_STARTERS_RE + '|unless)\\s*',
	      keywords: 'unless',
	      contains: [
	        {
	          className: 'regexp',
	          contains: [
	            hljs.BACKSLASH_ESCAPE,
	            SUBST
	          ],
	          illegal: /\n/,
	          variants: [
	            {
	              begin: '/',
	              end: '/[a-z]*'
	            },
	            {
	              begin: /%r\{/,
	              end: /\}[a-z]*/
	            },
	            {
	              begin: '%r\\(',
	              end: '\\)[a-z]*'
	            },
	            {
	              begin: '%r!',
	              end: '![a-z]*'
	            },
	            {
	              begin: '%r\\[',
	              end: '\\][a-z]*'
	            }
	          ]
	        }
	      ].concat(IRB_OBJECT, COMMENT_MODES),
	      relevance: 0
	    }
	  ].concat(IRB_OBJECT, COMMENT_MODES);

	  SUBST.contains = RUBY_DEFAULT_CONTAINS;
	  PARAMS.contains = RUBY_DEFAULT_CONTAINS;

	  // >>
	  // ?>
	  const SIMPLE_PROMPT = "[>?]>";
	  // irb(main):001:0>
	  const DEFAULT_PROMPT = "[\\w#]+\\(\\w+\\):\\d+:\\d+[>*]";
	  const RVM_PROMPT = "(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>";

	  const IRB_DEFAULT = [
	    {
	      begin: /^\s*=>/,
	      starts: {
	        end: '$',
	        contains: RUBY_DEFAULT_CONTAINS
	      }
	    },
	    {
	      className: 'meta.prompt',
	      begin: '^(' + SIMPLE_PROMPT + "|" + DEFAULT_PROMPT + '|' + RVM_PROMPT + ')(?=[ ])',
	      starts: {
	        end: '$',
	        keywords: RUBY_KEYWORDS,
	        contains: RUBY_DEFAULT_CONTAINS
	      }
	    }
	  ];

	  COMMENT_MODES.unshift(IRB_OBJECT);

	  return {
	    name: 'Ruby',
	    aliases: [
	      'rb',
	      'gemspec',
	      'podspec',
	      'thor',
	      'irb'
	    ],
	    keywords: RUBY_KEYWORDS,
	    illegal: /\/\*/,
	    contains: [ hljs.SHEBANG({ binary: "ruby" }) ]
	      .concat(IRB_DEFAULT)
	      .concat(COMMENT_MODES)
	      .concat(RUBY_DEFAULT_CONTAINS)
	  };
	}

	ruby_1 = ruby;
	return ruby_1;
}

/*
Language: ERB (Embedded Ruby)
Requires: xml.js, ruby.js
Author: Lucas Mazza <lucastmazza@gmail.com>
Contributors: Kassio Borges <kassioborgesm@gmail.com>
Description: "Bridge" language defining fragments of Ruby in HTML within <% .. %>
Website: https://ruby-doc.org/stdlib-2.6.5/libdoc/erb/rdoc/ERB.html
Category: template
*/

var erb_1;
var hasRequiredErb;

function requireErb () {
	if (hasRequiredErb) return erb_1;
	hasRequiredErb = 1;
	/** @type LanguageFn */
	function erb(hljs) {
	  return {
	    name: 'ERB',
	    subLanguage: 'xml',
	    contains: [
	      hljs.COMMENT('<%#', '%>'),
	      {
	        begin: '<%[%=-]?',
	        end: '[%-]?%>',
	        subLanguage: 'ruby',
	        excludeBegin: true,
	        excludeEnd: true
	      }
	    ]
	  };
	}

	erb_1 = erb;
	return erb_1;
}

/*
Language: Erlang REPL
Author: Sergey Ignatov <sergey@ignatov.spb.su>
Website: https://www.erlang.org
Category: functional
*/

var erlangRepl_1;
var hasRequiredErlangRepl;

function requireErlangRepl () {
	if (hasRequiredErlangRepl) return erlangRepl_1;
	hasRequiredErlangRepl = 1;
	/** @type LanguageFn */
	function erlangRepl(hljs) {
	  const regex = hljs.regex;
	  return {
	    name: 'Erlang REPL',
	    keywords: {
	      built_in:
	        'spawn spawn_link self',
	      keyword:
	        'after and andalso|10 band begin bnot bor bsl bsr bxor case catch cond div end fun if '
	        + 'let not of or orelse|10 query receive rem try when xor'
	    },
	    contains: [
	      {
	        className: 'meta.prompt',
	        begin: '^[0-9]+> ',
	        relevance: 10
	      },
	      hljs.COMMENT('%', '$'),
	      {
	        className: 'number',
	        begin: '\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)',
	        relevance: 0
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      { begin: regex.concat(
	        /\?(::)?/,
	        /([A-Z]\w*)/, // at least one identifier
	        /((::)[A-Z]\w*)*/ // perhaps more
	      ) },
	      { begin: '->' },
	      { begin: 'ok' },
	      { begin: '!' },
	      {
	        begin: '(\\b[a-z\'][a-zA-Z0-9_\']*:[a-z\'][a-zA-Z0-9_\']*)|(\\b[a-z\'][a-zA-Z0-9_\']*)',
	        relevance: 0
	      },
	      {
	        begin: '[A-Z][a-zA-Z0-9_\']*',
	        relevance: 0
	      }
	    ]
	  };
	}

	erlangRepl_1 = erlangRepl;
	return erlangRepl_1;
}

/*
Language: Erlang
Description: Erlang is a general-purpose functional language, with strict evaluation, single assignment, and dynamic typing.
Author: Nikolay Zakharov <nikolay.desh@gmail.com>, Dmitry Kovega <arhibot@gmail.com>
Website: https://www.erlang.org
Category: functional
*/

var erlang_1;
var hasRequiredErlang;

function requireErlang () {
	if (hasRequiredErlang) return erlang_1;
	hasRequiredErlang = 1;
	/** @type LanguageFn */
	function erlang(hljs) {
	  const BASIC_ATOM_RE = '[a-z\'][a-zA-Z0-9_\']*';
	  const FUNCTION_NAME_RE = '(' + BASIC_ATOM_RE + ':' + BASIC_ATOM_RE + '|' + BASIC_ATOM_RE + ')';
	  const ERLANG_RESERVED = {
	    keyword:
	      'after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if '
	      + 'let not of orelse|10 query receive rem try when xor',
	    literal:
	      'false true'
	  };

	  const COMMENT = hljs.COMMENT('%', '$');
	  const NUMBER = {
	    className: 'number',
	    begin: '\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)',
	    relevance: 0
	  };
	  const NAMED_FUN = { begin: 'fun\\s+' + BASIC_ATOM_RE + '/\\d+' };
	  const FUNCTION_CALL = {
	    begin: FUNCTION_NAME_RE + '\\(',
	    end: '\\)',
	    returnBegin: true,
	    relevance: 0,
	    contains: [
	      {
	        begin: FUNCTION_NAME_RE,
	        relevance: 0
	      },
	      {
	        begin: '\\(',
	        end: '\\)',
	        endsWithParent: true,
	        returnEnd: true,
	        relevance: 0
	        // "contains" defined later
	      }
	    ]
	  };
	  const TUPLE = {
	    begin: /\{/,
	    end: /\}/,
	    relevance: 0
	    // "contains" defined later
	  };
	  const VAR1 = {
	    begin: '\\b_([A-Z][A-Za-z0-9_]*)?',
	    relevance: 0
	  };
	  const VAR2 = {
	    begin: '[A-Z][a-zA-Z0-9_]*',
	    relevance: 0
	  };
	  const RECORD_ACCESS = {
	    begin: '#' + hljs.UNDERSCORE_IDENT_RE,
	    relevance: 0,
	    returnBegin: true,
	    contains: [
	      {
	        begin: '#' + hljs.UNDERSCORE_IDENT_RE,
	        relevance: 0
	      },
	      {
	        begin: /\{/,
	        end: /\}/,
	        relevance: 0
	        // "contains" defined later
	      }
	    ]
	  };

	  const BLOCK_STATEMENTS = {
	    beginKeywords: 'fun receive if try case',
	    end: 'end',
	    keywords: ERLANG_RESERVED
	  };
	  BLOCK_STATEMENTS.contains = [
	    COMMENT,
	    NAMED_FUN,
	    hljs.inherit(hljs.APOS_STRING_MODE, { className: '' }),
	    BLOCK_STATEMENTS,
	    FUNCTION_CALL,
	    hljs.QUOTE_STRING_MODE,
	    NUMBER,
	    TUPLE,
	    VAR1,
	    VAR2,
	    RECORD_ACCESS
	  ];

	  const BASIC_MODES = [
	    COMMENT,
	    NAMED_FUN,
	    BLOCK_STATEMENTS,
	    FUNCTION_CALL,
	    hljs.QUOTE_STRING_MODE,
	    NUMBER,
	    TUPLE,
	    VAR1,
	    VAR2,
	    RECORD_ACCESS
	  ];
	  FUNCTION_CALL.contains[1].contains = BASIC_MODES;
	  TUPLE.contains = BASIC_MODES;
	  RECORD_ACCESS.contains[1].contains = BASIC_MODES;

	  const DIRECTIVES = [
	    "-module",
	    "-record",
	    "-undef",
	    "-export",
	    "-ifdef",
	    "-ifndef",
	    "-author",
	    "-copyright",
	    "-doc",
	    "-vsn",
	    "-import",
	    "-include",
	    "-include_lib",
	    "-compile",
	    "-define",
	    "-else",
	    "-endif",
	    "-file",
	    "-behaviour",
	    "-behavior",
	    "-spec"
	  ];

	  const PARAMS = {
	    className: 'params',
	    begin: '\\(',
	    end: '\\)',
	    contains: BASIC_MODES
	  };
	  return {
	    name: 'Erlang',
	    aliases: [ 'erl' ],
	    keywords: ERLANG_RESERVED,
	    illegal: '(</|\\*=|\\+=|-=|/\\*|\\*/|\\(\\*|\\*\\))',
	    contains: [
	      {
	        className: 'function',
	        begin: '^' + BASIC_ATOM_RE + '\\s*\\(',
	        end: '->',
	        returnBegin: true,
	        illegal: '\\(|#|//|/\\*|\\\\|:|;',
	        contains: [
	          PARAMS,
	          hljs.inherit(hljs.TITLE_MODE, { begin: BASIC_ATOM_RE })
	        ],
	        starts: {
	          end: ';|\\.',
	          keywords: ERLANG_RESERVED,
	          contains: BASIC_MODES
	        }
	      },
	      COMMENT,
	      {
	        begin: '^-',
	        end: '\\.',
	        relevance: 0,
	        excludeEnd: true,
	        returnBegin: true,
	        keywords: {
	          $pattern: '-' + hljs.IDENT_RE,
	          keyword: DIRECTIVES.map(x => `${x}|1.5`).join(" ")
	        },
	        contains: [ PARAMS ]
	      },
	      NUMBER,
	      hljs.QUOTE_STRING_MODE,
	      RECORD_ACCESS,
	      VAR1,
	      VAR2,
	      TUPLE,
	      { begin: /\.$/ } // relevance booster
	    ]
	  };
	}

	erlang_1 = erlang;
	return erlang_1;
}

/*
Language: Excel formulae
Author: Victor Zhou <OiCMudkips@users.noreply.github.com>
Description: Excel formulae
Website: https://products.office.com/en-us/excel/
*/

var excel_1;
var hasRequiredExcel;

function requireExcel () {
	if (hasRequiredExcel) return excel_1;
	hasRequiredExcel = 1;
	/** @type LanguageFn */
	function excel(hljs) {
	  // built-in functions imported from https://web.archive.org/web/20160513042710/https://support.office.com/en-us/article/Excel-functions-alphabetical-b3944572-255d-4efb-bb96-c6d90033e188
	  const BUILT_INS = [
	    "ABS",
	    "ACCRINT",
	    "ACCRINTM",
	    "ACOS",
	    "ACOSH",
	    "ACOT",
	    "ACOTH",
	    "AGGREGATE",
	    "ADDRESS",
	    "AMORDEGRC",
	    "AMORLINC",
	    "AND",
	    "ARABIC",
	    "AREAS",
	    "ASC",
	    "ASIN",
	    "ASINH",
	    "ATAN",
	    "ATAN2",
	    "ATANH",
	    "AVEDEV",
	    "AVERAGE",
	    "AVERAGEA",
	    "AVERAGEIF",
	    "AVERAGEIFS",
	    "BAHTTEXT",
	    "BASE",
	    "BESSELI",
	    "BESSELJ",
	    "BESSELK",
	    "BESSELY",
	    "BETADIST",
	    "BETA.DIST",
	    "BETAINV",
	    "BETA.INV",
	    "BIN2DEC",
	    "BIN2HEX",
	    "BIN2OCT",
	    "BINOMDIST",
	    "BINOM.DIST",
	    "BINOM.DIST.RANGE",
	    "BINOM.INV",
	    "BITAND",
	    "BITLSHIFT",
	    "BITOR",
	    "BITRSHIFT",
	    "BITXOR",
	    "CALL",
	    "CEILING",
	    "CEILING.MATH",
	    "CEILING.PRECISE",
	    "CELL",
	    "CHAR",
	    "CHIDIST",
	    "CHIINV",
	    "CHITEST",
	    "CHISQ.DIST",
	    "CHISQ.DIST.RT",
	    "CHISQ.INV",
	    "CHISQ.INV.RT",
	    "CHISQ.TEST",
	    "CHOOSE",
	    "CLEAN",
	    "CODE",
	    "COLUMN",
	    "COLUMNS",
	    "COMBIN",
	    "COMBINA",
	    "COMPLEX",
	    "CONCAT",
	    "CONCATENATE",
	    "CONFIDENCE",
	    "CONFIDENCE.NORM",
	    "CONFIDENCE.T",
	    "CONVERT",
	    "CORREL",
	    "COS",
	    "COSH",
	    "COT",
	    "COTH",
	    "COUNT",
	    "COUNTA",
	    "COUNTBLANK",
	    "COUNTIF",
	    "COUNTIFS",
	    "COUPDAYBS",
	    "COUPDAYS",
	    "COUPDAYSNC",
	    "COUPNCD",
	    "COUPNUM",
	    "COUPPCD",
	    "COVAR",
	    "COVARIANCE.P",
	    "COVARIANCE.S",
	    "CRITBINOM",
	    "CSC",
	    "CSCH",
	    "CUBEKPIMEMBER",
	    "CUBEMEMBER",
	    "CUBEMEMBERPROPERTY",
	    "CUBERANKEDMEMBER",
	    "CUBESET",
	    "CUBESETCOUNT",
	    "CUBEVALUE",
	    "CUMIPMT",
	    "CUMPRINC",
	    "DATE",
	    "DATEDIF",
	    "DATEVALUE",
	    "DAVERAGE",
	    "DAY",
	    "DAYS",
	    "DAYS360",
	    "DB",
	    "DBCS",
	    "DCOUNT",
	    "DCOUNTA",
	    "DDB",
	    "DEC2BIN",
	    "DEC2HEX",
	    "DEC2OCT",
	    "DECIMAL",
	    "DEGREES",
	    "DELTA",
	    "DEVSQ",
	    "DGET",
	    "DISC",
	    "DMAX",
	    "DMIN",
	    "DOLLAR",
	    "DOLLARDE",
	    "DOLLARFR",
	    "DPRODUCT",
	    "DSTDEV",
	    "DSTDEVP",
	    "DSUM",
	    "DURATION",
	    "DVAR",
	    "DVARP",
	    "EDATE",
	    "EFFECT",
	    "ENCODEURL",
	    "EOMONTH",
	    "ERF",
	    "ERF.PRECISE",
	    "ERFC",
	    "ERFC.PRECISE",
	    "ERROR.TYPE",
	    "EUROCONVERT",
	    "EVEN",
	    "EXACT",
	    "EXP",
	    "EXPON.DIST",
	    "EXPONDIST",
	    "FACT",
	    "FACTDOUBLE",
	    "FALSE|0",
	    "F.DIST",
	    "FDIST",
	    "F.DIST.RT",
	    "FILTERXML",
	    "FIND",
	    "FINDB",
	    "F.INV",
	    "F.INV.RT",
	    "FINV",
	    "FISHER",
	    "FISHERINV",
	    "FIXED",
	    "FLOOR",
	    "FLOOR.MATH",
	    "FLOOR.PRECISE",
	    "FORECAST",
	    "FORECAST.ETS",
	    "FORECAST.ETS.CONFINT",
	    "FORECAST.ETS.SEASONALITY",
	    "FORECAST.ETS.STAT",
	    "FORECAST.LINEAR",
	    "FORMULATEXT",
	    "FREQUENCY",
	    "F.TEST",
	    "FTEST",
	    "FV",
	    "FVSCHEDULE",
	    "GAMMA",
	    "GAMMA.DIST",
	    "GAMMADIST",
	    "GAMMA.INV",
	    "GAMMAINV",
	    "GAMMALN",
	    "GAMMALN.PRECISE",
	    "GAUSS",
	    "GCD",
	    "GEOMEAN",
	    "GESTEP",
	    "GETPIVOTDATA",
	    "GROWTH",
	    "HARMEAN",
	    "HEX2BIN",
	    "HEX2DEC",
	    "HEX2OCT",
	    "HLOOKUP",
	    "HOUR",
	    "HYPERLINK",
	    "HYPGEOM.DIST",
	    "HYPGEOMDIST",
	    "IF",
	    "IFERROR",
	    "IFNA",
	    "IFS",
	    "IMABS",
	    "IMAGINARY",
	    "IMARGUMENT",
	    "IMCONJUGATE",
	    "IMCOS",
	    "IMCOSH",
	    "IMCOT",
	    "IMCSC",
	    "IMCSCH",
	    "IMDIV",
	    "IMEXP",
	    "IMLN",
	    "IMLOG10",
	    "IMLOG2",
	    "IMPOWER",
	    "IMPRODUCT",
	    "IMREAL",
	    "IMSEC",
	    "IMSECH",
	    "IMSIN",
	    "IMSINH",
	    "IMSQRT",
	    "IMSUB",
	    "IMSUM",
	    "IMTAN",
	    "INDEX",
	    "INDIRECT",
	    "INFO",
	    "INT",
	    "INTERCEPT",
	    "INTRATE",
	    "IPMT",
	    "IRR",
	    "ISBLANK",
	    "ISERR",
	    "ISERROR",
	    "ISEVEN",
	    "ISFORMULA",
	    "ISLOGICAL",
	    "ISNA",
	    "ISNONTEXT",
	    "ISNUMBER",
	    "ISODD",
	    "ISREF",
	    "ISTEXT",
	    "ISO.CEILING",
	    "ISOWEEKNUM",
	    "ISPMT",
	    "JIS",
	    "KURT",
	    "LARGE",
	    "LCM",
	    "LEFT",
	    "LEFTB",
	    "LEN",
	    "LENB",
	    "LINEST",
	    "LN",
	    "LOG",
	    "LOG10",
	    "LOGEST",
	    "LOGINV",
	    "LOGNORM.DIST",
	    "LOGNORMDIST",
	    "LOGNORM.INV",
	    "LOOKUP",
	    "LOWER",
	    "MATCH",
	    "MAX",
	    "MAXA",
	    "MAXIFS",
	    "MDETERM",
	    "MDURATION",
	    "MEDIAN",
	    "MID",
	    "MIDBs",
	    "MIN",
	    "MINIFS",
	    "MINA",
	    "MINUTE",
	    "MINVERSE",
	    "MIRR",
	    "MMULT",
	    "MOD",
	    "MODE",
	    "MODE.MULT",
	    "MODE.SNGL",
	    "MONTH",
	    "MROUND",
	    "MULTINOMIAL",
	    "MUNIT",
	    "N",
	    "NA",
	    "NEGBINOM.DIST",
	    "NEGBINOMDIST",
	    "NETWORKDAYS",
	    "NETWORKDAYS.INTL",
	    "NOMINAL",
	    "NORM.DIST",
	    "NORMDIST",
	    "NORMINV",
	    "NORM.INV",
	    "NORM.S.DIST",
	    "NORMSDIST",
	    "NORM.S.INV",
	    "NORMSINV",
	    "NOT",
	    "NOW",
	    "NPER",
	    "NPV",
	    "NUMBERVALUE",
	    "OCT2BIN",
	    "OCT2DEC",
	    "OCT2HEX",
	    "ODD",
	    "ODDFPRICE",
	    "ODDFYIELD",
	    "ODDLPRICE",
	    "ODDLYIELD",
	    "OFFSET",
	    "OR",
	    "PDURATION",
	    "PEARSON",
	    "PERCENTILE.EXC",
	    "PERCENTILE.INC",
	    "PERCENTILE",
	    "PERCENTRANK.EXC",
	    "PERCENTRANK.INC",
	    "PERCENTRANK",
	    "PERMUT",
	    "PERMUTATIONA",
	    "PHI",
	    "PHONETIC",
	    "PI",
	    "PMT",
	    "POISSON.DIST",
	    "POISSON",
	    "POWER",
	    "PPMT",
	    "PRICE",
	    "PRICEDISC",
	    "PRICEMAT",
	    "PROB",
	    "PRODUCT",
	    "PROPER",
	    "PV",
	    "QUARTILE",
	    "QUARTILE.EXC",
	    "QUARTILE.INC",
	    "QUOTIENT",
	    "RADIANS",
	    "RAND",
	    "RANDBETWEEN",
	    "RANK.AVG",
	    "RANK.EQ",
	    "RANK",
	    "RATE",
	    "RECEIVED",
	    "REGISTER.ID",
	    "REPLACE",
	    "REPLACEB",
	    "REPT",
	    "RIGHT",
	    "RIGHTB",
	    "ROMAN",
	    "ROUND",
	    "ROUNDDOWN",
	    "ROUNDUP",
	    "ROW",
	    "ROWS",
	    "RRI",
	    "RSQ",
	    "RTD",
	    "SEARCH",
	    "SEARCHB",
	    "SEC",
	    "SECH",
	    "SECOND",
	    "SERIESSUM",
	    "SHEET",
	    "SHEETS",
	    "SIGN",
	    "SIN",
	    "SINH",
	    "SKEW",
	    "SKEW.P",
	    "SLN",
	    "SLOPE",
	    "SMALL",
	    "SQL.REQUEST",
	    "SQRT",
	    "SQRTPI",
	    "STANDARDIZE",
	    "STDEV",
	    "STDEV.P",
	    "STDEV.S",
	    "STDEVA",
	    "STDEVP",
	    "STDEVPA",
	    "STEYX",
	    "SUBSTITUTE",
	    "SUBTOTAL",
	    "SUM",
	    "SUMIF",
	    "SUMIFS",
	    "SUMPRODUCT",
	    "SUMSQ",
	    "SUMX2MY2",
	    "SUMX2PY2",
	    "SUMXMY2",
	    "SWITCH",
	    "SYD",
	    "T",
	    "TAN",
	    "TANH",
	    "TBILLEQ",
	    "TBILLPRICE",
	    "TBILLYIELD",
	    "T.DIST",
	    "T.DIST.2T",
	    "T.DIST.RT",
	    "TDIST",
	    "TEXT",
	    "TEXTJOIN",
	    "TIME",
	    "TIMEVALUE",
	    "T.INV",
	    "T.INV.2T",
	    "TINV",
	    "TODAY",
	    "TRANSPOSE",
	    "TREND",
	    "TRIM",
	    "TRIMMEAN",
	    "TRUE|0",
	    "TRUNC",
	    "T.TEST",
	    "TTEST",
	    "TYPE",
	    "UNICHAR",
	    "UNICODE",
	    "UPPER",
	    "VALUE",
	    "VAR",
	    "VAR.P",
	    "VAR.S",
	    "VARA",
	    "VARP",
	    "VARPA",
	    "VDB",
	    "VLOOKUP",
	    "WEBSERVICE",
	    "WEEKDAY",
	    "WEEKNUM",
	    "WEIBULL",
	    "WEIBULL.DIST",
	    "WORKDAY",
	    "WORKDAY.INTL",
	    "XIRR",
	    "XNPV",
	    "XOR",
	    "YEAR",
	    "YEARFRAC",
	    "YIELD",
	    "YIELDDISC",
	    "YIELDMAT",
	    "Z.TEST",
	    "ZTEST"
	  ];
	  return {
	    name: 'Excel formulae',
	    aliases: [
	      'xlsx',
	      'xls'
	    ],
	    case_insensitive: true,
	    keywords: {
	      $pattern: /[a-zA-Z][\w\.]*/,
	      built_in: BUILT_INS
	    },
	    contains: [
	      {
	        /* matches a beginning equal sign found in Excel formula examples */
	        begin: /^=/,
	        end: /[^=]/,
	        returnEnd: true,
	        illegal: /=/, /* only allow single equal sign at front of line */
	        relevance: 10
	      },
	      /* technically, there can be more than 2 letters in column names, but this prevents conflict with some keywords */
	      {
	        /* matches a reference to a single cell */
	        className: 'symbol',
	        begin: /\b[A-Z]{1,2}\d+\b/,
	        end: /[^\d]/,
	        excludeEnd: true,
	        relevance: 0
	      },
	      {
	        /* matches a reference to a range of cells */
	        className: 'symbol',
	        begin: /[A-Z]{0,2}\d*:[A-Z]{0,2}\d*/,
	        relevance: 0
	      },
	      hljs.BACKSLASH_ESCAPE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'number',
	        begin: hljs.NUMBER_RE + '(%)?',
	        relevance: 0
	      },
	      /* Excel formula comments are done by putting the comment in a function call to N() */
	      hljs.COMMENT(/\bN\(/, /\)/,
	        {
	          excludeBegin: true,
	          excludeEnd: true,
	          illegal: /\n/
	        })
	    ]
	  };
	}

	excel_1 = excel;
	return excel_1;
}

/*
Language: FIX
Author: Brent Bradbury <brent@brentium.com>
*/

var fix_1;
var hasRequiredFix;

function requireFix () {
	if (hasRequiredFix) return fix_1;
	hasRequiredFix = 1;
	/** @type LanguageFn */
	function fix(hljs) {
	  return {
	    name: 'FIX',
	    contains: [
	      {
	        begin: /[^\u2401\u0001]+/,
	        end: /[\u2401\u0001]/,
	        excludeEnd: true,
	        returnBegin: true,
	        returnEnd: false,
	        contains: [
	          {
	            begin: /([^\u2401\u0001=]+)/,
	            end: /=([^\u2401\u0001=]+)/,
	            returnEnd: true,
	            returnBegin: false,
	            className: 'attr'
	          },
	          {
	            begin: /=/,
	            end: /([\u2401\u0001])/,
	            excludeEnd: true,
	            excludeBegin: true,
	            className: 'string'
	          }
	        ]
	      }
	    ],
	    case_insensitive: true
	  };
	}

	fix_1 = fix;
	return fix_1;
}

/*
 Language: Flix
 Category: functional
 Author: Magnus Madsen <mmadsen@uwaterloo.ca>
 Website: https://flix.dev/
 */

var flix_1;
var hasRequiredFlix;

function requireFlix () {
	if (hasRequiredFlix) return flix_1;
	hasRequiredFlix = 1;
	/** @type LanguageFn */
	function flix(hljs) {
	  const CHAR = {
	    className: 'string',
	    begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
	  };

	  const STRING = {
	    className: 'string',
	    variants: [
	      {
	        begin: '"',
	        end: '"'
	      }
	    ]
	  };

	  const NAME = {
	    className: 'title',
	    relevance: 0,
	    begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/
	  };

	  const METHOD = {
	    className: 'function',
	    beginKeywords: 'def',
	    end: /[:={\[(\n;]/,
	    excludeEnd: true,
	    contains: [ NAME ]
	  };

	  return {
	    name: 'Flix',
	    keywords: {
	      keyword: [
	        "case",
	        "class",
	        "def",
	        "else",
	        "enum",
	        "if",
	        "impl",
	        "import",
	        "in",
	        "lat",
	        "rel",
	        "index",
	        "let",
	        "match",
	        "namespace",
	        "switch",
	        "type",
	        "yield",
	        "with"
	      ],
	      literal: [
	        "true",
	        "false"
	      ]
	    },
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      CHAR,
	      STRING,
	      METHOD,
	      hljs.C_NUMBER_MODE
	    ]
	  };
	}

	flix_1 = flix;
	return flix_1;
}

/*
Language: Fortran
Author: Anthony Scemama <scemama@irsamc.ups-tlse.fr>
Website: https://en.wikipedia.org/wiki/Fortran
Category: scientific
*/

var fortran_1;
var hasRequiredFortran;

function requireFortran () {
	if (hasRequiredFortran) return fortran_1;
	hasRequiredFortran = 1;
	/** @type LanguageFn */
	function fortran(hljs) {
	  const regex = hljs.regex;
	  const PARAMS = {
	    className: 'params',
	    begin: '\\(',
	    end: '\\)'
	  };

	  const COMMENT = { variants: [
	    hljs.COMMENT('!', '$', { relevance: 0 }),
	    // allow FORTRAN 77 style comments
	    hljs.COMMENT('^C[ ]', '$', { relevance: 0 }),
	    hljs.COMMENT('^C$', '$', { relevance: 0 })
	  ] };

	  // regex in both fortran and irpf90 should match
	  const OPTIONAL_NUMBER_SUFFIX = /(_[a-z_\d]+)?/;
	  const OPTIONAL_NUMBER_EXP = /([de][+-]?\d+)?/;
	  const NUMBER = {
	    className: 'number',
	    variants: [
	      { begin: regex.concat(/\b\d+/, /\.(\d*)/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
	      { begin: regex.concat(/\b\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
	      { begin: regex.concat(/\.\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) }
	    ],
	    relevance: 0
	  };

	  const FUNCTION_DEF = {
	    className: 'function',
	    beginKeywords: 'subroutine function program',
	    illegal: '[${=\\n]',
	    contains: [
	      hljs.UNDERSCORE_TITLE_MODE,
	      PARAMS
	    ]
	  };

	  const STRING = {
	    className: 'string',
	    relevance: 0,
	    variants: [
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE
	    ]
	  };

	  const KEYWORDS = [
	    "kind",
	    "do",
	    "concurrent",
	    "local",
	    "shared",
	    "while",
	    "private",
	    "call",
	    "intrinsic",
	    "where",
	    "elsewhere",
	    "type",
	    "endtype",
	    "endmodule",
	    "endselect",
	    "endinterface",
	    "end",
	    "enddo",
	    "endif",
	    "if",
	    "forall",
	    "endforall",
	    "only",
	    "contains",
	    "default",
	    "return",
	    "stop",
	    "then",
	    "block",
	    "endblock",
	    "endassociate",
	    "public",
	    "subroutine|10",
	    "function",
	    "program",
	    ".and.",
	    ".or.",
	    ".not.",
	    ".le.",
	    ".eq.",
	    ".ge.",
	    ".gt.",
	    ".lt.",
	    "goto",
	    "save",
	    "else",
	    "use",
	    "module",
	    "select",
	    "case",
	    "access",
	    "blank",
	    "direct",
	    "exist",
	    "file",
	    "fmt",
	    "form",
	    "formatted",
	    "iostat",
	    "name",
	    "named",
	    "nextrec",
	    "number",
	    "opened",
	    "rec",
	    "recl",
	    "sequential",
	    "status",
	    "unformatted",
	    "unit",
	    "continue",
	    "format",
	    "pause",
	    "cycle",
	    "exit",
	    "c_null_char",
	    "c_alert",
	    "c_backspace",
	    "c_form_feed",
	    "flush",
	    "wait",
	    "decimal",
	    "round",
	    "iomsg",
	    "synchronous",
	    "nopass",
	    "non_overridable",
	    "pass",
	    "protected",
	    "volatile",
	    "abstract",
	    "extends",
	    "import",
	    "non_intrinsic",
	    "value",
	    "deferred",
	    "generic",
	    "final",
	    "enumerator",
	    "class",
	    "associate",
	    "bind",
	    "enum",
	    "c_int",
	    "c_short",
	    "c_long",
	    "c_long_long",
	    "c_signed_char",
	    "c_size_t",
	    "c_int8_t",
	    "c_int16_t",
	    "c_int32_t",
	    "c_int64_t",
	    "c_int_least8_t",
	    "c_int_least16_t",
	    "c_int_least32_t",
	    "c_int_least64_t",
	    "c_int_fast8_t",
	    "c_int_fast16_t",
	    "c_int_fast32_t",
	    "c_int_fast64_t",
	    "c_intmax_t",
	    "C_intptr_t",
	    "c_float",
	    "c_double",
	    "c_long_double",
	    "c_float_complex",
	    "c_double_complex",
	    "c_long_double_complex",
	    "c_bool",
	    "c_char",
	    "c_null_ptr",
	    "c_null_funptr",
	    "c_new_line",
	    "c_carriage_return",
	    "c_horizontal_tab",
	    "c_vertical_tab",
	    "iso_c_binding",
	    "c_loc",
	    "c_funloc",
	    "c_associated",
	    "c_f_pointer",
	    "c_ptr",
	    "c_funptr",
	    "iso_fortran_env",
	    "character_storage_size",
	    "error_unit",
	    "file_storage_size",
	    "input_unit",
	    "iostat_end",
	    "iostat_eor",
	    "numeric_storage_size",
	    "output_unit",
	    "c_f_procpointer",
	    "ieee_arithmetic",
	    "ieee_support_underflow_control",
	    "ieee_get_underflow_mode",
	    "ieee_set_underflow_mode",
	    "newunit",
	    "contiguous",
	    "recursive",
	    "pad",
	    "position",
	    "action",
	    "delim",
	    "readwrite",
	    "eor",
	    "advance",
	    "nml",
	    "interface",
	    "procedure",
	    "namelist",
	    "include",
	    "sequence",
	    "elemental",
	    "pure",
	    "impure",
	    "integer",
	    "real",
	    "character",
	    "complex",
	    "logical",
	    "codimension",
	    "dimension",
	    "allocatable|10",
	    "parameter",
	    "external",
	    "implicit|10",
	    "none",
	    "double",
	    "precision",
	    "assign",
	    "intent",
	    "optional",
	    "pointer",
	    "target",
	    "in",
	    "out",
	    "common",
	    "equivalence",
	    "data"
	  ];
	  const LITERALS = [
	    ".False.",
	    ".True."
	  ];
	  const BUILT_INS = [
	    "alog",
	    "alog10",
	    "amax0",
	    "amax1",
	    "amin0",
	    "amin1",
	    "amod",
	    "cabs",
	    "ccos",
	    "cexp",
	    "clog",
	    "csin",
	    "csqrt",
	    "dabs",
	    "dacos",
	    "dasin",
	    "datan",
	    "datan2",
	    "dcos",
	    "dcosh",
	    "ddim",
	    "dexp",
	    "dint",
	    "dlog",
	    "dlog10",
	    "dmax1",
	    "dmin1",
	    "dmod",
	    "dnint",
	    "dsign",
	    "dsin",
	    "dsinh",
	    "dsqrt",
	    "dtan",
	    "dtanh",
	    "float",
	    "iabs",
	    "idim",
	    "idint",
	    "idnint",
	    "ifix",
	    "isign",
	    "max0",
	    "max1",
	    "min0",
	    "min1",
	    "sngl",
	    "algama",
	    "cdabs",
	    "cdcos",
	    "cdexp",
	    "cdlog",
	    "cdsin",
	    "cdsqrt",
	    "cqabs",
	    "cqcos",
	    "cqexp",
	    "cqlog",
	    "cqsin",
	    "cqsqrt",
	    "dcmplx",
	    "dconjg",
	    "derf",
	    "derfc",
	    "dfloat",
	    "dgamma",
	    "dimag",
	    "dlgama",
	    "iqint",
	    "qabs",
	    "qacos",
	    "qasin",
	    "qatan",
	    "qatan2",
	    "qcmplx",
	    "qconjg",
	    "qcos",
	    "qcosh",
	    "qdim",
	    "qerf",
	    "qerfc",
	    "qexp",
	    "qgamma",
	    "qimag",
	    "qlgama",
	    "qlog",
	    "qlog10",
	    "qmax1",
	    "qmin1",
	    "qmod",
	    "qnint",
	    "qsign",
	    "qsin",
	    "qsinh",
	    "qsqrt",
	    "qtan",
	    "qtanh",
	    "abs",
	    "acos",
	    "aimag",
	    "aint",
	    "anint",
	    "asin",
	    "atan",
	    "atan2",
	    "char",
	    "cmplx",
	    "conjg",
	    "cos",
	    "cosh",
	    "exp",
	    "ichar",
	    "index",
	    "int",
	    "log",
	    "log10",
	    "max",
	    "min",
	    "nint",
	    "sign",
	    "sin",
	    "sinh",
	    "sqrt",
	    "tan",
	    "tanh",
	    "print",
	    "write",
	    "dim",
	    "lge",
	    "lgt",
	    "lle",
	    "llt",
	    "mod",
	    "nullify",
	    "allocate",
	    "deallocate",
	    "adjustl",
	    "adjustr",
	    "all",
	    "allocated",
	    "any",
	    "associated",
	    "bit_size",
	    "btest",
	    "ceiling",
	    "count",
	    "cshift",
	    "date_and_time",
	    "digits",
	    "dot_product",
	    "eoshift",
	    "epsilon",
	    "exponent",
	    "floor",
	    "fraction",
	    "huge",
	    "iand",
	    "ibclr",
	    "ibits",
	    "ibset",
	    "ieor",
	    "ior",
	    "ishft",
	    "ishftc",
	    "lbound",
	    "len_trim",
	    "matmul",
	    "maxexponent",
	    "maxloc",
	    "maxval",
	    "merge",
	    "minexponent",
	    "minloc",
	    "minval",
	    "modulo",
	    "mvbits",
	    "nearest",
	    "pack",
	    "present",
	    "product",
	    "radix",
	    "random_number",
	    "random_seed",
	    "range",
	    "repeat",
	    "reshape",
	    "rrspacing",
	    "scale",
	    "scan",
	    "selected_int_kind",
	    "selected_real_kind",
	    "set_exponent",
	    "shape",
	    "size",
	    "spacing",
	    "spread",
	    "sum",
	    "system_clock",
	    "tiny",
	    "transpose",
	    "trim",
	    "ubound",
	    "unpack",
	    "verify",
	    "achar",
	    "iachar",
	    "transfer",
	    "dble",
	    "entry",
	    "dprod",
	    "cpu_time",
	    "command_argument_count",
	    "get_command",
	    "get_command_argument",
	    "get_environment_variable",
	    "is_iostat_end",
	    "ieee_arithmetic",
	    "ieee_support_underflow_control",
	    "ieee_get_underflow_mode",
	    "ieee_set_underflow_mode",
	    "is_iostat_eor",
	    "move_alloc",
	    "new_line",
	    "selected_char_kind",
	    "same_type_as",
	    "extends_type_of",
	    "acosh",
	    "asinh",
	    "atanh",
	    "bessel_j0",
	    "bessel_j1",
	    "bessel_jn",
	    "bessel_y0",
	    "bessel_y1",
	    "bessel_yn",
	    "erf",
	    "erfc",
	    "erfc_scaled",
	    "gamma",
	    "log_gamma",
	    "hypot",
	    "norm2",
	    "atomic_define",
	    "atomic_ref",
	    "execute_command_line",
	    "leadz",
	    "trailz",
	    "storage_size",
	    "merge_bits",
	    "bge",
	    "bgt",
	    "ble",
	    "blt",
	    "dshiftl",
	    "dshiftr",
	    "findloc",
	    "iall",
	    "iany",
	    "iparity",
	    "image_index",
	    "lcobound",
	    "ucobound",
	    "maskl",
	    "maskr",
	    "num_images",
	    "parity",
	    "popcnt",
	    "poppar",
	    "shifta",
	    "shiftl",
	    "shiftr",
	    "this_image",
	    "sync",
	    "change",
	    "team",
	    "co_broadcast",
	    "co_max",
	    "co_min",
	    "co_sum",
	    "co_reduce"
	  ];
	  return {
	    name: 'Fortran',
	    case_insensitive: true,
	    aliases: [
	      'f90',
	      'f95'
	    ],
	    keywords: {
	      keyword: KEYWORDS,
	      literal: LITERALS,
	      built_in: BUILT_INS
	    },
	    illegal: /\/\*/,
	    contains: [
	      STRING,
	      FUNCTION_DEF,
	      // allow `C = value` for assignments so they aren't misdetected
	      // as Fortran 77 style comments
	      {
	        begin: /^C\s*=(?!=)/,
	        relevance: 0
	      },
	      COMMENT,
	      NUMBER
	    ]
	  };
	}

	fortran_1 = fortran;
	return fortran_1;
}

/**
 * @param {string} value
 * @returns {RegExp}
 * */

var fsharp_1;
var hasRequiredFsharp;

function requireFsharp () {
	if (hasRequiredFsharp) return fsharp_1;
	hasRequiredFsharp = 1;
	function escape(value) {
	  return new RegExp(value.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'), 'm');
	}

	/**
	 * @param {RegExp | string } re
	 * @returns {string}
	 */
	function source(re) {
	  if (!re) return null;
	  if (typeof re === "string") return re;

	  return re.source;
	}

	/**
	 * @param {RegExp | string } re
	 * @returns {string}
	 */
	function lookahead(re) {
	  return concat('(?=', re, ')');
	}

	/**
	 * @param {...(RegExp | string) } args
	 * @returns {string}
	 */
	function concat(...args) {
	  const joined = args.map((x) => source(x)).join("");
	  return joined;
	}

	/**
	 * @param { Array<string | RegExp | Object> } args
	 * @returns {object}
	 */
	function stripOptionsFromArgs(args) {
	  const opts = args[args.length - 1];

	  if (typeof opts === 'object' && opts.constructor === Object) {
	    args.splice(args.length - 1, 1);
	    return opts;
	  } else {
	    return {};
	  }
	}

	/** @typedef { {capture?: boolean} } RegexEitherOptions */

	/**
	 * Any of the passed expresssions may match
	 *
	 * Creates a huge this | this | that | that match
	 * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args
	 * @returns {string}
	 */
	function either(...args) {
	  /** @type { object & {capture?: boolean} }  */
	  const opts = stripOptionsFromArgs(args);
	  const joined = '('
	    + (opts.capture ? "" : "?:")
	    + args.map((x) => source(x)).join("|") + ")";
	  return joined;
	}

	/*
	Language: F#
	Author: Jonas Follesø <jonas@follesoe.no>
	Contributors: Troy Kershaw <hello@troykershaw.com>, Henrik Feldt <henrik@haf.se>, Melvyn Laïly <melvyn.laily@gmail.com>
	Website: https://docs.microsoft.com/en-us/dotnet/fsharp/
	Category: functional
	*/


	/** @type LanguageFn */
	function fsharp(hljs) {
	  const KEYWORDS = [
	    "abstract",
	    "and",
	    "as",
	    "assert",
	    "base",
	    "begin",
	    "class",
	    "default",
	    "delegate",
	    "do",
	    "done",
	    "downcast",
	    "downto",
	    "elif",
	    "else",
	    "end",
	    "exception",
	    "extern",
	    // "false", // literal
	    "finally",
	    "fixed",
	    "for",
	    "fun",
	    "function",
	    "global",
	    "if",
	    "in",
	    "inherit",
	    "inline",
	    "interface",
	    "internal",
	    "lazy",
	    "let",
	    "match",
	    "member",
	    "module",
	    "mutable",
	    "namespace",
	    "new",
	    // "not", // built_in
	    // "null", // literal
	    "of",
	    "open",
	    "or",
	    "override",
	    "private",
	    "public",
	    "rec",
	    "return",
	    "static",
	    "struct",
	    "then",
	    "to",
	    // "true", // literal
	    "try",
	    "type",
	    "upcast",
	    "use",
	    "val",
	    "void",
	    "when",
	    "while",
	    "with",
	    "yield"
	  ];

	  const BANG_KEYWORD_MODE = {
	    // monad builder keywords (matches before non-bang keywords)
	    scope: 'keyword',
	    match: /\b(yield|return|let|do|match|use)!/
	  };

	  const PREPROCESSOR_KEYWORDS = [
	    "if",
	    "else",
	    "endif",
	    "line",
	    "nowarn",
	    "light",
	    "r",
	    "i",
	    "I",
	    "load",
	    "time",
	    "help",
	    "quit"
	  ];

	  const LITERALS = [
	    "true",
	    "false",
	    "null",
	    "Some",
	    "None",
	    "Ok",
	    "Error",
	    "infinity",
	    "infinityf",
	    "nan",
	    "nanf"
	  ];

	  const SPECIAL_IDENTIFIERS = [
	    "__LINE__",
	    "__SOURCE_DIRECTORY__",
	    "__SOURCE_FILE__"
	  ];

	  // Since it's possible to re-bind/shadow names (e.g. let char = 'c'),
	  // these builtin types should only be matched when a type name is expected.
	  const KNOWN_TYPES = [
	    // basic types
	    "bool",
	    "byte",
	    "sbyte",
	    "int8",
	    "int16",
	    "int32",
	    "uint8",
	    "uint16",
	    "uint32",
	    "int",
	    "uint",
	    "int64",
	    "uint64",
	    "nativeint",
	    "unativeint",
	    "decimal",
	    "float",
	    "double",
	    "float32",
	    "single",
	    "char",
	    "string",
	    "unit",
	    "bigint",
	    // other native types or lowercase aliases
	    "option",
	    "voption",
	    "list",
	    "array",
	    "seq",
	    "byref",
	    "exn",
	    "inref",
	    "nativeptr",
	    "obj",
	    "outref",
	    "voidptr",
	    // other important FSharp types
	    "Result"
	  ];

	  const BUILTINS = [
	    // Somewhat arbitrary list of builtin functions and values.
	    // Most of them are declared in Microsoft.FSharp.Core
	    // I tried to stay relevant by adding only the most idiomatic
	    // and most used symbols that are not already declared as types.
	    "not",
	    "ref",
	    "raise",
	    "reraise",
	    "dict",
	    "readOnlyDict",
	    "set",
	    "get",
	    "enum",
	    "sizeof",
	    "typeof",
	    "typedefof",
	    "nameof",
	    "nullArg",
	    "invalidArg",
	    "invalidOp",
	    "id",
	    "fst",
	    "snd",
	    "ignore",
	    "lock",
	    "using",
	    "box",
	    "unbox",
	    "tryUnbox",
	    "printf",
	    "printfn",
	    "sprintf",
	    "eprintf",
	    "eprintfn",
	    "fprintf",
	    "fprintfn",
	    "failwith",
	    "failwithf"
	  ];

	  const ALL_KEYWORDS = {
	    keyword: KEYWORDS,
	    literal: LITERALS,
	    built_in: BUILTINS,
	    'variable.constant': SPECIAL_IDENTIFIERS
	  };

	  // (* potentially multi-line Meta Language style comment *)
	  const ML_COMMENT =
	    hljs.COMMENT(/\(\*(?!\))/, /\*\)/, {
	      contains: ["self"]
	    });
	  // Either a multi-line (* Meta Language style comment *) or a single line // C style comment.
	  const COMMENT = {
	    variants: [
	      ML_COMMENT,
	      hljs.C_LINE_COMMENT_MODE,
	    ]
	  };

	  // Most identifiers can contain apostrophes
	  const IDENTIFIER_RE = /[a-zA-Z_](\w|')*/;

	  const QUOTED_IDENTIFIER = {
	    scope: 'variable',
	    begin: /``/,
	    end: /``/
	  };

	  // 'a or ^a where a can be a ``quoted identifier``
	  const BEGIN_GENERIC_TYPE_SYMBOL_RE = /\B('|\^)/;
	  const GENERIC_TYPE_SYMBOL = {
	    scope: 'symbol',
	    variants: [
	      // the type name is a quoted identifier:
	      { match: concat(BEGIN_GENERIC_TYPE_SYMBOL_RE, /``.*?``/) },
	      // the type name is a normal identifier (we don't use IDENTIFIER_RE because there cannot be another apostrophe here):
	      { match: concat(BEGIN_GENERIC_TYPE_SYMBOL_RE, hljs.UNDERSCORE_IDENT_RE) }
	    ],
	    relevance: 0
	  };

	  const makeOperatorMode = function({ includeEqual }) {
	    // List or symbolic operator characters from the FSharp Spec 4.1, minus the dot, and with `?` added, used for nullable operators.
	    let allOperatorChars;
	    if (includeEqual)
	      allOperatorChars = "!%&*+-/<=>@^|~?";
	    else
	      allOperatorChars = "!%&*+-/<>@^|~?";
	    const OPERATOR_CHARS = Array.from(allOperatorChars);
	    const OPERATOR_CHAR_RE = concat('[', ...OPERATOR_CHARS.map(escape), ']');
	    // The lone dot operator is special. It cannot be redefined, and we don't want to highlight it. It can be used as part of a multi-chars operator though.
	    const OPERATOR_CHAR_OR_DOT_RE = either(OPERATOR_CHAR_RE, /\./);
	    // When a dot is present, it must be followed by another operator char:
	    const OPERATOR_FIRST_CHAR_OF_MULTIPLE_RE = concat(OPERATOR_CHAR_OR_DOT_RE, lookahead(OPERATOR_CHAR_OR_DOT_RE));
	    const SYMBOLIC_OPERATOR_RE = either(
	      concat(OPERATOR_FIRST_CHAR_OF_MULTIPLE_RE, OPERATOR_CHAR_OR_DOT_RE, '*'), // Matches at least 2 chars operators
	      concat(OPERATOR_CHAR_RE, '+'), // Matches at least one char operators
	    );
	    return {
	      scope: 'operator',
	      match: either(
	        // symbolic operators:
	        SYMBOLIC_OPERATOR_RE,
	        // other symbolic keywords:
	        // Type casting and conversion operators:
	        /:\?>/,
	        /:\?/,
	        /:>/,
	        /:=/, // Reference cell assignment
	        /::?/, // : or ::
	        /\$/), // A single $ can be used as an operator
	      relevance: 0
	    };
	  };

	  const OPERATOR = makeOperatorMode({ includeEqual: true });
	  // This variant is used when matching '=' should end a parent mode:
	  const OPERATOR_WITHOUT_EQUAL = makeOperatorMode({ includeEqual: false });

	  const makeTypeAnnotationMode = function(prefix, prefixScope) {
	    return {
	      begin: concat( // a type annotation is a
	        prefix,            // should be a colon or the 'of' keyword
	        lookahead(   // that has to be followed by
	          concat(
	            /\s*/,         // optional space
	            either(  // then either of:
	              /\w/,        // word
	              /'/,         // generic type name
	              /\^/,        // generic type name
	              /#/,         // flexible type name
	              /``/,        // quoted type name
	              /\(/,        // parens type expression
	              /{\|/,       // anonymous type annotation
	      )))),
	      beginScope: prefixScope,
	      // BUG: because ending with \n is necessary for some cases, multi-line type annotations are not properly supported.
	      // Examples where \n is required at the end:
	      // - abstract member definitions in classes: abstract Property : int * string
	      // - return type annotations: let f f' = f' () : returnTypeAnnotation
	      // - record fields definitions: { A : int \n B : string }
	      end: lookahead(
	        either(
	          /\n/,
	          /=/)),
	      relevance: 0,
	      // we need the known types, and we need the type constraint keywords and literals. e.g.: when 'a : null
	      keywords: hljs.inherit(ALL_KEYWORDS, { type: KNOWN_TYPES }),
	      contains: [
	        COMMENT,
	        GENERIC_TYPE_SYMBOL,
	        hljs.inherit(QUOTED_IDENTIFIER, { scope: null }), // match to avoid strange patterns inside that may break the parsing
	        OPERATOR_WITHOUT_EQUAL
	      ]
	    };
	  };

	  const TYPE_ANNOTATION = makeTypeAnnotationMode(/:/, 'operator');
	  const DISCRIMINATED_UNION_TYPE_ANNOTATION = makeTypeAnnotationMode(/\bof\b/, 'keyword');

	  // type MyType<'a> = ...
	  const TYPE_DECLARATION = {
	    begin: [
	      /(^|\s+)/, // prevents matching the following: `match s.stype with`
	      /type/,
	      /\s+/,
	      IDENTIFIER_RE
	    ],
	    beginScope: {
	      2: 'keyword',
	      4: 'title.class'
	    },
	    end: lookahead(/\(|=|$/),
	    keywords: ALL_KEYWORDS, // match keywords in type constraints. e.g.: when 'a : null
	    contains: [
	      COMMENT,
	      hljs.inherit(QUOTED_IDENTIFIER, { scope: null }), // match to avoid strange patterns inside that may break the parsing
	      GENERIC_TYPE_SYMBOL,
	      {
	        // For visual consistency, highlight type brackets as operators.
	        scope: 'operator',
	        match: /<|>/
	      },
	      TYPE_ANNOTATION // generic types can have constraints, which are type annotations. e.g. type MyType<'T when 'T : delegate<obj * string>> =
	    ]
	  };

	  const COMPUTATION_EXPRESSION = {
	    // computation expressions:
	    scope: 'computation-expression',
	    // BUG: might conflict with record deconstruction. e.g. let f { Name = name } = name // will highlight f
	    match: /\b[_a-z]\w*(?=\s*\{)/
	  };

	  const PREPROCESSOR = {
	    // preprocessor directives and fsi commands:
	    begin: [
	      /^\s*/,
	      concat(/#/, either(...PREPROCESSOR_KEYWORDS)),
	      /\b/
	    ],
	    beginScope: { 2: 'meta' },
	    end: lookahead(/\s|$/)
	  };

	  // TODO: this definition is missing support for type suffixes and octal notation.
	  // BUG: range operator without any space is wrongly interpreted as a single number (e.g. 1..10 )
	  const NUMBER = {
	    variants: [
	      hljs.BINARY_NUMBER_MODE,
	      hljs.C_NUMBER_MODE
	    ]
	  };

	  // All the following string definitions are potentially multi-line.
	  // BUG: these definitions are missing support for byte strings (suffixed with B)

	  // "..."
	  const QUOTED_STRING = {
	    scope: 'string',
	    begin: /"/,
	    end: /"/,
	    contains: [
	      hljs.BACKSLASH_ESCAPE
	    ]
	  };
	  // @"..."
	  const VERBATIM_STRING = {
	    scope: 'string',
	    begin: /@"/,
	    end: /"/,
	    contains: [
	      {
	        match: /""/ // escaped "
	      },
	      hljs.BACKSLASH_ESCAPE
	    ]
	  };
	  // """..."""
	  const TRIPLE_QUOTED_STRING = {
	    scope: 'string',
	    begin: /"""/,
	    end: /"""/,
	    relevance: 2
	  };
	  const SUBST = {
	    scope: 'subst',
	    begin: /\{/,
	    end: /\}/,
	    keywords: ALL_KEYWORDS
	  };
	  // $"...{1+1}..."
	  const INTERPOLATED_STRING = {
	    scope: 'string',
	    begin: /\$"/,
	    end: /"/,
	    contains: [
	      {
	        match: /\{\{/ // escaped {
	      },
	      {
	        match: /\}\}/ // escaped }
	      },
	      hljs.BACKSLASH_ESCAPE,
	      SUBST
	    ]
	  };
	  // $@"...{1+1}..."
	  const INTERPOLATED_VERBATIM_STRING = {
	    scope: 'string',
	    begin: /(\$@|@\$)"/,
	    end: /"/,
	    contains: [
	      {
	        match: /\{\{/ // escaped {
	      },
	      {
	        match: /\}\}/ // escaped }
	      },
	      {
	        match: /""/
	      },
	      hljs.BACKSLASH_ESCAPE,
	      SUBST
	    ]
	  };
	  // $"""...{1+1}..."""
	  const INTERPOLATED_TRIPLE_QUOTED_STRING = {
	    scope: 'string',
	    begin: /\$"""/,
	    end: /"""/,
	    contains: [
	      {
	        match: /\{\{/ // escaped {
	      },
	      {
	        match: /\}\}/ // escaped }
	      },
	      SUBST
	    ],
	    relevance: 2
	  };
	  // '.'
	  const CHAR_LITERAL = {
	    scope: 'string',
	    match: concat(
	      /'/,
	      either(
	        /[^\\']/, // either a single non escaped char...
	        /\\(?:.|\d{3}|x[a-fA-F\d]{2}|u[a-fA-F\d]{4}|U[a-fA-F\d]{8})/ // ...or an escape sequence
	      ),
	      /'/
	    )
	  };
	  // F# allows a lot of things inside string placeholders.
	  // Things that don't currently seem allowed by the compiler: types definition, attributes usage.
	  // (Strictly speaking, some of the followings are only allowed inside triple quoted interpolated strings...)
	  SUBST.contains = [
	    INTERPOLATED_VERBATIM_STRING,
	    INTERPOLATED_STRING,
	    VERBATIM_STRING,
	    QUOTED_STRING,
	    CHAR_LITERAL,
	    BANG_KEYWORD_MODE,
	    COMMENT,
	    QUOTED_IDENTIFIER,
	    TYPE_ANNOTATION,
	    COMPUTATION_EXPRESSION,
	    PREPROCESSOR,
	    NUMBER,
	    GENERIC_TYPE_SYMBOL,
	    OPERATOR
	  ];
	  const STRING = {
	    variants: [
	      INTERPOLATED_TRIPLE_QUOTED_STRING,
	      INTERPOLATED_VERBATIM_STRING,
	      INTERPOLATED_STRING,
	      TRIPLE_QUOTED_STRING,
	      VERBATIM_STRING,
	      QUOTED_STRING,
	      CHAR_LITERAL
	    ]
	  };

	  return {
	    name: 'F#',
	    aliases: [
	      'fs',
	      'f#'
	    ],
	    keywords: ALL_KEYWORDS,
	    illegal: /\/\*/,
	    classNameAliases: {
	      'computation-expression': 'keyword'
	    },
	    contains: [
	      BANG_KEYWORD_MODE,
	      STRING,
	      COMMENT,
	      QUOTED_IDENTIFIER,
	      TYPE_DECLARATION,
	      {
	        // e.g. [<Attributes("")>] or [<``module``: MyCustomAttributeThatWorksOnModules>]
	        // or [<Sealed; NoEquality; NoComparison; CompiledName("FSharpAsync`1")>]
	        scope: 'meta',
	        begin: /\[</,
	        end: />\]/,
	        relevance: 2,
	        contains: [
	          QUOTED_IDENTIFIER,
	          // can contain any constant value
	          TRIPLE_QUOTED_STRING,
	          VERBATIM_STRING,
	          QUOTED_STRING,
	          CHAR_LITERAL,
	          NUMBER
	        ]
	      },
	      DISCRIMINATED_UNION_TYPE_ANNOTATION,
	      TYPE_ANNOTATION,
	      COMPUTATION_EXPRESSION,
	      PREPROCESSOR,
	      NUMBER,
	      GENERIC_TYPE_SYMBOL,
	      OPERATOR
	    ]
	  };
	}

	fsharp_1 = fsharp;
	return fsharp_1;
}

/*
 Language: GAMS
 Author: Stefan Bechert <stefan.bechert@gmx.net>
 Contributors: Oleg Efimov <efimovov@gmail.com>, Mikko Kouhia <mikko.kouhia@iki.fi>
 Description: The General Algebraic Modeling System language
 Website: https://www.gams.com
 Category: scientific
 */

var gams_1;
var hasRequiredGams;

function requireGams () {
	if (hasRequiredGams) return gams_1;
	hasRequiredGams = 1;
	/** @type LanguageFn */
	function gams(hljs) {
	  const regex = hljs.regex;
	  const KEYWORDS = {
	    keyword:
	      'abort acronym acronyms alias all and assign binary card diag display '
	      + 'else eq file files for free ge gt if integer le loop lt maximizing '
	      + 'minimizing model models ne negative no not option options or ord '
	      + 'positive prod put putpage puttl repeat sameas semicont semiint smax '
	      + 'smin solve sos1 sos2 sum system table then until using while xor yes',
	    literal:
	      'eps inf na',
	    built_in:
	      'abs arccos arcsin arctan arctan2 Beta betaReg binomial ceil centropy '
	      + 'cos cosh cvPower div div0 eDist entropy errorf execSeed exp fact '
	      + 'floor frac gamma gammaReg log logBeta logGamma log10 log2 mapVal max '
	      + 'min mod ncpCM ncpF ncpVUpow ncpVUsin normal pi poly power '
	      + 'randBinomial randLinear randTriangle round rPower sigmoid sign '
	      + 'signPower sin sinh slexp sllog10 slrec sqexp sqlog10 sqr sqrec sqrt '
	      + 'tan tanh trunc uniform uniformInt vcPower bool_and bool_eqv bool_imp '
	      + 'bool_not bool_or bool_xor ifThen rel_eq rel_ge rel_gt rel_le rel_lt '
	      + 'rel_ne gday gdow ghour gleap gmillisec gminute gmonth gsecond gyear '
	      + 'jdate jnow jstart jtime errorLevel execError gamsRelease gamsVersion '
	      + 'handleCollect handleDelete handleStatus handleSubmit heapFree '
	      + 'heapLimit heapSize jobHandle jobKill jobStatus jobTerminate '
	      + 'licenseLevel licenseStatus maxExecError sleep timeClose timeComp '
	      + 'timeElapsed timeExec timeStart'
	  };
	  const PARAMS = {
	    className: 'params',
	    begin: /\(/,
	    end: /\)/,
	    excludeBegin: true,
	    excludeEnd: true
	  };
	  const SYMBOLS = {
	    className: 'symbol',
	    variants: [
	      { begin: /=[lgenxc]=/ },
	      { begin: /\$/ }
	    ]
	  };
	  const QSTR = { // One-line quoted comment string
	    className: 'comment',
	    variants: [
	      {
	        begin: '\'',
	        end: '\''
	      },
	      {
	        begin: '"',
	        end: '"'
	      }
	    ],
	    illegal: '\\n',
	    contains: [ hljs.BACKSLASH_ESCAPE ]
	  };
	  const ASSIGNMENT = {
	    begin: '/',
	    end: '/',
	    keywords: KEYWORDS,
	    contains: [
	      QSTR,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.C_NUMBER_MODE
	    ]
	  };
	  const COMMENT_WORD = /[a-z0-9&#*=?@\\><:,()$[\]_.{}!+%^-]+/;
	  const DESCTEXT = { // Parameter/set/variable description text
	    begin: /[a-z][a-z0-9_]*(\([a-z0-9_, ]*\))?[ \t]+/,
	    excludeBegin: true,
	    end: '$',
	    endsWithParent: true,
	    contains: [
	      QSTR,
	      ASSIGNMENT,
	      {
	        className: 'comment',
	        // one comment word, then possibly more
	        begin: regex.concat(
	          COMMENT_WORD,
	          // [ ] because \s would be too broad (matching newlines)
	          regex.anyNumberOfTimes(regex.concat(/[ ]+/, COMMENT_WORD))
	        ),
	        relevance: 0
	      }
	    ]
	  };

	  return {
	    name: 'GAMS',
	    aliases: [ 'gms' ],
	    case_insensitive: true,
	    keywords: KEYWORDS,
	    contains: [
	      hljs.COMMENT(/^\$ontext/, /^\$offtext/),
	      {
	        className: 'meta',
	        begin: '^\\$[a-z0-9]+',
	        end: '$',
	        returnBegin: true,
	        contains: [
	          {
	            className: 'keyword',
	            begin: '^\\$[a-z0-9]+'
	          }
	        ]
	      },
	      hljs.COMMENT('^\\*', '$'),
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.APOS_STRING_MODE,
	      // Declarations
	      {
	        beginKeywords:
	          'set sets parameter parameters variable variables '
	          + 'scalar scalars equation equations',
	        end: ';',
	        contains: [
	          hljs.COMMENT('^\\*', '$'),
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE,
	          hljs.QUOTE_STRING_MODE,
	          hljs.APOS_STRING_MODE,
	          ASSIGNMENT,
	          DESCTEXT
	        ]
	      },
	      { // table environment
	        beginKeywords: 'table',
	        end: ';',
	        returnBegin: true,
	        contains: [
	          { // table header row
	            beginKeywords: 'table',
	            end: '$',
	            contains: [ DESCTEXT ]
	          },
	          hljs.COMMENT('^\\*', '$'),
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE,
	          hljs.QUOTE_STRING_MODE,
	          hljs.APOS_STRING_MODE,
	          hljs.C_NUMBER_MODE
	          // Table does not contain DESCTEXT or ASSIGNMENT
	        ]
	      },
	      // Function definitions
	      {
	        className: 'function',
	        begin: /^[a-z][a-z0-9_,\-+' ()$]+\.{2}/,
	        returnBegin: true,
	        contains: [
	          { // Function title
	            className: 'title',
	            begin: /^[a-z0-9_]+/
	          },
	          PARAMS,
	          SYMBOLS
	        ]
	      },
	      hljs.C_NUMBER_MODE,
	      SYMBOLS
	    ]
	  };
	}

	gams_1 = gams;
	return gams_1;
}

/*
Language: GAUSS
Author: Matt Evans <matt@aptech.com>
Description: GAUSS Mathematical and Statistical language
Website: https://www.aptech.com
Category: scientific
*/

var gauss_1;
var hasRequiredGauss;

function requireGauss () {
	if (hasRequiredGauss) return gauss_1;
	hasRequiredGauss = 1;
	function gauss(hljs) {
	  const KEYWORDS = {
	    keyword: 'bool break call callexe checkinterrupt clear clearg closeall cls comlog compile '
	              + 'continue create debug declare delete disable dlibrary dllcall do dos ed edit else '
	              + 'elseif enable end endfor endif endp endo errorlog errorlogat expr external fn '
	              + 'for format goto gosub graph if keyword let lib library line load loadarray loadexe '
	              + 'loadf loadk loadm loadp loads loadx local locate loopnextindex lprint lpwidth lshow '
	              + 'matrix msym ndpclex new open output outwidth plot plotsym pop prcsn print '
	              + 'printdos proc push retp return rndcon rndmod rndmult rndseed run save saveall screen '
	              + 'scroll setarray show sparse stop string struct system trace trap threadfor '
	              + 'threadendfor threadbegin threadjoin threadstat threadend until use while winprint '
	              + 'ne ge le gt lt and xor or not eq eqv',
	    built_in: 'abs acf aconcat aeye amax amean AmericanBinomCall AmericanBinomCall_Greeks AmericanBinomCall_ImpVol '
	              + 'AmericanBinomPut AmericanBinomPut_Greeks AmericanBinomPut_ImpVol AmericanBSCall AmericanBSCall_Greeks '
	              + 'AmericanBSCall_ImpVol AmericanBSPut AmericanBSPut_Greeks AmericanBSPut_ImpVol amin amult annotationGetDefaults '
	              + 'annotationSetBkd annotationSetFont annotationSetLineColor annotationSetLineStyle annotationSetLineThickness '
	              + 'annualTradingDays arccos arcsin areshape arrayalloc arrayindex arrayinit arraytomat asciiload asclabel astd '
	              + 'astds asum atan atan2 atranspose axmargin balance band bandchol bandcholsol bandltsol bandrv bandsolpd bar '
	              + 'base10 begwind besselj bessely beta box boxcox cdfBeta cdfBetaInv cdfBinomial cdfBinomialInv cdfBvn cdfBvn2 '
	              + 'cdfBvn2e cdfCauchy cdfCauchyInv cdfChic cdfChii cdfChinc cdfChincInv cdfExp cdfExpInv cdfFc cdfFnc cdfFncInv '
	              + 'cdfGam cdfGenPareto cdfHyperGeo cdfLaplace cdfLaplaceInv cdfLogistic cdfLogisticInv cdfmControlCreate cdfMvn '
	              + 'cdfMvn2e cdfMvnce cdfMvne cdfMvt2e cdfMvtce cdfMvte cdfN cdfN2 cdfNc cdfNegBinomial cdfNegBinomialInv cdfNi '
	              + 'cdfPoisson cdfPoissonInv cdfRayleigh cdfRayleighInv cdfTc cdfTci cdfTnc cdfTvn cdfWeibull cdfWeibullInv cdir '
	              + 'ceil ChangeDir chdir chiBarSquare chol choldn cholsol cholup chrs close code cols colsf combinate combinated '
	              + 'complex con cond conj cons ConScore contour conv convertsatostr convertstrtosa corrm corrms corrvc corrx corrxs '
	              + 'cos cosh counts countwts crossprd crout croutp csrcol csrlin csvReadM csvReadSA cumprodc cumsumc curve cvtos '
	              + 'datacreate datacreatecomplex datalist dataload dataloop dataopen datasave date datestr datestring datestrymd '
	              + 'dayinyr dayofweek dbAddDatabase dbClose dbCommit dbCreateQuery dbExecQuery dbGetConnectOptions dbGetDatabaseName '
	              + 'dbGetDriverName dbGetDrivers dbGetHostName dbGetLastErrorNum dbGetLastErrorText dbGetNumericalPrecPolicy '
	              + 'dbGetPassword dbGetPort dbGetTableHeaders dbGetTables dbGetUserName dbHasFeature dbIsDriverAvailable dbIsOpen '
	              + 'dbIsOpenError dbOpen dbQueryBindValue dbQueryClear dbQueryCols dbQueryExecPrepared dbQueryFetchAllM dbQueryFetchAllSA '
	              + 'dbQueryFetchOneM dbQueryFetchOneSA dbQueryFinish dbQueryGetBoundValue dbQueryGetBoundValues dbQueryGetField '
	              + 'dbQueryGetLastErrorNum dbQueryGetLastErrorText dbQueryGetLastInsertID dbQueryGetLastQuery dbQueryGetPosition '
	              + 'dbQueryIsActive dbQueryIsForwardOnly dbQueryIsNull dbQueryIsSelect dbQueryIsValid dbQueryPrepare dbQueryRows '
	              + 'dbQuerySeek dbQuerySeekFirst dbQuerySeekLast dbQuerySeekNext dbQuerySeekPrevious dbQuerySetForwardOnly '
	              + 'dbRemoveDatabase dbRollback dbSetConnectOptions dbSetDatabaseName dbSetHostName dbSetNumericalPrecPolicy '
	              + 'dbSetPort dbSetUserName dbTransaction DeleteFile delif delrows denseToSp denseToSpRE denToZero design det detl '
	              + 'dfft dffti diag diagrv digamma doswin DOSWinCloseall DOSWinOpen dotfeq dotfeqmt dotfge dotfgemt dotfgt dotfgtmt '
	              + 'dotfle dotflemt dotflt dotfltmt dotfne dotfnemt draw drop dsCreate dstat dstatmt dstatmtControlCreate dtdate dtday '
	              + 'dttime dttodtv dttostr dttoutc dtvnormal dtvtodt dtvtoutc dummy dummybr dummydn eig eigh eighv eigv elapsedTradingDays '
	              + 'endwind envget eof eqSolve eqSolvemt eqSolvemtControlCreate eqSolvemtOutCreate eqSolveset erf erfc erfccplx erfcplx error '
	              + 'etdays ethsec etstr EuropeanBinomCall EuropeanBinomCall_Greeks EuropeanBinomCall_ImpVol EuropeanBinomPut '
	              + 'EuropeanBinomPut_Greeks EuropeanBinomPut_ImpVol EuropeanBSCall EuropeanBSCall_Greeks EuropeanBSCall_ImpVol '
	              + 'EuropeanBSPut EuropeanBSPut_Greeks EuropeanBSPut_ImpVol exctsmpl exec execbg exp extern eye fcheckerr fclearerr feq '
	              + 'feqmt fflush fft ffti fftm fftmi fftn fge fgemt fgets fgetsa fgetsat fgetst fgt fgtmt fileinfo filesa fle flemt '
	              + 'floor flt fltmt fmod fne fnemt fonts fopen formatcv formatnv fputs fputst fseek fstrerror ftell ftocv ftos ftostrC '
	              + 'gamma gammacplx gammaii gausset gdaAppend gdaCreate gdaDStat gdaDStatMat gdaGetIndex gdaGetName gdaGetNames gdaGetOrders '
	              + 'gdaGetType gdaGetTypes gdaGetVarInfo gdaIsCplx gdaLoad gdaPack gdaRead gdaReadByIndex gdaReadSome gdaReadSparse '
	              + 'gdaReadStruct gdaReportVarInfo gdaSave gdaUpdate gdaUpdateAndPack gdaVars gdaWrite gdaWrite32 gdaWriteSome getarray '
	              + 'getdims getf getGAUSShome getmatrix getmatrix4D getname getnamef getNextTradingDay getNextWeekDay getnr getorders '
	              + 'getpath getPreviousTradingDay getPreviousWeekDay getRow getscalar3D getscalar4D getTrRow getwind glm gradcplx gradMT '
	              + 'gradMTm gradMTT gradMTTm gradp graphprt graphset hasimag header headermt hess hessMT hessMTg hessMTgw hessMTm '
	              + 'hessMTmw hessMTT hessMTTg hessMTTgw hessMTTm hessMTw hessp hist histf histp hsec imag indcv indexcat indices indices2 '
	              + 'indicesf indicesfn indnv indsav integrate1d integrateControlCreate intgrat2 intgrat3 inthp1 inthp2 inthp3 inthp4 '
	              + 'inthpControlCreate intquad1 intquad2 intquad3 intrleav intrleavsa intrsect intsimp inv invpd invswp iscplx iscplxf '
	              + 'isden isinfnanmiss ismiss key keyav keyw lag lag1 lagn lapEighb lapEighi lapEighvb lapEighvi lapgEig lapgEigh lapgEighv '
	              + 'lapgEigv lapgSchur lapgSvdcst lapgSvds lapgSvdst lapSvdcusv lapSvds lapSvdusv ldlp ldlsol linSolve listwise ln lncdfbvn '
	              + 'lncdfbvn2 lncdfmvn lncdfn lncdfn2 lncdfnc lnfact lngammacplx lnpdfmvn lnpdfmvt lnpdfn lnpdft loadd loadstruct loadwind '
	              + 'loess loessmt loessmtControlCreate log loglog logx logy lower lowmat lowmat1 ltrisol lu lusol machEpsilon make makevars '
	              + 'makewind margin matalloc matinit mattoarray maxbytes maxc maxindc maxv maxvec mbesselei mbesselei0 mbesselei1 mbesseli '
	              + 'mbesseli0 mbesseli1 meanc median mergeby mergevar minc minindc minv miss missex missrv moment momentd movingave '
	              + 'movingaveExpwgt movingaveWgt nextindex nextn nextnevn nextwind ntos null null1 numCombinations ols olsmt olsmtControlCreate '
	              + 'olsqr olsqr2 olsqrmt ones optn optnevn orth outtyp pacf packedToSp packr parse pause pdfCauchy pdfChi pdfExp pdfGenPareto '
	              + 'pdfHyperGeo pdfLaplace pdfLogistic pdfn pdfPoisson pdfRayleigh pdfWeibull pi pinv pinvmt plotAddArrow plotAddBar plotAddBox '
	              + 'plotAddHist plotAddHistF plotAddHistP plotAddPolar plotAddScatter plotAddShape plotAddTextbox plotAddTS plotAddXY plotArea '
	              + 'plotBar plotBox plotClearLayout plotContour plotCustomLayout plotGetDefaults plotHist plotHistF plotHistP plotLayout '
	              + 'plotLogLog plotLogX plotLogY plotOpenWindow plotPolar plotSave plotScatter plotSetAxesPen plotSetBar plotSetBarFill '
	              + 'plotSetBarStacked plotSetBkdColor plotSetFill plotSetGrid plotSetLegend plotSetLineColor plotSetLineStyle plotSetLineSymbol '
	              + 'plotSetLineThickness plotSetNewWindow plotSetTitle plotSetWhichYAxis plotSetXAxisShow plotSetXLabel plotSetXRange '
	              + 'plotSetXTicInterval plotSetXTicLabel plotSetYAxisShow plotSetYLabel plotSetYRange plotSetZAxisShow plotSetZLabel '
	              + 'plotSurface plotTS plotXY polar polychar polyeval polygamma polyint polymake polymat polymroot polymult polyroot '
	              + 'pqgwin previousindex princomp printfm printfmt prodc psi putarray putf putvals pvCreate pvGetIndex pvGetParNames '
	              + 'pvGetParVector pvLength pvList pvPack pvPacki pvPackm pvPackmi pvPacks pvPacksi pvPacksm pvPacksmi pvPutParVector '
	              + 'pvTest pvUnpack QNewton QNewtonmt QNewtonmtControlCreate QNewtonmtOutCreate QNewtonSet QProg QProgmt QProgmtInCreate '
	              + 'qqr qqre qqrep qr qre qrep qrsol qrtsol qtyr qtyre qtyrep quantile quantiled qyr qyre qyrep qz rank rankindx readr '
	              + 'real reclassify reclassifyCuts recode recserar recsercp recserrc rerun rescale reshape rets rev rfft rffti rfftip rfftn '
	              + 'rfftnp rfftp rndBernoulli rndBeta rndBinomial rndCauchy rndChiSquare rndCon rndCreateState rndExp rndGamma rndGeo rndGumbel '
	              + 'rndHyperGeo rndi rndKMbeta rndKMgam rndKMi rndKMn rndKMnb rndKMp rndKMu rndKMvm rndLaplace rndLCbeta rndLCgam rndLCi rndLCn '
	              + 'rndLCnb rndLCp rndLCu rndLCvm rndLogNorm rndMTu rndMVn rndMVt rndn rndnb rndNegBinomial rndp rndPoisson rndRayleigh '
	              + 'rndStateSkip rndu rndvm rndWeibull rndWishart rotater round rows rowsf rref sampleData satostrC saved saveStruct savewind '
	              + 'scale scale3d scalerr scalinfnanmiss scalmiss schtoc schur searchsourcepath seekr select selif seqa seqm setdif setdifsa '
	              + 'setvars setvwrmode setwind shell shiftr sin singleindex sinh sleep solpd sortc sortcc sortd sorthc sorthcc sortind '
	              + 'sortindc sortmc sortr sortrc spBiconjGradSol spChol spConjGradSol spCreate spDenseSubmat spDiagRvMat spEigv spEye spLDL '
	              + 'spline spLU spNumNZE spOnes spreadSheetReadM spreadSheetReadSA spreadSheetWrite spScale spSubmat spToDense spTrTDense '
	              + 'spTScalar spZeros sqpSolve sqpSolveMT sqpSolveMTControlCreate sqpSolveMTlagrangeCreate sqpSolveMToutCreate sqpSolveSet '
	              + 'sqrt statements stdc stdsc stocv stof strcombine strindx strlen strput strrindx strsect strsplit strsplitPad strtodt '
	              + 'strtof strtofcplx strtriml strtrimr strtrunc strtruncl strtruncpad strtruncr submat subscat substute subvec sumc sumr '
	              + 'surface svd svd1 svd2 svdcusv svds svdusv sysstate tab tan tanh tempname '
	              + 'time timedt timestr timeutc title tkf2eps tkf2ps tocart todaydt toeplitz token topolar trapchk '
	              + 'trigamma trimr trunc type typecv typef union unionsa uniqindx uniqindxsa unique uniquesa upmat upmat1 upper utctodt '
	              + 'utctodtv utrisol vals varCovMS varCovXS varget vargetl varmall varmares varput varputl vartypef vcm vcms vcx vcxs '
	              + 'vec vech vecr vector vget view viewxyz vlist vnamecv volume vput vread vtypecv wait waitc walkindex where window '
	              + 'writer xlabel xlsGetSheetCount xlsGetSheetSize xlsGetSheetTypes xlsMakeRange xlsReadM xlsReadSA xlsWrite xlsWriteM '
	              + 'xlsWriteSA xpnd xtics xy xyz ylabel ytics zeros zeta zlabel ztics cdfEmpirical dot h5create h5open h5read h5readAttribute '
	              + 'h5write h5writeAttribute ldl plotAddErrorBar plotAddSurface plotCDFEmpirical plotSetColormap plotSetContourLabels '
	              + 'plotSetLegendFont plotSetTextInterpreter plotSetXTicCount plotSetYTicCount plotSetZLevels powerm strjoin sylvester '
	              + 'strtrim',
	    literal: 'DB_AFTER_LAST_ROW DB_ALL_TABLES DB_BATCH_OPERATIONS DB_BEFORE_FIRST_ROW DB_BLOB DB_EVENT_NOTIFICATIONS '
	             + 'DB_FINISH_QUERY DB_HIGH_PRECISION DB_LAST_INSERT_ID DB_LOW_PRECISION_DOUBLE DB_LOW_PRECISION_INT32 '
	             + 'DB_LOW_PRECISION_INT64 DB_LOW_PRECISION_NUMBERS DB_MULTIPLE_RESULT_SETS DB_NAMED_PLACEHOLDERS '
	             + 'DB_POSITIONAL_PLACEHOLDERS DB_PREPARED_QUERIES DB_QUERY_SIZE DB_SIMPLE_LOCKING DB_SYSTEM_TABLES DB_TABLES '
	             + 'DB_TRANSACTIONS DB_UNICODE DB_VIEWS __STDIN __STDOUT __STDERR __FILE_DIR'
	  };

	  const AT_COMMENT_MODE = hljs.COMMENT('@', '@');

	  const PREPROCESSOR =
	  {
	    className: 'meta',
	    begin: '#',
	    end: '$',
	    keywords: { keyword: 'define definecs|10 undef ifdef ifndef iflight ifdllcall ifmac ifos2win ifunix else endif lineson linesoff srcfile srcline' },
	    contains: [
	      {
	        begin: /\\\n/,
	        relevance: 0
	      },
	      {
	        beginKeywords: 'include',
	        end: '$',
	        keywords: { keyword: 'include' },
	        contains: [
	          {
	            className: 'string',
	            begin: '"',
	            end: '"',
	            illegal: '\\n'
	          }
	        ]
	      },
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      AT_COMMENT_MODE
	    ]
	  };

	  const STRUCT_TYPE =
	  {
	    begin: /\bstruct\s+/,
	    end: /\s/,
	    keywords: "struct",
	    contains: [
	      {
	        className: "type",
	        begin: hljs.UNDERSCORE_IDENT_RE,
	        relevance: 0
	      }
	    ]
	  };

	  // only for definitions
	  const PARSE_PARAMS = [
	    {
	      className: 'params',
	      begin: /\(/,
	      end: /\)/,
	      excludeBegin: true,
	      excludeEnd: true,
	      endsWithParent: true,
	      relevance: 0,
	      contains: [
	        { // dots
	          className: 'literal',
	          begin: /\.\.\./
	        },
	        hljs.C_NUMBER_MODE,
	        hljs.C_BLOCK_COMMENT_MODE,
	        AT_COMMENT_MODE,
	        STRUCT_TYPE
	      ]
	    }
	  ];

	  const FUNCTION_DEF =
	  {
	    className: "title",
	    begin: hljs.UNDERSCORE_IDENT_RE,
	    relevance: 0
	  };

	  const DEFINITION = function(beginKeywords, end, inherits) {
	    const mode = hljs.inherit(
	      {
	        className: "function",
	        beginKeywords: beginKeywords,
	        end: end,
	        excludeEnd: true,
	        contains: [].concat(PARSE_PARAMS)
	      },
	      inherits || {}
	    );
	    mode.contains.push(FUNCTION_DEF);
	    mode.contains.push(hljs.C_NUMBER_MODE);
	    mode.contains.push(hljs.C_BLOCK_COMMENT_MODE);
	    mode.contains.push(AT_COMMENT_MODE);
	    return mode;
	  };

	  const BUILT_IN_REF =
	  { // these are explicitly named internal function calls
	    className: 'built_in',
	    begin: '\\b(' + KEYWORDS.built_in.split(' ').join('|') + ')\\b'
	  };

	  const STRING_REF =
	  {
	    className: 'string',
	    begin: '"',
	    end: '"',
	    contains: [ hljs.BACKSLASH_ESCAPE ],
	    relevance: 0
	  };

	  const FUNCTION_REF =
	  {
	    // className: "fn_ref",
	    begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
	    returnBegin: true,
	    keywords: KEYWORDS,
	    relevance: 0,
	    contains: [
	      { beginKeywords: KEYWORDS.keyword },
	      BUILT_IN_REF,
	      { // ambiguously named function calls get a relevance of 0
	        className: 'built_in',
	        begin: hljs.UNDERSCORE_IDENT_RE,
	        relevance: 0
	      }
	    ]
	  };

	  const FUNCTION_REF_PARAMS =
	  {
	    // className: "fn_ref_params",
	    begin: /\(/,
	    end: /\)/,
	    relevance: 0,
	    keywords: {
	      built_in: KEYWORDS.built_in,
	      literal: KEYWORDS.literal
	    },
	    contains: [
	      hljs.C_NUMBER_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      AT_COMMENT_MODE,
	      BUILT_IN_REF,
	      FUNCTION_REF,
	      STRING_REF,
	      'self'
	    ]
	  };

	  FUNCTION_REF.contains.push(FUNCTION_REF_PARAMS);

	  return {
	    name: 'GAUSS',
	    aliases: [ 'gss' ],
	    case_insensitive: true, // language is case-insensitive
	    keywords: KEYWORDS,
	    illegal: /(\{[%#]|[%#]\}| <- )/,
	    contains: [
	      hljs.C_NUMBER_MODE,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      AT_COMMENT_MODE,
	      STRING_REF,
	      PREPROCESSOR,
	      {
	        className: 'keyword',
	        begin: /\bexternal (matrix|string|array|sparse matrix|struct|proc|keyword|fn)/
	      },
	      DEFINITION('proc keyword', ';'),
	      DEFINITION('fn', '='),
	      {
	        beginKeywords: 'for threadfor',
	        end: /;/,
	        // end: /\(/,
	        relevance: 0,
	        contains: [
	          hljs.C_BLOCK_COMMENT_MODE,
	          AT_COMMENT_MODE,
	          FUNCTION_REF_PARAMS
	        ]
	      },
	      { // custom method guard
	        // excludes method names from keyword processing
	        variants: [
	          { begin: hljs.UNDERSCORE_IDENT_RE + '\\.' + hljs.UNDERSCORE_IDENT_RE },
	          { begin: hljs.UNDERSCORE_IDENT_RE + '\\s*=' }
	        ],
	        relevance: 0
	      },
	      FUNCTION_REF,
	      STRUCT_TYPE
	    ]
	  };
	}

	gauss_1 = gauss;
	return gauss_1;
}

/*
 Language: G-code (ISO 6983)
 Contributors: Adam Joseph Cook <adam.joseph.cook@gmail.com>
 Description: G-code syntax highlighter for Fanuc and other common CNC machine tool controls.
 Website: https://www.sis.se/api/document/preview/911952/
 */

var gcode_1;
var hasRequiredGcode;

function requireGcode () {
	if (hasRequiredGcode) return gcode_1;
	hasRequiredGcode = 1;
	function gcode(hljs) {
	  const GCODE_IDENT_RE = '[A-Z_][A-Z0-9_.]*';
	  const GCODE_CLOSE_RE = '%';
	  const GCODE_KEYWORDS = {
	    $pattern: GCODE_IDENT_RE,
	    keyword: 'IF DO WHILE ENDWHILE CALL ENDIF SUB ENDSUB GOTO REPEAT ENDREPEAT '
	      + 'EQ LT GT NE GE LE OR XOR'
	  };
	  const GCODE_START = {
	    className: 'meta',
	    begin: '([O])([0-9]+)'
	  };
	  const NUMBER = hljs.inherit(hljs.C_NUMBER_MODE, { begin: '([-+]?((\\.\\d+)|(\\d+)(\\.\\d*)?))|' + hljs.C_NUMBER_RE });
	  const GCODE_CODE = [
	    hljs.C_LINE_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE,
	    hljs.COMMENT(/\(/, /\)/),
	    NUMBER,
	    hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
	    hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
	    {
	      className: 'name',
	      begin: '([G])([0-9]+\\.?[0-9]?)'
	    },
	    {
	      className: 'name',
	      begin: '([M])([0-9]+\\.?[0-9]?)'
	    },
	    {
	      className: 'attr',
	      begin: '(VC|VS|#)',
	      end: '(\\d+)'
	    },
	    {
	      className: 'attr',
	      begin: '(VZOFX|VZOFY|VZOFZ)'
	    },
	    {
	      className: 'built_in',
	      begin: '(ATAN|ABS|ACOS|ASIN|SIN|COS|EXP|FIX|FUP|ROUND|LN|TAN)(\\[)',
	      contains: [ NUMBER ],
	      end: '\\]'
	    },
	    {
	      className: 'symbol',
	      variants: [
	        {
	          begin: 'N',
	          end: '\\d+',
	          illegal: '\\W'
	        }
	      ]
	    }
	  ];

	  return {
	    name: 'G-code (ISO 6983)',
	    aliases: [ 'nc' ],
	    // Some implementations (CNC controls) of G-code are interoperable with uppercase and lowercase letters seamlessly.
	    // However, most prefer all uppercase and uppercase is customary.
	    case_insensitive: true,
	    keywords: GCODE_KEYWORDS,
	    contains: [
	      {
	        className: 'meta',
	        begin: GCODE_CLOSE_RE
	      },
	      GCODE_START
	    ].concat(GCODE_CODE)
	  };
	}

	gcode_1 = gcode;
	return gcode_1;
}

/*
 Language: Gherkin
 Author: Sam Pikesley (@pikesley) <sam.pikesley@theodi.org>
 Description: Gherkin is the format for cucumber specifications. It is a domain specific language which helps you to describe business behavior without the need to go into detail of implementation.
 Website: https://cucumber.io/docs/gherkin/
 */

var gherkin_1;
var hasRequiredGherkin;

function requireGherkin () {
	if (hasRequiredGherkin) return gherkin_1;
	hasRequiredGherkin = 1;
	function gherkin(hljs) {
	  return {
	    name: 'Gherkin',
	    aliases: [ 'feature' ],
	    keywords: 'Feature Background Ability Business\ Need Scenario Scenarios Scenario\ Outline Scenario\ Template Examples Given And Then But When',
	    contains: [
	      {
	        className: 'symbol',
	        begin: '\\*',
	        relevance: 0
	      },
	      {
	        className: 'meta',
	        begin: '@[^@\\s]+'
	      },
	      {
	        begin: '\\|',
	        end: '\\|\\w*$',
	        contains: [
	          {
	            className: 'string',
	            begin: '[^|]+'
	          }
	        ]
	      },
	      {
	        className: 'variable',
	        begin: '<',
	        end: '>'
	      },
	      hljs.HASH_COMMENT_MODE,
	      {
	        className: 'string',
	        begin: '"""',
	        end: '"""'
	      },
	      hljs.QUOTE_STRING_MODE
	    ]
	  };
	}

	gherkin_1 = gherkin;
	return gherkin_1;
}

/*
Language: GLSL
Description: OpenGL Shading Language
Author: Sergey Tikhomirov <sergey@tikhomirov.io>
Website: https://en.wikipedia.org/wiki/OpenGL_Shading_Language
Category: graphics
*/

var glsl_1;
var hasRequiredGlsl;

function requireGlsl () {
	if (hasRequiredGlsl) return glsl_1;
	hasRequiredGlsl = 1;
	function glsl(hljs) {
	  return {
	    name: 'GLSL',
	    keywords: {
	      keyword:
	        // Statements
	        'break continue discard do else for if return while switch case default '
	        // Qualifiers
	        + 'attribute binding buffer ccw centroid centroid varying coherent column_major const cw '
	        + 'depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing '
	        + 'flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant '
	        + 'invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y '
	        + 'local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left '
	        + 'out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f '
	        + 'r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict '
	        + 'rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 '
	        + 'rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 '
	        + 'rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip '
	        + 'triangles triangles_adjacency uniform varying vertices volatile writeonly',
	      type:
	        'atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 '
	        + 'dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray '
	        + 'iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBuffer '
	        + 'iimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray '
	        + 'image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray '
	        + 'isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D '
	        + 'isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 '
	        + 'mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray '
	        + 'sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow '
	        + 'sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D '
	        + 'samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow '
	        + 'image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect '
	        + 'uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray '
	        + 'usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D '
	        + 'samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void',
	      built_in:
	        // Constants
	        'gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes '
	        + 'gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms '
	        + 'gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers '
	        + 'gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits '
	        + 'gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize '
	        + 'gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters '
	        + 'gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors '
	        + 'gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers '
	        + 'gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents '
	        + 'gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits '
	        + 'gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents '
	        + 'gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset '
	        + 'gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms '
	        + 'gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits '
	        + 'gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents '
	        + 'gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters '
	        + 'gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents '
	        + 'gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents '
	        + 'gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits '
	        + 'gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors '
	        + 'gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms '
	        + 'gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits '
	        + 'gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset '
	        // Variables
	        + 'gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial '
	        + 'gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color '
	        + 'gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord '
	        + 'gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor '
	        + 'gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial '
	        + 'gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel '
	        + 'gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix '
	        + 'gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose '
	        + 'gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose '
	        + 'gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 '
	        + 'gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 '
	        + 'gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ '
	        + 'gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord '
	        + 'gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse '
	        + 'gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask '
	        + 'gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter '
	        + 'gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose '
	        + 'gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out '
	        // Functions
	        + 'EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin '
	        + 'asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement '
	        + 'atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier '
	        + 'bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross '
	        + 'dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB '
	        + 'floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan '
	        + 'greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap '
	        + 'imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad '
	        + 'imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset '
	        + 'interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log '
	        + 'log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer '
	        + 'memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 '
	        + 'normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 '
	        + 'packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod '
	        + 'shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh '
	        + 'smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod '
	        + 'texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod '
	        + 'texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod '
	        + 'textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset '
	        + 'textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset '
	        + 'textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod '
	        + 'textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 '
	        + 'unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow',
	      literal: 'true false'
	    },
	    illegal: '"',
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'meta',
	        begin: '#',
	        end: '$'
	      }
	    ]
	  };
	}

	glsl_1 = glsl;
	return glsl_1;
}

/*
Language: GML
Author: Meseta <meseta@gmail.com>
Description: Game Maker Language for GameMaker Studio 2
Website: https://docs2.yoyogames.com
Category: scripting
*/

var gml_1;
var hasRequiredGml;

function requireGml () {
	if (hasRequiredGml) return gml_1;
	hasRequiredGml = 1;
	function gml(hljs) {
	  const KEYWORDS = [
	    "#endregion",
	    "#macro",
	    "#region",
	    "and",
	    "begin",
	    "break",
	    "case",
	    "constructor",
	    "continue",
	    "default",
	    "delete",
	    "div",
	    "do",
	    "else",
	    "end",
	    "enum",
	    "exit",
	    "for",
	    "function",
	    "globalvar",
	    "if",
	    "mod",
	    "not",
	    "or",
	    "repeat",
	    "return",
	    "switch",
	    "then",
	    "until",
	    "var",
	    "while",
	    "with",
	    "xor"
	  ];
	  const BUILT_INS = [
	    "abs",
	    "achievement_available",
	    "achievement_event",
	    "achievement_get_challenges",
	    "achievement_get_info",
	    "achievement_get_pic",
	    "achievement_increment",
	    "achievement_load_friends",
	    "achievement_load_leaderboard",
	    "achievement_load_progress",
	    "achievement_login",
	    "achievement_login_status",
	    "achievement_logout",
	    "achievement_post",
	    "achievement_post_score",
	    "achievement_reset",
	    "achievement_send_challenge",
	    "achievement_show",
	    "achievement_show_achievements",
	    "achievement_show_challenge_notifications",
	    "achievement_show_leaderboards",
	    "action_inherited",
	    "action_kill_object",
	    "ads_disable",
	    "ads_enable",
	    "ads_engagement_active",
	    "ads_engagement_available",
	    "ads_engagement_launch",
	    "ads_event",
	    "ads_event_preload",
	    "ads_get_display_height",
	    "ads_get_display_width",
	    "ads_interstitial_available",
	    "ads_interstitial_display",
	    "ads_move",
	    "ads_set_reward_callback",
	    "ads_setup",
	    "alarm_get",
	    "alarm_set",
	    "analytics_event",
	    "analytics_event_ext",
	    "angle_difference",
	    "ansi_char",
	    "application_get_position",
	    "application_surface_draw_enable",
	    "application_surface_enable",
	    "application_surface_is_enabled",
	    "arccos",
	    "arcsin",
	    "arctan",
	    "arctan2",
	    "array_copy",
	    "array_create",
	    "array_delete",
	    "array_equals",
	    "array_height_2d",
	    "array_insert",
	    "array_length",
	    "array_length_1d",
	    "array_length_2d",
	    "array_pop",
	    "array_push",
	    "array_resize",
	    "array_sort",
	    "asset_get_index",
	    "asset_get_type",
	    "audio_channel_num",
	    "audio_create_buffer_sound",
	    "audio_create_play_queue",
	    "audio_create_stream",
	    "audio_create_sync_group",
	    "audio_debug",
	    "audio_destroy_stream",
	    "audio_destroy_sync_group",
	    "audio_emitter_create",
	    "audio_emitter_exists",
	    "audio_emitter_falloff",
	    "audio_emitter_free",
	    "audio_emitter_gain",
	    "audio_emitter_get_gain",
	    "audio_emitter_get_listener_mask",
	    "audio_emitter_get_pitch",
	    "audio_emitter_get_vx",
	    "audio_emitter_get_vy",
	    "audio_emitter_get_vz",
	    "audio_emitter_get_x",
	    "audio_emitter_get_y",
	    "audio_emitter_get_z",
	    "audio_emitter_pitch",
	    "audio_emitter_position",
	    "audio_emitter_set_listener_mask",
	    "audio_emitter_velocity",
	    "audio_exists",
	    "audio_falloff_set_model",
	    "audio_free_buffer_sound",
	    "audio_free_play_queue",
	    "audio_get_listener_count",
	    "audio_get_listener_info",
	    "audio_get_listener_mask",
	    "audio_get_master_gain",
	    "audio_get_name",
	    "audio_get_recorder_count",
	    "audio_get_recorder_info",
	    "audio_get_type",
	    "audio_group_is_loaded",
	    "audio_group_load",
	    "audio_group_load_progress",
	    "audio_group_name",
	    "audio_group_set_gain",
	    "audio_group_stop_all",
	    "audio_group_unload",
	    "audio_is_paused",
	    "audio_is_playing",
	    "audio_listener_get_data",
	    "audio_listener_orientation",
	    "audio_listener_position",
	    "audio_listener_set_orientation",
	    "audio_listener_set_position",
	    "audio_listener_set_velocity",
	    "audio_listener_velocity",
	    "audio_master_gain",
	    "audio_music_gain",
	    "audio_music_is_playing",
	    "audio_pause_all",
	    "audio_pause_music",
	    "audio_pause_sound",
	    "audio_pause_sync_group",
	    "audio_play_in_sync_group",
	    "audio_play_music",
	    "audio_play_sound",
	    "audio_play_sound_at",
	    "audio_play_sound_on",
	    "audio_queue_sound",
	    "audio_resume_all",
	    "audio_resume_music",
	    "audio_resume_sound",
	    "audio_resume_sync_group",
	    "audio_set_listener_mask",
	    "audio_set_master_gain",
	    "audio_sound_gain",
	    "audio_sound_get_gain",
	    "audio_sound_get_listener_mask",
	    "audio_sound_get_pitch",
	    "audio_sound_get_track_position",
	    "audio_sound_length",
	    "audio_sound_pitch",
	    "audio_sound_set_listener_mask",
	    "audio_sound_set_track_position",
	    "audio_start_recording",
	    "audio_start_sync_group",
	    "audio_stop_all",
	    "audio_stop_music",
	    "audio_stop_recording",
	    "audio_stop_sound",
	    "audio_stop_sync_group",
	    "audio_sync_group_debug",
	    "audio_sync_group_get_track_pos",
	    "audio_sync_group_is_playing",
	    "audio_system",
	    "background_get_height",
	    "background_get_width",
	    "base64_decode",
	    "base64_encode",
	    "browser_input_capture",
	    "buffer_async_group_begin",
	    "buffer_async_group_end",
	    "buffer_async_group_option",
	    "buffer_base64_decode",
	    "buffer_base64_decode_ext",
	    "buffer_base64_encode",
	    "buffer_copy",
	    "buffer_copy_from_vertex_buffer",
	    "buffer_create",
	    "buffer_create_from_vertex_buffer",
	    "buffer_create_from_vertex_buffer_ext",
	    "buffer_delete",
	    "buffer_exists",
	    "buffer_fill",
	    "buffer_get_address",
	    "buffer_get_alignment",
	    "buffer_get_size",
	    "buffer_get_surface",
	    "buffer_get_type",
	    "buffer_load",
	    "buffer_load_async",
	    "buffer_load_ext",
	    "buffer_load_partial",
	    "buffer_md5",
	    "buffer_peek",
	    "buffer_poke",
	    "buffer_read",
	    "buffer_resize",
	    "buffer_save",
	    "buffer_save_async",
	    "buffer_save_ext",
	    "buffer_seek",
	    "buffer_set_surface",
	    "buffer_sha1",
	    "buffer_sizeof",
	    "buffer_tell",
	    "buffer_write",
	    "camera_apply",
	    "camera_create",
	    "camera_create_view",
	    "camera_destroy",
	    "camera_get_active",
	    "camera_get_begin_script",
	    "camera_get_default",
	    "camera_get_end_script",
	    "camera_get_proj_mat",
	    "camera_get_update_script",
	    "camera_get_view_angle",
	    "camera_get_view_border_x",
	    "camera_get_view_border_y",
	    "camera_get_view_height",
	    "camera_get_view_mat",
	    "camera_get_view_speed_x",
	    "camera_get_view_speed_y",
	    "camera_get_view_target",
	    "camera_get_view_width",
	    "camera_get_view_x",
	    "camera_get_view_y",
	    "camera_set_begin_script",
	    "camera_set_default",
	    "camera_set_end_script",
	    "camera_set_proj_mat",
	    "camera_set_update_script",
	    "camera_set_view_angle",
	    "camera_set_view_border",
	    "camera_set_view_mat",
	    "camera_set_view_pos",
	    "camera_set_view_size",
	    "camera_set_view_speed",
	    "camera_set_view_target",
	    "ceil",
	    "choose",
	    "chr",
	    "clamp",
	    "clickable_add",
	    "clickable_add_ext",
	    "clickable_change",
	    "clickable_change_ext",
	    "clickable_delete",
	    "clickable_exists",
	    "clickable_set_style",
	    "clipboard_get_text",
	    "clipboard_has_text",
	    "clipboard_set_text",
	    "cloud_file_save",
	    "cloud_string_save",
	    "cloud_synchronise",
	    "code_is_compiled",
	    "collision_circle",
	    "collision_circle_list",
	    "collision_ellipse",
	    "collision_ellipse_list",
	    "collision_line",
	    "collision_line_list",
	    "collision_point",
	    "collision_point_list",
	    "collision_rectangle",
	    "collision_rectangle_list",
	    "color_get_blue",
	    "color_get_green",
	    "color_get_hue",
	    "color_get_red",
	    "color_get_saturation",
	    "color_get_value",
	    "colour_get_blue",
	    "colour_get_green",
	    "colour_get_hue",
	    "colour_get_red",
	    "colour_get_saturation",
	    "colour_get_value",
	    "cos",
	    "darccos",
	    "darcsin",
	    "darctan",
	    "darctan2",
	    "date_compare_date",
	    "date_compare_datetime",
	    "date_compare_time",
	    "date_create_datetime",
	    "date_current_datetime",
	    "date_date_of",
	    "date_date_string",
	    "date_datetime_string",
	    "date_day_span",
	    "date_days_in_month",
	    "date_days_in_year",
	    "date_get_day",
	    "date_get_day_of_year",
	    "date_get_hour",
	    "date_get_hour_of_year",
	    "date_get_minute",
	    "date_get_minute_of_year",
	    "date_get_month",
	    "date_get_second",
	    "date_get_second_of_year",
	    "date_get_timezone",
	    "date_get_week",
	    "date_get_weekday",
	    "date_get_year",
	    "date_hour_span",
	    "date_inc_day",
	    "date_inc_hour",
	    "date_inc_minute",
	    "date_inc_month",
	    "date_inc_second",
	    "date_inc_week",
	    "date_inc_year",
	    "date_is_today",
	    "date_leap_year",
	    "date_minute_span",
	    "date_month_span",
	    "date_second_span",
	    "date_set_timezone",
	    "date_time_of",
	    "date_time_string",
	    "date_valid_datetime",
	    "date_week_span",
	    "date_year_span",
	    "dcos",
	    "debug_event",
	    "debug_get_callstack",
	    "degtorad",
	    "device_get_tilt_x",
	    "device_get_tilt_y",
	    "device_get_tilt_z",
	    "device_is_keypad_open",
	    "device_mouse_check_button",
	    "device_mouse_check_button_pressed",
	    "device_mouse_check_button_released",
	    "device_mouse_dbclick_enable",
	    "device_mouse_raw_x",
	    "device_mouse_raw_y",
	    "device_mouse_x",
	    "device_mouse_x_to_gui",
	    "device_mouse_y",
	    "device_mouse_y_to_gui",
	    "directory_create",
	    "directory_destroy",
	    "directory_exists",
	    "display_get_dpi_x",
	    "display_get_dpi_y",
	    "display_get_gui_height",
	    "display_get_gui_width",
	    "display_get_height",
	    "display_get_orientation",
	    "display_get_sleep_margin",
	    "display_get_timing_method",
	    "display_get_width",
	    "display_mouse_get_x",
	    "display_mouse_get_y",
	    "display_mouse_set",
	    "display_reset",
	    "display_set_gui_maximise",
	    "display_set_gui_maximize",
	    "display_set_gui_size",
	    "display_set_sleep_margin",
	    "display_set_timing_method",
	    "display_set_ui_visibility",
	    "distance_to_object",
	    "distance_to_point",
	    "dot_product",
	    "dot_product_3d",
	    "dot_product_3d_normalised",
	    "dot_product_3d_normalized",
	    "dot_product_normalised",
	    "dot_product_normalized",
	    "draw_arrow",
	    "draw_background",
	    "draw_background_ext",
	    "draw_background_part_ext",
	    "draw_background_tiled",
	    "draw_button",
	    "draw_circle",
	    "draw_circle_color",
	    "draw_circle_colour",
	    "draw_clear",
	    "draw_clear_alpha",
	    "draw_ellipse",
	    "draw_ellipse_color",
	    "draw_ellipse_colour",
	    "draw_enable_alphablend",
	    "draw_enable_drawevent",
	    "draw_enable_swf_aa",
	    "draw_flush",
	    "draw_get_alpha",
	    "draw_get_color",
	    "draw_get_colour",
	    "draw_get_lighting",
	    "draw_get_swf_aa_level",
	    "draw_getpixel",
	    "draw_getpixel_ext",
	    "draw_healthbar",
	    "draw_highscore",
	    "draw_light_define_ambient",
	    "draw_light_define_direction",
	    "draw_light_define_point",
	    "draw_light_enable",
	    "draw_light_get",
	    "draw_light_get_ambient",
	    "draw_line",
	    "draw_line_color",
	    "draw_line_colour",
	    "draw_line_width",
	    "draw_line_width_color",
	    "draw_line_width_colour",
	    "draw_path",
	    "draw_point",
	    "draw_point_color",
	    "draw_point_colour",
	    "draw_primitive_begin",
	    "draw_primitive_begin_texture",
	    "draw_primitive_end",
	    "draw_rectangle",
	    "draw_rectangle_color",
	    "draw_rectangle_colour",
	    "draw_roundrect",
	    "draw_roundrect_color",
	    "draw_roundrect_color_ext",
	    "draw_roundrect_colour",
	    "draw_roundrect_colour_ext",
	    "draw_roundrect_ext",
	    "draw_self",
	    "draw_set_alpha",
	    "draw_set_alpha_test",
	    "draw_set_alpha_test_ref_value",
	    "draw_set_blend_mode",
	    "draw_set_blend_mode_ext",
	    "draw_set_circle_precision",
	    "draw_set_color",
	    "draw_set_color_write_enable",
	    "draw_set_colour",
	    "draw_set_font",
	    "draw_set_halign",
	    "draw_set_lighting",
	    "draw_set_swf_aa_level",
	    "draw_set_valign",
	    "draw_skeleton",
	    "draw_skeleton_collision",
	    "draw_skeleton_instance",
	    "draw_skeleton_time",
	    "draw_sprite",
	    "draw_sprite_ext",
	    "draw_sprite_general",
	    "draw_sprite_part",
	    "draw_sprite_part_ext",
	    "draw_sprite_pos",
	    "draw_sprite_stretched",
	    "draw_sprite_stretched_ext",
	    "draw_sprite_tiled",
	    "draw_sprite_tiled_ext",
	    "draw_surface",
	    "draw_surface_ext",
	    "draw_surface_general",
	    "draw_surface_part",
	    "draw_surface_part_ext",
	    "draw_surface_stretched",
	    "draw_surface_stretched_ext",
	    "draw_surface_tiled",
	    "draw_surface_tiled_ext",
	    "draw_text",
	    "draw_text_color",
	    "draw_text_colour",
	    "draw_text_ext",
	    "draw_text_ext_color",
	    "draw_text_ext_colour",
	    "draw_text_ext_transformed",
	    "draw_text_ext_transformed_color",
	    "draw_text_ext_transformed_colour",
	    "draw_text_transformed",
	    "draw_text_transformed_color",
	    "draw_text_transformed_colour",
	    "draw_texture_flush",
	    "draw_tile",
	    "draw_tilemap",
	    "draw_triangle",
	    "draw_triangle_color",
	    "draw_triangle_colour",
	    "draw_vertex",
	    "draw_vertex_color",
	    "draw_vertex_colour",
	    "draw_vertex_texture",
	    "draw_vertex_texture_color",
	    "draw_vertex_texture_colour",
	    "ds_exists",
	    "ds_grid_add",
	    "ds_grid_add_disk",
	    "ds_grid_add_grid_region",
	    "ds_grid_add_region",
	    "ds_grid_clear",
	    "ds_grid_copy",
	    "ds_grid_create",
	    "ds_grid_destroy",
	    "ds_grid_get",
	    "ds_grid_get_disk_max",
	    "ds_grid_get_disk_mean",
	    "ds_grid_get_disk_min",
	    "ds_grid_get_disk_sum",
	    "ds_grid_get_max",
	    "ds_grid_get_mean",
	    "ds_grid_get_min",
	    "ds_grid_get_sum",
	    "ds_grid_height",
	    "ds_grid_multiply",
	    "ds_grid_multiply_disk",
	    "ds_grid_multiply_grid_region",
	    "ds_grid_multiply_region",
	    "ds_grid_read",
	    "ds_grid_resize",
	    "ds_grid_set",
	    "ds_grid_set_disk",
	    "ds_grid_set_grid_region",
	    "ds_grid_set_region",
	    "ds_grid_shuffle",
	    "ds_grid_sort",
	    "ds_grid_value_disk_exists",
	    "ds_grid_value_disk_x",
	    "ds_grid_value_disk_y",
	    "ds_grid_value_exists",
	    "ds_grid_value_x",
	    "ds_grid_value_y",
	    "ds_grid_width",
	    "ds_grid_write",
	    "ds_list_add",
	    "ds_list_clear",
	    "ds_list_copy",
	    "ds_list_create",
	    "ds_list_delete",
	    "ds_list_destroy",
	    "ds_list_empty",
	    "ds_list_find_index",
	    "ds_list_find_value",
	    "ds_list_insert",
	    "ds_list_mark_as_list",
	    "ds_list_mark_as_map",
	    "ds_list_read",
	    "ds_list_replace",
	    "ds_list_set",
	    "ds_list_shuffle",
	    "ds_list_size",
	    "ds_list_sort",
	    "ds_list_write",
	    "ds_map_add",
	    "ds_map_add_list",
	    "ds_map_add_map",
	    "ds_map_clear",
	    "ds_map_copy",
	    "ds_map_create",
	    "ds_map_delete",
	    "ds_map_destroy",
	    "ds_map_empty",
	    "ds_map_exists",
	    "ds_map_find_first",
	    "ds_map_find_last",
	    "ds_map_find_next",
	    "ds_map_find_previous",
	    "ds_map_find_value",
	    "ds_map_read",
	    "ds_map_replace",
	    "ds_map_replace_list",
	    "ds_map_replace_map",
	    "ds_map_secure_load",
	    "ds_map_secure_load_buffer",
	    "ds_map_secure_save",
	    "ds_map_secure_save_buffer",
	    "ds_map_set",
	    "ds_map_size",
	    "ds_map_write",
	    "ds_priority_add",
	    "ds_priority_change_priority",
	    "ds_priority_clear",
	    "ds_priority_copy",
	    "ds_priority_create",
	    "ds_priority_delete_max",
	    "ds_priority_delete_min",
	    "ds_priority_delete_value",
	    "ds_priority_destroy",
	    "ds_priority_empty",
	    "ds_priority_find_max",
	    "ds_priority_find_min",
	    "ds_priority_find_priority",
	    "ds_priority_read",
	    "ds_priority_size",
	    "ds_priority_write",
	    "ds_queue_clear",
	    "ds_queue_copy",
	    "ds_queue_create",
	    "ds_queue_dequeue",
	    "ds_queue_destroy",
	    "ds_queue_empty",
	    "ds_queue_enqueue",
	    "ds_queue_head",
	    "ds_queue_read",
	    "ds_queue_size",
	    "ds_queue_tail",
	    "ds_queue_write",
	    "ds_set_precision",
	    "ds_stack_clear",
	    "ds_stack_copy",
	    "ds_stack_create",
	    "ds_stack_destroy",
	    "ds_stack_empty",
	    "ds_stack_pop",
	    "ds_stack_push",
	    "ds_stack_read",
	    "ds_stack_size",
	    "ds_stack_top",
	    "ds_stack_write",
	    "dsin",
	    "dtan",
	    "effect_clear",
	    "effect_create_above",
	    "effect_create_below",
	    "environment_get_variable",
	    "event_inherited",
	    "event_perform",
	    "event_perform_object",
	    "event_user",
	    "exp",
	    "external_call",
	    "external_define",
	    "external_free",
	    "facebook_accesstoken",
	    "facebook_check_permission",
	    "facebook_dialog",
	    "facebook_graph_request",
	    "facebook_init",
	    "facebook_launch_offerwall",
	    "facebook_login",
	    "facebook_logout",
	    "facebook_post_message",
	    "facebook_request_publish_permissions",
	    "facebook_request_read_permissions",
	    "facebook_send_invite",
	    "facebook_status",
	    "facebook_user_id",
	    "file_attributes",
	    "file_bin_close",
	    "file_bin_open",
	    "file_bin_position",
	    "file_bin_read_byte",
	    "file_bin_rewrite",
	    "file_bin_seek",
	    "file_bin_size",
	    "file_bin_write_byte",
	    "file_copy",
	    "file_delete",
	    "file_exists",
	    "file_find_close",
	    "file_find_first",
	    "file_find_next",
	    "file_rename",
	    "file_text_close",
	    "file_text_eof",
	    "file_text_eoln",
	    "file_text_open_append",
	    "file_text_open_from_string",
	    "file_text_open_read",
	    "file_text_open_write",
	    "file_text_read_real",
	    "file_text_read_string",
	    "file_text_readln",
	    "file_text_write_real",
	    "file_text_write_string",
	    "file_text_writeln",
	    "filename_change_ext",
	    "filename_dir",
	    "filename_drive",
	    "filename_ext",
	    "filename_name",
	    "filename_path",
	    "floor",
	    "font_add",
	    "font_add_enable_aa",
	    "font_add_get_enable_aa",
	    "font_add_sprite",
	    "font_add_sprite_ext",
	    "font_delete",
	    "font_exists",
	    "font_get_bold",
	    "font_get_first",
	    "font_get_fontname",
	    "font_get_italic",
	    "font_get_last",
	    "font_get_name",
	    "font_get_size",
	    "font_get_texture",
	    "font_get_uvs",
	    "font_replace",
	    "font_replace_sprite",
	    "font_replace_sprite_ext",
	    "font_set_cache_size",
	    "font_texture_page_size",
	    "frac",
	    "game_end",
	    "game_get_speed",
	    "game_load",
	    "game_load_buffer",
	    "game_restart",
	    "game_save",
	    "game_save_buffer",
	    "game_set_speed",
	    "gamepad_axis_count",
	    "gamepad_axis_value",
	    "gamepad_button_check",
	    "gamepad_button_check_pressed",
	    "gamepad_button_check_released",
	    "gamepad_button_count",
	    "gamepad_button_value",
	    "gamepad_get_axis_deadzone",
	    "gamepad_get_button_threshold",
	    "gamepad_get_description",
	    "gamepad_get_device_count",
	    "gamepad_is_connected",
	    "gamepad_is_supported",
	    "gamepad_set_axis_deadzone",
	    "gamepad_set_button_threshold",
	    "gamepad_set_color",
	    "gamepad_set_colour",
	    "gamepad_set_vibration",
	    "gesture_double_tap_distance",
	    "gesture_double_tap_time",
	    "gesture_drag_distance",
	    "gesture_drag_time",
	    "gesture_flick_speed",
	    "gesture_get_double_tap_distance",
	    "gesture_get_double_tap_time",
	    "gesture_get_drag_distance",
	    "gesture_get_drag_time",
	    "gesture_get_flick_speed",
	    "gesture_get_pinch_angle_away",
	    "gesture_get_pinch_angle_towards",
	    "gesture_get_pinch_distance",
	    "gesture_get_rotate_angle",
	    "gesture_get_rotate_time",
	    "gesture_get_tap_count",
	    "gesture_pinch_angle_away",
	    "gesture_pinch_angle_towards",
	    "gesture_pinch_distance",
	    "gesture_rotate_angle",
	    "gesture_rotate_time",
	    "gesture_tap_count",
	    "get_integer",
	    "get_integer_async",
	    "get_login_async",
	    "get_open_filename",
	    "get_open_filename_ext",
	    "get_save_filename",
	    "get_save_filename_ext",
	    "get_string",
	    "get_string_async",
	    "get_timer",
	    "gml_pragma",
	    "gml_release_mode",
	    "gpu_get_alphatestenable",
	    "gpu_get_alphatestfunc",
	    "gpu_get_alphatestref",
	    "gpu_get_blendenable",
	    "gpu_get_blendmode",
	    "gpu_get_blendmode_dest",
	    "gpu_get_blendmode_destalpha",
	    "gpu_get_blendmode_ext",
	    "gpu_get_blendmode_ext_sepalpha",
	    "gpu_get_blendmode_src",
	    "gpu_get_blendmode_srcalpha",
	    "gpu_get_colorwriteenable",
	    "gpu_get_colourwriteenable",
	    "gpu_get_cullmode",
	    "gpu_get_fog",
	    "gpu_get_lightingenable",
	    "gpu_get_state",
	    "gpu_get_tex_filter",
	    "gpu_get_tex_filter_ext",
	    "gpu_get_tex_max_aniso",
	    "gpu_get_tex_max_aniso_ext",
	    "gpu_get_tex_max_mip",
	    "gpu_get_tex_max_mip_ext",
	    "gpu_get_tex_min_mip",
	    "gpu_get_tex_min_mip_ext",
	    "gpu_get_tex_mip_bias",
	    "gpu_get_tex_mip_bias_ext",
	    "gpu_get_tex_mip_enable",
	    "gpu_get_tex_mip_enable_ext",
	    "gpu_get_tex_mip_filter",
	    "gpu_get_tex_mip_filter_ext",
	    "gpu_get_tex_repeat",
	    "gpu_get_tex_repeat_ext",
	    "gpu_get_texfilter",
	    "gpu_get_texfilter_ext",
	    "gpu_get_texrepeat",
	    "gpu_get_texrepeat_ext",
	    "gpu_get_zfunc",
	    "gpu_get_ztestenable",
	    "gpu_get_zwriteenable",
	    "gpu_pop_state",
	    "gpu_push_state",
	    "gpu_set_alphatestenable",
	    "gpu_set_alphatestfunc",
	    "gpu_set_alphatestref",
	    "gpu_set_blendenable",
	    "gpu_set_blendmode",
	    "gpu_set_blendmode_ext",
	    "gpu_set_blendmode_ext_sepalpha",
	    "gpu_set_colorwriteenable",
	    "gpu_set_colourwriteenable",
	    "gpu_set_cullmode",
	    "gpu_set_fog",
	    "gpu_set_lightingenable",
	    "gpu_set_state",
	    "gpu_set_tex_filter",
	    "gpu_set_tex_filter_ext",
	    "gpu_set_tex_max_aniso",
	    "gpu_set_tex_max_aniso_ext",
	    "gpu_set_tex_max_mip",
	    "gpu_set_tex_max_mip_ext",
	    "gpu_set_tex_min_mip",
	    "gpu_set_tex_min_mip_ext",
	    "gpu_set_tex_mip_bias",
	    "gpu_set_tex_mip_bias_ext",
	    "gpu_set_tex_mip_enable",
	    "gpu_set_tex_mip_enable_ext",
	    "gpu_set_tex_mip_filter",
	    "gpu_set_tex_mip_filter_ext",
	    "gpu_set_tex_repeat",
	    "gpu_set_tex_repeat_ext",
	    "gpu_set_texfilter",
	    "gpu_set_texfilter_ext",
	    "gpu_set_texrepeat",
	    "gpu_set_texrepeat_ext",
	    "gpu_set_zfunc",
	    "gpu_set_ztestenable",
	    "gpu_set_zwriteenable",
	    "highscore_add",
	    "highscore_clear",
	    "highscore_name",
	    "highscore_value",
	    "http_get",
	    "http_get_file",
	    "http_post_string",
	    "http_request",
	    "iap_acquire",
	    "iap_activate",
	    "iap_consume",
	    "iap_enumerate_products",
	    "iap_product_details",
	    "iap_purchase_details",
	    "iap_restore_all",
	    "iap_status",
	    "ini_close",
	    "ini_key_delete",
	    "ini_key_exists",
	    "ini_open",
	    "ini_open_from_string",
	    "ini_read_real",
	    "ini_read_string",
	    "ini_section_delete",
	    "ini_section_exists",
	    "ini_write_real",
	    "ini_write_string",
	    "instance_activate_all",
	    "instance_activate_layer",
	    "instance_activate_object",
	    "instance_activate_region",
	    "instance_change",
	    "instance_copy",
	    "instance_create",
	    "instance_create_depth",
	    "instance_create_layer",
	    "instance_deactivate_all",
	    "instance_deactivate_layer",
	    "instance_deactivate_object",
	    "instance_deactivate_region",
	    "instance_destroy",
	    "instance_exists",
	    "instance_find",
	    "instance_furthest",
	    "instance_id_get",
	    "instance_nearest",
	    "instance_number",
	    "instance_place",
	    "instance_place_list",
	    "instance_position",
	    "instance_position_list",
	    "int64",
	    "io_clear",
	    "irandom",
	    "irandom_range",
	    "is_array",
	    "is_bool",
	    "is_infinity",
	    "is_int32",
	    "is_int64",
	    "is_matrix",
	    "is_method",
	    "is_nan",
	    "is_numeric",
	    "is_ptr",
	    "is_real",
	    "is_string",
	    "is_struct",
	    "is_undefined",
	    "is_vec3",
	    "is_vec4",
	    "json_decode",
	    "json_encode",
	    "keyboard_check",
	    "keyboard_check_direct",
	    "keyboard_check_pressed",
	    "keyboard_check_released",
	    "keyboard_clear",
	    "keyboard_get_map",
	    "keyboard_get_numlock",
	    "keyboard_key_press",
	    "keyboard_key_release",
	    "keyboard_set_map",
	    "keyboard_set_numlock",
	    "keyboard_unset_map",
	    "keyboard_virtual_height",
	    "keyboard_virtual_hide",
	    "keyboard_virtual_show",
	    "keyboard_virtual_status",
	    "layer_add_instance",
	    "layer_background_alpha",
	    "layer_background_blend",
	    "layer_background_change",
	    "layer_background_create",
	    "layer_background_destroy",
	    "layer_background_exists",
	    "layer_background_get_alpha",
	    "layer_background_get_blend",
	    "layer_background_get_htiled",
	    "layer_background_get_id",
	    "layer_background_get_index",
	    "layer_background_get_speed",
	    "layer_background_get_sprite",
	    "layer_background_get_stretch",
	    "layer_background_get_visible",
	    "layer_background_get_vtiled",
	    "layer_background_get_xscale",
	    "layer_background_get_yscale",
	    "layer_background_htiled",
	    "layer_background_index",
	    "layer_background_speed",
	    "layer_background_sprite",
	    "layer_background_stretch",
	    "layer_background_visible",
	    "layer_background_vtiled",
	    "layer_background_xscale",
	    "layer_background_yscale",
	    "layer_create",
	    "layer_depth",
	    "layer_destroy",
	    "layer_destroy_instances",
	    "layer_element_move",
	    "layer_exists",
	    "layer_force_draw_depth",
	    "layer_get_all",
	    "layer_get_all_elements",
	    "layer_get_depth",
	    "layer_get_element_layer",
	    "layer_get_element_type",
	    "layer_get_forced_depth",
	    "layer_get_hspeed",
	    "layer_get_id",
	    "layer_get_id_at_depth",
	    "layer_get_name",
	    "layer_get_script_begin",
	    "layer_get_script_end",
	    "layer_get_shader",
	    "layer_get_target_room",
	    "layer_get_visible",
	    "layer_get_vspeed",
	    "layer_get_x",
	    "layer_get_y",
	    "layer_has_instance",
	    "layer_hspeed",
	    "layer_instance_get_instance",
	    "layer_is_draw_depth_forced",
	    "layer_reset_target_room",
	    "layer_script_begin",
	    "layer_script_end",
	    "layer_set_target_room",
	    "layer_set_visible",
	    "layer_shader",
	    "layer_sprite_alpha",
	    "layer_sprite_angle",
	    "layer_sprite_blend",
	    "layer_sprite_change",
	    "layer_sprite_create",
	    "layer_sprite_destroy",
	    "layer_sprite_exists",
	    "layer_sprite_get_alpha",
	    "layer_sprite_get_angle",
	    "layer_sprite_get_blend",
	    "layer_sprite_get_id",
	    "layer_sprite_get_index",
	    "layer_sprite_get_speed",
	    "layer_sprite_get_sprite",
	    "layer_sprite_get_x",
	    "layer_sprite_get_xscale",
	    "layer_sprite_get_y",
	    "layer_sprite_get_yscale",
	    "layer_sprite_index",
	    "layer_sprite_speed",
	    "layer_sprite_x",
	    "layer_sprite_xscale",
	    "layer_sprite_y",
	    "layer_sprite_yscale",
	    "layer_tile_alpha",
	    "layer_tile_blend",
	    "layer_tile_change",
	    "layer_tile_create",
	    "layer_tile_destroy",
	    "layer_tile_exists",
	    "layer_tile_get_alpha",
	    "layer_tile_get_blend",
	    "layer_tile_get_region",
	    "layer_tile_get_sprite",
	    "layer_tile_get_visible",
	    "layer_tile_get_x",
	    "layer_tile_get_xscale",
	    "layer_tile_get_y",
	    "layer_tile_get_yscale",
	    "layer_tile_region",
	    "layer_tile_visible",
	    "layer_tile_x",
	    "layer_tile_xscale",
	    "layer_tile_y",
	    "layer_tile_yscale",
	    "layer_tilemap_create",
	    "layer_tilemap_destroy",
	    "layer_tilemap_exists",
	    "layer_tilemap_get_id",
	    "layer_vspeed",
	    "layer_x",
	    "layer_y",
	    "lengthdir_x",
	    "lengthdir_y",
	    "lerp",
	    "ln",
	    "load_csv",
	    "log10",
	    "log2",
	    "logn",
	    "make_color_hsv",
	    "make_color_rgb",
	    "make_colour_hsv",
	    "make_colour_rgb",
	    "math_get_epsilon",
	    "math_set_epsilon",
	    "matrix_build",
	    "matrix_build_identity",
	    "matrix_build_lookat",
	    "matrix_build_projection_ortho",
	    "matrix_build_projection_perspective",
	    "matrix_build_projection_perspective_fov",
	    "matrix_get",
	    "matrix_multiply",
	    "matrix_set",
	    "matrix_stack_clear",
	    "matrix_stack_is_empty",
	    "matrix_stack_multiply",
	    "matrix_stack_pop",
	    "matrix_stack_push",
	    "matrix_stack_set",
	    "matrix_stack_top",
	    "matrix_transform_vertex",
	    "max",
	    "md5_file",
	    "md5_string_unicode",
	    "md5_string_utf8",
	    "mean",
	    "median",
	    "merge_color",
	    "merge_colour",
	    "min",
	    "motion_add",
	    "motion_set",
	    "mouse_check_button",
	    "mouse_check_button_pressed",
	    "mouse_check_button_released",
	    "mouse_clear",
	    "mouse_wheel_down",
	    "mouse_wheel_up",
	    "move_bounce_all",
	    "move_bounce_solid",
	    "move_contact_all",
	    "move_contact_solid",
	    "move_outside_all",
	    "move_outside_solid",
	    "move_random",
	    "move_snap",
	    "move_towards_point",
	    "move_wrap",
	    "mp_grid_add_cell",
	    "mp_grid_add_instances",
	    "mp_grid_add_rectangle",
	    "mp_grid_clear_all",
	    "mp_grid_clear_cell",
	    "mp_grid_clear_rectangle",
	    "mp_grid_create",
	    "mp_grid_destroy",
	    "mp_grid_draw",
	    "mp_grid_get_cell",
	    "mp_grid_path",
	    "mp_grid_to_ds_grid",
	    "mp_linear_path",
	    "mp_linear_path_object",
	    "mp_linear_step",
	    "mp_linear_step_object",
	    "mp_potential_path",
	    "mp_potential_path_object",
	    "mp_potential_settings",
	    "mp_potential_step",
	    "mp_potential_step_object",
	    "network_connect",
	    "network_connect_raw",
	    "network_create_server",
	    "network_create_server_raw",
	    "network_create_socket",
	    "network_create_socket_ext",
	    "network_destroy",
	    "network_resolve",
	    "network_send_broadcast",
	    "network_send_packet",
	    "network_send_raw",
	    "network_send_udp",
	    "network_send_udp_raw",
	    "network_set_config",
	    "network_set_timeout",
	    "object_exists",
	    "object_get_depth",
	    "object_get_mask",
	    "object_get_name",
	    "object_get_parent",
	    "object_get_persistent",
	    "object_get_physics",
	    "object_get_solid",
	    "object_get_sprite",
	    "object_get_visible",
	    "object_is_ancestor",
	    "object_set_mask",
	    "object_set_persistent",
	    "object_set_solid",
	    "object_set_sprite",
	    "object_set_visible",
	    "ord",
	    "os_get_config",
	    "os_get_info",
	    "os_get_language",
	    "os_get_region",
	    "os_is_network_connected",
	    "os_is_paused",
	    "os_lock_orientation",
	    "os_powersave_enable",
	    "parameter_count",
	    "parameter_string",
	    "part_emitter_burst",
	    "part_emitter_clear",
	    "part_emitter_create",
	    "part_emitter_destroy",
	    "part_emitter_destroy_all",
	    "part_emitter_exists",
	    "part_emitter_region",
	    "part_emitter_stream",
	    "part_particles_clear",
	    "part_particles_count",
	    "part_particles_create",
	    "part_particles_create_color",
	    "part_particles_create_colour",
	    "part_system_automatic_draw",
	    "part_system_automatic_update",
	    "part_system_clear",
	    "part_system_create",
	    "part_system_create_layer",
	    "part_system_depth",
	    "part_system_destroy",
	    "part_system_draw_order",
	    "part_system_drawit",
	    "part_system_exists",
	    "part_system_get_layer",
	    "part_system_layer",
	    "part_system_position",
	    "part_system_update",
	    "part_type_alpha1",
	    "part_type_alpha2",
	    "part_type_alpha3",
	    "part_type_blend",
	    "part_type_clear",
	    "part_type_color1",
	    "part_type_color2",
	    "part_type_color3",
	    "part_type_color_hsv",
	    "part_type_color_mix",
	    "part_type_color_rgb",
	    "part_type_colour1",
	    "part_type_colour2",
	    "part_type_colour3",
	    "part_type_colour_hsv",
	    "part_type_colour_mix",
	    "part_type_colour_rgb",
	    "part_type_create",
	    "part_type_death",
	    "part_type_destroy",
	    "part_type_direction",
	    "part_type_exists",
	    "part_type_gravity",
	    "part_type_life",
	    "part_type_orientation",
	    "part_type_scale",
	    "part_type_shape",
	    "part_type_size",
	    "part_type_speed",
	    "part_type_sprite",
	    "part_type_step",
	    "path_add",
	    "path_add_point",
	    "path_append",
	    "path_assign",
	    "path_change_point",
	    "path_clear_points",
	    "path_delete",
	    "path_delete_point",
	    "path_duplicate",
	    "path_end",
	    "path_exists",
	    "path_flip",
	    "path_get_closed",
	    "path_get_kind",
	    "path_get_length",
	    "path_get_name",
	    "path_get_number",
	    "path_get_point_speed",
	    "path_get_point_x",
	    "path_get_point_y",
	    "path_get_precision",
	    "path_get_speed",
	    "path_get_time",
	    "path_get_x",
	    "path_get_y",
	    "path_insert_point",
	    "path_mirror",
	    "path_rescale",
	    "path_reverse",
	    "path_rotate",
	    "path_set_closed",
	    "path_set_kind",
	    "path_set_precision",
	    "path_shift",
	    "path_start",
	    "physics_apply_angular_impulse",
	    "physics_apply_force",
	    "physics_apply_impulse",
	    "physics_apply_local_force",
	    "physics_apply_local_impulse",
	    "physics_apply_torque",
	    "physics_draw_debug",
	    "physics_fixture_add_point",
	    "physics_fixture_bind",
	    "physics_fixture_bind_ext",
	    "physics_fixture_create",
	    "physics_fixture_delete",
	    "physics_fixture_set_angular_damping",
	    "physics_fixture_set_awake",
	    "physics_fixture_set_box_shape",
	    "physics_fixture_set_chain_shape",
	    "physics_fixture_set_circle_shape",
	    "physics_fixture_set_collision_group",
	    "physics_fixture_set_density",
	    "physics_fixture_set_edge_shape",
	    "physics_fixture_set_friction",
	    "physics_fixture_set_kinematic",
	    "physics_fixture_set_linear_damping",
	    "physics_fixture_set_polygon_shape",
	    "physics_fixture_set_restitution",
	    "physics_fixture_set_sensor",
	    "physics_get_density",
	    "physics_get_friction",
	    "physics_get_restitution",
	    "physics_joint_delete",
	    "physics_joint_distance_create",
	    "physics_joint_enable_motor",
	    "physics_joint_friction_create",
	    "physics_joint_gear_create",
	    "physics_joint_get_value",
	    "physics_joint_prismatic_create",
	    "physics_joint_pulley_create",
	    "physics_joint_revolute_create",
	    "physics_joint_rope_create",
	    "physics_joint_set_value",
	    "physics_joint_weld_create",
	    "physics_joint_wheel_create",
	    "physics_mass_properties",
	    "physics_particle_count",
	    "physics_particle_create",
	    "physics_particle_delete",
	    "physics_particle_delete_region_box",
	    "physics_particle_delete_region_circle",
	    "physics_particle_delete_region_poly",
	    "physics_particle_draw",
	    "physics_particle_draw_ext",
	    "physics_particle_get_damping",
	    "physics_particle_get_data",
	    "physics_particle_get_data_particle",
	    "physics_particle_get_density",
	    "physics_particle_get_gravity_scale",
	    "physics_particle_get_group_flags",
	    "physics_particle_get_max_count",
	    "physics_particle_get_radius",
	    "physics_particle_group_add_point",
	    "physics_particle_group_begin",
	    "physics_particle_group_box",
	    "physics_particle_group_circle",
	    "physics_particle_group_count",
	    "physics_particle_group_delete",
	    "physics_particle_group_end",
	    "physics_particle_group_get_ang_vel",
	    "physics_particle_group_get_angle",
	    "physics_particle_group_get_centre_x",
	    "physics_particle_group_get_centre_y",
	    "physics_particle_group_get_data",
	    "physics_particle_group_get_inertia",
	    "physics_particle_group_get_mass",
	    "physics_particle_group_get_vel_x",
	    "physics_particle_group_get_vel_y",
	    "physics_particle_group_get_x",
	    "physics_particle_group_get_y",
	    "physics_particle_group_join",
	    "physics_particle_group_polygon",
	    "physics_particle_set_category_flags",
	    "physics_particle_set_damping",
	    "physics_particle_set_density",
	    "physics_particle_set_flags",
	    "physics_particle_set_gravity_scale",
	    "physics_particle_set_group_flags",
	    "physics_particle_set_max_count",
	    "physics_particle_set_radius",
	    "physics_pause_enable",
	    "physics_remove_fixture",
	    "physics_set_density",
	    "physics_set_friction",
	    "physics_set_restitution",
	    "physics_test_overlap",
	    "physics_world_create",
	    "physics_world_draw_debug",
	    "physics_world_gravity",
	    "physics_world_update_iterations",
	    "physics_world_update_speed",
	    "place_empty",
	    "place_free",
	    "place_meeting",
	    "place_snapped",
	    "point_direction",
	    "point_distance",
	    "point_distance_3d",
	    "point_in_circle",
	    "point_in_rectangle",
	    "point_in_triangle",
	    "position_change",
	    "position_destroy",
	    "position_empty",
	    "position_meeting",
	    "power",
	    "ptr",
	    "push_cancel_local_notification",
	    "push_get_first_local_notification",
	    "push_get_next_local_notification",
	    "push_local_notification",
	    "radtodeg",
	    "random",
	    "random_get_seed",
	    "random_range",
	    "random_set_seed",
	    "randomise",
	    "randomize",
	    "real",
	    "rectangle_in_circle",
	    "rectangle_in_rectangle",
	    "rectangle_in_triangle",
	    "room_add",
	    "room_assign",
	    "room_duplicate",
	    "room_exists",
	    "room_get_camera",
	    "room_get_name",
	    "room_get_viewport",
	    "room_goto",
	    "room_goto_next",
	    "room_goto_previous",
	    "room_instance_add",
	    "room_instance_clear",
	    "room_next",
	    "room_previous",
	    "room_restart",
	    "room_set_background_color",
	    "room_set_background_colour",
	    "room_set_camera",
	    "room_set_height",
	    "room_set_persistent",
	    "room_set_view",
	    "room_set_view_enabled",
	    "room_set_viewport",
	    "room_set_width",
	    "round",
	    "screen_save",
	    "screen_save_part",
	    "script_execute",
	    "script_exists",
	    "script_get_name",
	    "sha1_file",
	    "sha1_string_unicode",
	    "sha1_string_utf8",
	    "shader_current",
	    "shader_enable_corner_id",
	    "shader_get_name",
	    "shader_get_sampler_index",
	    "shader_get_uniform",
	    "shader_is_compiled",
	    "shader_reset",
	    "shader_set",
	    "shader_set_uniform_f",
	    "shader_set_uniform_f_array",
	    "shader_set_uniform_i",
	    "shader_set_uniform_i_array",
	    "shader_set_uniform_matrix",
	    "shader_set_uniform_matrix_array",
	    "shaders_are_supported",
	    "shop_leave_rating",
	    "show_debug_message",
	    "show_debug_overlay",
	    "show_error",
	    "show_message",
	    "show_message_async",
	    "show_question",
	    "show_question_async",
	    "sign",
	    "sin",
	    "skeleton_animation_clear",
	    "skeleton_animation_get",
	    "skeleton_animation_get_duration",
	    "skeleton_animation_get_ext",
	    "skeleton_animation_get_frame",
	    "skeleton_animation_get_frames",
	    "skeleton_animation_list",
	    "skeleton_animation_mix",
	    "skeleton_animation_set",
	    "skeleton_animation_set_ext",
	    "skeleton_animation_set_frame",
	    "skeleton_attachment_create",
	    "skeleton_attachment_get",
	    "skeleton_attachment_set",
	    "skeleton_bone_data_get",
	    "skeleton_bone_data_set",
	    "skeleton_bone_state_get",
	    "skeleton_bone_state_set",
	    "skeleton_collision_draw_set",
	    "skeleton_get_bounds",
	    "skeleton_get_minmax",
	    "skeleton_get_num_bounds",
	    "skeleton_skin_get",
	    "skeleton_skin_list",
	    "skeleton_skin_set",
	    "skeleton_slot_data",
	    "sprite_add",
	    "sprite_add_from_surface",
	    "sprite_assign",
	    "sprite_collision_mask",
	    "sprite_create_from_surface",
	    "sprite_delete",
	    "sprite_duplicate",
	    "sprite_exists",
	    "sprite_flush",
	    "sprite_flush_multi",
	    "sprite_get_bbox_bottom",
	    "sprite_get_bbox_left",
	    "sprite_get_bbox_right",
	    "sprite_get_bbox_top",
	    "sprite_get_height",
	    "sprite_get_name",
	    "sprite_get_number",
	    "sprite_get_speed",
	    "sprite_get_speed_type",
	    "sprite_get_texture",
	    "sprite_get_tpe",
	    "sprite_get_uvs",
	    "sprite_get_width",
	    "sprite_get_xoffset",
	    "sprite_get_yoffset",
	    "sprite_merge",
	    "sprite_prefetch",
	    "sprite_prefetch_multi",
	    "sprite_replace",
	    "sprite_save",
	    "sprite_save_strip",
	    "sprite_set_alpha_from_sprite",
	    "sprite_set_cache_size",
	    "sprite_set_cache_size_ext",
	    "sprite_set_offset",
	    "sprite_set_speed",
	    "sqr",
	    "sqrt",
	    "steam_activate_overlay",
	    "steam_activate_overlay_browser",
	    "steam_activate_overlay_store",
	    "steam_activate_overlay_user",
	    "steam_available_languages",
	    "steam_clear_achievement",
	    "steam_create_leaderboard",
	    "steam_current_game_language",
	    "steam_download_friends_scores",
	    "steam_download_scores",
	    "steam_download_scores_around_user",
	    "steam_file_delete",
	    "steam_file_exists",
	    "steam_file_persisted",
	    "steam_file_read",
	    "steam_file_share",
	    "steam_file_size",
	    "steam_file_write",
	    "steam_file_write_file",
	    "steam_get_achievement",
	    "steam_get_app_id",
	    "steam_get_persona_name",
	    "steam_get_quota_free",
	    "steam_get_quota_total",
	    "steam_get_stat_avg_rate",
	    "steam_get_stat_float",
	    "steam_get_stat_int",
	    "steam_get_user_account_id",
	    "steam_get_user_persona_name",
	    "steam_get_user_steam_id",
	    "steam_initialised",
	    "steam_is_cloud_enabled_for_account",
	    "steam_is_cloud_enabled_for_app",
	    "steam_is_overlay_activated",
	    "steam_is_overlay_enabled",
	    "steam_is_screenshot_requested",
	    "steam_is_user_logged_on",
	    "steam_reset_all_stats",
	    "steam_reset_all_stats_achievements",
	    "steam_send_screenshot",
	    "steam_set_achievement",
	    "steam_set_stat_avg_rate",
	    "steam_set_stat_float",
	    "steam_set_stat_int",
	    "steam_stats_ready",
	    "steam_ugc_create_item",
	    "steam_ugc_create_query_all",
	    "steam_ugc_create_query_all_ex",
	    "steam_ugc_create_query_user",
	    "steam_ugc_create_query_user_ex",
	    "steam_ugc_download",
	    "steam_ugc_get_item_install_info",
	    "steam_ugc_get_item_update_info",
	    "steam_ugc_get_item_update_progress",
	    "steam_ugc_get_subscribed_items",
	    "steam_ugc_num_subscribed_items",
	    "steam_ugc_query_add_excluded_tag",
	    "steam_ugc_query_add_required_tag",
	    "steam_ugc_query_set_allow_cached_response",
	    "steam_ugc_query_set_cloud_filename_filter",
	    "steam_ugc_query_set_match_any_tag",
	    "steam_ugc_query_set_ranked_by_trend_days",
	    "steam_ugc_query_set_return_long_description",
	    "steam_ugc_query_set_return_total_only",
	    "steam_ugc_query_set_search_text",
	    "steam_ugc_request_item_details",
	    "steam_ugc_send_query",
	    "steam_ugc_set_item_content",
	    "steam_ugc_set_item_description",
	    "steam_ugc_set_item_preview",
	    "steam_ugc_set_item_tags",
	    "steam_ugc_set_item_title",
	    "steam_ugc_set_item_visibility",
	    "steam_ugc_start_item_update",
	    "steam_ugc_submit_item_update",
	    "steam_ugc_subscribe_item",
	    "steam_ugc_unsubscribe_item",
	    "steam_upload_score",
	    "steam_upload_score_buffer",
	    "steam_upload_score_buffer_ext",
	    "steam_upload_score_ext",
	    "steam_user_installed_dlc",
	    "steam_user_owns_dlc",
	    "string",
	    "string_byte_at",
	    "string_byte_length",
	    "string_char_at",
	    "string_copy",
	    "string_count",
	    "string_delete",
	    "string_digits",
	    "string_format",
	    "string_hash_to_newline",
	    "string_height",
	    "string_height_ext",
	    "string_insert",
	    "string_length",
	    "string_letters",
	    "string_lettersdigits",
	    "string_lower",
	    "string_ord_at",
	    "string_pos",
	    "string_repeat",
	    "string_replace",
	    "string_replace_all",
	    "string_set_byte_at",
	    "string_upper",
	    "string_width",
	    "string_width_ext",
	    "surface_copy",
	    "surface_copy_part",
	    "surface_create",
	    "surface_create_ext",
	    "surface_depth_disable",
	    "surface_exists",
	    "surface_free",
	    "surface_get_depth_disable",
	    "surface_get_height",
	    "surface_get_texture",
	    "surface_get_width",
	    "surface_getpixel",
	    "surface_getpixel_ext",
	    "surface_reset_target",
	    "surface_resize",
	    "surface_save",
	    "surface_save_part",
	    "surface_set_target",
	    "surface_set_target_ext",
	    "tan",
	    "texture_get_height",
	    "texture_get_texel_height",
	    "texture_get_texel_width",
	    "texture_get_uvs",
	    "texture_get_width",
	    "texture_global_scale",
	    "texture_set_stage",
	    "tile_get_empty",
	    "tile_get_flip",
	    "tile_get_index",
	    "tile_get_mirror",
	    "tile_get_rotate",
	    "tile_set_empty",
	    "tile_set_flip",
	    "tile_set_index",
	    "tile_set_mirror",
	    "tile_set_rotate",
	    "tilemap_clear",
	    "tilemap_get",
	    "tilemap_get_at_pixel",
	    "tilemap_get_cell_x_at_pixel",
	    "tilemap_get_cell_y_at_pixel",
	    "tilemap_get_frame",
	    "tilemap_get_global_mask",
	    "tilemap_get_height",
	    "tilemap_get_mask",
	    "tilemap_get_tile_height",
	    "tilemap_get_tile_width",
	    "tilemap_get_tileset",
	    "tilemap_get_width",
	    "tilemap_get_x",
	    "tilemap_get_y",
	    "tilemap_set",
	    "tilemap_set_at_pixel",
	    "tilemap_set_global_mask",
	    "tilemap_set_mask",
	    "tilemap_tileset",
	    "tilemap_x",
	    "tilemap_y",
	    "timeline_add",
	    "timeline_clear",
	    "timeline_delete",
	    "timeline_exists",
	    "timeline_get_name",
	    "timeline_max_moment",
	    "timeline_moment_add_script",
	    "timeline_moment_clear",
	    "timeline_size",
	    "typeof",
	    "url_get_domain",
	    "url_open",
	    "url_open_ext",
	    "url_open_full",
	    "variable_global_exists",
	    "variable_global_get",
	    "variable_global_set",
	    "variable_instance_exists",
	    "variable_instance_get",
	    "variable_instance_get_names",
	    "variable_instance_set",
	    "variable_struct_exists",
	    "variable_struct_get",
	    "variable_struct_get_names",
	    "variable_struct_names_count",
	    "variable_struct_remove",
	    "variable_struct_set",
	    "vertex_argb",
	    "vertex_begin",
	    "vertex_color",
	    "vertex_colour",
	    "vertex_create_buffer",
	    "vertex_create_buffer_ext",
	    "vertex_create_buffer_from_buffer",
	    "vertex_create_buffer_from_buffer_ext",
	    "vertex_delete_buffer",
	    "vertex_end",
	    "vertex_float1",
	    "vertex_float2",
	    "vertex_float3",
	    "vertex_float4",
	    "vertex_format_add_color",
	    "vertex_format_add_colour",
	    "vertex_format_add_custom",
	    "vertex_format_add_normal",
	    "vertex_format_add_position",
	    "vertex_format_add_position_3d",
	    "vertex_format_add_texcoord",
	    "vertex_format_add_textcoord",
	    "vertex_format_begin",
	    "vertex_format_delete",
	    "vertex_format_end",
	    "vertex_freeze",
	    "vertex_get_buffer_size",
	    "vertex_get_number",
	    "vertex_normal",
	    "vertex_position",
	    "vertex_position_3d",
	    "vertex_submit",
	    "vertex_texcoord",
	    "vertex_ubyte4",
	    "view_get_camera",
	    "view_get_hport",
	    "view_get_surface_id",
	    "view_get_visible",
	    "view_get_wport",
	    "view_get_xport",
	    "view_get_yport",
	    "view_set_camera",
	    "view_set_hport",
	    "view_set_surface_id",
	    "view_set_visible",
	    "view_set_wport",
	    "view_set_xport",
	    "view_set_yport",
	    "virtual_key_add",
	    "virtual_key_delete",
	    "virtual_key_hide",
	    "virtual_key_show",
	    "win8_appbar_add_element",
	    "win8_appbar_enable",
	    "win8_appbar_remove_element",
	    "win8_device_touchscreen_available",
	    "win8_license_initialize_sandbox",
	    "win8_license_trial_version",
	    "win8_livetile_badge_clear",
	    "win8_livetile_badge_notification",
	    "win8_livetile_notification_begin",
	    "win8_livetile_notification_end",
	    "win8_livetile_notification_expiry",
	    "win8_livetile_notification_image_add",
	    "win8_livetile_notification_secondary_begin",
	    "win8_livetile_notification_tag",
	    "win8_livetile_notification_text_add",
	    "win8_livetile_queue_enable",
	    "win8_livetile_tile_clear",
	    "win8_livetile_tile_notification",
	    "win8_search_add_suggestions",
	    "win8_search_disable",
	    "win8_search_enable",
	    "win8_secondarytile_badge_notification",
	    "win8_secondarytile_delete",
	    "win8_secondarytile_pin",
	    "win8_settingscharm_add_entry",
	    "win8_settingscharm_add_html_entry",
	    "win8_settingscharm_add_xaml_entry",
	    "win8_settingscharm_get_xaml_property",
	    "win8_settingscharm_remove_entry",
	    "win8_settingscharm_set_xaml_property",
	    "win8_share_file",
	    "win8_share_image",
	    "win8_share_screenshot",
	    "win8_share_text",
	    "win8_share_url",
	    "window_center",
	    "window_device",
	    "window_get_caption",
	    "window_get_color",
	    "window_get_colour",
	    "window_get_cursor",
	    "window_get_fullscreen",
	    "window_get_height",
	    "window_get_visible_rects",
	    "window_get_width",
	    "window_get_x",
	    "window_get_y",
	    "window_handle",
	    "window_has_focus",
	    "window_mouse_get_x",
	    "window_mouse_get_y",
	    "window_mouse_set",
	    "window_set_caption",
	    "window_set_color",
	    "window_set_colour",
	    "window_set_cursor",
	    "window_set_fullscreen",
	    "window_set_max_height",
	    "window_set_max_width",
	    "window_set_min_height",
	    "window_set_min_width",
	    "window_set_position",
	    "window_set_rectangle",
	    "window_set_size",
	    "window_view_mouse_get_x",
	    "window_view_mouse_get_y",
	    "window_views_mouse_get_x",
	    "window_views_mouse_get_y",
	    "winphone_license_trial_version",
	    "winphone_tile_back_content",
	    "winphone_tile_back_content_wide",
	    "winphone_tile_back_image",
	    "winphone_tile_back_image_wide",
	    "winphone_tile_back_title",
	    "winphone_tile_background_color",
	    "winphone_tile_background_colour",
	    "winphone_tile_count",
	    "winphone_tile_cycle_images",
	    "winphone_tile_front_image",
	    "winphone_tile_front_image_small",
	    "winphone_tile_front_image_wide",
	    "winphone_tile_icon_image",
	    "winphone_tile_small_background_image",
	    "winphone_tile_small_icon_image",
	    "winphone_tile_title",
	    "winphone_tile_wide_content",
	    "zip_unzip"
	  ];
	  const LITERALS = [
	    "all",
	    "false",
	    "noone",
	    "pointer_invalid",
	    "pointer_null",
	    "true",
	    "undefined"
	  ];
	  // many of these look like enumerables to me (see comments below)
	  const SYMBOLS = [
	    "ANSI_CHARSET",
	    "ARABIC_CHARSET",
	    "BALTIC_CHARSET",
	    "CHINESEBIG5_CHARSET",
	    "DEFAULT_CHARSET",
	    "EASTEUROPE_CHARSET",
	    "GB2312_CHARSET",
	    "GM_build_date",
	    "GM_runtime_version",
	    "GM_version",
	    "GREEK_CHARSET",
	    "HANGEUL_CHARSET",
	    "HEBREW_CHARSET",
	    "JOHAB_CHARSET",
	    "MAC_CHARSET",
	    "OEM_CHARSET",
	    "RUSSIAN_CHARSET",
	    "SHIFTJIS_CHARSET",
	    "SYMBOL_CHARSET",
	    "THAI_CHARSET",
	    "TURKISH_CHARSET",
	    "VIETNAMESE_CHARSET",
	    "achievement_achievement_info",
	    "achievement_filter_all_players",
	    "achievement_filter_favorites_only",
	    "achievement_filter_friends_only",
	    "achievement_friends_info",
	    "achievement_leaderboard_info",
	    "achievement_our_info",
	    "achievement_pic_loaded",
	    "achievement_show_achievement",
	    "achievement_show_bank",
	    "achievement_show_friend_picker",
	    "achievement_show_leaderboard",
	    "achievement_show_profile",
	    "achievement_show_purchase_prompt",
	    "achievement_show_ui",
	    "achievement_type_achievement_challenge",
	    "achievement_type_score_challenge",
	    "asset_font",
	    "asset_object",
	    "asset_path",
	    "asset_room",
	    "asset_script",
	    "asset_shader",
	    "asset_sound",
	    "asset_sprite",
	    "asset_tiles",
	    "asset_timeline",
	    "asset_unknown",
	    "audio_3d",
	    "audio_falloff_exponent_distance",
	    "audio_falloff_exponent_distance_clamped",
	    "audio_falloff_inverse_distance",
	    "audio_falloff_inverse_distance_clamped",
	    "audio_falloff_linear_distance",
	    "audio_falloff_linear_distance_clamped",
	    "audio_falloff_none",
	    "audio_mono",
	    "audio_new_system",
	    "audio_old_system",
	    "audio_stereo",
	    "bm_add",
	    "bm_complex",
	    "bm_dest_alpha",
	    "bm_dest_color",
	    "bm_dest_colour",
	    "bm_inv_dest_alpha",
	    "bm_inv_dest_color",
	    "bm_inv_dest_colour",
	    "bm_inv_src_alpha",
	    "bm_inv_src_color",
	    "bm_inv_src_colour",
	    "bm_max",
	    "bm_normal",
	    "bm_one",
	    "bm_src_alpha",
	    "bm_src_alpha_sat",
	    "bm_src_color",
	    "bm_src_colour",
	    "bm_subtract",
	    "bm_zero",
	    "browser_chrome",
	    "browser_edge",
	    "browser_firefox",
	    "browser_ie",
	    "browser_ie_mobile",
	    "browser_not_a_browser",
	    "browser_opera",
	    "browser_safari",
	    "browser_safari_mobile",
	    "browser_tizen",
	    "browser_unknown",
	    "browser_windows_store",
	    "buffer_bool",
	    "buffer_f16",
	    "buffer_f32",
	    "buffer_f64",
	    "buffer_fast",
	    "buffer_fixed",
	    "buffer_generalerror",
	    "buffer_grow",
	    "buffer_invalidtype",
	    "buffer_network",
	    "buffer_outofbounds",
	    "buffer_outofspace",
	    "buffer_s16",
	    "buffer_s32",
	    "buffer_s8",
	    "buffer_seek_end",
	    "buffer_seek_relative",
	    "buffer_seek_start",
	    "buffer_string",
	    "buffer_surface_copy",
	    "buffer_text",
	    "buffer_u16",
	    "buffer_u32",
	    "buffer_u64",
	    "buffer_u8",
	    "buffer_vbuffer",
	    "buffer_wrap",
	    "button_type",
	    "c_aqua",
	    "c_black",
	    "c_blue",
	    "c_dkgray",
	    "c_fuchsia",
	    "c_gray",
	    "c_green",
	    "c_lime",
	    "c_ltgray",
	    "c_maroon",
	    "c_navy",
	    "c_olive",
	    "c_orange",
	    "c_purple",
	    "c_red",
	    "c_silver",
	    "c_teal",
	    "c_white",
	    "c_yellow",
	    "cmpfunc_always",
	    "cmpfunc_equal",
	    "cmpfunc_greater",
	    "cmpfunc_greaterequal",
	    "cmpfunc_less",
	    "cmpfunc_lessequal",
	    "cmpfunc_never",
	    "cmpfunc_notequal",
	    "cr_appstart",
	    "cr_arrow",
	    "cr_beam",
	    "cr_cross",
	    "cr_default",
	    "cr_drag",
	    "cr_handpoint",
	    "cr_hourglass",
	    "cr_none",
	    "cr_size_all",
	    "cr_size_nesw",
	    "cr_size_ns",
	    "cr_size_nwse",
	    "cr_size_we",
	    "cr_uparrow",
	    "cull_clockwise",
	    "cull_counterclockwise",
	    "cull_noculling",
	    "device_emulator",
	    "device_ios_ipad",
	    "device_ios_ipad_retina",
	    "device_ios_iphone",
	    "device_ios_iphone5",
	    "device_ios_iphone6",
	    "device_ios_iphone6plus",
	    "device_ios_iphone_retina",
	    "device_ios_unknown",
	    "device_tablet",
	    "display_landscape",
	    "display_landscape_flipped",
	    "display_portrait",
	    "display_portrait_flipped",
	    "dll_cdecl",
	    "dll_stdcall",
	    "ds_type_grid",
	    "ds_type_list",
	    "ds_type_map",
	    "ds_type_priority",
	    "ds_type_queue",
	    "ds_type_stack",
	    "ef_cloud",
	    "ef_ellipse",
	    "ef_explosion",
	    "ef_firework",
	    "ef_flare",
	    "ef_rain",
	    "ef_ring",
	    "ef_smoke",
	    "ef_smokeup",
	    "ef_snow",
	    "ef_spark",
	    "ef_star",
	    // for example ev_ are types of events
	    "ev_alarm",
	    "ev_animation_end",
	    "ev_boundary",
	    "ev_cleanup",
	    "ev_close_button",
	    "ev_collision",
	    "ev_create",
	    "ev_destroy",
	    "ev_draw",
	    "ev_draw_begin",
	    "ev_draw_end",
	    "ev_draw_post",
	    "ev_draw_pre",
	    "ev_end_of_path",
	    "ev_game_end",
	    "ev_game_start",
	    "ev_gesture",
	    "ev_gesture_double_tap",
	    "ev_gesture_drag_end",
	    "ev_gesture_drag_start",
	    "ev_gesture_dragging",
	    "ev_gesture_flick",
	    "ev_gesture_pinch_end",
	    "ev_gesture_pinch_in",
	    "ev_gesture_pinch_out",
	    "ev_gesture_pinch_start",
	    "ev_gesture_rotate_end",
	    "ev_gesture_rotate_start",
	    "ev_gesture_rotating",
	    "ev_gesture_tap",
	    "ev_global_gesture_double_tap",
	    "ev_global_gesture_drag_end",
	    "ev_global_gesture_drag_start",
	    "ev_global_gesture_dragging",
	    "ev_global_gesture_flick",
	    "ev_global_gesture_pinch_end",
	    "ev_global_gesture_pinch_in",
	    "ev_global_gesture_pinch_out",
	    "ev_global_gesture_pinch_start",
	    "ev_global_gesture_rotate_end",
	    "ev_global_gesture_rotate_start",
	    "ev_global_gesture_rotating",
	    "ev_global_gesture_tap",
	    "ev_global_left_button",
	    "ev_global_left_press",
	    "ev_global_left_release",
	    "ev_global_middle_button",
	    "ev_global_middle_press",
	    "ev_global_middle_release",
	    "ev_global_right_button",
	    "ev_global_right_press",
	    "ev_global_right_release",
	    "ev_gui",
	    "ev_gui_begin",
	    "ev_gui_end",
	    "ev_joystick1_button1",
	    "ev_joystick1_button2",
	    "ev_joystick1_button3",
	    "ev_joystick1_button4",
	    "ev_joystick1_button5",
	    "ev_joystick1_button6",
	    "ev_joystick1_button7",
	    "ev_joystick1_button8",
	    "ev_joystick1_down",
	    "ev_joystick1_left",
	    "ev_joystick1_right",
	    "ev_joystick1_up",
	    "ev_joystick2_button1",
	    "ev_joystick2_button2",
	    "ev_joystick2_button3",
	    "ev_joystick2_button4",
	    "ev_joystick2_button5",
	    "ev_joystick2_button6",
	    "ev_joystick2_button7",
	    "ev_joystick2_button8",
	    "ev_joystick2_down",
	    "ev_joystick2_left",
	    "ev_joystick2_right",
	    "ev_joystick2_up",
	    "ev_keyboard",
	    "ev_keypress",
	    "ev_keyrelease",
	    "ev_left_button",
	    "ev_left_press",
	    "ev_left_release",
	    "ev_middle_button",
	    "ev_middle_press",
	    "ev_middle_release",
	    "ev_mouse",
	    "ev_mouse_enter",
	    "ev_mouse_leave",
	    "ev_mouse_wheel_down",
	    "ev_mouse_wheel_up",
	    "ev_no_button",
	    "ev_no_more_health",
	    "ev_no_more_lives",
	    "ev_other",
	    "ev_outside",
	    "ev_right_button",
	    "ev_right_press",
	    "ev_right_release",
	    "ev_room_end",
	    "ev_room_start",
	    "ev_step",
	    "ev_step_begin",
	    "ev_step_end",
	    "ev_step_normal",
	    "ev_trigger",
	    "ev_user0",
	    "ev_user1",
	    "ev_user2",
	    "ev_user3",
	    "ev_user4",
	    "ev_user5",
	    "ev_user6",
	    "ev_user7",
	    "ev_user8",
	    "ev_user9",
	    "ev_user10",
	    "ev_user11",
	    "ev_user12",
	    "ev_user13",
	    "ev_user14",
	    "ev_user15",
	    "fa_archive",
	    "fa_bottom",
	    "fa_center",
	    "fa_directory",
	    "fa_hidden",
	    "fa_left",
	    "fa_middle",
	    "fa_readonly",
	    "fa_right",
	    "fa_sysfile",
	    "fa_top",
	    "fa_volumeid",
	    "fb_login_default",
	    "fb_login_fallback_to_webview",
	    "fb_login_forcing_safari",
	    "fb_login_forcing_webview",
	    "fb_login_no_fallback_to_webview",
	    "fb_login_use_system_account",
	    "gamespeed_fps",
	    "gamespeed_microseconds",
	    "ge_lose",
	    "global",
	    "gp_axislh",
	    "gp_axislv",
	    "gp_axisrh",
	    "gp_axisrv",
	    "gp_face1",
	    "gp_face2",
	    "gp_face3",
	    "gp_face4",
	    "gp_padd",
	    "gp_padl",
	    "gp_padr",
	    "gp_padu",
	    "gp_select",
	    "gp_shoulderl",
	    "gp_shoulderlb",
	    "gp_shoulderr",
	    "gp_shoulderrb",
	    "gp_start",
	    "gp_stickl",
	    "gp_stickr",
	    "iap_available",
	    "iap_canceled",
	    "iap_ev_consume",
	    "iap_ev_product",
	    "iap_ev_purchase",
	    "iap_ev_restore",
	    "iap_ev_storeload",
	    "iap_failed",
	    "iap_purchased",
	    "iap_refunded",
	    "iap_status_available",
	    "iap_status_loading",
	    "iap_status_processing",
	    "iap_status_restoring",
	    "iap_status_unavailable",
	    "iap_status_uninitialised",
	    "iap_storeload_failed",
	    "iap_storeload_ok",
	    "iap_unavailable",
	    "input_type",
	    "kbv_autocapitalize_characters",
	    "kbv_autocapitalize_none",
	    "kbv_autocapitalize_sentences",
	    "kbv_autocapitalize_words",
	    "kbv_returnkey_continue",
	    "kbv_returnkey_default",
	    "kbv_returnkey_done",
	    "kbv_returnkey_emergency",
	    "kbv_returnkey_go",
	    "kbv_returnkey_google",
	    "kbv_returnkey_join",
	    "kbv_returnkey_next",
	    "kbv_returnkey_route",
	    "kbv_returnkey_search",
	    "kbv_returnkey_send",
	    "kbv_returnkey_yahoo",
	    "kbv_type_ascii",
	    "kbv_type_default",
	    "kbv_type_email",
	    "kbv_type_numbers",
	    "kbv_type_phone",
	    "kbv_type_phone_name",
	    "kbv_type_url",
	    "layerelementtype_background",
	    "layerelementtype_instance",
	    "layerelementtype_oldtilemap",
	    "layerelementtype_particlesystem",
	    "layerelementtype_sprite",
	    "layerelementtype_tile",
	    "layerelementtype_tilemap",
	    "layerelementtype_undefined",
	    "lb_disp_none",
	    "lb_disp_numeric",
	    "lb_disp_time_ms",
	    "lb_disp_time_sec",
	    "lb_sort_ascending",
	    "lb_sort_descending",
	    "lb_sort_none",
	    "leaderboard_type_number",
	    "leaderboard_type_time_mins_secs",
	    "lighttype_dir",
	    "lighttype_point",
	    "local",
	    "matrix_projection",
	    "matrix_view",
	    "matrix_world",
	    "mb_any",
	    "mb_left",
	    "mb_middle",
	    "mb_none",
	    "mb_right",
	    "mip_markedonly",
	    "mip_off",
	    "mip_on",
	    "network_config_connect_timeout",
	    "network_config_disable_reliable_udp",
	    "network_config_enable_reliable_udp",
	    "network_config_use_non_blocking_socket",
	    "network_socket_bluetooth",
	    "network_socket_tcp",
	    "network_socket_udp",
	    "network_type_connect",
	    "network_type_data",
	    "network_type_disconnect",
	    "network_type_non_blocking_connect",
	    "of_challen",
	    "of_challenge_tie",
	    "of_challenge_win",
	    "os_3ds",
	    "os_android",
	    "os_bb10",
	    "os_ios",
	    "os_linux",
	    "os_macosx",
	    "os_ps3",
	    "os_ps4",
	    "os_psvita",
	    "os_switch",
	    "os_symbian",
	    "os_tizen",
	    "os_tvos",
	    "os_unknown",
	    "os_uwp",
	    "os_wiiu",
	    "os_win32",
	    "os_win8native",
	    "os_windows",
	    "os_winphone",
	    "os_xbox360",
	    "os_xboxone",
	    "other",
	    "ov_achievements",
	    "ov_community",
	    "ov_friends",
	    "ov_gamegroup",
	    "ov_players",
	    "ov_settings",
	    "path_action_continue",
	    "path_action_restart",
	    "path_action_reverse",
	    "path_action_stop",
	    "phy_debug_render_aabb",
	    "phy_debug_render_collision_pairs",
	    "phy_debug_render_coms",
	    "phy_debug_render_core_shapes",
	    "phy_debug_render_joints",
	    "phy_debug_render_obb",
	    "phy_debug_render_shapes",
	    "phy_joint_anchor_1_x",
	    "phy_joint_anchor_1_y",
	    "phy_joint_anchor_2_x",
	    "phy_joint_anchor_2_y",
	    "phy_joint_angle",
	    "phy_joint_angle_limits",
	    "phy_joint_damping_ratio",
	    "phy_joint_frequency",
	    "phy_joint_length_1",
	    "phy_joint_length_2",
	    "phy_joint_lower_angle_limit",
	    "phy_joint_max_force",
	    "phy_joint_max_length",
	    "phy_joint_max_motor_force",
	    "phy_joint_max_motor_torque",
	    "phy_joint_max_torque",
	    "phy_joint_motor_force",
	    "phy_joint_motor_speed",
	    "phy_joint_motor_torque",
	    "phy_joint_reaction_force_x",
	    "phy_joint_reaction_force_y",
	    "phy_joint_reaction_torque",
	    "phy_joint_speed",
	    "phy_joint_translation",
	    "phy_joint_upper_angle_limit",
	    "phy_particle_data_flag_category",
	    "phy_particle_data_flag_color",
	    "phy_particle_data_flag_colour",
	    "phy_particle_data_flag_position",
	    "phy_particle_data_flag_typeflags",
	    "phy_particle_data_flag_velocity",
	    "phy_particle_flag_colormixing",
	    "phy_particle_flag_colourmixing",
	    "phy_particle_flag_elastic",
	    "phy_particle_flag_powder",
	    "phy_particle_flag_spring",
	    "phy_particle_flag_tensile",
	    "phy_particle_flag_viscous",
	    "phy_particle_flag_wall",
	    "phy_particle_flag_water",
	    "phy_particle_flag_zombie",
	    "phy_particle_group_flag_rigid",
	    "phy_particle_group_flag_solid",
	    "pi",
	    "pr_linelist",
	    "pr_linestrip",
	    "pr_pointlist",
	    "pr_trianglefan",
	    "pr_trianglelist",
	    "pr_trianglestrip",
	    "ps_distr_gaussian",
	    "ps_distr_invgaussian",
	    "ps_distr_linear",
	    "ps_shape_diamond",
	    "ps_shape_ellipse",
	    "ps_shape_line",
	    "ps_shape_rectangle",
	    "pt_shape_circle",
	    "pt_shape_cloud",
	    "pt_shape_disk",
	    "pt_shape_explosion",
	    "pt_shape_flare",
	    "pt_shape_line",
	    "pt_shape_pixel",
	    "pt_shape_ring",
	    "pt_shape_smoke",
	    "pt_shape_snow",
	    "pt_shape_spark",
	    "pt_shape_sphere",
	    "pt_shape_square",
	    "pt_shape_star",
	    "spritespeed_framespergameframe",
	    "spritespeed_framespersecond",
	    "text_type",
	    "tf_anisotropic",
	    "tf_linear",
	    "tf_point",
	    "tile_flip",
	    "tile_index_mask",
	    "tile_mirror",
	    "tile_rotate",
	    "timezone_local",
	    "timezone_utc",
	    "tm_countvsyncs",
	    "tm_sleep",
	    "ty_real",
	    "ty_string",
	    "ugc_filetype_community",
	    "ugc_filetype_microtrans",
	    "ugc_list_Favorited",
	    "ugc_list_Followed",
	    "ugc_list_Published",
	    "ugc_list_Subscribed",
	    "ugc_list_UsedOrPlayed",
	    "ugc_list_VotedDown",
	    "ugc_list_VotedOn",
	    "ugc_list_VotedUp",
	    "ugc_list_WillVoteLater",
	    "ugc_match_AllGuides",
	    "ugc_match_Artwork",
	    "ugc_match_Collections",
	    "ugc_match_ControllerBindings",
	    "ugc_match_IntegratedGuides",
	    "ugc_match_Items",
	    "ugc_match_Items_Mtx",
	    "ugc_match_Items_ReadyToUse",
	    "ugc_match_Screenshots",
	    "ugc_match_UsableInGame",
	    "ugc_match_Videos",
	    "ugc_match_WebGuides",
	    "ugc_query_AcceptedForGameRankedByAcceptanceDate",
	    "ugc_query_CreatedByFollowedUsersRankedByPublicationDate",
	    "ugc_query_CreatedByFriendsRankedByPublicationDate",
	    "ugc_query_FavoritedByFriendsRankedByPublicationDate",
	    "ugc_query_NotYetRated",
	    "ugc_query_RankedByNumTimesReported",
	    "ugc_query_RankedByPublicationDate",
	    "ugc_query_RankedByTextSearch",
	    "ugc_query_RankedByTotalVotesAsc",
	    "ugc_query_RankedByTrend",
	    "ugc_query_RankedByVote",
	    "ugc_query_RankedByVotesUp",
	    "ugc_result_success",
	    "ugc_sortorder_CreationOrderAsc",
	    "ugc_sortorder_CreationOrderDesc",
	    "ugc_sortorder_ForModeration",
	    "ugc_sortorder_LastUpdatedDesc",
	    "ugc_sortorder_SubscriptionDateDesc",
	    "ugc_sortorder_TitleAsc",
	    "ugc_sortorder_VoteScoreDesc",
	    "ugc_visibility_friends_only",
	    "ugc_visibility_private",
	    "ugc_visibility_public",
	    "vertex_type_color",
	    "vertex_type_colour",
	    "vertex_type_float1",
	    "vertex_type_float2",
	    "vertex_type_float3",
	    "vertex_type_float4",
	    "vertex_type_ubyte4",
	    "vertex_usage_binormal",
	    "vertex_usage_blendindices",
	    "vertex_usage_blendweight",
	    "vertex_usage_color",
	    "vertex_usage_colour",
	    "vertex_usage_depth",
	    "vertex_usage_fog",
	    "vertex_usage_normal",
	    "vertex_usage_position",
	    "vertex_usage_psize",
	    "vertex_usage_sample",
	    "vertex_usage_tangent",
	    "vertex_usage_texcoord",
	    "vertex_usage_textcoord",
	    "vk_add",
	    "vk_alt",
	    "vk_anykey",
	    "vk_backspace",
	    "vk_control",
	    "vk_decimal",
	    "vk_delete",
	    "vk_divide",
	    "vk_down",
	    "vk_end",
	    "vk_enter",
	    "vk_escape",
	    "vk_f1",
	    "vk_f2",
	    "vk_f3",
	    "vk_f4",
	    "vk_f5",
	    "vk_f6",
	    "vk_f7",
	    "vk_f8",
	    "vk_f9",
	    "vk_f10",
	    "vk_f11",
	    "vk_f12",
	    "vk_home",
	    "vk_insert",
	    "vk_lalt",
	    "vk_lcontrol",
	    "vk_left",
	    "vk_lshift",
	    "vk_multiply",
	    "vk_nokey",
	    "vk_numpad0",
	    "vk_numpad1",
	    "vk_numpad2",
	    "vk_numpad3",
	    "vk_numpad4",
	    "vk_numpad5",
	    "vk_numpad6",
	    "vk_numpad7",
	    "vk_numpad8",
	    "vk_numpad9",
	    "vk_pagedown",
	    "vk_pageup",
	    "vk_pause",
	    "vk_printscreen",
	    "vk_ralt",
	    "vk_rcontrol",
	    "vk_return",
	    "vk_right",
	    "vk_rshift",
	    "vk_shift",
	    "vk_space",
	    "vk_subtract",
	    "vk_tab",
	    "vk_up"
	  ];
	  const LANGUAGE_VARIABLES = [
	    "alarm",
	    "application_surface",
	    "argument",
	    "argument0",
	    "argument1",
	    "argument2",
	    "argument3",
	    "argument4",
	    "argument5",
	    "argument6",
	    "argument7",
	    "argument8",
	    "argument9",
	    "argument10",
	    "argument11",
	    "argument12",
	    "argument13",
	    "argument14",
	    "argument15",
	    "argument_count",
	    "argument_relative",
	    "async_load",
	    "background_color",
	    "background_colour",
	    "background_showcolor",
	    "background_showcolour",
	    "bbox_bottom",
	    "bbox_left",
	    "bbox_right",
	    "bbox_top",
	    "browser_height",
	    "browser_width",
	    "caption_health",
	    "caption_lives",
	    "caption_score",
	    "current_day",
	    "current_hour",
	    "current_minute",
	    "current_month",
	    "current_second",
	    "current_time",
	    "current_weekday",
	    "current_year",
	    "cursor_sprite",
	    "debug_mode",
	    "delta_time",
	    "depth",
	    "direction",
	    "display_aa",
	    "error_last",
	    "error_occurred",
	    "event_action",
	    "event_data",
	    "event_number",
	    "event_object",
	    "event_type",
	    "fps",
	    "fps_real",
	    "friction",
	    "game_display_name",
	    "game_id",
	    "game_project_name",
	    "game_save_id",
	    "gamemaker_pro",
	    "gamemaker_registered",
	    "gamemaker_version",
	    "gravity",
	    "gravity_direction",
	    "health",
	    "hspeed",
	    "iap_data",
	    "id|0",
	    "image_alpha",
	    "image_angle",
	    "image_blend",
	    "image_index",
	    "image_number",
	    "image_speed",
	    "image_xscale",
	    "image_yscale",
	    "instance_count",
	    "instance_id",
	    "keyboard_key",
	    "keyboard_lastchar",
	    "keyboard_lastkey",
	    "keyboard_string",
	    "layer",
	    "lives",
	    "mask_index",
	    "mouse_button",
	    "mouse_lastbutton",
	    "mouse_x",
	    "mouse_y",
	    "object_index",
	    "os_browser",
	    "os_device",
	    "os_type",
	    "os_version",
	    "path_endaction",
	    "path_index",
	    "path_orientation",
	    "path_position",
	    "path_positionprevious",
	    "path_scale",
	    "path_speed",
	    "persistent",
	    "phy_active",
	    "phy_angular_damping",
	    "phy_angular_velocity",
	    "phy_bullet",
	    "phy_col_normal_x",
	    "phy_col_normal_y",
	    "phy_collision_points",
	    "phy_collision_x",
	    "phy_collision_y",
	    "phy_com_x",
	    "phy_com_y",
	    "phy_dynamic",
	    "phy_fixed_rotation",
	    "phy_inertia",
	    "phy_kinematic",
	    "phy_linear_damping",
	    "phy_linear_velocity_x",
	    "phy_linear_velocity_y",
	    "phy_mass",
	    "phy_position_x",
	    "phy_position_xprevious",
	    "phy_position_y",
	    "phy_position_yprevious",
	    "phy_rotation",
	    "phy_sleeping",
	    "phy_speed",
	    "phy_speed_x",
	    "phy_speed_y",
	    "program_directory",
	    "room",
	    "room_caption",
	    "room_first",
	    "room_height",
	    "room_last",
	    "room_persistent",
	    "room_speed",
	    "room_width",
	    "score",
	    "self",
	    "show_health",
	    "show_lives",
	    "show_score",
	    "solid",
	    "speed",
	    "sprite_height",
	    "sprite_index",
	    "sprite_width",
	    "sprite_xoffset",
	    "sprite_yoffset",
	    "temp_directory",
	    "timeline_index",
	    "timeline_loop",
	    "timeline_position",
	    "timeline_running",
	    "timeline_speed",
	    "view_angle",
	    "view_camera",
	    "view_current",
	    "view_enabled",
	    "view_hborder",
	    "view_hport",
	    "view_hspeed",
	    "view_hview",
	    "view_object",
	    "view_surface_id",
	    "view_vborder",
	    "view_visible",
	    "view_vspeed",
	    "view_wport",
	    "view_wview",
	    "view_xport",
	    "view_xview",
	    "view_yport",
	    "view_yview",
	    "visible",
	    "vspeed",
	    "webgl_enabled",
	    "working_directory",
	    "xprevious",
	    "xstart",
	    "x|0",
	    "yprevious",
	    "ystart",
	    "y|0"
	  ];

	  return {
	    name: 'GML',
	    case_insensitive: false, // language is case-insensitive
	    keywords: {
	      keyword: KEYWORDS,
	      built_in: BUILT_INS,
	      literal: LITERALS,
	      symbol: SYMBOLS,
	      "variable.language": LANGUAGE_VARIABLES
	    },
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_NUMBER_MODE
	    ]
	  };
	}

	gml_1 = gml;
	return gml_1;
}

/*
Language: Go
Author: Stephan Kountso aka StepLg <steplg@gmail.com>
Contributors: Evgeny Stepanischev <imbolk@gmail.com>
Description: Google go language (golang). For info about language
Website: http://golang.org/
Category: common, system
*/

var go_1;
var hasRequiredGo;

function requireGo () {
	if (hasRequiredGo) return go_1;
	hasRequiredGo = 1;
	function go(hljs) {
	  const LITERALS = [
	    "true",
	    "false",
	    "iota",
	    "nil"
	  ];
	  const BUILT_INS = [
	    "append",
	    "cap",
	    "close",
	    "complex",
	    "copy",
	    "imag",
	    "len",
	    "make",
	    "new",
	    "panic",
	    "print",
	    "println",
	    "real",
	    "recover",
	    "delete"
	  ];
	  const TYPES = [
	    "bool",
	    "byte",
	    "complex64",
	    "complex128",
	    "error",
	    "float32",
	    "float64",
	    "int8",
	    "int16",
	    "int32",
	    "int64",
	    "string",
	    "uint8",
	    "uint16",
	    "uint32",
	    "uint64",
	    "int",
	    "uint",
	    "uintptr",
	    "rune"
	  ];
	  const KWS = [
	    "break",
	    "case",
	    "chan",
	    "const",
	    "continue",
	    "default",
	    "defer",
	    "else",
	    "fallthrough",
	    "for",
	    "func",
	    "go",
	    "goto",
	    "if",
	    "import",
	    "interface",
	    "map",
	    "package",
	    "range",
	    "return",
	    "select",
	    "struct",
	    "switch",
	    "type",
	    "var",
	  ];
	  const KEYWORDS = {
	    keyword: KWS,
	    type: TYPES,
	    literal: LITERALS,
	    built_in: BUILT_INS
	  };
	  return {
	    name: 'Go',
	    aliases: [ 'golang' ],
	    keywords: KEYWORDS,
	    illegal: '</',
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'string',
	        variants: [
	          hljs.QUOTE_STRING_MODE,
	          hljs.APOS_STRING_MODE,
	          {
	            begin: '`',
	            end: '`'
	          }
	        ]
	      },
	      {
	        className: 'number',
	        variants: [
	          {
	            begin: hljs.C_NUMBER_RE + '[i]',
	            relevance: 1
	          },
	          hljs.C_NUMBER_MODE
	        ]
	      },
	      { begin: /:=/ // relevance booster
	      },
	      {
	        className: 'function',
	        beginKeywords: 'func',
	        end: '\\s*(\\{|$)',
	        excludeEnd: true,
	        contains: [
	          hljs.TITLE_MODE,
	          {
	            className: 'params',
	            begin: /\(/,
	            end: /\)/,
	            endsParent: true,
	            keywords: KEYWORDS,
	            illegal: /["']/
	          }
	        ]
	      }
	    ]
	  };
	}

	go_1 = go;
	return go_1;
}

/*
Language: Golo
Author: Philippe Charriere <ph.charriere@gmail.com>
Description: a lightweight dynamic language for the JVM
Website: http://golo-lang.org/
*/

var golo_1;
var hasRequiredGolo;

function requireGolo () {
	if (hasRequiredGolo) return golo_1;
	hasRequiredGolo = 1;
	function golo(hljs) {
	  const KEYWORDS = [
	    "println",
	    "readln",
	    "print",
	    "import",
	    "module",
	    "function",
	    "local",
	    "return",
	    "let",
	    "var",
	    "while",
	    "for",
	    "foreach",
	    "times",
	    "in",
	    "case",
	    "when",
	    "match",
	    "with",
	    "break",
	    "continue",
	    "augment",
	    "augmentation",
	    "each",
	    "find",
	    "filter",
	    "reduce",
	    "if",
	    "then",
	    "else",
	    "otherwise",
	    "try",
	    "catch",
	    "finally",
	    "raise",
	    "throw",
	    "orIfNull",
	    "DynamicObject|10",
	    "DynamicVariable",
	    "struct",
	    "Observable",
	    "map",
	    "set",
	    "vector",
	    "list",
	    "array"
	  ];

	  return {
	    name: 'Golo',
	    keywords: {
	      keyword: KEYWORDS,
	      literal: [
	        "true",
	        "false",
	        "null"
	      ]
	    },
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'meta',
	        begin: '@[A-Za-z]+'
	      }
	    ]
	  };
	}

	golo_1 = golo;
	return golo_1;
}

/*
Language: Gradle
Description: Gradle is an open-source build automation tool focused on flexibility and performance.
Website: https://gradle.org
Author: Damian Mee <mee.damian@gmail.com>
*/

var gradle_1;
var hasRequiredGradle;

function requireGradle () {
	if (hasRequiredGradle) return gradle_1;
	hasRequiredGradle = 1;
	function gradle(hljs) {
	  const KEYWORDS = [
	    "task",
	    "project",
	    "allprojects",
	    "subprojects",
	    "artifacts",
	    "buildscript",
	    "configurations",
	    "dependencies",
	    "repositories",
	    "sourceSets",
	    "description",
	    "delete",
	    "from",
	    "into",
	    "include",
	    "exclude",
	    "source",
	    "classpath",
	    "destinationDir",
	    "includes",
	    "options",
	    "sourceCompatibility",
	    "targetCompatibility",
	    "group",
	    "flatDir",
	    "doLast",
	    "doFirst",
	    "flatten",
	    "todir",
	    "fromdir",
	    "ant",
	    "def",
	    "abstract",
	    "break",
	    "case",
	    "catch",
	    "continue",
	    "default",
	    "do",
	    "else",
	    "extends",
	    "final",
	    "finally",
	    "for",
	    "if",
	    "implements",
	    "instanceof",
	    "native",
	    "new",
	    "private",
	    "protected",
	    "public",
	    "return",
	    "static",
	    "switch",
	    "synchronized",
	    "throw",
	    "throws",
	    "transient",
	    "try",
	    "volatile",
	    "while",
	    "strictfp",
	    "package",
	    "import",
	    "false",
	    "null",
	    "super",
	    "this",
	    "true",
	    "antlrtask",
	    "checkstyle",
	    "codenarc",
	    "copy",
	    "boolean",
	    "byte",
	    "char",
	    "class",
	    "double",
	    "float",
	    "int",
	    "interface",
	    "long",
	    "short",
	    "void",
	    "compile",
	    "runTime",
	    "file",
	    "fileTree",
	    "abs",
	    "any",
	    "append",
	    "asList",
	    "asWritable",
	    "call",
	    "collect",
	    "compareTo",
	    "count",
	    "div",
	    "dump",
	    "each",
	    "eachByte",
	    "eachFile",
	    "eachLine",
	    "every",
	    "find",
	    "findAll",
	    "flatten",
	    "getAt",
	    "getErr",
	    "getIn",
	    "getOut",
	    "getText",
	    "grep",
	    "immutable",
	    "inject",
	    "inspect",
	    "intersect",
	    "invokeMethods",
	    "isCase",
	    "join",
	    "leftShift",
	    "minus",
	    "multiply",
	    "newInputStream",
	    "newOutputStream",
	    "newPrintWriter",
	    "newReader",
	    "newWriter",
	    "next",
	    "plus",
	    "pop",
	    "power",
	    "previous",
	    "print",
	    "println",
	    "push",
	    "putAt",
	    "read",
	    "readBytes",
	    "readLines",
	    "reverse",
	    "reverseEach",
	    "round",
	    "size",
	    "sort",
	    "splitEachLine",
	    "step",
	    "subMap",
	    "times",
	    "toInteger",
	    "toList",
	    "tokenize",
	    "upto",
	    "waitForOrKill",
	    "withPrintWriter",
	    "withReader",
	    "withStream",
	    "withWriter",
	    "withWriterAppend",
	    "write",
	    "writeLine"
	  ];
	  return {
	    name: 'Gradle',
	    case_insensitive: true,
	    keywords: KEYWORDS,
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.NUMBER_MODE,
	      hljs.REGEXP_MODE

	    ]
	  };
	}

	gradle_1 = gradle;
	return gradle_1;
}

/*
 Language: GraphQL
 Author: John Foster (GH jf990), and others
 Description: GraphQL is a query language for APIs
 Category: web, common
*/

var graphql_1;
var hasRequiredGraphql;

function requireGraphql () {
	if (hasRequiredGraphql) return graphql_1;
	hasRequiredGraphql = 1;
	/** @type LanguageFn */
	function graphql(hljs) {
	  const regex = hljs.regex;
	  const GQL_NAME = /[_A-Za-z][_0-9A-Za-z]*/;
	  return {
	    name: "GraphQL",
	    aliases: [ "gql" ],
	    case_insensitive: true,
	    disableAutodetect: false,
	    keywords: {
	      keyword: [
	        "query",
	        "mutation",
	        "subscription",
	        "type",
	        "input",
	        "schema",
	        "directive",
	        "interface",
	        "union",
	        "scalar",
	        "fragment",
	        "enum",
	        "on"
	      ],
	      literal: [
	        "true",
	        "false",
	        "null"
	      ]
	    },
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.NUMBER_MODE,
	      {
	        scope: "punctuation",
	        match: /[.]{3}/,
	        relevance: 0
	      },
	      {
	        scope: "punctuation",
	        begin: /[\!\(\)\:\=\[\]\{\|\}]{1}/,
	        relevance: 0
	      },
	      {
	        scope: "variable",
	        begin: /\$/,
	        end: /\W/,
	        excludeEnd: true,
	        relevance: 0
	      },
	      {
	        scope: "meta",
	        match: /@\w+/,
	        excludeEnd: true
	      },
	      {
	        scope: "symbol",
	        begin: regex.concat(GQL_NAME, regex.lookahead(/\s*:/)),
	        relevance: 0
	      }
	    ],
	    illegal: [
	      /[;<']/,
	      /BEGIN/
	    ]
	  };
	}

	graphql_1 = graphql;
	return graphql_1;
}

/*
 Language: Groovy
 Author: Guillaume Laforge <glaforge@gmail.com>
 Description: Groovy programming language implementation inspired from Vsevolod's Java mode
 Website: https://groovy-lang.org
 */

var groovy_1;
var hasRequiredGroovy;

function requireGroovy () {
	if (hasRequiredGroovy) return groovy_1;
	hasRequiredGroovy = 1;
	function variants(variants, obj = {}) {
	  obj.variants = variants;
	  return obj;
	}

	function groovy(hljs) {
	  const regex = hljs.regex;
	  const IDENT_RE = '[A-Za-z0-9_$]+';
	  const COMMENT = variants([
	    hljs.C_LINE_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE,
	    hljs.COMMENT(
	      '/\\*\\*',
	      '\\*/',
	      {
	        relevance: 0,
	        contains: [
	          {
	            // eat up @'s in emails to prevent them to be recognized as doctags
	            begin: /\w+@/,
	            relevance: 0
	          },
	          {
	            className: 'doctag',
	            begin: '@[A-Za-z]+'
	          }
	        ]
	      }
	    )
	  ]);
	  const REGEXP = {
	    className: 'regexp',
	    begin: /~?\/[^\/\n]+\//,
	    contains: [ hljs.BACKSLASH_ESCAPE ]
	  };
	  const NUMBER = variants([
	    hljs.BINARY_NUMBER_MODE,
	    hljs.C_NUMBER_MODE
	  ]);
	  const STRING = variants([
	    {
	      begin: /"""/,
	      end: /"""/
	    },
	    {
	      begin: /'''/,
	      end: /'''/
	    },
	    {
	      begin: "\\$/",
	      end: "/\\$",
	      relevance: 10
	    },
	    hljs.APOS_STRING_MODE,
	    hljs.QUOTE_STRING_MODE
	  ],
	  { className: "string" }
	  );

	  const CLASS_DEFINITION = {
	    match: [
	      /(class|interface|trait|enum|record|extends|implements)/,
	      /\s+/,
	      hljs.UNDERSCORE_IDENT_RE
	    ],
	    scope: {
	      1: "keyword",
	      3: "title.class",
	    }
	  };
	  const TYPES = [
	    "byte",
	    "short",
	    "char",
	    "int",
	    "long",
	    "boolean",
	    "float",
	    "double",
	    "void"
	  ];
	  const KEYWORDS = [
	    // groovy specific keywords
	    "def",
	    "as",
	    "in",
	    "assert",
	    "trait",
	    // common keywords with Java
	    "abstract",
	    "static",
	    "volatile",
	    "transient",
	    "public",
	    "private",
	    "protected",
	    "synchronized",
	    "final",
	    "class",
	    "interface",
	    "enum",
	    "if",
	    "else",
	    "for",
	    "while",
	    "switch",
	    "case",
	    "break",
	    "default",
	    "continue",
	    "throw",
	    "throws",
	    "try",
	    "catch",
	    "finally",
	    "implements",
	    "extends",
	    "new",
	    "import",
	    "package",
	    "return",
	    "instanceof",
	    "var"
	  ];

	  return {
	    name: 'Groovy',
	    keywords: {
	      "variable.language": 'this super',
	      literal: 'true false null',
	      type: TYPES,
	      keyword: KEYWORDS
	    },
	    contains: [
	      hljs.SHEBANG({
	        binary: "groovy",
	        relevance: 10
	      }),
	      COMMENT,
	      STRING,
	      REGEXP,
	      NUMBER,
	      CLASS_DEFINITION,
	      {
	        className: 'meta',
	        begin: '@[A-Za-z]+',
	        relevance: 0
	      },
	      {
	        // highlight map keys and named parameters as attrs
	        className: 'attr',
	        begin: IDENT_RE + '[ \t]*:',
	        relevance: 0
	      },
	      {
	        // catch middle element of the ternary operator
	        // to avoid highlight it as a label, named parameter, or map key
	        begin: /\?/,
	        end: /:/,
	        relevance: 0,
	        contains: [
	          COMMENT,
	          STRING,
	          REGEXP,
	          NUMBER,
	          'self'
	        ]
	      },
	      {
	        // highlight labeled statements
	        className: 'symbol',
	        begin: '^[ \t]*' + regex.lookahead(IDENT_RE + ':'),
	        excludeBegin: true,
	        end: IDENT_RE + ':',
	        relevance: 0
	      }
	    ],
	    illegal: /#|<\//
	  };
	}

	groovy_1 = groovy;
	return groovy_1;
}

/*
Language: HAML
Requires: ruby.js
Author: Dan Allen <dan.j.allen@gmail.com>
Website: http://haml.info
Category: template
*/

var haml_1;
var hasRequiredHaml;

function requireHaml () {
	if (hasRequiredHaml) return haml_1;
	hasRequiredHaml = 1;
	// TODO support filter tags like :javascript, support inline HTML
	function haml(hljs) {
	  return {
	    name: 'HAML',
	    case_insensitive: true,
	    contains: [
	      {
	        className: 'meta',
	        begin: '^!!!( (5|1\\.1|Strict|Frameset|Basic|Mobile|RDFa|XML\\b.*))?$',
	        relevance: 10
	      },
	      // FIXME these comments should be allowed to span indented lines
	      hljs.COMMENT(
	        '^\\s*(!=#|=#|-#|/).*$',
	        null,
	        { relevance: 0 }
	      ),
	      {
	        begin: '^\\s*(-|=|!=)(?!#)',
	        end: /$/,
	        subLanguage: 'ruby',
	        excludeBegin: true,
	        excludeEnd: true
	      },
	      {
	        className: 'tag',
	        begin: '^\\s*%',
	        contains: [
	          {
	            className: 'selector-tag',
	            begin: '\\w+'
	          },
	          {
	            className: 'selector-id',
	            begin: '#[\\w-]+'
	          },
	          {
	            className: 'selector-class',
	            begin: '\\.[\\w-]+'
	          },
	          {
	            begin: /\{\s*/,
	            end: /\s*\}/,
	            contains: [
	              {
	                begin: ':\\w+\\s*=>',
	                end: ',\\s+',
	                returnBegin: true,
	                endsWithParent: true,
	                contains: [
	                  {
	                    className: 'attr',
	                    begin: ':\\w+'
	                  },
	                  hljs.APOS_STRING_MODE,
	                  hljs.QUOTE_STRING_MODE,
	                  {
	                    begin: '\\w+',
	                    relevance: 0
	                  }
	                ]
	              }
	            ]
	          },
	          {
	            begin: '\\(\\s*',
	            end: '\\s*\\)',
	            excludeEnd: true,
	            contains: [
	              {
	                begin: '\\w+\\s*=',
	                end: '\\s+',
	                returnBegin: true,
	                endsWithParent: true,
	                contains: [
	                  {
	                    className: 'attr',
	                    begin: '\\w+',
	                    relevance: 0
	                  },
	                  hljs.APOS_STRING_MODE,
	                  hljs.QUOTE_STRING_MODE,
	                  {
	                    begin: '\\w+',
	                    relevance: 0
	                  }
	                ]
	              }
	            ]
	          }
	        ]
	      },
	      { begin: '^\\s*[=~]\\s*' },
	      {
	        begin: /#\{/,
	        end: /\}/,
	        subLanguage: 'ruby',
	        excludeBegin: true,
	        excludeEnd: true
	      }
	    ]
	  };
	}

	haml_1 = haml;
	return haml_1;
}

/*
Language: Handlebars
Requires: xml.js
Author: Robin Ward <robin.ward@gmail.com>
Description: Matcher for Handlebars as well as EmberJS additions.
Website: https://handlebarsjs.com
Category: template
*/

var handlebars_1;
var hasRequiredHandlebars;

function requireHandlebars () {
	if (hasRequiredHandlebars) return handlebars_1;
	hasRequiredHandlebars = 1;
	function handlebars(hljs) {
	  const regex = hljs.regex;
	  const BUILT_INS = {
	    $pattern: /[\w.\/]+/,
	    built_in: [
	      'action',
	      'bindattr',
	      'collection',
	      'component',
	      'concat',
	      'debugger',
	      'each',
	      'each-in',
	      'get',
	      'hash',
	      'if',
	      'in',
	      'input',
	      'link-to',
	      'loc',
	      'log',
	      'lookup',
	      'mut',
	      'outlet',
	      'partial',
	      'query-params',
	      'render',
	      'template',
	      'textarea',
	      'unbound',
	      'unless',
	      'view',
	      'with',
	      'yield'
	    ]
	  };

	  const LITERALS = {
	    $pattern: /[\w.\/]+/,
	    literal: [
	      'true',
	      'false',
	      'undefined',
	      'null'
	    ]
	  };

	  // as defined in https://handlebarsjs.com/guide/expressions.html#literal-segments
	  // this regex matches literal segments like ' abc ' or [ abc ] as well as helpers and paths
	  // like a/b, ./abc/cde, and abc.bcd

	  const DOUBLE_QUOTED_ID_REGEX = /""|"[^"]+"/;
	  const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;
	  const BRACKET_QUOTED_ID_REGEX = /\[\]|\[[^\]]+\]/;
	  const PLAIN_ID_REGEX = /[^\s!"#%&'()*+,.\/;<=>@\[\\\]^`{|}~]+/;
	  const PATH_DELIMITER_REGEX = /(\.|\/)/;
	  const ANY_ID = regex.either(
	    DOUBLE_QUOTED_ID_REGEX,
	    SINGLE_QUOTED_ID_REGEX,
	    BRACKET_QUOTED_ID_REGEX,
	    PLAIN_ID_REGEX
	  );

	  const IDENTIFIER_REGEX = regex.concat(
	    regex.optional(/\.|\.\/|\//), // relative or absolute path
	    ANY_ID,
	    regex.anyNumberOfTimes(regex.concat(
	      PATH_DELIMITER_REGEX,
	      ANY_ID
	    ))
	  );

	  // identifier followed by a equal-sign (without the equal sign)
	  const HASH_PARAM_REGEX = regex.concat(
	    '(',
	    BRACKET_QUOTED_ID_REGEX, '|',
	    PLAIN_ID_REGEX,
	    ')(?==)'
	  );

	  const HELPER_NAME_OR_PATH_EXPRESSION = { begin: IDENTIFIER_REGEX };

	  const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, { keywords: LITERALS });

	  const SUB_EXPRESSION = {
	    begin: /\(/,
	    end: /\)/
	    // the "contains" is added below when all necessary sub-modes are defined
	  };

	  const HASH = {
	    // fka "attribute-assignment", parameters of the form 'key=value'
	    className: 'attr',
	    begin: HASH_PARAM_REGEX,
	    relevance: 0,
	    starts: {
	      begin: /=/,
	      end: /=/,
	      starts: { contains: [
	        hljs.NUMBER_MODE,
	        hljs.QUOTE_STRING_MODE,
	        hljs.APOS_STRING_MODE,
	        HELPER_PARAMETER,
	        SUB_EXPRESSION
	      ] }
	    }
	  };

	  const BLOCK_PARAMS = {
	    // parameters of the form '{{#with x as | y |}}...{{/with}}'
	    begin: /as\s+\|/,
	    keywords: { keyword: 'as' },
	    end: /\|/,
	    contains: [
	      {
	        // define sub-mode in order to prevent highlighting of block-parameter named "as"
	        begin: /\w+/ }
	    ]
	  };

	  const HELPER_PARAMETERS = {
	    contains: [
	      hljs.NUMBER_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.APOS_STRING_MODE,
	      BLOCK_PARAMS,
	      HASH,
	      HELPER_PARAMETER,
	      SUB_EXPRESSION
	    ],
	    returnEnd: true
	    // the property "end" is defined through inheritance when the mode is used. If depends
	    // on the surrounding mode, but "endsWithParent" does not work here (i.e. it includes the
	    // end-token of the surrounding mode)
	  };

	  const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
	    className: 'name',
	    keywords: BUILT_INS,
	    starts: hljs.inherit(HELPER_PARAMETERS, { end: /\)/ })
	  });

	  SUB_EXPRESSION.contains = [ SUB_EXPRESSION_CONTENTS ];

	  const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
	    keywords: BUILT_INS,
	    className: 'name',
	    starts: hljs.inherit(HELPER_PARAMETERS, { end: /\}\}/ })
	  });

	  const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
	    keywords: BUILT_INS,
	    className: 'name'
	  });

	  const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
	    className: 'name',
	    keywords: BUILT_INS,
	    starts: hljs.inherit(HELPER_PARAMETERS, { end: /\}\}/ })
	  });

	  const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {
	    begin: /\\\{\{/,
	    skip: true
	  };
	  const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {
	    begin: /\\\\(?=\{\{)/,
	    skip: true
	  };

	  return {
	    name: 'Handlebars',
	    aliases: [
	      'hbs',
	      'html.hbs',
	      'html.handlebars',
	      'htmlbars'
	    ],
	    case_insensitive: true,
	    subLanguage: 'xml',
	    contains: [
	      ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,
	      PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,
	      hljs.COMMENT(/\{\{!--/, /--\}\}/),
	      hljs.COMMENT(/\{\{!/, /\}\}/),
	      {
	        // open raw block "{{{{raw}}}} content not evaluated {{{{/raw}}}}"
	        className: 'template-tag',
	        begin: /\{\{\{\{(?!\/)/,
	        end: /\}\}\}\}/,
	        contains: [ OPENING_BLOCK_MUSTACHE_CONTENTS ],
	        starts: {
	          end: /\{\{\{\{\//,
	          returnEnd: true,
	          subLanguage: 'xml'
	        }
	      },
	      {
	        // close raw block
	        className: 'template-tag',
	        begin: /\{\{\{\{\//,
	        end: /\}\}\}\}/,
	        contains: [ CLOSING_BLOCK_MUSTACHE_CONTENTS ]
	      },
	      {
	        // open block statement
	        className: 'template-tag',
	        begin: /\{\{#/,
	        end: /\}\}/,
	        contains: [ OPENING_BLOCK_MUSTACHE_CONTENTS ]
	      },
	      {
	        className: 'template-tag',
	        begin: /\{\{(?=else\}\})/,
	        end: /\}\}/,
	        keywords: 'else'
	      },
	      {
	        className: 'template-tag',
	        begin: /\{\{(?=else if)/,
	        end: /\}\}/,
	        keywords: 'else if'
	      },
	      {
	        // closing block statement
	        className: 'template-tag',
	        begin: /\{\{\//,
	        end: /\}\}/,
	        contains: [ CLOSING_BLOCK_MUSTACHE_CONTENTS ]
	      },
	      {
	        // template variable or helper-call that is NOT html-escaped
	        className: 'template-variable',
	        begin: /\{\{\{/,
	        end: /\}\}\}/,
	        contains: [ BASIC_MUSTACHE_CONTENTS ]
	      },
	      {
	        // template variable or helper-call that is html-escaped
	        className: 'template-variable',
	        begin: /\{\{/,
	        end: /\}\}/,
	        contains: [ BASIC_MUSTACHE_CONTENTS ]
	      }
	    ]
	  };
	}

	handlebars_1 = handlebars;
	return handlebars_1;
}

/*
Language: Haskell
Author: Jeremy Hull <sourdrums@gmail.com>
Contributors: Zena Treep <zena.treep@gmail.com>
Website: https://www.haskell.org
Category: functional
*/

var haskell_1;
var hasRequiredHaskell;

function requireHaskell () {
	if (hasRequiredHaskell) return haskell_1;
	hasRequiredHaskell = 1;
	function haskell(hljs) {

	  /* See:
	     - https://www.haskell.org/onlinereport/lexemes.html
	     - https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/binary_literals.html
	     - https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/numeric_underscores.html
	     - https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/hex_float_literals.html
	  */
	  const decimalDigits = '([0-9]_*)+';
	  const hexDigits = '([0-9a-fA-F]_*)+';
	  const binaryDigits = '([01]_*)+';
	  const octalDigits = '([0-7]_*)+';
	  const ascSymbol = '[!#$%&*+.\\/<=>?@\\\\^~-]';
	  const uniSymbol = '(\\p{S}|\\p{P})'; // Symbol or Punctuation
	  const special = '[(),;\\[\\]`|{}]';
	  const symbol = `(${ascSymbol}|(?!(${special}|[_:"']))${uniSymbol})`;

	  const COMMENT = { variants: [
	    // Double dash forms a valid comment only if it's not part of legal lexeme.
	    // See: Haskell 98 report: https://www.haskell.org/onlinereport/lexemes.html
	    //
	    // The commented code does the job, but we can't use negative lookbehind,
	    // due to poor support by Safari browser.
	    // > hljs.COMMENT(`(?<!${symbol})--+(?!${symbol})`, '$'),
	    // So instead, we'll add a no-markup rule before the COMMENT rule in the rules list
	    // to match the problematic infix operators that contain double dash.
	    hljs.COMMENT('--+', '$'),
	    hljs.COMMENT(
	      /\{-/,
	      /-\}/,
	      { contains: [ 'self' ] }
	    )
	  ] };

	  const PRAGMA = {
	    className: 'meta',
	    begin: /\{-#/,
	    end: /#-\}/
	  };

	  const PREPROCESSOR = {
	    className: 'meta',
	    begin: '^#',
	    end: '$'
	  };

	  const CONSTRUCTOR = {
	    className: 'type',
	    begin: '\\b[A-Z][\\w\']*', // TODO: other constructors (build-in, infix).
	    relevance: 0
	  };

	  const LIST = {
	    begin: '\\(',
	    end: '\\)',
	    illegal: '"',
	    contains: [
	      PRAGMA,
	      PREPROCESSOR,
	      {
	        className: 'type',
	        begin: '\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?'
	      },
	      hljs.inherit(hljs.TITLE_MODE, { begin: '[_a-z][\\w\']*' }),
	      COMMENT
	    ]
	  };

	  const RECORD = {
	    begin: /\{/,
	    end: /\}/,
	    contains: LIST.contains
	  };

	  const NUMBER = {
	    className: 'number',
	    relevance: 0,
	    variants: [
	      // decimal floating-point-literal (subsumes decimal-literal)
	      { match: `\\b(${decimalDigits})(\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\b` },
	      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
	      { match: `\\b0[xX]_*(${hexDigits})(\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\b` },
	      // octal-literal
	      { match: `\\b0[oO](${octalDigits})\\b` },
	      // binary-literal
	      { match: `\\b0[bB](${binaryDigits})\\b` }
	    ]
	  };

	  return {
	    name: 'Haskell',
	    aliases: [ 'hs' ],
	    keywords:
	      'let in if then else case of where do module import hiding '
	      + 'qualified type data newtype deriving class instance as default '
	      + 'infix infixl infixr foreign export ccall stdcall cplusplus '
	      + 'jvm dotnet safe unsafe family forall mdo proc rec',
	    unicodeRegex: true,
	    contains: [
	      // Top-level constructions.
	      {
	        beginKeywords: 'module',
	        end: 'where',
	        keywords: 'module where',
	        contains: [
	          LIST,
	          COMMENT
	        ],
	        illegal: '\\W\\.|;'
	      },
	      {
	        begin: '\\bimport\\b',
	        end: '$',
	        keywords: 'import qualified as hiding',
	        contains: [
	          LIST,
	          COMMENT
	        ],
	        illegal: '\\W\\.|;'
	      },
	      {
	        className: 'class',
	        begin: '^(\\s*)?(class|instance)\\b',
	        end: 'where',
	        keywords: 'class family instance where',
	        contains: [
	          CONSTRUCTOR,
	          LIST,
	          COMMENT
	        ]
	      },
	      {
	        className: 'class',
	        begin: '\\b(data|(new)?type)\\b',
	        end: '$',
	        keywords: 'data family type newtype deriving',
	        contains: [
	          PRAGMA,
	          CONSTRUCTOR,
	          LIST,
	          RECORD,
	          COMMENT
	        ]
	      },
	      {
	        beginKeywords: 'default',
	        end: '$',
	        contains: [
	          CONSTRUCTOR,
	          LIST,
	          COMMENT
	        ]
	      },
	      {
	        beginKeywords: 'infix infixl infixr',
	        end: '$',
	        contains: [
	          hljs.C_NUMBER_MODE,
	          COMMENT
	        ]
	      },
	      {
	        begin: '\\bforeign\\b',
	        end: '$',
	        keywords: 'foreign import export ccall stdcall cplusplus jvm '
	                  + 'dotnet safe unsafe',
	        contains: [
	          CONSTRUCTOR,
	          hljs.QUOTE_STRING_MODE,
	          COMMENT
	        ]
	      },
	      {
	        className: 'meta',
	        begin: '#!\\/usr\\/bin\\/env\ runhaskell',
	        end: '$'
	      },
	      // "Whitespaces".
	      PRAGMA,
	      PREPROCESSOR,

	      // Literals and names.

	      // Single characters.
	      {
	        scope: 'string',
	        begin: /'(?=\\?.')/,
	        end: /'/,
	        contains: [
	          {
	            scope: 'char.escape',
	            match: /\\./,
	          },
	        ]
	      },
	      hljs.QUOTE_STRING_MODE,
	      NUMBER,
	      CONSTRUCTOR,
	      hljs.inherit(hljs.TITLE_MODE, { begin: '^[_a-z][\\w\']*' }),
	      // No markup, prevents infix operators from being recognized as comments.
	      { begin: `(?!-)${symbol}--+|--+(?!-)${symbol}`},
	      COMMENT,
	      { // No markup, relevance booster
	        begin: '->|<-' }
	    ]
	  };
	}

	haskell_1 = haskell;
	return haskell_1;
}

/*
Language: Haxe
Description: Haxe is an open source toolkit based on a modern, high level, strictly typed programming language.
Author: Christopher Kaster <ikasoki@gmail.com> (Based on the actionscript.js language file by Alexander Myadzel)
Contributors: Kenton Hamaluik <kentonh@gmail.com>
Website: https://haxe.org
*/

var haxe_1;
var hasRequiredHaxe;

function requireHaxe () {
	if (hasRequiredHaxe) return haxe_1;
	hasRequiredHaxe = 1;
	function haxe(hljs) {
	  const IDENT_RE = '[a-zA-Z_$][a-zA-Z0-9_$]*';

	  // C_NUMBER_RE with underscores and literal suffixes
	  const HAXE_NUMBER_RE = /(-?)(\b0[xX][a-fA-F0-9_]+|(\b\d+(\.[\d_]*)?|\.[\d_]+)(([eE][-+]?\d+)|i32|u32|i64|f64)?)/;

	  const HAXE_BASIC_TYPES = 'Int Float String Bool Dynamic Void Array ';

	  return {
	    name: 'Haxe',
	    aliases: [ 'hx' ],
	    keywords: {
	      keyword: 'abstract break case cast catch continue default do dynamic else enum extern '
	               + 'final for function here if import in inline is macro never new override package private get set '
	               + 'public return static super switch this throw trace try typedef untyped using var while '
	               + HAXE_BASIC_TYPES,
	      built_in:
	        'trace this',
	      literal:
	        'true false null _'
	    },
	    contains: [
	      {
	        className: 'string', // interpolate-able strings
	        begin: '\'',
	        end: '\'',
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          {
	            className: 'subst', // interpolation
	            begin: /\$\{/,
	            end: /\}/
	          },
	          {
	            className: 'subst', // interpolation
	            begin: /\$/,
	            end: /\W\}/
	          }
	        ]
	      },
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'number',
	        begin: HAXE_NUMBER_RE,
	        relevance: 0
	      },
	      {
	        className: 'variable',
	        begin: "\\$" + IDENT_RE,
	      },
	      {
	        className: 'meta', // compiler meta
	        begin: /@:?/,
	        end: /\(|$/,
	        excludeEnd: true,
	      },
	      {
	        className: 'meta', // compiler conditionals
	        begin: '#',
	        end: '$',
	        keywords: { keyword: 'if else elseif end error' }
	      },
	      {
	        className: 'type', // function types
	        begin: /:[ \t]*/,
	        end: /[^A-Za-z0-9_ \t\->]/,
	        excludeBegin: true,
	        excludeEnd: true,
	        relevance: 0
	      },
	      {
	        className: 'type', // types
	        begin: /:[ \t]*/,
	        end: /\W/,
	        excludeBegin: true,
	        excludeEnd: true
	      },
	      {
	        className: 'type', // instantiation
	        begin: /new */,
	        end: /\W/,
	        excludeBegin: true,
	        excludeEnd: true
	      },
	      {
	        className: 'title.class', // enums
	        beginKeywords: 'enum',
	        end: /\{/,
	        contains: [ hljs.TITLE_MODE ]
	      },
	      {
	        className: 'title.class', // abstracts
	        begin: '\\babstract\\b(?=\\s*' + hljs.IDENT_RE + '\\s*\\()',
	        end: /[\{$]/,
	        contains: [
	          {
	            className: 'type',
	            begin: /\(/,
	            end: /\)/,
	            excludeBegin: true,
	            excludeEnd: true
	          },
	          {
	            className: 'type',
	            begin: /from +/,
	            end: /\W/,
	            excludeBegin: true,
	            excludeEnd: true
	          },
	          {
	            className: 'type',
	            begin: /to +/,
	            end: /\W/,
	            excludeBegin: true,
	            excludeEnd: true
	          },
	          hljs.TITLE_MODE
	        ],
	        keywords: { keyword: 'abstract from to' }
	      },
	      {
	        className: 'title.class', // classes
	        begin: /\b(class|interface) +/,
	        end: /[\{$]/,
	        excludeEnd: true,
	        keywords: 'class interface',
	        contains: [
	          {
	            className: 'keyword',
	            begin: /\b(extends|implements) +/,
	            keywords: 'extends implements',
	            contains: [
	              {
	                className: 'type',
	                begin: hljs.IDENT_RE,
	                relevance: 0
	              }
	            ]
	          },
	          hljs.TITLE_MODE
	        ]
	      },
	      {
	        className: 'title.function',
	        beginKeywords: 'function',
	        end: /\(/,
	        excludeEnd: true,
	        illegal: /\S/,
	        contains: [ hljs.TITLE_MODE ]
	      }
	    ],
	    illegal: /<\//
	  };
	}

	haxe_1 = haxe;
	return haxe_1;
}

/*
Language: HSP
Author: prince <MC.prince.0203@gmail.com>
Website: https://en.wikipedia.org/wiki/Hot_Soup_Processor
Category: scripting
*/

var hsp_1;
var hasRequiredHsp;

function requireHsp () {
	if (hasRequiredHsp) return hsp_1;
	hasRequiredHsp = 1;
	function hsp(hljs) {
	  return {
	    name: 'HSP',
	    case_insensitive: true,
	    keywords: {
	      $pattern: /[\w._]+/,
	      keyword: 'goto gosub return break repeat loop continue wait await dim sdim foreach dimtype dup dupptr end stop newmod delmod mref run exgoto on mcall assert logmes newlab resume yield onexit onerror onkey onclick oncmd exist delete mkdir chdir dirlist bload bsave bcopy memfile if else poke wpoke lpoke getstr chdpm memexpand memcpy memset notesel noteadd notedel noteload notesave randomize noteunsel noteget split strrep setease button chgdisp exec dialog mmload mmplay mmstop mci pset pget syscolor mes print title pos circle cls font sysfont objsize picload color palcolor palette redraw width gsel gcopy gzoom gmode bmpsave hsvcolor getkey listbox chkbox combox input mesbox buffer screen bgscr mouse objsel groll line clrobj boxf objprm objmode stick grect grotate gsquare gradf objimage objskip objenable celload celdiv celput newcom querycom delcom cnvstow comres axobj winobj sendmsg comevent comevarg sarrayconv callfunc cnvwtos comevdisp libptr system hspstat hspver stat cnt err strsize looplev sublev iparam wparam lparam refstr refdval int rnd strlen length length2 length3 length4 vartype gettime peek wpeek lpeek varptr varuse noteinfo instr abs limit getease str strmid strf getpath strtrim sin cos tan atan sqrt double absf expf logf limitf powf geteasef mousex mousey mousew hwnd hinstance hdc ginfo objinfo dirinfo sysinfo thismod __hspver__ __hsp30__ __date__ __time__ __line__ __file__ _debug __hspdef__ and or xor not screen_normal screen_palette screen_hide screen_fixedsize screen_tool screen_frame gmode_gdi gmode_mem gmode_rgb0 gmode_alpha gmode_rgb0alpha gmode_add gmode_sub gmode_pixela ginfo_mx ginfo_my ginfo_act ginfo_sel ginfo_wx1 ginfo_wy1 ginfo_wx2 ginfo_wy2 ginfo_vx ginfo_vy ginfo_sizex ginfo_sizey ginfo_winx ginfo_winy ginfo_mesx ginfo_mesy ginfo_r ginfo_g ginfo_b ginfo_paluse ginfo_dispx ginfo_dispy ginfo_cx ginfo_cy ginfo_intid ginfo_newid ginfo_sx ginfo_sy objinfo_mode objinfo_bmscr objinfo_hwnd notemax notesize dir_cur dir_exe dir_win dir_sys dir_cmdline dir_desktop dir_mydoc dir_tv font_normal font_bold font_italic font_underline font_strikeout font_antialias objmode_normal objmode_guifont objmode_usefont gsquare_grad msgothic msmincho do until while wend for next _break _continue switch case default swbreak swend ddim ldim alloc m_pi rad2deg deg2rad ease_linear ease_quad_in ease_quad_out ease_quad_inout ease_cubic_in ease_cubic_out ease_cubic_inout ease_quartic_in ease_quartic_out ease_quartic_inout ease_bounce_in ease_bounce_out ease_bounce_inout ease_shake_in ease_shake_out ease_shake_inout ease_loop'
	    },
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.APOS_STRING_MODE,

	      {
	        // multi-line string
	        className: 'string',
	        begin: /\{"/,
	        end: /"\}/,
	        contains: [ hljs.BACKSLASH_ESCAPE ]
	      },

	      hljs.COMMENT(';', '$', { relevance: 0 }),

	      {
	        // pre-processor
	        className: 'meta',
	        begin: '#',
	        end: '$',
	        keywords: { keyword: 'addion cfunc cmd cmpopt comfunc const defcfunc deffunc define else endif enum epack func global if ifdef ifndef include modcfunc modfunc modinit modterm module pack packopt regcmd runtime undef usecom uselib' },
	        contains: [
	          hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'string' }),
	          hljs.NUMBER_MODE,
	          hljs.C_NUMBER_MODE,
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      },

	      {
	        // label
	        className: 'symbol',
	        begin: '^\\*(\\w+|@)'
	      },

	      hljs.NUMBER_MODE,
	      hljs.C_NUMBER_MODE
	    ]
	  };
	}

	hsp_1 = hsp;
	return hsp_1;
}

/*
Language: HTTP
Description: HTTP request and response headers with automatic body highlighting
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Category: protocols, web
Website: https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview
*/

var http_1;
var hasRequiredHttp;

function requireHttp () {
	if (hasRequiredHttp) return http_1;
	hasRequiredHttp = 1;
	function http(hljs) {
	  const regex = hljs.regex;
	  const VERSION = 'HTTP/([32]|1\\.[01])';
	  const HEADER_NAME = /[A-Za-z][A-Za-z0-9-]*/;
	  const HEADER = {
	    className: 'attribute',
	    begin: regex.concat('^', HEADER_NAME, '(?=\\:\\s)'),
	    starts: { contains: [
	      {
	        className: "punctuation",
	        begin: /: /,
	        relevance: 0,
	        starts: {
	          end: '$',
	          relevance: 0
	        }
	      }
	    ] }
	  };
	  const HEADERS_AND_BODY = [
	    HEADER,
	    {
	      begin: '\\n\\n',
	      starts: {
	        subLanguage: [],
	        endsWithParent: true
	      }
	    }
	  ];

	  return {
	    name: 'HTTP',
	    aliases: [ 'https' ],
	    illegal: /\S/,
	    contains: [
	      // response
	      {
	        begin: '^(?=' + VERSION + " \\d{3})",
	        end: /$/,
	        contains: [
	          {
	            className: "meta",
	            begin: VERSION
	          },
	          {
	            className: 'number',
	            begin: '\\b\\d{3}\\b'
	          }
	        ],
	        starts: {
	          end: /\b\B/,
	          illegal: /\S/,
	          contains: HEADERS_AND_BODY
	        }
	      },
	      // request
	      {
	        begin: '(?=^[A-Z]+ (.*?) ' + VERSION + '$)',
	        end: /$/,
	        contains: [
	          {
	            className: 'string',
	            begin: ' ',
	            end: ' ',
	            excludeBegin: true,
	            excludeEnd: true
	          },
	          {
	            className: "meta",
	            begin: VERSION
	          },
	          {
	            className: 'keyword',
	            begin: '[A-Z]+'
	          }
	        ],
	        starts: {
	          end: /\b\B/,
	          illegal: /\S/,
	          contains: HEADERS_AND_BODY
	        }
	      },
	      // to allow headers to work even without a preamble
	      hljs.inherit(HEADER, { relevance: 0 })
	    ]
	  };
	}

	http_1 = http;
	return http_1;
}

/*
Language: Hy
Description: Hy is a wonderful dialect of Lisp that’s embedded in Python.
Author: Sergey Sobko <s.sobko@profitware.ru>
Website: http://docs.hylang.org/en/stable/
Category: lisp
*/

var hy_1;
var hasRequiredHy;

function requireHy () {
	if (hasRequiredHy) return hy_1;
	hasRequiredHy = 1;
	function hy(hljs) {
	  const SYMBOLSTART = 'a-zA-Z_\\-!.?+*=<>&#\'';
	  const SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';
	  const keywords = {
	    $pattern: SYMBOL_RE,
	    built_in:
	      // keywords
	      '!= % %= & &= * ** **= *= *map '
	      + '+ += , --build-class-- --import-- -= . / // //= '
	      + '/= < << <<= <= = > >= >> >>= '
	      + '@ @= ^ ^= abs accumulate all and any ap-compose '
	      + 'ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe '
	      + 'ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast '
	      + 'callable calling-module-name car case cdr chain chr coll? combinations compile '
	      + 'compress cond cons cons? continue count curry cut cycle dec '
	      + 'def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn '
	      + 'defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir '
	      + 'disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? '
	      + 'end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first '
	      + 'flatten float? fn fnc fnr for for* format fraction genexpr '
	      + 'gensym get getattr global globals group-by hasattr hash hex id '
	      + 'identity if if* if-not if-python2 import in inc input instance? '
	      + 'integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even '
	      + 'is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none '
	      + 'is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass '
	      + 'iter iterable? iterate iterator? keyword keyword? lambda last len let '
	      + 'lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all '
	      + 'map max merge-with method-decorator min multi-decorator multicombinations name neg? next '
	      + 'none? nonlocal not not-in not? nth numeric? oct odd? open '
	      + 'or ord partition permutations pos? post-route postwalk pow prewalk print '
	      + 'product profile/calls profile/cpu put-route quasiquote quote raise range read read-str '
	      + 'recursive-replace reduce remove repeat repeatedly repr require rest round route '
	      + 'route-with-methods rwm second seq set-comp setattr setv some sorted string '
	      + 'string? sum switch symbol? take take-nth take-while tee try unless '
	      + 'unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms '
	      + 'xi xor yield yield-from zero? zip zip-longest | |= ~'
	  };

	  const SIMPLE_NUMBER_RE = '[-+]?\\d+(\\.\\d+)?';

	  const SYMBOL = {
	    begin: SYMBOL_RE,
	    relevance: 0
	  };
	  const NUMBER = {
	    className: 'number',
	    begin: SIMPLE_NUMBER_RE,
	    relevance: 0
	  };
	  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
	  const COMMENT = hljs.COMMENT(
	    ';',
	    '$',
	    { relevance: 0 }
	  );
	  const LITERAL = {
	    className: 'literal',
	    begin: /\b([Tt]rue|[Ff]alse|nil|None)\b/
	  };
	  const COLLECTION = {
	    begin: '[\\[\\{]',
	    end: '[\\]\\}]',
	    relevance: 0
	  };
	  const HINT = {
	    className: 'comment',
	    begin: '\\^' + SYMBOL_RE
	  };
	  const HINT_COL = hljs.COMMENT('\\^\\{', '\\}');
	  const KEY = {
	    className: 'symbol',
	    begin: '[:]{1,2}' + SYMBOL_RE
	  };
	  const LIST = {
	    begin: '\\(',
	    end: '\\)'
	  };
	  const BODY = {
	    endsWithParent: true,
	    relevance: 0
	  };
	  const NAME = {
	    className: 'name',
	    relevance: 0,
	    keywords: keywords,
	    begin: SYMBOL_RE,
	    starts: BODY
	  };
	  const DEFAULT_CONTAINS = [
	    LIST,
	    STRING,
	    HINT,
	    HINT_COL,
	    COMMENT,
	    KEY,
	    COLLECTION,
	    NUMBER,
	    LITERAL,
	    SYMBOL
	  ];

	  LIST.contains = [
	    hljs.COMMENT('comment', ''),
	    NAME,
	    BODY
	  ];
	  BODY.contains = DEFAULT_CONTAINS;
	  COLLECTION.contains = DEFAULT_CONTAINS;

	  return {
	    name: 'Hy',
	    aliases: [ 'hylang' ],
	    illegal: /\S/,
	    contains: [
	      hljs.SHEBANG(),
	      LIST,
	      STRING,
	      HINT,
	      HINT_COL,
	      COMMENT,
	      KEY,
	      COLLECTION,
	      NUMBER,
	      LITERAL
	    ]
	  };
	}

	hy_1 = hy;
	return hy_1;
}

/*
Language: Inform 7
Author: Bruno Dias <bruno.r.dias@gmail.com>
Description: Language definition for Inform 7, a DSL for writing parser interactive fiction.
Website: http://inform7.com
*/

var inform7_1;
var hasRequiredInform7;

function requireInform7 () {
	if (hasRequiredInform7) return inform7_1;
	hasRequiredInform7 = 1;
	function inform7(hljs) {
	  const START_BRACKET = '\\[';
	  const END_BRACKET = '\\]';
	  return {
	    name: 'Inform 7',
	    aliases: [ 'i7' ],
	    case_insensitive: true,
	    keywords: {
	      // Some keywords more or less unique to I7, for relevance.
	      keyword:
	        // kind:
	        'thing room person man woman animal container '
	        + 'supporter backdrop door '
	        // characteristic:
	        + 'scenery open closed locked inside gender '
	        // verb:
	        + 'is are say understand '
	        // misc keyword:
	        + 'kind of rule' },
	    contains: [
	      {
	        className: 'string',
	        begin: '"',
	        end: '"',
	        relevance: 0,
	        contains: [
	          {
	            className: 'subst',
	            begin: START_BRACKET,
	            end: END_BRACKET
	          }
	        ]
	      },
	      {
	        className: 'section',
	        begin: /^(Volume|Book|Part|Chapter|Section|Table)\b/,
	        end: '$'
	      },
	      {
	        // Rule definition
	        // This is here for relevance.
	        begin: /^(Check|Carry out|Report|Instead of|To|Rule|When|Before|After)\b/,
	        end: ':',
	        contains: [
	          {
	            // Rule name
	            begin: '\\(This',
	            end: '\\)'
	          }
	        ]
	      },
	      {
	        className: 'comment',
	        begin: START_BRACKET,
	        end: END_BRACKET,
	        contains: [ 'self' ]
	      }
	    ]
	  };
	}

	inform7_1 = inform7;
	return inform7_1;
}

/*
Language: TOML, also INI
Description: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.
Contributors: Guillaume Gomez <guillaume1.gomez@gmail.com>
Category: common, config
Website: https://github.com/toml-lang/toml
*/

var ini_1;
var hasRequiredIni;

function requireIni () {
	if (hasRequiredIni) return ini_1;
	hasRequiredIni = 1;
	function ini(hljs) {
	  const regex = hljs.regex;
	  const NUMBERS = {
	    className: 'number',
	    relevance: 0,
	    variants: [
	      { begin: /([+-]+)?[\d]+_[\d_]+/ },
	      { begin: hljs.NUMBER_RE }
	    ]
	  };
	  const COMMENTS = hljs.COMMENT();
	  COMMENTS.variants = [
	    {
	      begin: /;/,
	      end: /$/
	    },
	    {
	      begin: /#/,
	      end: /$/
	    }
	  ];
	  const VARIABLES = {
	    className: 'variable',
	    variants: [
	      { begin: /\$[\w\d"][\w\d_]*/ },
	      { begin: /\$\{(.*?)\}/ }
	    ]
	  };
	  const LITERALS = {
	    className: 'literal',
	    begin: /\bon|off|true|false|yes|no\b/
	  };
	  const STRINGS = {
	    className: "string",
	    contains: [ hljs.BACKSLASH_ESCAPE ],
	    variants: [
	      {
	        begin: "'''",
	        end: "'''",
	        relevance: 10
	      },
	      {
	        begin: '"""',
	        end: '"""',
	        relevance: 10
	      },
	      {
	        begin: '"',
	        end: '"'
	      },
	      {
	        begin: "'",
	        end: "'"
	      }
	    ]
	  };
	  const ARRAY = {
	    begin: /\[/,
	    end: /\]/,
	    contains: [
	      COMMENTS,
	      LITERALS,
	      VARIABLES,
	      STRINGS,
	      NUMBERS,
	      'self'
	    ],
	    relevance: 0
	  };

	  const BARE_KEY = /[A-Za-z0-9_-]+/;
	  const QUOTED_KEY_DOUBLE_QUOTE = /"(\\"|[^"])*"/;
	  const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;
	  const ANY_KEY = regex.either(
	    BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE
	  );
	  const DOTTED_KEY = regex.concat(
	    ANY_KEY, '(\\s*\\.\\s*', ANY_KEY, ')*',
	    regex.lookahead(/\s*=\s*[^#\s]/)
	  );

	  return {
	    name: 'TOML, also INI',
	    aliases: [ 'toml' ],
	    case_insensitive: true,
	    illegal: /\S/,
	    contains: [
	      COMMENTS,
	      {
	        className: 'section',
	        begin: /\[+/,
	        end: /\]+/
	      },
	      {
	        begin: DOTTED_KEY,
	        className: 'attr',
	        starts: {
	          end: /$/,
	          contains: [
	            COMMENTS,
	            ARRAY,
	            LITERALS,
	            VARIABLES,
	            STRINGS,
	            NUMBERS
	          ]
	        }
	      }
	    ]
	  };
	}

	ini_1 = ini;
	return ini_1;
}

/*
Language: IRPF90
Author: Anthony Scemama <scemama@irsamc.ups-tlse.fr>
Description: IRPF90 is an open-source Fortran code generator
Website: http://irpf90.ups-tlse.fr
Category: scientific
*/

var irpf90_1;
var hasRequiredIrpf90;

function requireIrpf90 () {
	if (hasRequiredIrpf90) return irpf90_1;
	hasRequiredIrpf90 = 1;
	/** @type LanguageFn */
	function irpf90(hljs) {
	  const regex = hljs.regex;
	  const PARAMS = {
	    className: 'params',
	    begin: '\\(',
	    end: '\\)'
	  };

	  // regex in both fortran and irpf90 should match
	  const OPTIONAL_NUMBER_SUFFIX = /(_[a-z_\d]+)?/;
	  const OPTIONAL_NUMBER_EXP = /([de][+-]?\d+)?/;
	  const NUMBER = {
	    className: 'number',
	    variants: [
	      { begin: regex.concat(/\b\d+/, /\.(\d*)/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
	      { begin: regex.concat(/\b\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
	      { begin: regex.concat(/\.\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) }
	    ],
	    relevance: 0
	  };

	  const F_KEYWORDS = {
	    literal: '.False. .True.',
	    keyword: 'kind do while private call intrinsic where elsewhere '
	      + 'type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then '
	      + 'public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. '
	      + 'goto save else use module select case '
	      + 'access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit '
	      + 'continue format pause cycle exit '
	      + 'c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg '
	      + 'synchronous nopass non_overridable pass protected volatile abstract extends import '
	      + 'non_intrinsic value deferred generic final enumerator class associate bind enum '
	      + 'c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t '
	      + 'c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double '
	      + 'c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr '
	      + 'c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer '
	      + 'c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor '
	      + 'numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control '
	      + 'ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive '
	      + 'pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure '
	      + 'integer real character complex logical dimension allocatable|10 parameter '
	      + 'external implicit|10 none double precision assign intent optional pointer '
	      + 'target in out common equivalence data '
	      // IRPF90 special keywords
	      + 'begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch '
	      + 'soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read',
	    built_in: 'alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint '
	      + 'dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl '
	      + 'algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama '
	      + 'iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod '
	      + 'qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log '
	      + 'log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate '
	      + 'adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product '
	      + 'eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul '
	      + 'maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product '
	      + 'radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind '
	      + 'set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer '
	      + 'dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end '
	      + 'ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode '
	      + 'is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of '
	      + 'acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 '
	      + 'atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits '
	      + 'bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr '
	      + 'num_images parity popcnt poppar shifta shiftl shiftr this_image '
	      // IRPF90 special built_ins
	      + 'IRP_ALIGN irp_here'
	  };
	  return {
	    name: 'IRPF90',
	    case_insensitive: true,
	    keywords: F_KEYWORDS,
	    illegal: /\/\*/,
	    contains: [
	      hljs.inherit(hljs.APOS_STRING_MODE, {
	        className: 'string',
	        relevance: 0
	      }),
	      hljs.inherit(hljs.QUOTE_STRING_MODE, {
	        className: 'string',
	        relevance: 0
	      }),
	      {
	        className: 'function',
	        beginKeywords: 'subroutine function program',
	        illegal: '[${=\\n]',
	        contains: [
	          hljs.UNDERSCORE_TITLE_MODE,
	          PARAMS
	        ]
	      },
	      hljs.COMMENT('!', '$', { relevance: 0 }),
	      hljs.COMMENT('begin_doc', 'end_doc', { relevance: 10 }),
	      NUMBER
	    ]
	  };
	}

	irpf90_1 = irpf90;
	return irpf90_1;
}

/*
Language: ISBL
Author: Dmitriy Tarasov <dimatar@gmail.com>
Description: built-in language DIRECTUM
Category: enterprise
*/

var isbl_1;
var hasRequiredIsbl;

function requireIsbl () {
	if (hasRequiredIsbl) return isbl_1;
	hasRequiredIsbl = 1;
	function isbl(hljs) {
	  // Определение идентификаторов
	  const UNDERSCORE_IDENT_RE = "[A-Za-zА-Яа-яёЁ_!][A-Za-zА-Яа-яёЁ_0-9]*";

	  // Определение имен функций
	  const FUNCTION_NAME_IDENT_RE = "[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]*";

	  // keyword : ключевые слова
	  const KEYWORD =
	    "and и else иначе endexcept endfinally endforeach конецвсе endif конецесли endwhile конецпока "
	    + "except exitfor finally foreach все if если in в not не or или try while пока ";

	  // SYSRES Constants
	  const sysres_constants =
	    "SYSRES_CONST_ACCES_RIGHT_TYPE_EDIT "
	    + "SYSRES_CONST_ACCES_RIGHT_TYPE_FULL "
	    + "SYSRES_CONST_ACCES_RIGHT_TYPE_VIEW "
	    + "SYSRES_CONST_ACCESS_MODE_REQUISITE_CODE "
	    + "SYSRES_CONST_ACCESS_NO_ACCESS_VIEW "
	    + "SYSRES_CONST_ACCESS_NO_ACCESS_VIEW_CODE "
	    + "SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_CODE "
	    + "SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_YES_CODE "
	    + "SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_CODE "
	    + "SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_YES_CODE "
	    + "SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_CODE "
	    + "SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_YES_CODE "
	    + "SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_CODE "
	    + "SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_YES_CODE "
	    + "SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_CODE "
	    + "SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_YES_CODE "
	    + "SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_CODE "
	    + "SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_YES_CODE "
	    + "SYSRES_CONST_ACCESS_RIGHTS_REQUISITE_CODE "
	    + "SYSRES_CONST_ACCESS_RIGHTS_VIEW "
	    + "SYSRES_CONST_ACCESS_RIGHTS_VIEW_CODE "
	    + "SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_CODE "
	    + "SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_YES_CODE "
	    + "SYSRES_CONST_ACCESS_TYPE_CHANGE "
	    + "SYSRES_CONST_ACCESS_TYPE_CHANGE_CODE "
	    + "SYSRES_CONST_ACCESS_TYPE_EXISTS "
	    + "SYSRES_CONST_ACCESS_TYPE_EXISTS_CODE "
	    + "SYSRES_CONST_ACCESS_TYPE_FULL "
	    + "SYSRES_CONST_ACCESS_TYPE_FULL_CODE "
	    + "SYSRES_CONST_ACCESS_TYPE_VIEW "
	    + "SYSRES_CONST_ACCESS_TYPE_VIEW_CODE "
	    + "SYSRES_CONST_ACTION_TYPE_ABORT "
	    + "SYSRES_CONST_ACTION_TYPE_ACCEPT "
	    + "SYSRES_CONST_ACTION_TYPE_ACCESS_RIGHTS "
	    + "SYSRES_CONST_ACTION_TYPE_ADD_ATTACHMENT "
	    + "SYSRES_CONST_ACTION_TYPE_CHANGE_CARD "
	    + "SYSRES_CONST_ACTION_TYPE_CHANGE_KIND "
	    + "SYSRES_CONST_ACTION_TYPE_CHANGE_STORAGE "
	    + "SYSRES_CONST_ACTION_TYPE_CONTINUE "
	    + "SYSRES_CONST_ACTION_TYPE_COPY "
	    + "SYSRES_CONST_ACTION_TYPE_CREATE "
	    + "SYSRES_CONST_ACTION_TYPE_CREATE_VERSION "
	    + "SYSRES_CONST_ACTION_TYPE_DELETE "
	    + "SYSRES_CONST_ACTION_TYPE_DELETE_ATTACHMENT "
	    + "SYSRES_CONST_ACTION_TYPE_DELETE_VERSION "
	    + "SYSRES_CONST_ACTION_TYPE_DISABLE_DELEGATE_ACCESS_RIGHTS "
	    + "SYSRES_CONST_ACTION_TYPE_ENABLE_DELEGATE_ACCESS_RIGHTS "
	    + "SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE "
	    + "SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE_AND_PASSWORD "
	    + "SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_PASSWORD "
	    + "SYSRES_CONST_ACTION_TYPE_EXPORT_WITH_LOCK "
	    + "SYSRES_CONST_ACTION_TYPE_EXPORT_WITHOUT_LOCK "
	    + "SYSRES_CONST_ACTION_TYPE_IMPORT_WITH_UNLOCK "
	    + "SYSRES_CONST_ACTION_TYPE_IMPORT_WITHOUT_UNLOCK "
	    + "SYSRES_CONST_ACTION_TYPE_LIFE_CYCLE_STAGE "
	    + "SYSRES_CONST_ACTION_TYPE_LOCK "
	    + "SYSRES_CONST_ACTION_TYPE_LOCK_FOR_SERVER "
	    + "SYSRES_CONST_ACTION_TYPE_LOCK_MODIFY "
	    + "SYSRES_CONST_ACTION_TYPE_MARK_AS_READED "
	    + "SYSRES_CONST_ACTION_TYPE_MARK_AS_UNREADED "
	    + "SYSRES_CONST_ACTION_TYPE_MODIFY "
	    + "SYSRES_CONST_ACTION_TYPE_MODIFY_CARD "
	    + "SYSRES_CONST_ACTION_TYPE_MOVE_TO_ARCHIVE "
	    + "SYSRES_CONST_ACTION_TYPE_OFF_ENCRYPTION "
	    + "SYSRES_CONST_ACTION_TYPE_PASSWORD_CHANGE "
	    + "SYSRES_CONST_ACTION_TYPE_PERFORM "
	    + "SYSRES_CONST_ACTION_TYPE_RECOVER_FROM_LOCAL_COPY "
	    + "SYSRES_CONST_ACTION_TYPE_RESTART "
	    + "SYSRES_CONST_ACTION_TYPE_RESTORE_FROM_ARCHIVE "
	    + "SYSRES_CONST_ACTION_TYPE_REVISION "
	    + "SYSRES_CONST_ACTION_TYPE_SEND_BY_MAIL "
	    + "SYSRES_CONST_ACTION_TYPE_SIGN "
	    + "SYSRES_CONST_ACTION_TYPE_START "
	    + "SYSRES_CONST_ACTION_TYPE_UNLOCK "
	    + "SYSRES_CONST_ACTION_TYPE_UNLOCK_FROM_SERVER "
	    + "SYSRES_CONST_ACTION_TYPE_VERSION_STATE "
	    + "SYSRES_CONST_ACTION_TYPE_VERSION_VISIBILITY "
	    + "SYSRES_CONST_ACTION_TYPE_VIEW "
	    + "SYSRES_CONST_ACTION_TYPE_VIEW_SHADOW_COPY "
	    + "SYSRES_CONST_ACTION_TYPE_WORKFLOW_DESCRIPTION_MODIFY "
	    + "SYSRES_CONST_ACTION_TYPE_WRITE_HISTORY "
	    + "SYSRES_CONST_ACTIVE_VERSION_STATE_PICK_VALUE "
	    + "SYSRES_CONST_ADD_REFERENCE_MODE_NAME "
	    + "SYSRES_CONST_ADDITION_REQUISITE_CODE "
	    + "SYSRES_CONST_ADDITIONAL_PARAMS_REQUISITE_CODE "
	    + "SYSRES_CONST_ADITIONAL_JOB_END_DATE_REQUISITE_NAME "
	    + "SYSRES_CONST_ADITIONAL_JOB_READ_REQUISITE_NAME "
	    + "SYSRES_CONST_ADITIONAL_JOB_START_DATE_REQUISITE_NAME "
	    + "SYSRES_CONST_ADITIONAL_JOB_STATE_REQUISITE_NAME "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION_CODE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE "
	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE_ACTION "
	    + "SYSRES_CONST_ALL_ACCEPT_CONDITION_RUS "
	    + "SYSRES_CONST_ALL_USERS_GROUP "
	    + "SYSRES_CONST_ALL_USERS_GROUP_NAME "
	    + "SYSRES_CONST_ALL_USERS_SERVER_GROUP_NAME "
	    + "SYSRES_CONST_ALLOWED_ACCESS_TYPE_CODE "
	    + "SYSRES_CONST_ALLOWED_ACCESS_TYPE_NAME "
	    + "SYSRES_CONST_APP_VIEWER_TYPE_REQUISITE_CODE "
	    + "SYSRES_CONST_APPROVING_SIGNATURE_NAME "
	    + "SYSRES_CONST_APPROVING_SIGNATURE_REQUISITE_CODE "
	    + "SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE "
	    + "SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE_CODE "
	    + "SYSRES_CONST_ATTACH_TYPE_COMPONENT_TOKEN "
	    + "SYSRES_CONST_ATTACH_TYPE_DOC "
	    + "SYSRES_CONST_ATTACH_TYPE_EDOC "
	    + "SYSRES_CONST_ATTACH_TYPE_FOLDER "
	    + "SYSRES_CONST_ATTACH_TYPE_JOB "
	    + "SYSRES_CONST_ATTACH_TYPE_REFERENCE "
	    + "SYSRES_CONST_ATTACH_TYPE_TASK "
	    + "SYSRES_CONST_AUTH_ENCODED_PASSWORD "
	    + "SYSRES_CONST_AUTH_ENCODED_PASSWORD_CODE "
	    + "SYSRES_CONST_AUTH_NOVELL "
	    + "SYSRES_CONST_AUTH_PASSWORD "
	    + "SYSRES_CONST_AUTH_PASSWORD_CODE "
	    + "SYSRES_CONST_AUTH_WINDOWS "
	    + "SYSRES_CONST_AUTHENTICATING_SIGNATURE_NAME "
	    + "SYSRES_CONST_AUTHENTICATING_SIGNATURE_REQUISITE_CODE "
	    + "SYSRES_CONST_AUTO_ENUM_METHOD_FLAG "
	    + "SYSRES_CONST_AUTO_NUMERATION_CODE "
	    + "SYSRES_CONST_AUTO_STRONG_ENUM_METHOD_FLAG "
	    + "SYSRES_CONST_AUTOTEXT_NAME_REQUISITE_CODE "
	    + "SYSRES_CONST_AUTOTEXT_TEXT_REQUISITE_CODE "
	    + "SYSRES_CONST_AUTOTEXT_USAGE_ALL "
	    + "SYSRES_CONST_AUTOTEXT_USAGE_ALL_CODE "
	    + "SYSRES_CONST_AUTOTEXT_USAGE_SIGN "
	    + "SYSRES_CONST_AUTOTEXT_USAGE_SIGN_CODE "
	    + "SYSRES_CONST_AUTOTEXT_USAGE_WORK "
	    + "SYSRES_CONST_AUTOTEXT_USAGE_WORK_CODE "
	    + "SYSRES_CONST_AUTOTEXT_USE_ANYWHERE_CODE "
	    + "SYSRES_CONST_AUTOTEXT_USE_ON_SIGNING_CODE "
	    + "SYSRES_CONST_AUTOTEXT_USE_ON_WORK_CODE "
	    + "SYSRES_CONST_BEGIN_DATE_REQUISITE_CODE "
	    + "SYSRES_CONST_BLACK_LIFE_CYCLE_STAGE_FONT_COLOR "
	    + "SYSRES_CONST_BLUE_LIFE_CYCLE_STAGE_FONT_COLOR "
	    + "SYSRES_CONST_BTN_PART "
	    + "SYSRES_CONST_CALCULATED_ROLE_TYPE_CODE "
	    + "SYSRES_CONST_CALL_TYPE_VARIABLE_BUTTON_VALUE "
	    + "SYSRES_CONST_CALL_TYPE_VARIABLE_PROGRAM_VALUE "
	    + "SYSRES_CONST_CANCEL_MESSAGE_FUNCTION_RESULT "
	    + "SYSRES_CONST_CARD_PART "
	    + "SYSRES_CONST_CARD_REFERENCE_MODE_NAME "
	    + "SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_ENCRYPT_VALUE "
	    + "SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_AND_ENCRYPT_VALUE "
	    + "SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_VALUE "
	    + "SYSRES_CONST_CHECK_PARAM_VALUE_DATE_PARAM_TYPE "
	    + "SYSRES_CONST_CHECK_PARAM_VALUE_FLOAT_PARAM_TYPE "
	    + "SYSRES_CONST_CHECK_PARAM_VALUE_INTEGER_PARAM_TYPE "
	    + "SYSRES_CONST_CHECK_PARAM_VALUE_PICK_PARAM_TYPE "
	    + "SYSRES_CONST_CHECK_PARAM_VALUE_REEFRENCE_PARAM_TYPE "
	    + "SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_FEMININE "
	    + "SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_MASCULINE "
	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_ADMIN "
	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_DEVELOPER "
	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_DOCS "
	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_EDOC_CARDS "
	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_EXTERNAL_EXECUTABLE "
	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_OTHER "
	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_REFERENCE "
	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_REPORT "
	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_SCRIPT "
	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_URL "
	    + "SYSRES_CONST_CODE_REQUISITE_ACCESS "
	    + "SYSRES_CONST_CODE_REQUISITE_CODE "
	    + "SYSRES_CONST_CODE_REQUISITE_COMPONENT "
	    + "SYSRES_CONST_CODE_REQUISITE_DESCRIPTION "
	    + "SYSRES_CONST_CODE_REQUISITE_EXCLUDE_COMPONENT "
	    + "SYSRES_CONST_CODE_REQUISITE_RECORD "
	    + "SYSRES_CONST_COMMENT_REQ_CODE "
	    + "SYSRES_CONST_COMMON_SETTINGS_REQUISITE_CODE "
	    + "SYSRES_CONST_COMP_CODE_GRD "
	    + "SYSRES_CONST_COMPONENT_GROUP_TYPE_REQUISITE_CODE "
	    + "SYSRES_CONST_COMPONENT_TYPE_ADMIN_COMPONENTS "
	    + "SYSRES_CONST_COMPONENT_TYPE_DEVELOPER_COMPONENTS "
	    + "SYSRES_CONST_COMPONENT_TYPE_DOCS "
	    + "SYSRES_CONST_COMPONENT_TYPE_EDOC_CARDS "
	    + "SYSRES_CONST_COMPONENT_TYPE_EDOCS "
	    + "SYSRES_CONST_COMPONENT_TYPE_EXTERNAL_EXECUTABLE "
	    + "SYSRES_CONST_COMPONENT_TYPE_OTHER "
	    + "SYSRES_CONST_COMPONENT_TYPE_REFERENCE_TYPES "
	    + "SYSRES_CONST_COMPONENT_TYPE_REFERENCES "
	    + "SYSRES_CONST_COMPONENT_TYPE_REPORTS "
	    + "SYSRES_CONST_COMPONENT_TYPE_SCRIPTS "
	    + "SYSRES_CONST_COMPONENT_TYPE_URL "
	    + "SYSRES_CONST_COMPONENTS_REMOTE_SERVERS_VIEW_CODE "
	    + "SYSRES_CONST_CONDITION_BLOCK_DESCRIPTION "
	    + "SYSRES_CONST_CONST_FIRM_STATUS_COMMON "
	    + "SYSRES_CONST_CONST_FIRM_STATUS_INDIVIDUAL "
	    + "SYSRES_CONST_CONST_NEGATIVE_VALUE "
	    + "SYSRES_CONST_CONST_POSITIVE_VALUE "
	    + "SYSRES_CONST_CONST_SERVER_STATUS_DONT_REPLICATE "
	    + "SYSRES_CONST_CONST_SERVER_STATUS_REPLICATE "
	    + "SYSRES_CONST_CONTENTS_REQUISITE_CODE "
	    + "SYSRES_CONST_DATA_TYPE_BOOLEAN "
	    + "SYSRES_CONST_DATA_TYPE_DATE "
	    + "SYSRES_CONST_DATA_TYPE_FLOAT "
	    + "SYSRES_CONST_DATA_TYPE_INTEGER "
	    + "SYSRES_CONST_DATA_TYPE_PICK "
	    + "SYSRES_CONST_DATA_TYPE_REFERENCE "
	    + "SYSRES_CONST_DATA_TYPE_STRING "
	    + "SYSRES_CONST_DATA_TYPE_TEXT "
	    + "SYSRES_CONST_DATA_TYPE_VARIANT "
	    + "SYSRES_CONST_DATE_CLOSE_REQ_CODE "
	    + "SYSRES_CONST_DATE_FORMAT_DATE_ONLY_CHAR "
	    + "SYSRES_CONST_DATE_OPEN_REQ_CODE "
	    + "SYSRES_CONST_DATE_REQUISITE "
	    + "SYSRES_CONST_DATE_REQUISITE_CODE "
	    + "SYSRES_CONST_DATE_REQUISITE_NAME "
	    + "SYSRES_CONST_DATE_REQUISITE_TYPE "
	    + "SYSRES_CONST_DATE_TYPE_CHAR "
	    + "SYSRES_CONST_DATETIME_FORMAT_VALUE "
	    + "SYSRES_CONST_DEA_ACCESS_RIGHTS_ACTION_CODE "
	    + "SYSRES_CONST_DESCRIPTION_LOCALIZE_ID_REQUISITE_CODE "
	    + "SYSRES_CONST_DESCRIPTION_REQUISITE_CODE "
	    + "SYSRES_CONST_DET1_PART "
	    + "SYSRES_CONST_DET2_PART "
	    + "SYSRES_CONST_DET3_PART "
	    + "SYSRES_CONST_DET4_PART "
	    + "SYSRES_CONST_DET5_PART "
	    + "SYSRES_CONST_DET6_PART "
	    + "SYSRES_CONST_DETAIL_DATASET_KEY_REQUISITE_CODE "
	    + "SYSRES_CONST_DETAIL_PICK_REQUISITE_CODE "
	    + "SYSRES_CONST_DETAIL_REQ_CODE "
	    + "SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_CODE "
	    + "SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_NAME "
	    + "SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_CODE "
	    + "SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_NAME "
	    + "SYSRES_CONST_DOCUMENT_STORAGES_CODE "
	    + "SYSRES_CONST_DOCUMENT_TEMPLATES_TYPE_NAME "
	    + "SYSRES_CONST_DOUBLE_REQUISITE_CODE "
	    + "SYSRES_CONST_EDITOR_CLOSE_FILE_OBSERV_TYPE_CODE "
	    + "SYSRES_CONST_EDITOR_CLOSE_PROCESS_OBSERV_TYPE_CODE "
	    + "SYSRES_CONST_EDITOR_TYPE_REQUISITE_CODE "
	    + "SYSRES_CONST_EDITORS_APPLICATION_NAME_REQUISITE_CODE "
	    + "SYSRES_CONST_EDITORS_CREATE_SEVERAL_PROCESSES_REQUISITE_CODE "
	    + "SYSRES_CONST_EDITORS_EXTENSION_REQUISITE_CODE "
	    + "SYSRES_CONST_EDITORS_OBSERVER_BY_PROCESS_TYPE "
	    + "SYSRES_CONST_EDITORS_REFERENCE_CODE "
	    + "SYSRES_CONST_EDITORS_REPLACE_SPEC_CHARS_REQUISITE_CODE "
	    + "SYSRES_CONST_EDITORS_USE_PLUGINS_REQUISITE_CODE "
	    + "SYSRES_CONST_EDITORS_VIEW_DOCUMENT_OPENED_TO_EDIT_CODE "
	    + "SYSRES_CONST_EDOC_CARD_TYPE_REQUISITE_CODE "
	    + "SYSRES_CONST_EDOC_CARD_TYPES_LINK_REQUISITE_CODE "
	    + "SYSRES_CONST_EDOC_CERTIFICATE_AND_PASSWORD_ENCODE_CODE "
	    + "SYSRES_CONST_EDOC_CERTIFICATE_ENCODE_CODE "
	    + "SYSRES_CONST_EDOC_DATE_REQUISITE_CODE "
	    + "SYSRES_CONST_EDOC_KIND_REFERENCE_CODE "
	    + "SYSRES_CONST_EDOC_KINDS_BY_TEMPLATE_ACTION_CODE "
	    + "SYSRES_CONST_EDOC_MANAGE_ACCESS_CODE "
	    + "SYSRES_CONST_EDOC_NONE_ENCODE_CODE "
	    + "SYSRES_CONST_EDOC_NUMBER_REQUISITE_CODE "
	    + "SYSRES_CONST_EDOC_PASSWORD_ENCODE_CODE "
	    + "SYSRES_CONST_EDOC_READONLY_ACCESS_CODE "
	    + "SYSRES_CONST_EDOC_SHELL_LIFE_TYPE_VIEW_VALUE "
	    + "SYSRES_CONST_EDOC_SIZE_RESTRICTION_PRIORITY_REQUISITE_CODE "
	    + "SYSRES_CONST_EDOC_STORAGE_CHECK_ACCESS_RIGHTS_REQUISITE_CODE "
	    + "SYSRES_CONST_EDOC_STORAGE_COMPUTER_NAME_REQUISITE_CODE "
	    + "SYSRES_CONST_EDOC_STORAGE_DATABASE_NAME_REQUISITE_CODE "
	    + "SYSRES_CONST_EDOC_STORAGE_EDIT_IN_STORAGE_REQUISITE_CODE "
	    + "SYSRES_CONST_EDOC_STORAGE_LOCAL_PATH_REQUISITE_CODE "
	    + "SYSRES_CONST_EDOC_STORAGE_SHARED_SOURCE_NAME_REQUISITE_CODE "
	    + "SYSRES_CONST_EDOC_TEMPLATE_REQUISITE_CODE "
	    + "SYSRES_CONST_EDOC_TYPES_REFERENCE_CODE "
	    + "SYSRES_CONST_EDOC_VERSION_ACTIVE_STAGE_CODE "
	    + "SYSRES_CONST_EDOC_VERSION_DESIGN_STAGE_CODE "
	    + "SYSRES_CONST_EDOC_VERSION_OBSOLETE_STAGE_CODE "
	    + "SYSRES_CONST_EDOC_WRITE_ACCES_CODE "
	    + "SYSRES_CONST_EDOCUMENT_CARD_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE "
	    + "SYSRES_CONST_ENCODE_CERTIFICATE_TYPE_CODE "
	    + "SYSRES_CONST_END_DATE_REQUISITE_CODE "
	    + "SYSRES_CONST_ENUMERATION_TYPE_REQUISITE_CODE "
	    + "SYSRES_CONST_EXECUTE_ACCESS_RIGHTS_TYPE_CODE "
	    + "SYSRES_CONST_EXECUTIVE_FILE_STORAGE_TYPE "
	    + "SYSRES_CONST_EXIST_CONST "
	    + "SYSRES_CONST_EXIST_VALUE "
	    + "SYSRES_CONST_EXPORT_LOCK_TYPE_ASK "
	    + "SYSRES_CONST_EXPORT_LOCK_TYPE_WITH_LOCK "
	    + "SYSRES_CONST_EXPORT_LOCK_TYPE_WITHOUT_LOCK "
	    + "SYSRES_CONST_EXPORT_VERSION_TYPE_ASK "
	    + "SYSRES_CONST_EXPORT_VERSION_TYPE_LAST "
	    + "SYSRES_CONST_EXPORT_VERSION_TYPE_LAST_ACTIVE "
	    + "SYSRES_CONST_EXTENSION_REQUISITE_CODE "
	    + "SYSRES_CONST_FILTER_NAME_REQUISITE_CODE "
	    + "SYSRES_CONST_FILTER_REQUISITE_CODE "
	    + "SYSRES_CONST_FILTER_TYPE_COMMON_CODE "
	    + "SYSRES_CONST_FILTER_TYPE_COMMON_NAME "
	    + "SYSRES_CONST_FILTER_TYPE_USER_CODE "
	    + "SYSRES_CONST_FILTER_TYPE_USER_NAME "
	    + "SYSRES_CONST_FILTER_VALUE_REQUISITE_NAME "
	    + "SYSRES_CONST_FLOAT_NUMBER_FORMAT_CHAR "
	    + "SYSRES_CONST_FLOAT_REQUISITE_TYPE "
	    + "SYSRES_CONST_FOLDER_AUTHOR_VALUE "
	    + "SYSRES_CONST_FOLDER_KIND_ANY_OBJECTS "
	    + "SYSRES_CONST_FOLDER_KIND_COMPONENTS "
	    + "SYSRES_CONST_FOLDER_KIND_EDOCS "
	    + "SYSRES_CONST_FOLDER_KIND_JOBS "
	    + "SYSRES_CONST_FOLDER_KIND_TASKS "
	    + "SYSRES_CONST_FOLDER_TYPE_COMMON "
	    + "SYSRES_CONST_FOLDER_TYPE_COMPONENT "
	    + "SYSRES_CONST_FOLDER_TYPE_FAVORITES "
	    + "SYSRES_CONST_FOLDER_TYPE_INBOX "
	    + "SYSRES_CONST_FOLDER_TYPE_OUTBOX "
	    + "SYSRES_CONST_FOLDER_TYPE_QUICK_LAUNCH "
	    + "SYSRES_CONST_FOLDER_TYPE_SEARCH "
	    + "SYSRES_CONST_FOLDER_TYPE_SHORTCUTS "
	    + "SYSRES_CONST_FOLDER_TYPE_USER "
	    + "SYSRES_CONST_FROM_DICTIONARY_ENUM_METHOD_FLAG "
	    + "SYSRES_CONST_FULL_SUBSTITUTE_TYPE "
	    + "SYSRES_CONST_FULL_SUBSTITUTE_TYPE_CODE "
	    + "SYSRES_CONST_FUNCTION_CANCEL_RESULT "
	    + "SYSRES_CONST_FUNCTION_CATEGORY_SYSTEM "
	    + "SYSRES_CONST_FUNCTION_CATEGORY_USER "
	    + "SYSRES_CONST_FUNCTION_FAILURE_RESULT "
	    + "SYSRES_CONST_FUNCTION_SAVE_RESULT "
	    + "SYSRES_CONST_GENERATED_REQUISITE "
	    + "SYSRES_CONST_GREEN_LIFE_CYCLE_STAGE_FONT_COLOR "
	    + "SYSRES_CONST_GROUP_ACCOUNT_TYPE_VALUE_CODE "
	    + "SYSRES_CONST_GROUP_CATEGORY_NORMAL_CODE "
	    + "SYSRES_CONST_GROUP_CATEGORY_NORMAL_NAME "
	    + "SYSRES_CONST_GROUP_CATEGORY_SERVICE_CODE "
	    + "SYSRES_CONST_GROUP_CATEGORY_SERVICE_NAME "
	    + "SYSRES_CONST_GROUP_COMMON_CATEGORY_FIELD_VALUE "
	    + "SYSRES_CONST_GROUP_FULL_NAME_REQUISITE_CODE "
	    + "SYSRES_CONST_GROUP_NAME_REQUISITE_CODE "
	    + "SYSRES_CONST_GROUP_RIGHTS_T_REQUISITE_CODE "
	    + "SYSRES_CONST_GROUP_SERVER_CODES_REQUISITE_CODE "
	    + "SYSRES_CONST_GROUP_SERVER_NAME_REQUISITE_CODE "
	    + "SYSRES_CONST_GROUP_SERVICE_CATEGORY_FIELD_VALUE "
	    + "SYSRES_CONST_GROUP_USER_REQUISITE_CODE "
	    + "SYSRES_CONST_GROUPS_REFERENCE_CODE "
	    + "SYSRES_CONST_GROUPS_REQUISITE_CODE "
	    + "SYSRES_CONST_HIDDEN_MODE_NAME "
	    + "SYSRES_CONST_HIGH_LVL_REQUISITE_CODE "
	    + "SYSRES_CONST_HISTORY_ACTION_CREATE_CODE "
	    + "SYSRES_CONST_HISTORY_ACTION_DELETE_CODE "
	    + "SYSRES_CONST_HISTORY_ACTION_EDIT_CODE "
	    + "SYSRES_CONST_HOUR_CHAR "
	    + "SYSRES_CONST_ID_REQUISITE_CODE "
	    + "SYSRES_CONST_IDSPS_REQUISITE_CODE "
	    + "SYSRES_CONST_IMAGE_MODE_COLOR "
	    + "SYSRES_CONST_IMAGE_MODE_GREYSCALE "
	    + "SYSRES_CONST_IMAGE_MODE_MONOCHROME "
	    + "SYSRES_CONST_IMPORTANCE_HIGH "
	    + "SYSRES_CONST_IMPORTANCE_LOW "
	    + "SYSRES_CONST_IMPORTANCE_NORMAL "
	    + "SYSRES_CONST_IN_DESIGN_VERSION_STATE_PICK_VALUE "
	    + "SYSRES_CONST_INCOMING_WORK_RULE_TYPE_CODE "
	    + "SYSRES_CONST_INT_REQUISITE "
	    + "SYSRES_CONST_INT_REQUISITE_TYPE "
	    + "SYSRES_CONST_INTEGER_NUMBER_FORMAT_CHAR "
	    + "SYSRES_CONST_INTEGER_TYPE_CHAR "
	    + "SYSRES_CONST_IS_GENERATED_REQUISITE_NEGATIVE_VALUE "
	    + "SYSRES_CONST_IS_PUBLIC_ROLE_REQUISITE_CODE "
	    + "SYSRES_CONST_IS_REMOTE_USER_NEGATIVE_VALUE "
	    + "SYSRES_CONST_IS_REMOTE_USER_POSITIVE_VALUE "
	    + "SYSRES_CONST_IS_STORED_REQUISITE_NEGATIVE_VALUE "
	    + "SYSRES_CONST_IS_STORED_REQUISITE_STORED_VALUE "
	    + "SYSRES_CONST_ITALIC_LIFE_CYCLE_STAGE_DRAW_STYLE "
	    + "SYSRES_CONST_JOB_BLOCK_DESCRIPTION "
	    + "SYSRES_CONST_JOB_KIND_CONTROL_JOB "
	    + "SYSRES_CONST_JOB_KIND_JOB "
	    + "SYSRES_CONST_JOB_KIND_NOTICE "
	    + "SYSRES_CONST_JOB_STATE_ABORTED "
	    + "SYSRES_CONST_JOB_STATE_COMPLETE "
	    + "SYSRES_CONST_JOB_STATE_WORKING "
	    + "SYSRES_CONST_KIND_REQUISITE_CODE "
	    + "SYSRES_CONST_KIND_REQUISITE_NAME "
	    + "SYSRES_CONST_KINDS_CREATE_SHADOW_COPIES_REQUISITE_CODE "
	    + "SYSRES_CONST_KINDS_DEFAULT_EDOC_LIFE_STAGE_REQUISITE_CODE "
	    + "SYSRES_CONST_KINDS_EDOC_ALL_TEPLATES_ALLOWED_REQUISITE_CODE "
	    + "SYSRES_CONST_KINDS_EDOC_ALLOW_LIFE_CYCLE_STAGE_CHANGING_REQUISITE_CODE "
	    + "SYSRES_CONST_KINDS_EDOC_ALLOW_MULTIPLE_ACTIVE_VERSIONS_REQUISITE_CODE "
	    + "SYSRES_CONST_KINDS_EDOC_SHARE_ACCES_RIGHTS_BY_DEFAULT_CODE "
	    + "SYSRES_CONST_KINDS_EDOC_TEMPLATE_REQUISITE_CODE "
	    + "SYSRES_CONST_KINDS_EDOC_TYPE_REQUISITE_CODE "
	    + "SYSRES_CONST_KINDS_SIGNERS_REQUISITES_CODE "
	    + "SYSRES_CONST_KOD_INPUT_TYPE "
	    + "SYSRES_CONST_LAST_UPDATE_DATE_REQUISITE_CODE "
	    + "SYSRES_CONST_LIFE_CYCLE_START_STAGE_REQUISITE_CODE "
	    + "SYSRES_CONST_LILAC_LIFE_CYCLE_STAGE_FONT_COLOR "
	    + "SYSRES_CONST_LINK_OBJECT_KIND_COMPONENT "
	    + "SYSRES_CONST_LINK_OBJECT_KIND_DOCUMENT "
	    + "SYSRES_CONST_LINK_OBJECT_KIND_EDOC "
	    + "SYSRES_CONST_LINK_OBJECT_KIND_FOLDER "
	    + "SYSRES_CONST_LINK_OBJECT_KIND_JOB "
	    + "SYSRES_CONST_LINK_OBJECT_KIND_REFERENCE "
	    + "SYSRES_CONST_LINK_OBJECT_KIND_TASK "
	    + "SYSRES_CONST_LINK_REF_TYPE_REQUISITE_CODE "
	    + "SYSRES_CONST_LIST_REFERENCE_MODE_NAME "
	    + "SYSRES_CONST_LOCALIZATION_DICTIONARY_MAIN_VIEW_CODE "
	    + "SYSRES_CONST_MAIN_VIEW_CODE "
	    + "SYSRES_CONST_MANUAL_ENUM_METHOD_FLAG "
	    + "SYSRES_CONST_MASTER_COMP_TYPE_REQUISITE_CODE "
	    + "SYSRES_CONST_MASTER_TABLE_REC_ID_REQUISITE_CODE "
	    + "SYSRES_CONST_MAXIMIZED_MODE_NAME "
	    + "SYSRES_CONST_ME_VALUE "
	    + "SYSRES_CONST_MESSAGE_ATTENTION_CAPTION "
	    + "SYSRES_CONST_MESSAGE_CONFIRMATION_CAPTION "
	    + "SYSRES_CONST_MESSAGE_ERROR_CAPTION "
	    + "SYSRES_CONST_MESSAGE_INFORMATION_CAPTION "
	    + "SYSRES_CONST_MINIMIZED_MODE_NAME "
	    + "SYSRES_CONST_MINUTE_CHAR "
	    + "SYSRES_CONST_MODULE_REQUISITE_CODE "
	    + "SYSRES_CONST_MONITORING_BLOCK_DESCRIPTION "
	    + "SYSRES_CONST_MONTH_FORMAT_VALUE "
	    + "SYSRES_CONST_NAME_LOCALIZE_ID_REQUISITE_CODE "
	    + "SYSRES_CONST_NAME_REQUISITE_CODE "
	    + "SYSRES_CONST_NAME_SINGULAR_REQUISITE_CODE "
	    + "SYSRES_CONST_NAMEAN_INPUT_TYPE "
	    + "SYSRES_CONST_NEGATIVE_PICK_VALUE "
	    + "SYSRES_CONST_NEGATIVE_VALUE "
	    + "SYSRES_CONST_NO "
	    + "SYSRES_CONST_NO_PICK_VALUE "
	    + "SYSRES_CONST_NO_SIGNATURE_REQUISITE_CODE "
	    + "SYSRES_CONST_NO_VALUE "
	    + "SYSRES_CONST_NONE_ACCESS_RIGHTS_TYPE_CODE "
	    + "SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE "
	    + "SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE_MASCULINE "
	    + "SYSRES_CONST_NORMAL_ACCESS_RIGHTS_TYPE_CODE "
	    + "SYSRES_CONST_NORMAL_LIFE_CYCLE_STAGE_DRAW_STYLE "
	    + "SYSRES_CONST_NORMAL_MODE_NAME "
	    + "SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_CODE "
	    + "SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_NAME "
	    + "SYSRES_CONST_NOTE_REQUISITE_CODE "
	    + "SYSRES_CONST_NOTICE_BLOCK_DESCRIPTION "
	    + "SYSRES_CONST_NUM_REQUISITE "
	    + "SYSRES_CONST_NUM_STR_REQUISITE_CODE "
	    + "SYSRES_CONST_NUMERATION_AUTO_NOT_STRONG "
	    + "SYSRES_CONST_NUMERATION_AUTO_STRONG "
	    + "SYSRES_CONST_NUMERATION_FROM_DICTONARY "
	    + "SYSRES_CONST_NUMERATION_MANUAL "
	    + "SYSRES_CONST_NUMERIC_TYPE_CHAR "
	    + "SYSRES_CONST_NUMREQ_REQUISITE_CODE "
	    + "SYSRES_CONST_OBSOLETE_VERSION_STATE_PICK_VALUE "
	    + "SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE "
	    + "SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_CODE "
	    + "SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_FEMININE "
	    + "SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_MASCULINE "
	    + "SYSRES_CONST_OPTIONAL_FORM_COMP_REQCODE_PREFIX "
	    + "SYSRES_CONST_ORANGE_LIFE_CYCLE_STAGE_FONT_COLOR "
	    + "SYSRES_CONST_ORIGINALREF_REQUISITE_CODE "
	    + "SYSRES_CONST_OURFIRM_REF_CODE "
	    + "SYSRES_CONST_OURFIRM_REQUISITE_CODE "
	    + "SYSRES_CONST_OURFIRM_VAR "
	    + "SYSRES_CONST_OUTGOING_WORK_RULE_TYPE_CODE "
	    + "SYSRES_CONST_PICK_NEGATIVE_RESULT "
	    + "SYSRES_CONST_PICK_POSITIVE_RESULT "
	    + "SYSRES_CONST_PICK_REQUISITE "
	    + "SYSRES_CONST_PICK_REQUISITE_TYPE "
	    + "SYSRES_CONST_PICK_TYPE_CHAR "
	    + "SYSRES_CONST_PLAN_STATUS_REQUISITE_CODE "
	    + "SYSRES_CONST_PLATFORM_VERSION_COMMENT "
	    + "SYSRES_CONST_PLUGINS_SETTINGS_DESCRIPTION_REQUISITE_CODE "
	    + "SYSRES_CONST_POSITIVE_PICK_VALUE "
	    + "SYSRES_CONST_POWER_TO_CREATE_ACTION_CODE "
	    + "SYSRES_CONST_POWER_TO_SIGN_ACTION_CODE "
	    + "SYSRES_CONST_PRIORITY_REQUISITE_CODE "
	    + "SYSRES_CONST_QUALIFIED_TASK_TYPE "
	    + "SYSRES_CONST_QUALIFIED_TASK_TYPE_CODE "
	    + "SYSRES_CONST_RECSTAT_REQUISITE_CODE "
	    + "SYSRES_CONST_RED_LIFE_CYCLE_STAGE_FONT_COLOR "
	    + "SYSRES_CONST_REF_ID_T_REF_TYPE_REQUISITE_CODE "
	    + "SYSRES_CONST_REF_REQUISITE "
	    + "SYSRES_CONST_REF_REQUISITE_TYPE "
	    + "SYSRES_CONST_REF_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE "
	    + "SYSRES_CONST_REFERENCE_RECORD_HISTORY_CREATE_ACTION_CODE "
	    + "SYSRES_CONST_REFERENCE_RECORD_HISTORY_DELETE_ACTION_CODE "
	    + "SYSRES_CONST_REFERENCE_RECORD_HISTORY_MODIFY_ACTION_CODE "
	    + "SYSRES_CONST_REFERENCE_TYPE_CHAR "
	    + "SYSRES_CONST_REFERENCE_TYPE_REQUISITE_NAME "
	    + "SYSRES_CONST_REFERENCES_ADD_PARAMS_REQUISITE_CODE "
	    + "SYSRES_CONST_REFERENCES_DISPLAY_REQUISITE_REQUISITE_CODE "
	    + "SYSRES_CONST_REMOTE_SERVER_STATUS_WORKING "
	    + "SYSRES_CONST_REMOTE_SERVER_TYPE_MAIN "
	    + "SYSRES_CONST_REMOTE_SERVER_TYPE_SECONDARY "
	    + "SYSRES_CONST_REMOTE_USER_FLAG_VALUE_CODE "
	    + "SYSRES_CONST_REPORT_APP_EDITOR_INTERNAL "
	    + "SYSRES_CONST_REPORT_BASE_REPORT_ID_REQUISITE_CODE "
	    + "SYSRES_CONST_REPORT_BASE_REPORT_REQUISITE_CODE "
	    + "SYSRES_CONST_REPORT_SCRIPT_REQUISITE_CODE "
	    + "SYSRES_CONST_REPORT_TEMPLATE_REQUISITE_CODE "
	    + "SYSRES_CONST_REPORT_VIEWER_CODE_REQUISITE_CODE "
	    + "SYSRES_CONST_REQ_ALLOW_COMPONENT_DEFAULT_VALUE "
	    + "SYSRES_CONST_REQ_ALLOW_RECORD_DEFAULT_VALUE "
	    + "SYSRES_CONST_REQ_ALLOW_SERVER_COMPONENT_DEFAULT_VALUE "
	    + "SYSRES_CONST_REQ_MODE_AVAILABLE_CODE "
	    + "SYSRES_CONST_REQ_MODE_EDIT_CODE "
	    + "SYSRES_CONST_REQ_MODE_HIDDEN_CODE "
	    + "SYSRES_CONST_REQ_MODE_NOT_AVAILABLE_CODE "
	    + "SYSRES_CONST_REQ_MODE_VIEW_CODE "
	    + "SYSRES_CONST_REQ_NUMBER_REQUISITE_CODE "
	    + "SYSRES_CONST_REQ_SECTION_VALUE "
	    + "SYSRES_CONST_REQ_TYPE_VALUE "
	    + "SYSRES_CONST_REQUISITE_FORMAT_BY_UNIT "
	    + "SYSRES_CONST_REQUISITE_FORMAT_DATE_FULL "
	    + "SYSRES_CONST_REQUISITE_FORMAT_DATE_TIME "
	    + "SYSRES_CONST_REQUISITE_FORMAT_LEFT "
	    + "SYSRES_CONST_REQUISITE_FORMAT_RIGHT "
	    + "SYSRES_CONST_REQUISITE_FORMAT_WITHOUT_UNIT "
	    + "SYSRES_CONST_REQUISITE_NUMBER_REQUISITE_CODE "
	    + "SYSRES_CONST_REQUISITE_SECTION_ACTIONS "
	    + "SYSRES_CONST_REQUISITE_SECTION_BUTTON "
	    + "SYSRES_CONST_REQUISITE_SECTION_BUTTONS "
	    + "SYSRES_CONST_REQUISITE_SECTION_CARD "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE10 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE11 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE12 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE13 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE14 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE15 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE16 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE17 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE18 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE19 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE2 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE20 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE21 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE22 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE23 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE24 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE3 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE4 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE5 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE6 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE7 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE8 "
	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE9 "
	    + "SYSRES_CONST_REQUISITES_PSEUDOREFERENCE_REQUISITE_NUMBER_REQUISITE_CODE "
	    + "SYSRES_CONST_RIGHT_ALIGNMENT_CODE "
	    + "SYSRES_CONST_ROLES_REFERENCE_CODE "
	    + "SYSRES_CONST_ROUTE_STEP_AFTER_RUS "
	    + "SYSRES_CONST_ROUTE_STEP_AND_CONDITION_RUS "
	    + "SYSRES_CONST_ROUTE_STEP_OR_CONDITION_RUS "
	    + "SYSRES_CONST_ROUTE_TYPE_COMPLEX "
	    + "SYSRES_CONST_ROUTE_TYPE_PARALLEL "
	    + "SYSRES_CONST_ROUTE_TYPE_SERIAL "
	    + "SYSRES_CONST_SBDATASETDESC_NEGATIVE_VALUE "
	    + "SYSRES_CONST_SBDATASETDESC_POSITIVE_VALUE "
	    + "SYSRES_CONST_SBVIEWSDESC_POSITIVE_VALUE "
	    + "SYSRES_CONST_SCRIPT_BLOCK_DESCRIPTION "
	    + "SYSRES_CONST_SEARCH_BY_TEXT_REQUISITE_CODE "
	    + "SYSRES_CONST_SEARCHES_COMPONENT_CONTENT "
	    + "SYSRES_CONST_SEARCHES_CRITERIA_ACTION_NAME "
	    + "SYSRES_CONST_SEARCHES_EDOC_CONTENT "
	    + "SYSRES_CONST_SEARCHES_FOLDER_CONTENT "
	    + "SYSRES_CONST_SEARCHES_JOB_CONTENT "
	    + "SYSRES_CONST_SEARCHES_REFERENCE_CODE "
	    + "SYSRES_CONST_SEARCHES_TASK_CONTENT "
	    + "SYSRES_CONST_SECOND_CHAR "
	    + "SYSRES_CONST_SECTION_REQUISITE_ACTIONS_VALUE "
	    + "SYSRES_CONST_SECTION_REQUISITE_CARD_VALUE "
	    + "SYSRES_CONST_SECTION_REQUISITE_CODE "
	    + "SYSRES_CONST_SECTION_REQUISITE_DETAIL_1_VALUE "
	    + "SYSRES_CONST_SECTION_REQUISITE_DETAIL_2_VALUE "
	    + "SYSRES_CONST_SECTION_REQUISITE_DETAIL_3_VALUE "
	    + "SYSRES_CONST_SECTION_REQUISITE_DETAIL_4_VALUE "
	    + "SYSRES_CONST_SECTION_REQUISITE_DETAIL_5_VALUE "
	    + "SYSRES_CONST_SECTION_REQUISITE_DETAIL_6_VALUE "
	    + "SYSRES_CONST_SELECT_REFERENCE_MODE_NAME "
	    + "SYSRES_CONST_SELECT_TYPE_SELECTABLE "
	    + "SYSRES_CONST_SELECT_TYPE_SELECTABLE_ONLY_CHILD "
	    + "SYSRES_CONST_SELECT_TYPE_SELECTABLE_WITH_CHILD "
	    + "SYSRES_CONST_SELECT_TYPE_UNSLECTABLE "
	    + "SYSRES_CONST_SERVER_TYPE_MAIN "
	    + "SYSRES_CONST_SERVICE_USER_CATEGORY_FIELD_VALUE "
	    + "SYSRES_CONST_SETTINGS_USER_REQUISITE_CODE "
	    + "SYSRES_CONST_SIGNATURE_AND_ENCODE_CERTIFICATE_TYPE_CODE "
	    + "SYSRES_CONST_SIGNATURE_CERTIFICATE_TYPE_CODE "
	    + "SYSRES_CONST_SINGULAR_TITLE_REQUISITE_CODE "
	    + "SYSRES_CONST_SQL_SERVER_AUTHENTIFICATION_FLAG_VALUE_CODE "
	    + "SYSRES_CONST_SQL_SERVER_ENCODE_AUTHENTIFICATION_FLAG_VALUE_CODE "
	    + "SYSRES_CONST_STANDART_ROUTE_REFERENCE_CODE "
	    + "SYSRES_CONST_STANDART_ROUTE_REFERENCE_COMMENT_REQUISITE_CODE "
	    + "SYSRES_CONST_STANDART_ROUTES_GROUPS_REFERENCE_CODE "
	    + "SYSRES_CONST_STATE_REQ_NAME "
	    + "SYSRES_CONST_STATE_REQUISITE_ACTIVE_VALUE "
	    + "SYSRES_CONST_STATE_REQUISITE_CLOSED_VALUE "
	    + "SYSRES_CONST_STATE_REQUISITE_CODE "
	    + "SYSRES_CONST_STATIC_ROLE_TYPE_CODE "
	    + "SYSRES_CONST_STATUS_PLAN_DEFAULT_VALUE "
	    + "SYSRES_CONST_STATUS_VALUE_AUTOCLEANING "
	    + "SYSRES_CONST_STATUS_VALUE_BLUE_SQUARE "
	    + "SYSRES_CONST_STATUS_VALUE_COMPLETE "
	    + "SYSRES_CONST_STATUS_VALUE_GREEN_SQUARE "
	    + "SYSRES_CONST_STATUS_VALUE_ORANGE_SQUARE "
	    + "SYSRES_CONST_STATUS_VALUE_PURPLE_SQUARE "
	    + "SYSRES_CONST_STATUS_VALUE_RED_SQUARE "
	    + "SYSRES_CONST_STATUS_VALUE_SUSPEND "
	    + "SYSRES_CONST_STATUS_VALUE_YELLOW_SQUARE "
	    + "SYSRES_CONST_STDROUTE_SHOW_TO_USERS_REQUISITE_CODE "
	    + "SYSRES_CONST_STORAGE_TYPE_FILE "
	    + "SYSRES_CONST_STORAGE_TYPE_SQL_SERVER "
	    + "SYSRES_CONST_STR_REQUISITE "
	    + "SYSRES_CONST_STRIKEOUT_LIFE_CYCLE_STAGE_DRAW_STYLE "
	    + "SYSRES_CONST_STRING_FORMAT_LEFT_ALIGN_CHAR "
	    + "SYSRES_CONST_STRING_FORMAT_RIGHT_ALIGN_CHAR "
	    + "SYSRES_CONST_STRING_REQUISITE_CODE "
	    + "SYSRES_CONST_STRING_REQUISITE_TYPE "
	    + "SYSRES_CONST_STRING_TYPE_CHAR "
	    + "SYSRES_CONST_SUBSTITUTES_PSEUDOREFERENCE_CODE "
	    + "SYSRES_CONST_SUBTASK_BLOCK_DESCRIPTION "
	    + "SYSRES_CONST_SYSTEM_SETTING_CURRENT_USER_PARAM_VALUE "
	    + "SYSRES_CONST_SYSTEM_SETTING_EMPTY_VALUE_PARAM_VALUE "
	    + "SYSRES_CONST_SYSTEM_VERSION_COMMENT "
	    + "SYSRES_CONST_TASK_ACCESS_TYPE_ALL "
	    + "SYSRES_CONST_TASK_ACCESS_TYPE_ALL_MEMBERS "
	    + "SYSRES_CONST_TASK_ACCESS_TYPE_MANUAL "
	    + "SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION "
	    + "SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION_AND_PASSWORD "
	    + "SYSRES_CONST_TASK_ENCODE_TYPE_NONE "
	    + "SYSRES_CONST_TASK_ENCODE_TYPE_PASSWORD "
	    + "SYSRES_CONST_TASK_ROUTE_ALL_CONDITION "
	    + "SYSRES_CONST_TASK_ROUTE_AND_CONDITION "
	    + "SYSRES_CONST_TASK_ROUTE_OR_CONDITION "
	    + "SYSRES_CONST_TASK_STATE_ABORTED "
	    + "SYSRES_CONST_TASK_STATE_COMPLETE "
	    + "SYSRES_CONST_TASK_STATE_CONTINUED "
	    + "SYSRES_CONST_TASK_STATE_CONTROL "
	    + "SYSRES_CONST_TASK_STATE_INIT "
	    + "SYSRES_CONST_TASK_STATE_WORKING "
	    + "SYSRES_CONST_TASK_TITLE "
	    + "SYSRES_CONST_TASK_TYPES_GROUPS_REFERENCE_CODE "
	    + "SYSRES_CONST_TASK_TYPES_REFERENCE_CODE "
	    + "SYSRES_CONST_TEMPLATES_REFERENCE_CODE "
	    + "SYSRES_CONST_TEST_DATE_REQUISITE_NAME "
	    + "SYSRES_CONST_TEST_DEV_DATABASE_NAME "
	    + "SYSRES_CONST_TEST_DEV_SYSTEM_CODE "
	    + "SYSRES_CONST_TEST_EDMS_DATABASE_NAME "
	    + "SYSRES_CONST_TEST_EDMS_MAIN_CODE "
	    + "SYSRES_CONST_TEST_EDMS_MAIN_DB_NAME "
	    + "SYSRES_CONST_TEST_EDMS_SECOND_CODE "
	    + "SYSRES_CONST_TEST_EDMS_SECOND_DB_NAME "
	    + "SYSRES_CONST_TEST_EDMS_SYSTEM_CODE "
	    + "SYSRES_CONST_TEST_NUMERIC_REQUISITE_NAME "
	    + "SYSRES_CONST_TEXT_REQUISITE "
	    + "SYSRES_CONST_TEXT_REQUISITE_CODE "
	    + "SYSRES_CONST_TEXT_REQUISITE_TYPE "
	    + "SYSRES_CONST_TEXT_TYPE_CHAR "
	    + "SYSRES_CONST_TYPE_CODE_REQUISITE_CODE "
	    + "SYSRES_CONST_TYPE_REQUISITE_CODE "
	    + "SYSRES_CONST_UNDEFINED_LIFE_CYCLE_STAGE_FONT_COLOR "
	    + "SYSRES_CONST_UNITS_SECTION_ID_REQUISITE_CODE "
	    + "SYSRES_CONST_UNITS_SECTION_REQUISITE_CODE "
	    + "SYSRES_CONST_UNOPERATING_RECORD_FLAG_VALUE_CODE "
	    + "SYSRES_CONST_UNSTORED_DATA_REQUISITE_CODE "
	    + "SYSRES_CONST_UNSTORED_DATA_REQUISITE_NAME "
	    + "SYSRES_CONST_USE_ACCESS_TYPE_CODE "
	    + "SYSRES_CONST_USE_ACCESS_TYPE_NAME "
	    + "SYSRES_CONST_USER_ACCOUNT_TYPE_VALUE_CODE "
	    + "SYSRES_CONST_USER_ADDITIONAL_INFORMATION_REQUISITE_CODE "
	    + "SYSRES_CONST_USER_AND_GROUP_ID_FROM_PSEUDOREFERENCE_REQUISITE_CODE "
	    + "SYSRES_CONST_USER_CATEGORY_NORMAL "
	    + "SYSRES_CONST_USER_CERTIFICATE_REQUISITE_CODE "
	    + "SYSRES_CONST_USER_CERTIFICATE_STATE_REQUISITE_CODE "
	    + "SYSRES_CONST_USER_CERTIFICATE_SUBJECT_NAME_REQUISITE_CODE "
	    + "SYSRES_CONST_USER_CERTIFICATE_THUMBPRINT_REQUISITE_CODE "
	    + "SYSRES_CONST_USER_COMMON_CATEGORY "
	    + "SYSRES_CONST_USER_COMMON_CATEGORY_CODE "
	    + "SYSRES_CONST_USER_FULL_NAME_REQUISITE_CODE "
	    + "SYSRES_CONST_USER_GROUP_TYPE_REQUISITE_CODE "
	    + "SYSRES_CONST_USER_LOGIN_REQUISITE_CODE "
	    + "SYSRES_CONST_USER_REMOTE_CONTROLLER_REQUISITE_CODE "
	    + "SYSRES_CONST_USER_REMOTE_SYSTEM_REQUISITE_CODE "
	    + "SYSRES_CONST_USER_RIGHTS_T_REQUISITE_CODE "
	    + "SYSRES_CONST_USER_SERVER_NAME_REQUISITE_CODE "
	    + "SYSRES_CONST_USER_SERVICE_CATEGORY "
	    + "SYSRES_CONST_USER_SERVICE_CATEGORY_CODE "
	    + "SYSRES_CONST_USER_STATUS_ADMINISTRATOR_CODE "
	    + "SYSRES_CONST_USER_STATUS_ADMINISTRATOR_NAME "
	    + "SYSRES_CONST_USER_STATUS_DEVELOPER_CODE "
	    + "SYSRES_CONST_USER_STATUS_DEVELOPER_NAME "
	    + "SYSRES_CONST_USER_STATUS_DISABLED_CODE "
	    + "SYSRES_CONST_USER_STATUS_DISABLED_NAME "
	    + "SYSRES_CONST_USER_STATUS_SYSTEM_DEVELOPER_CODE "
	    + "SYSRES_CONST_USER_STATUS_USER_CODE "
	    + "SYSRES_CONST_USER_STATUS_USER_NAME "
	    + "SYSRES_CONST_USER_STATUS_USER_NAME_DEPRECATED "
	    + "SYSRES_CONST_USER_TYPE_FIELD_VALUE_USER "
	    + "SYSRES_CONST_USER_TYPE_REQUISITE_CODE "
	    + "SYSRES_CONST_USERS_CONTROLLER_REQUISITE_CODE "
	    + "SYSRES_CONST_USERS_IS_MAIN_SERVER_REQUISITE_CODE "
	    + "SYSRES_CONST_USERS_REFERENCE_CODE "
	    + "SYSRES_CONST_USERS_REGISTRATION_CERTIFICATES_ACTION_NAME "
	    + "SYSRES_CONST_USERS_REQUISITE_CODE "
	    + "SYSRES_CONST_USERS_SYSTEM_REQUISITE_CODE "
	    + "SYSRES_CONST_USERS_USER_ACCESS_RIGHTS_TYPR_REQUISITE_CODE "
	    + "SYSRES_CONST_USERS_USER_AUTHENTICATION_REQUISITE_CODE "
	    + "SYSRES_CONST_USERS_USER_COMPONENT_REQUISITE_CODE "
	    + "SYSRES_CONST_USERS_USER_GROUP_REQUISITE_CODE "
	    + "SYSRES_CONST_USERS_VIEW_CERTIFICATES_ACTION_NAME "
	    + "SYSRES_CONST_VIEW_DEFAULT_CODE "
	    + "SYSRES_CONST_VIEW_DEFAULT_NAME "
	    + "SYSRES_CONST_VIEWER_REQUISITE_CODE "
	    + "SYSRES_CONST_WAITING_BLOCK_DESCRIPTION "
	    + "SYSRES_CONST_WIZARD_FORM_LABEL_TEST_STRING  "
	    + "SYSRES_CONST_WIZARD_QUERY_PARAM_HEIGHT_ETALON_STRING "
	    + "SYSRES_CONST_WIZARD_REFERENCE_COMMENT_REQUISITE_CODE "
	    + "SYSRES_CONST_WORK_RULES_DESCRIPTION_REQUISITE_CODE "
	    + "SYSRES_CONST_WORK_TIME_CALENDAR_REFERENCE_CODE "
	    + "SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE "
	    + "SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE "
	    + "SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE_RUS "
	    + "SYSRES_CONST_WORK_WORKFLOW_SOFT_ROUTE_TYPE_VALUE_CODE_RUS "
	    + "SYSRES_CONST_WORKFLOW_ROUTE_TYPR_HARD "
	    + "SYSRES_CONST_WORKFLOW_ROUTE_TYPR_SOFT "
	    + "SYSRES_CONST_XML_ENCODING "
	    + "SYSRES_CONST_XREC_STAT_REQUISITE_CODE "
	    + "SYSRES_CONST_XRECID_FIELD_NAME "
	    + "SYSRES_CONST_YES "
	    + "SYSRES_CONST_YES_NO_2_REQUISITE_CODE "
	    + "SYSRES_CONST_YES_NO_REQUISITE_CODE "
	    + "SYSRES_CONST_YES_NO_T_REF_TYPE_REQUISITE_CODE "
	    + "SYSRES_CONST_YES_PICK_VALUE "
	    + "SYSRES_CONST_YES_VALUE ";

	  // Base constant
	  const base_constants = "CR FALSE nil NO_VALUE NULL TAB TRUE YES_VALUE ";

	  // Base group name
	  const base_group_name_constants =
	    "ADMINISTRATORS_GROUP_NAME CUSTOMIZERS_GROUP_NAME DEVELOPERS_GROUP_NAME SERVICE_USERS_GROUP_NAME ";

	  // Decision block properties
	  const decision_block_properties_constants =
	    "DECISION_BLOCK_FIRST_OPERAND_PROPERTY DECISION_BLOCK_NAME_PROPERTY DECISION_BLOCK_OPERATION_PROPERTY "
	    + "DECISION_BLOCK_RESULT_TYPE_PROPERTY DECISION_BLOCK_SECOND_OPERAND_PROPERTY ";

	  // File extension
	  const file_extension_constants =
	    "ANY_FILE_EXTENTION COMPRESSED_DOCUMENT_EXTENSION EXTENDED_DOCUMENT_EXTENSION "
	    + "SHORT_COMPRESSED_DOCUMENT_EXTENSION SHORT_EXTENDED_DOCUMENT_EXTENSION ";

	  // Job block properties
	  const job_block_properties_constants =
	    "JOB_BLOCK_ABORT_DEADLINE_PROPERTY "
	    + "JOB_BLOCK_AFTER_FINISH_EVENT "
	    + "JOB_BLOCK_AFTER_QUERY_PARAMETERS_EVENT "
	    + "JOB_BLOCK_ATTACHMENT_PROPERTY "
	    + "JOB_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY "
	    + "JOB_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY "
	    + "JOB_BLOCK_BEFORE_QUERY_PARAMETERS_EVENT "
	    + "JOB_BLOCK_BEFORE_START_EVENT "
	    + "JOB_BLOCK_CREATED_JOBS_PROPERTY "
	    + "JOB_BLOCK_DEADLINE_PROPERTY "
	    + "JOB_BLOCK_EXECUTION_RESULTS_PROPERTY "
	    + "JOB_BLOCK_IS_PARALLEL_PROPERTY "
	    + "JOB_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY "
	    + "JOB_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY "
	    + "JOB_BLOCK_JOB_TEXT_PROPERTY "
	    + "JOB_BLOCK_NAME_PROPERTY "
	    + "JOB_BLOCK_NEED_SIGN_ON_PERFORM_PROPERTY "
	    + "JOB_BLOCK_PERFORMER_PROPERTY "
	    + "JOB_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY "
	    + "JOB_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY "
	    + "JOB_BLOCK_SUBJECT_PROPERTY ";

	  // Language code
	  const language_code_constants = "ENGLISH_LANGUAGE_CODE RUSSIAN_LANGUAGE_CODE ";

	  // Launching external applications
	  const launching_external_applications_constants =
	    "smHidden smMaximized smMinimized smNormal wmNo wmYes ";

	  // Link kind
	  const link_kind_constants =
	    "COMPONENT_TOKEN_LINK_KIND "
	    + "DOCUMENT_LINK_KIND "
	    + "EDOCUMENT_LINK_KIND "
	    + "FOLDER_LINK_KIND "
	    + "JOB_LINK_KIND "
	    + "REFERENCE_LINK_KIND "
	    + "TASK_LINK_KIND ";

	  // Lock type
	  const lock_type_constants =
	    "COMPONENT_TOKEN_LOCK_TYPE EDOCUMENT_VERSION_LOCK_TYPE ";

	  // Monitor block properties
	  const monitor_block_properties_constants =
	    "MONITOR_BLOCK_AFTER_FINISH_EVENT "
	    + "MONITOR_BLOCK_BEFORE_START_EVENT "
	    + "MONITOR_BLOCK_DEADLINE_PROPERTY "
	    + "MONITOR_BLOCK_INTERVAL_PROPERTY "
	    + "MONITOR_BLOCK_INTERVAL_TYPE_PROPERTY "
	    + "MONITOR_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY "
	    + "MONITOR_BLOCK_NAME_PROPERTY "
	    + "MONITOR_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY "
	    + "MONITOR_BLOCK_SEARCH_SCRIPT_PROPERTY ";

	  // Notice block properties
	  const notice_block_properties_constants =
	    "NOTICE_BLOCK_AFTER_FINISH_EVENT "
	    + "NOTICE_BLOCK_ATTACHMENT_PROPERTY "
	    + "NOTICE_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY "
	    + "NOTICE_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY "
	    + "NOTICE_BLOCK_BEFORE_START_EVENT "
	    + "NOTICE_BLOCK_CREATED_NOTICES_PROPERTY "
	    + "NOTICE_BLOCK_DEADLINE_PROPERTY "
	    + "NOTICE_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY "
	    + "NOTICE_BLOCK_NAME_PROPERTY "
	    + "NOTICE_BLOCK_NOTICE_TEXT_PROPERTY "
	    + "NOTICE_BLOCK_PERFORMER_PROPERTY "
	    + "NOTICE_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY "
	    + "NOTICE_BLOCK_SUBJECT_PROPERTY ";

	  // Object events
	  const object_events_constants =
	    "dseAfterCancel "
	    + "dseAfterClose "
	    + "dseAfterDelete "
	    + "dseAfterDeleteOutOfTransaction "
	    + "dseAfterInsert "
	    + "dseAfterOpen "
	    + "dseAfterScroll "
	    + "dseAfterUpdate "
	    + "dseAfterUpdateOutOfTransaction "
	    + "dseBeforeCancel "
	    + "dseBeforeClose "
	    + "dseBeforeDelete "
	    + "dseBeforeDetailUpdate "
	    + "dseBeforeInsert "
	    + "dseBeforeOpen "
	    + "dseBeforeUpdate "
	    + "dseOnAnyRequisiteChange "
	    + "dseOnCloseRecord "
	    + "dseOnDeleteError "
	    + "dseOnOpenRecord "
	    + "dseOnPrepareUpdate "
	    + "dseOnUpdateError "
	    + "dseOnUpdateRatifiedRecord "
	    + "dseOnValidDelete "
	    + "dseOnValidUpdate "
	    + "reOnChange "
	    + "reOnChangeValues "
	    + "SELECTION_BEGIN_ROUTE_EVENT "
	    + "SELECTION_END_ROUTE_EVENT ";

	  // Object params
	  const object_params_constants =
	    "CURRENT_PERIOD_IS_REQUIRED "
	    + "PREVIOUS_CARD_TYPE_NAME "
	    + "SHOW_RECORD_PROPERTIES_FORM ";

	  // Other
	  const other_constants =
	    "ACCESS_RIGHTS_SETTING_DIALOG_CODE "
	    + "ADMINISTRATOR_USER_CODE "
	    + "ANALYTIC_REPORT_TYPE "
	    + "asrtHideLocal "
	    + "asrtHideRemote "
	    + "CALCULATED_ROLE_TYPE_CODE "
	    + "COMPONENTS_REFERENCE_DEVELOPER_VIEW_CODE "
	    + "DCTS_TEST_PROTOCOLS_FOLDER_PATH "
	    + "E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED "
	    + "E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED_BY_USER "
	    + "E_EDOC_VERSION_ALREDY_SIGNED "
	    + "E_EDOC_VERSION_ALREDY_SIGNED_BY_USER "
	    + "EDOC_TYPES_CODE_REQUISITE_FIELD_NAME "
	    + "EDOCUMENTS_ALIAS_NAME "
	    + "FILES_FOLDER_PATH "
	    + "FILTER_OPERANDS_DELIMITER "
	    + "FILTER_OPERATIONS_DELIMITER "
	    + "FORMCARD_NAME "
	    + "FORMLIST_NAME "
	    + "GET_EXTENDED_DOCUMENT_EXTENSION_CREATION_MODE "
	    + "GET_EXTENDED_DOCUMENT_EXTENSION_IMPORT_MODE "
	    + "INTEGRATED_REPORT_TYPE "
	    + "IS_BUILDER_APPLICATION_ROLE "
	    + "IS_BUILDER_APPLICATION_ROLE2 "
	    + "IS_BUILDER_USERS "
	    + "ISBSYSDEV "
	    + "LOG_FOLDER_PATH "
	    + "mbCancel "
	    + "mbNo "
	    + "mbNoToAll "
	    + "mbOK "
	    + "mbYes "
	    + "mbYesToAll "
	    + "MEMORY_DATASET_DESRIPTIONS_FILENAME "
	    + "mrNo "
	    + "mrNoToAll "
	    + "mrYes "
	    + "mrYesToAll "
	    + "MULTIPLE_SELECT_DIALOG_CODE "
	    + "NONOPERATING_RECORD_FLAG_FEMININE "
	    + "NONOPERATING_RECORD_FLAG_MASCULINE "
	    + "OPERATING_RECORD_FLAG_FEMININE "
	    + "OPERATING_RECORD_FLAG_MASCULINE "
	    + "PROFILING_SETTINGS_COMMON_SETTINGS_CODE_VALUE "
	    + "PROGRAM_INITIATED_LOOKUP_ACTION "
	    + "ratDelete "
	    + "ratEdit "
	    + "ratInsert "
	    + "REPORT_TYPE "
	    + "REQUIRED_PICK_VALUES_VARIABLE "
	    + "rmCard "
	    + "rmList "
	    + "SBRTE_PROGID_DEV "
	    + "SBRTE_PROGID_RELEASE "
	    + "STATIC_ROLE_TYPE_CODE "
	    + "SUPPRESS_EMPTY_TEMPLATE_CREATION "
	    + "SYSTEM_USER_CODE "
	    + "UPDATE_DIALOG_DATASET "
	    + "USED_IN_OBJECT_HINT_PARAM "
	    + "USER_INITIATED_LOOKUP_ACTION "
	    + "USER_NAME_FORMAT "
	    + "USER_SELECTION_RESTRICTIONS "
	    + "WORKFLOW_TEST_PROTOCOLS_FOLDER_PATH "
	    + "ELS_SUBTYPE_CONTROL_NAME "
	    + "ELS_FOLDER_KIND_CONTROL_NAME "
	    + "REPEAT_PROCESS_CURRENT_OBJECT_EXCEPTION_NAME ";

	  // Privileges
	  const privileges_constants =
	    "PRIVILEGE_COMPONENT_FULL_ACCESS "
	    + "PRIVILEGE_DEVELOPMENT_EXPORT "
	    + "PRIVILEGE_DEVELOPMENT_IMPORT "
	    + "PRIVILEGE_DOCUMENT_DELETE "
	    + "PRIVILEGE_ESD "
	    + "PRIVILEGE_FOLDER_DELETE "
	    + "PRIVILEGE_MANAGE_ACCESS_RIGHTS "
	    + "PRIVILEGE_MANAGE_REPLICATION "
	    + "PRIVILEGE_MANAGE_SESSION_SERVER "
	    + "PRIVILEGE_OBJECT_FULL_ACCESS "
	    + "PRIVILEGE_OBJECT_VIEW "
	    + "PRIVILEGE_RESERVE_LICENSE "
	    + "PRIVILEGE_SYSTEM_CUSTOMIZE "
	    + "PRIVILEGE_SYSTEM_DEVELOP "
	    + "PRIVILEGE_SYSTEM_INSTALL "
	    + "PRIVILEGE_TASK_DELETE "
	    + "PRIVILEGE_USER_PLUGIN_SETTINGS_CUSTOMIZE "
	    + "PRIVILEGES_PSEUDOREFERENCE_CODE ";

	  // Pseudoreference code
	  const pseudoreference_code_constants =
	    "ACCESS_TYPES_PSEUDOREFERENCE_CODE "
	    + "ALL_AVAILABLE_COMPONENTS_PSEUDOREFERENCE_CODE "
	    + "ALL_AVAILABLE_PRIVILEGES_PSEUDOREFERENCE_CODE "
	    + "ALL_REPLICATE_COMPONENTS_PSEUDOREFERENCE_CODE "
	    + "AVAILABLE_DEVELOPERS_COMPONENTS_PSEUDOREFERENCE_CODE "
	    + "COMPONENTS_PSEUDOREFERENCE_CODE "
	    + "FILTRATER_SETTINGS_CONFLICTS_PSEUDOREFERENCE_CODE "
	    + "GROUPS_PSEUDOREFERENCE_CODE "
	    + "RECEIVE_PROTOCOL_PSEUDOREFERENCE_CODE "
	    + "REFERENCE_REQUISITE_PSEUDOREFERENCE_CODE "
	    + "REFERENCE_REQUISITES_PSEUDOREFERENCE_CODE "
	    + "REFTYPES_PSEUDOREFERENCE_CODE "
	    + "REPLICATION_SEANCES_DIARY_PSEUDOREFERENCE_CODE "
	    + "SEND_PROTOCOL_PSEUDOREFERENCE_CODE "
	    + "SUBSTITUTES_PSEUDOREFERENCE_CODE "
	    + "SYSTEM_SETTINGS_PSEUDOREFERENCE_CODE "
	    + "UNITS_PSEUDOREFERENCE_CODE "
	    + "USERS_PSEUDOREFERENCE_CODE "
	    + "VIEWERS_PSEUDOREFERENCE_CODE ";

	  // Requisite ISBCertificateType values
	  const requisite_ISBCertificateType_values_constants =
	    "CERTIFICATE_TYPE_ENCRYPT "
	    + "CERTIFICATE_TYPE_SIGN "
	    + "CERTIFICATE_TYPE_SIGN_AND_ENCRYPT ";

	  // Requisite ISBEDocStorageType values
	  const requisite_ISBEDocStorageType_values_constants =
	    "STORAGE_TYPE_FILE "
	    + "STORAGE_TYPE_NAS_CIFS "
	    + "STORAGE_TYPE_SAPERION "
	    + "STORAGE_TYPE_SQL_SERVER ";

	  // Requisite CompType2 values
	  const requisite_compType2_values_constants =
	    "COMPTYPE2_REQUISITE_DOCUMENTS_VALUE "
	    + "COMPTYPE2_REQUISITE_TASKS_VALUE "
	    + "COMPTYPE2_REQUISITE_FOLDERS_VALUE "
	    + "COMPTYPE2_REQUISITE_REFERENCES_VALUE ";

	  // Requisite name
	  const requisite_name_constants =
	    "SYSREQ_CODE "
	    + "SYSREQ_COMPTYPE2 "
	    + "SYSREQ_CONST_AVAILABLE_FOR_WEB "
	    + "SYSREQ_CONST_COMMON_CODE "
	    + "SYSREQ_CONST_COMMON_VALUE "
	    + "SYSREQ_CONST_FIRM_CODE "
	    + "SYSREQ_CONST_FIRM_STATUS "
	    + "SYSREQ_CONST_FIRM_VALUE "
	    + "SYSREQ_CONST_SERVER_STATUS "
	    + "SYSREQ_CONTENTS "
	    + "SYSREQ_DATE_OPEN "
	    + "SYSREQ_DATE_CLOSE "
	    + "SYSREQ_DESCRIPTION "
	    + "SYSREQ_DESCRIPTION_LOCALIZE_ID "
	    + "SYSREQ_DOUBLE "
	    + "SYSREQ_EDOC_ACCESS_TYPE "
	    + "SYSREQ_EDOC_AUTHOR "
	    + "SYSREQ_EDOC_CREATED "
	    + "SYSREQ_EDOC_DELEGATE_RIGHTS_REQUISITE_CODE "
	    + "SYSREQ_EDOC_EDITOR "
	    + "SYSREQ_EDOC_ENCODE_TYPE "
	    + "SYSREQ_EDOC_ENCRYPTION_PLUGIN_NAME "
	    + "SYSREQ_EDOC_ENCRYPTION_PLUGIN_VERSION "
	    + "SYSREQ_EDOC_EXPORT_DATE "
	    + "SYSREQ_EDOC_EXPORTER "
	    + "SYSREQ_EDOC_KIND "
	    + "SYSREQ_EDOC_LIFE_STAGE_NAME "
	    + "SYSREQ_EDOC_LOCKED_FOR_SERVER_CODE "
	    + "SYSREQ_EDOC_MODIFIED "
	    + "SYSREQ_EDOC_NAME "
	    + "SYSREQ_EDOC_NOTE "
	    + "SYSREQ_EDOC_QUALIFIED_ID "
	    + "SYSREQ_EDOC_SESSION_KEY "
	    + "SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_NAME "
	    + "SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_VERSION "
	    + "SYSREQ_EDOC_SIGNATURE_TYPE "
	    + "SYSREQ_EDOC_SIGNED "
	    + "SYSREQ_EDOC_STORAGE "
	    + "SYSREQ_EDOC_STORAGES_ARCHIVE_STORAGE "
	    + "SYSREQ_EDOC_STORAGES_CHECK_RIGHTS "
	    + "SYSREQ_EDOC_STORAGES_COMPUTER_NAME "
	    + "SYSREQ_EDOC_STORAGES_EDIT_IN_STORAGE "
	    + "SYSREQ_EDOC_STORAGES_EXECUTIVE_STORAGE "
	    + "SYSREQ_EDOC_STORAGES_FUNCTION "
	    + "SYSREQ_EDOC_STORAGES_INITIALIZED "
	    + "SYSREQ_EDOC_STORAGES_LOCAL_PATH "
	    + "SYSREQ_EDOC_STORAGES_SAPERION_DATABASE_NAME "
	    + "SYSREQ_EDOC_STORAGES_SEARCH_BY_TEXT "
	    + "SYSREQ_EDOC_STORAGES_SERVER_NAME "
	    + "SYSREQ_EDOC_STORAGES_SHARED_SOURCE_NAME "
	    + "SYSREQ_EDOC_STORAGES_TYPE "
	    + "SYSREQ_EDOC_TEXT_MODIFIED "
	    + "SYSREQ_EDOC_TYPE_ACT_CODE "
	    + "SYSREQ_EDOC_TYPE_ACT_DESCRIPTION "
	    + "SYSREQ_EDOC_TYPE_ACT_DESCRIPTION_LOCALIZE_ID "
	    + "SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE "
	    + "SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE_EXISTS "
	    + "SYSREQ_EDOC_TYPE_ACT_SECTION "
	    + "SYSREQ_EDOC_TYPE_ADD_PARAMS "
	    + "SYSREQ_EDOC_TYPE_COMMENT "
	    + "SYSREQ_EDOC_TYPE_EVENT_TEXT "
	    + "SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR "
	    + "SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID "
	    + "SYSREQ_EDOC_TYPE_NAME_LOCALIZE_ID "
	    + "SYSREQ_EDOC_TYPE_NUMERATION_METHOD "
	    + "SYSREQ_EDOC_TYPE_PSEUDO_REQUISITE_CODE "
	    + "SYSREQ_EDOC_TYPE_REQ_CODE "
	    + "SYSREQ_EDOC_TYPE_REQ_DESCRIPTION "
	    + "SYSREQ_EDOC_TYPE_REQ_DESCRIPTION_LOCALIZE_ID "
	    + "SYSREQ_EDOC_TYPE_REQ_IS_LEADING "
	    + "SYSREQ_EDOC_TYPE_REQ_IS_REQUIRED "
	    + "SYSREQ_EDOC_TYPE_REQ_NUMBER "
	    + "SYSREQ_EDOC_TYPE_REQ_ON_CHANGE "
	    + "SYSREQ_EDOC_TYPE_REQ_ON_CHANGE_EXISTS "
	    + "SYSREQ_EDOC_TYPE_REQ_ON_SELECT "
	    + "SYSREQ_EDOC_TYPE_REQ_ON_SELECT_KIND "
	    + "SYSREQ_EDOC_TYPE_REQ_SECTION "
	    + "SYSREQ_EDOC_TYPE_VIEW_CARD "
	    + "SYSREQ_EDOC_TYPE_VIEW_CODE "
	    + "SYSREQ_EDOC_TYPE_VIEW_COMMENT "
	    + "SYSREQ_EDOC_TYPE_VIEW_IS_MAIN "
	    + "SYSREQ_EDOC_TYPE_VIEW_NAME "
	    + "SYSREQ_EDOC_TYPE_VIEW_NAME_LOCALIZE_ID "
	    + "SYSREQ_EDOC_VERSION_AUTHOR "
	    + "SYSREQ_EDOC_VERSION_CRC "
	    + "SYSREQ_EDOC_VERSION_DATA "
	    + "SYSREQ_EDOC_VERSION_EDITOR "
	    + "SYSREQ_EDOC_VERSION_EXPORT_DATE "
	    + "SYSREQ_EDOC_VERSION_EXPORTER "
	    + "SYSREQ_EDOC_VERSION_HIDDEN "
	    + "SYSREQ_EDOC_VERSION_LIFE_STAGE "
	    + "SYSREQ_EDOC_VERSION_MODIFIED "
	    + "SYSREQ_EDOC_VERSION_NOTE "
	    + "SYSREQ_EDOC_VERSION_SIGNATURE_TYPE "
	    + "SYSREQ_EDOC_VERSION_SIGNED "
	    + "SYSREQ_EDOC_VERSION_SIZE "
	    + "SYSREQ_EDOC_VERSION_SOURCE "
	    + "SYSREQ_EDOC_VERSION_TEXT_MODIFIED "
	    + "SYSREQ_EDOCKIND_DEFAULT_VERSION_STATE_CODE "
	    + "SYSREQ_FOLDER_KIND "
	    + "SYSREQ_FUNC_CATEGORY "
	    + "SYSREQ_FUNC_COMMENT "
	    + "SYSREQ_FUNC_GROUP "
	    + "SYSREQ_FUNC_GROUP_COMMENT "
	    + "SYSREQ_FUNC_GROUP_NUMBER "
	    + "SYSREQ_FUNC_HELP "
	    + "SYSREQ_FUNC_PARAM_DEF_VALUE "
	    + "SYSREQ_FUNC_PARAM_IDENT "
	    + "SYSREQ_FUNC_PARAM_NUMBER "
	    + "SYSREQ_FUNC_PARAM_TYPE "
	    + "SYSREQ_FUNC_TEXT "
	    + "SYSREQ_GROUP_CATEGORY "
	    + "SYSREQ_ID "
	    + "SYSREQ_LAST_UPDATE "
	    + "SYSREQ_LEADER_REFERENCE "
	    + "SYSREQ_LINE_NUMBER "
	    + "SYSREQ_MAIN_RECORD_ID "
	    + "SYSREQ_NAME "
	    + "SYSREQ_NAME_LOCALIZE_ID "
	    + "SYSREQ_NOTE "
	    + "SYSREQ_ORIGINAL_RECORD "
	    + "SYSREQ_OUR_FIRM "
	    + "SYSREQ_PROFILING_SETTINGS_BATCH_LOGING "
	    + "SYSREQ_PROFILING_SETTINGS_BATCH_SIZE "
	    + "SYSREQ_PROFILING_SETTINGS_PROFILING_ENABLED "
	    + "SYSREQ_PROFILING_SETTINGS_SQL_PROFILING_ENABLED "
	    + "SYSREQ_PROFILING_SETTINGS_START_LOGGED "
	    + "SYSREQ_RECORD_STATUS "
	    + "SYSREQ_REF_REQ_FIELD_NAME "
	    + "SYSREQ_REF_REQ_FORMAT "
	    + "SYSREQ_REF_REQ_GENERATED "
	    + "SYSREQ_REF_REQ_LENGTH "
	    + "SYSREQ_REF_REQ_PRECISION "
	    + "SYSREQ_REF_REQ_REFERENCE "
	    + "SYSREQ_REF_REQ_SECTION "
	    + "SYSREQ_REF_REQ_STORED "
	    + "SYSREQ_REF_REQ_TOKENS "
	    + "SYSREQ_REF_REQ_TYPE "
	    + "SYSREQ_REF_REQ_VIEW "
	    + "SYSREQ_REF_TYPE_ACT_CODE "
	    + "SYSREQ_REF_TYPE_ACT_DESCRIPTION "
	    + "SYSREQ_REF_TYPE_ACT_DESCRIPTION_LOCALIZE_ID "
	    + "SYSREQ_REF_TYPE_ACT_ON_EXECUTE "
	    + "SYSREQ_REF_TYPE_ACT_ON_EXECUTE_EXISTS "
	    + "SYSREQ_REF_TYPE_ACT_SECTION "
	    + "SYSREQ_REF_TYPE_ADD_PARAMS "
	    + "SYSREQ_REF_TYPE_COMMENT "
	    + "SYSREQ_REF_TYPE_COMMON_SETTINGS "
	    + "SYSREQ_REF_TYPE_DISPLAY_REQUISITE_NAME "
	    + "SYSREQ_REF_TYPE_EVENT_TEXT "
	    + "SYSREQ_REF_TYPE_MAIN_LEADING_REF "
	    + "SYSREQ_REF_TYPE_NAME_IN_SINGULAR "
	    + "SYSREQ_REF_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID "
	    + "SYSREQ_REF_TYPE_NAME_LOCALIZE_ID "
	    + "SYSREQ_REF_TYPE_NUMERATION_METHOD "
	    + "SYSREQ_REF_TYPE_REQ_CODE "
	    + "SYSREQ_REF_TYPE_REQ_DESCRIPTION "
	    + "SYSREQ_REF_TYPE_REQ_DESCRIPTION_LOCALIZE_ID "
	    + "SYSREQ_REF_TYPE_REQ_IS_CONTROL "
	    + "SYSREQ_REF_TYPE_REQ_IS_FILTER "
	    + "SYSREQ_REF_TYPE_REQ_IS_LEADING "
	    + "SYSREQ_REF_TYPE_REQ_IS_REQUIRED "
	    + "SYSREQ_REF_TYPE_REQ_NUMBER "
	    + "SYSREQ_REF_TYPE_REQ_ON_CHANGE "
	    + "SYSREQ_REF_TYPE_REQ_ON_CHANGE_EXISTS "
	    + "SYSREQ_REF_TYPE_REQ_ON_SELECT "
	    + "SYSREQ_REF_TYPE_REQ_ON_SELECT_KIND "
	    + "SYSREQ_REF_TYPE_REQ_SECTION "
	    + "SYSREQ_REF_TYPE_VIEW_CARD "
	    + "SYSREQ_REF_TYPE_VIEW_CODE "
	    + "SYSREQ_REF_TYPE_VIEW_COMMENT "
	    + "SYSREQ_REF_TYPE_VIEW_IS_MAIN "
	    + "SYSREQ_REF_TYPE_VIEW_NAME "
	    + "SYSREQ_REF_TYPE_VIEW_NAME_LOCALIZE_ID "
	    + "SYSREQ_REFERENCE_TYPE_ID "
	    + "SYSREQ_STATE "
	    + "SYSREQ_STATЕ "
	    + "SYSREQ_SYSTEM_SETTINGS_VALUE "
	    + "SYSREQ_TYPE "
	    + "SYSREQ_UNIT "
	    + "SYSREQ_UNIT_ID "
	    + "SYSREQ_USER_GROUPS_GROUP_FULL_NAME "
	    + "SYSREQ_USER_GROUPS_GROUP_NAME "
	    + "SYSREQ_USER_GROUPS_GROUP_SERVER_NAME "
	    + "SYSREQ_USERS_ACCESS_RIGHTS "
	    + "SYSREQ_USERS_AUTHENTICATION "
	    + "SYSREQ_USERS_CATEGORY "
	    + "SYSREQ_USERS_COMPONENT "
	    + "SYSREQ_USERS_COMPONENT_USER_IS_PUBLIC "
	    + "SYSREQ_USERS_DOMAIN "
	    + "SYSREQ_USERS_FULL_USER_NAME "
	    + "SYSREQ_USERS_GROUP "
	    + "SYSREQ_USERS_IS_MAIN_SERVER "
	    + "SYSREQ_USERS_LOGIN "
	    + "SYSREQ_USERS_REFERENCE_USER_IS_PUBLIC "
	    + "SYSREQ_USERS_STATUS "
	    + "SYSREQ_USERS_USER_CERTIFICATE "
	    + "SYSREQ_USERS_USER_CERTIFICATE_INFO "
	    + "SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_NAME "
	    + "SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_VERSION "
	    + "SYSREQ_USERS_USER_CERTIFICATE_STATE "
	    + "SYSREQ_USERS_USER_CERTIFICATE_SUBJECT_NAME "
	    + "SYSREQ_USERS_USER_CERTIFICATE_THUMBPRINT "
	    + "SYSREQ_USERS_USER_DEFAULT_CERTIFICATE "
	    + "SYSREQ_USERS_USER_DESCRIPTION "
	    + "SYSREQ_USERS_USER_GLOBAL_NAME "
	    + "SYSREQ_USERS_USER_LOGIN "
	    + "SYSREQ_USERS_USER_MAIN_SERVER "
	    + "SYSREQ_USERS_USER_TYPE "
	    + "SYSREQ_WORK_RULES_FOLDER_ID ";

	  // Result
	  const result_constants = "RESULT_VAR_NAME RESULT_VAR_NAME_ENG ";

	  // Rule identification
	  const rule_identification_constants =
	    "AUTO_NUMERATION_RULE_ID "
	    + "CANT_CHANGE_ID_REQUISITE_RULE_ID "
	    + "CANT_CHANGE_OURFIRM_REQUISITE_RULE_ID "
	    + "CHECK_CHANGING_REFERENCE_RECORD_USE_RULE_ID "
	    + "CHECK_CODE_REQUISITE_RULE_ID "
	    + "CHECK_DELETING_REFERENCE_RECORD_USE_RULE_ID "
	    + "CHECK_FILTRATER_CHANGES_RULE_ID "
	    + "CHECK_RECORD_INTERVAL_RULE_ID "
	    + "CHECK_REFERENCE_INTERVAL_RULE_ID "
	    + "CHECK_REQUIRED_DATA_FULLNESS_RULE_ID "
	    + "CHECK_REQUIRED_REQUISITES_FULLNESS_RULE_ID "
	    + "MAKE_RECORD_UNRATIFIED_RULE_ID "
	    + "RESTORE_AUTO_NUMERATION_RULE_ID "
	    + "SET_FIRM_CONTEXT_FROM_RECORD_RULE_ID "
	    + "SET_FIRST_RECORD_IN_LIST_FORM_RULE_ID "
	    + "SET_IDSPS_VALUE_RULE_ID "
	    + "SET_NEXT_CODE_VALUE_RULE_ID "
	    + "SET_OURFIRM_BOUNDS_RULE_ID "
	    + "SET_OURFIRM_REQUISITE_RULE_ID ";

	  // Script block properties
	  const script_block_properties_constants =
	    "SCRIPT_BLOCK_AFTER_FINISH_EVENT "
	    + "SCRIPT_BLOCK_BEFORE_START_EVENT "
	    + "SCRIPT_BLOCK_EXECUTION_RESULTS_PROPERTY "
	    + "SCRIPT_BLOCK_NAME_PROPERTY "
	    + "SCRIPT_BLOCK_SCRIPT_PROPERTY ";

	  // Subtask block properties
	  const subtask_block_properties_constants =
	    "SUBTASK_BLOCK_ABORT_DEADLINE_PROPERTY "
	    + "SUBTASK_BLOCK_AFTER_FINISH_EVENT "
	    + "SUBTASK_BLOCK_ASSIGN_PARAMS_EVENT "
	    + "SUBTASK_BLOCK_ATTACHMENTS_PROPERTY "
	    + "SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY "
	    + "SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY "
	    + "SUBTASK_BLOCK_BEFORE_START_EVENT "
	    + "SUBTASK_BLOCK_CREATED_TASK_PROPERTY "
	    + "SUBTASK_BLOCK_CREATION_EVENT "
	    + "SUBTASK_BLOCK_DEADLINE_PROPERTY "
	    + "SUBTASK_BLOCK_IMPORTANCE_PROPERTY "
	    + "SUBTASK_BLOCK_INITIATOR_PROPERTY "
	    + "SUBTASK_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY "
	    + "SUBTASK_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY "
	    + "SUBTASK_BLOCK_JOBS_TYPE_PROPERTY "
	    + "SUBTASK_BLOCK_NAME_PROPERTY "
	    + "SUBTASK_BLOCK_PARALLEL_ROUTE_PROPERTY "
	    + "SUBTASK_BLOCK_PERFORMERS_PROPERTY "
	    + "SUBTASK_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY "
	    + "SUBTASK_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY "
	    + "SUBTASK_BLOCK_REQUIRE_SIGN_PROPERTY "
	    + "SUBTASK_BLOCK_STANDARD_ROUTE_PROPERTY "
	    + "SUBTASK_BLOCK_START_EVENT "
	    + "SUBTASK_BLOCK_STEP_CONTROL_PROPERTY "
	    + "SUBTASK_BLOCK_SUBJECT_PROPERTY "
	    + "SUBTASK_BLOCK_TASK_CONTROL_PROPERTY "
	    + "SUBTASK_BLOCK_TEXT_PROPERTY "
	    + "SUBTASK_BLOCK_UNLOCK_ATTACHMENTS_ON_STOP_PROPERTY "
	    + "SUBTASK_BLOCK_USE_STANDARD_ROUTE_PROPERTY "
	    + "SUBTASK_BLOCK_WAIT_FOR_TASK_COMPLETE_PROPERTY ";

	  // System component
	  const system_component_constants =
	    "SYSCOMP_CONTROL_JOBS "
	    + "SYSCOMP_FOLDERS "
	    + "SYSCOMP_JOBS "
	    + "SYSCOMP_NOTICES "
	    + "SYSCOMP_TASKS ";

	  // System dialogs
	  const system_dialogs_constants =
	    "SYSDLG_CREATE_EDOCUMENT "
	    + "SYSDLG_CREATE_EDOCUMENT_VERSION "
	    + "SYSDLG_CURRENT_PERIOD "
	    + "SYSDLG_EDIT_FUNCTION_HELP "
	    + "SYSDLG_EDOCUMENT_KINDS_FOR_TEMPLATE "
	    + "SYSDLG_EXPORT_MULTIPLE_EDOCUMENTS "
	    + "SYSDLG_EXPORT_SINGLE_EDOCUMENT "
	    + "SYSDLG_IMPORT_EDOCUMENT "
	    + "SYSDLG_MULTIPLE_SELECT "
	    + "SYSDLG_SETUP_ACCESS_RIGHTS "
	    + "SYSDLG_SETUP_DEFAULT_RIGHTS "
	    + "SYSDLG_SETUP_FILTER_CONDITION "
	    + "SYSDLG_SETUP_SIGN_RIGHTS "
	    + "SYSDLG_SETUP_TASK_OBSERVERS "
	    + "SYSDLG_SETUP_TASK_ROUTE "
	    + "SYSDLG_SETUP_USERS_LIST "
	    + "SYSDLG_SIGN_EDOCUMENT "
	    + "SYSDLG_SIGN_MULTIPLE_EDOCUMENTS ";

	  // System reference names
	  const system_reference_names_constants =
	    "SYSREF_ACCESS_RIGHTS_TYPES "
	    + "SYSREF_ADMINISTRATION_HISTORY "
	    + "SYSREF_ALL_AVAILABLE_COMPONENTS "
	    + "SYSREF_ALL_AVAILABLE_PRIVILEGES "
	    + "SYSREF_ALL_REPLICATING_COMPONENTS "
	    + "SYSREF_AVAILABLE_DEVELOPERS_COMPONENTS "
	    + "SYSREF_CALENDAR_EVENTS "
	    + "SYSREF_COMPONENT_TOKEN_HISTORY "
	    + "SYSREF_COMPONENT_TOKENS "
	    + "SYSREF_COMPONENTS "
	    + "SYSREF_CONSTANTS "
	    + "SYSREF_DATA_RECEIVE_PROTOCOL "
	    + "SYSREF_DATA_SEND_PROTOCOL "
	    + "SYSREF_DIALOGS "
	    + "SYSREF_DIALOGS_REQUISITES "
	    + "SYSREF_EDITORS "
	    + "SYSREF_EDOC_CARDS "
	    + "SYSREF_EDOC_TYPES "
	    + "SYSREF_EDOCUMENT_CARD_REQUISITES "
	    + "SYSREF_EDOCUMENT_CARD_TYPES "
	    + "SYSREF_EDOCUMENT_CARD_TYPES_REFERENCE "
	    + "SYSREF_EDOCUMENT_CARDS "
	    + "SYSREF_EDOCUMENT_HISTORY "
	    + "SYSREF_EDOCUMENT_KINDS "
	    + "SYSREF_EDOCUMENT_REQUISITES "
	    + "SYSREF_EDOCUMENT_SIGNATURES "
	    + "SYSREF_EDOCUMENT_TEMPLATES "
	    + "SYSREF_EDOCUMENT_TEXT_STORAGES "
	    + "SYSREF_EDOCUMENT_VIEWS "
	    + "SYSREF_FILTERER_SETUP_CONFLICTS "
	    + "SYSREF_FILTRATER_SETTING_CONFLICTS "
	    + "SYSREF_FOLDER_HISTORY "
	    + "SYSREF_FOLDERS "
	    + "SYSREF_FUNCTION_GROUPS "
	    + "SYSREF_FUNCTION_PARAMS "
	    + "SYSREF_FUNCTIONS "
	    + "SYSREF_JOB_HISTORY "
	    + "SYSREF_LINKS "
	    + "SYSREF_LOCALIZATION_DICTIONARY "
	    + "SYSREF_LOCALIZATION_LANGUAGES "
	    + "SYSREF_MODULES "
	    + "SYSREF_PRIVILEGES "
	    + "SYSREF_RECORD_HISTORY "
	    + "SYSREF_REFERENCE_REQUISITES "
	    + "SYSREF_REFERENCE_TYPE_VIEWS "
	    + "SYSREF_REFERENCE_TYPES "
	    + "SYSREF_REFERENCES "
	    + "SYSREF_REFERENCES_REQUISITES "
	    + "SYSREF_REMOTE_SERVERS "
	    + "SYSREF_REPLICATION_SESSIONS_LOG "
	    + "SYSREF_REPLICATION_SESSIONS_PROTOCOL "
	    + "SYSREF_REPORTS "
	    + "SYSREF_ROLES "
	    + "SYSREF_ROUTE_BLOCK_GROUPS "
	    + "SYSREF_ROUTE_BLOCKS "
	    + "SYSREF_SCRIPTS "
	    + "SYSREF_SEARCHES "
	    + "SYSREF_SERVER_EVENTS "
	    + "SYSREF_SERVER_EVENTS_HISTORY "
	    + "SYSREF_STANDARD_ROUTE_GROUPS "
	    + "SYSREF_STANDARD_ROUTES "
	    + "SYSREF_STATUSES "
	    + "SYSREF_SYSTEM_SETTINGS "
	    + "SYSREF_TASK_HISTORY "
	    + "SYSREF_TASK_KIND_GROUPS "
	    + "SYSREF_TASK_KINDS "
	    + "SYSREF_TASK_RIGHTS "
	    + "SYSREF_TASK_SIGNATURES "
	    + "SYSREF_TASKS "
	    + "SYSREF_UNITS "
	    + "SYSREF_USER_GROUPS "
	    + "SYSREF_USER_GROUPS_REFERENCE "
	    + "SYSREF_USER_SUBSTITUTION "
	    + "SYSREF_USERS "
	    + "SYSREF_USERS_REFERENCE "
	    + "SYSREF_VIEWERS "
	    + "SYSREF_WORKING_TIME_CALENDARS ";

	  // Table name
	  const table_name_constants =
	    "ACCESS_RIGHTS_TABLE_NAME "
	    + "EDMS_ACCESS_TABLE_NAME "
	    + "EDOC_TYPES_TABLE_NAME ";

	  // Test
	  const test_constants =
	    "TEST_DEV_DB_NAME "
	    + "TEST_DEV_SYSTEM_CODE "
	    + "TEST_EDMS_DB_NAME "
	    + "TEST_EDMS_MAIN_CODE "
	    + "TEST_EDMS_MAIN_DB_NAME "
	    + "TEST_EDMS_SECOND_CODE "
	    + "TEST_EDMS_SECOND_DB_NAME "
	    + "TEST_EDMS_SYSTEM_CODE "
	    + "TEST_ISB5_MAIN_CODE "
	    + "TEST_ISB5_SECOND_CODE "
	    + "TEST_SQL_SERVER_2005_NAME "
	    + "TEST_SQL_SERVER_NAME ";

	  // Using the dialog windows
	  const using_the_dialog_windows_constants =
	    "ATTENTION_CAPTION "
	    + "cbsCommandLinks "
	    + "cbsDefault "
	    + "CONFIRMATION_CAPTION "
	    + "ERROR_CAPTION "
	    + "INFORMATION_CAPTION "
	    + "mrCancel "
	    + "mrOk ";

	  // Using the document
	  const using_the_document_constants =
	    "EDOC_VERSION_ACTIVE_STAGE_CODE "
	    + "EDOC_VERSION_DESIGN_STAGE_CODE "
	    + "EDOC_VERSION_OBSOLETE_STAGE_CODE ";

	  // Using the EA and encryption
	  const using_the_EA_and_encryption_constants =
	    "cpDataEnciphermentEnabled "
	    + "cpDigitalSignatureEnabled "
	    + "cpID "
	    + "cpIssuer "
	    + "cpPluginVersion "
	    + "cpSerial "
	    + "cpSubjectName "
	    + "cpSubjSimpleName "
	    + "cpValidFromDate "
	    + "cpValidToDate ";

	  // Using the ISBL-editor
	  const using_the_ISBL_editor_constants =
	    "ISBL_SYNTAX " + "NO_SYNTAX " + "XML_SYNTAX ";

	  // Wait block properties
	  const wait_block_properties_constants =
	    "WAIT_BLOCK_AFTER_FINISH_EVENT "
	    + "WAIT_BLOCK_BEFORE_START_EVENT "
	    + "WAIT_BLOCK_DEADLINE_PROPERTY "
	    + "WAIT_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY "
	    + "WAIT_BLOCK_NAME_PROPERTY "
	    + "WAIT_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY ";

	  // SYSRES Common
	  const sysres_common_constants =
	    "SYSRES_COMMON "
	    + "SYSRES_CONST "
	    + "SYSRES_MBFUNC "
	    + "SYSRES_SBDATA "
	    + "SYSRES_SBGUI "
	    + "SYSRES_SBINTF "
	    + "SYSRES_SBREFDSC "
	    + "SYSRES_SQLERRORS "
	    + "SYSRES_SYSCOMP ";

	  // Константы ==> built_in
	  const CONSTANTS =
	    sysres_constants
	    + base_constants
	    + base_group_name_constants
	    + decision_block_properties_constants
	    + file_extension_constants
	    + job_block_properties_constants
	    + language_code_constants
	    + launching_external_applications_constants
	    + link_kind_constants
	    + lock_type_constants
	    + monitor_block_properties_constants
	    + notice_block_properties_constants
	    + object_events_constants
	    + object_params_constants
	    + other_constants
	    + privileges_constants
	    + pseudoreference_code_constants
	    + requisite_ISBCertificateType_values_constants
	    + requisite_ISBEDocStorageType_values_constants
	    + requisite_compType2_values_constants
	    + requisite_name_constants
	    + result_constants
	    + rule_identification_constants
	    + script_block_properties_constants
	    + subtask_block_properties_constants
	    + system_component_constants
	    + system_dialogs_constants
	    + system_reference_names_constants
	    + table_name_constants
	    + test_constants
	    + using_the_dialog_windows_constants
	    + using_the_document_constants
	    + using_the_EA_and_encryption_constants
	    + using_the_ISBL_editor_constants
	    + wait_block_properties_constants
	    + sysres_common_constants;

	  // enum TAccountType
	  const TAccountType = "atUser atGroup atRole ";

	  // enum TActionEnabledMode
	  const TActionEnabledMode =
	    "aemEnabledAlways "
	    + "aemDisabledAlways "
	    + "aemEnabledOnBrowse "
	    + "aemEnabledOnEdit "
	    + "aemDisabledOnBrowseEmpty ";

	  // enum TAddPosition
	  const TAddPosition = "apBegin apEnd ";

	  // enum TAlignment
	  const TAlignment = "alLeft alRight ";

	  // enum TAreaShowMode
	  const TAreaShowMode =
	    "asmNever "
	    + "asmNoButCustomize "
	    + "asmAsLastTime "
	    + "asmYesButCustomize "
	    + "asmAlways ";

	  // enum TCertificateInvalidationReason
	  const TCertificateInvalidationReason = "cirCommon cirRevoked ";

	  // enum TCertificateType
	  const TCertificateType = "ctSignature ctEncode ctSignatureEncode ";

	  // enum TCheckListBoxItemState
	  const TCheckListBoxItemState = "clbUnchecked clbChecked clbGrayed ";

	  // enum TCloseOnEsc
	  const TCloseOnEsc = "ceISB ceAlways ceNever ";

	  // enum TCompType
	  const TCompType =
	    "ctDocument "
	    + "ctReference "
	    + "ctScript "
	    + "ctUnknown "
	    + "ctReport "
	    + "ctDialog "
	    + "ctFunction "
	    + "ctFolder "
	    + "ctEDocument "
	    + "ctTask "
	    + "ctJob "
	    + "ctNotice "
	    + "ctControlJob ";

	  // enum TConditionFormat
	  const TConditionFormat = "cfInternal cfDisplay ";

	  // enum TConnectionIntent
	  const TConnectionIntent = "ciUnspecified ciWrite ciRead ";

	  // enum TContentKind
	  const TContentKind =
	    "ckFolder "
	    + "ckEDocument "
	    + "ckTask "
	    + "ckJob "
	    + "ckComponentToken "
	    + "ckAny "
	    + "ckReference "
	    + "ckScript "
	    + "ckReport "
	    + "ckDialog ";

	  // enum TControlType
	  const TControlType =
	    "ctISBLEditor "
	    + "ctBevel "
	    + "ctButton "
	    + "ctCheckListBox "
	    + "ctComboBox "
	    + "ctComboEdit "
	    + "ctGrid "
	    + "ctDBCheckBox "
	    + "ctDBComboBox "
	    + "ctDBEdit "
	    + "ctDBEllipsis "
	    + "ctDBMemo "
	    + "ctDBNavigator "
	    + "ctDBRadioGroup "
	    + "ctDBStatusLabel "
	    + "ctEdit "
	    + "ctGroupBox "
	    + "ctInplaceHint "
	    + "ctMemo "
	    + "ctPanel "
	    + "ctListBox "
	    + "ctRadioButton "
	    + "ctRichEdit "
	    + "ctTabSheet "
	    + "ctWebBrowser "
	    + "ctImage "
	    + "ctHyperLink "
	    + "ctLabel "
	    + "ctDBMultiEllipsis "
	    + "ctRibbon "
	    + "ctRichView "
	    + "ctInnerPanel "
	    + "ctPanelGroup "
	    + "ctBitButton ";

	  // enum TCriterionContentType
	  const TCriterionContentType =
	    "cctDate "
	    + "cctInteger "
	    + "cctNumeric "
	    + "cctPick "
	    + "cctReference "
	    + "cctString "
	    + "cctText ";

	  // enum TCultureType
	  const TCultureType = "cltInternal cltPrimary cltGUI ";

	  // enum TDataSetEventType
	  const TDataSetEventType =
	    "dseBeforeOpen "
	    + "dseAfterOpen "
	    + "dseBeforeClose "
	    + "dseAfterClose "
	    + "dseOnValidDelete "
	    + "dseBeforeDelete "
	    + "dseAfterDelete "
	    + "dseAfterDeleteOutOfTransaction "
	    + "dseOnDeleteError "
	    + "dseBeforeInsert "
	    + "dseAfterInsert "
	    + "dseOnValidUpdate "
	    + "dseBeforeUpdate "
	    + "dseOnUpdateRatifiedRecord "
	    + "dseAfterUpdate "
	    + "dseAfterUpdateOutOfTransaction "
	    + "dseOnUpdateError "
	    + "dseAfterScroll "
	    + "dseOnOpenRecord "
	    + "dseOnCloseRecord "
	    + "dseBeforeCancel "
	    + "dseAfterCancel "
	    + "dseOnUpdateDeadlockError "
	    + "dseBeforeDetailUpdate "
	    + "dseOnPrepareUpdate "
	    + "dseOnAnyRequisiteChange ";

	  // enum TDataSetState
	  const TDataSetState = "dssEdit dssInsert dssBrowse dssInActive ";

	  // enum TDateFormatType
	  const TDateFormatType = "dftDate dftShortDate dftDateTime dftTimeStamp ";

	  // enum TDateOffsetType
	  const TDateOffsetType = "dotDays dotHours dotMinutes dotSeconds ";

	  // enum TDateTimeKind
	  const TDateTimeKind = "dtkndLocal dtkndUTC ";

	  // enum TDeaAccessRights
	  const TDeaAccessRights = "arNone arView arEdit arFull ";

	  // enum TDocumentDefaultAction
	  const TDocumentDefaultAction = "ddaView ddaEdit ";

	  // enum TEditMode
	  const TEditMode =
	    "emLock "
	    + "emEdit "
	    + "emSign "
	    + "emExportWithLock "
	    + "emImportWithUnlock "
	    + "emChangeVersionNote "
	    + "emOpenForModify "
	    + "emChangeLifeStage "
	    + "emDelete "
	    + "emCreateVersion "
	    + "emImport "
	    + "emUnlockExportedWithLock "
	    + "emStart "
	    + "emAbort "
	    + "emReInit "
	    + "emMarkAsReaded "
	    + "emMarkAsUnreaded "
	    + "emPerform "
	    + "emAccept "
	    + "emResume "
	    + "emChangeRights "
	    + "emEditRoute "
	    + "emEditObserver "
	    + "emRecoveryFromLocalCopy "
	    + "emChangeWorkAccessType "
	    + "emChangeEncodeTypeToCertificate "
	    + "emChangeEncodeTypeToPassword "
	    + "emChangeEncodeTypeToNone "
	    + "emChangeEncodeTypeToCertificatePassword "
	    + "emChangeStandardRoute "
	    + "emGetText "
	    + "emOpenForView "
	    + "emMoveToStorage "
	    + "emCreateObject "
	    + "emChangeVersionHidden "
	    + "emDeleteVersion "
	    + "emChangeLifeCycleStage "
	    + "emApprovingSign "
	    + "emExport "
	    + "emContinue "
	    + "emLockFromEdit "
	    + "emUnLockForEdit "
	    + "emLockForServer "
	    + "emUnlockFromServer "
	    + "emDelegateAccessRights "
	    + "emReEncode ";

	  // enum TEditorCloseObservType
	  const TEditorCloseObservType = "ecotFile ecotProcess ";

	  // enum TEdmsApplicationAction
	  const TEdmsApplicationAction = "eaGet eaCopy eaCreate eaCreateStandardRoute ";

	  // enum TEDocumentLockType
	  const TEDocumentLockType = "edltAll edltNothing edltQuery ";

	  // enum TEDocumentStepShowMode
	  const TEDocumentStepShowMode = "essmText essmCard ";

	  // enum TEDocumentStepVersionType
	  const TEDocumentStepVersionType = "esvtLast esvtLastActive esvtSpecified ";

	  // enum TEDocumentStorageFunction
	  const TEDocumentStorageFunction = "edsfExecutive edsfArchive ";

	  // enum TEDocumentStorageType
	  const TEDocumentStorageType = "edstSQLServer edstFile ";

	  // enum TEDocumentVersionSourceType
	  const TEDocumentVersionSourceType =
	    "edvstNone edvstEDocumentVersionCopy edvstFile edvstTemplate edvstScannedFile ";

	  // enum TEDocumentVersionState
	  const TEDocumentVersionState = "vsDefault vsDesign vsActive vsObsolete ";

	  // enum TEncodeType
	  const TEncodeType = "etNone etCertificate etPassword etCertificatePassword ";

	  // enum TExceptionCategory
	  const TExceptionCategory = "ecException ecWarning ecInformation ";

	  // enum TExportedSignaturesType
	  const TExportedSignaturesType = "estAll estApprovingOnly ";

	  // enum TExportedVersionType
	  const TExportedVersionType = "evtLast evtLastActive evtQuery ";

	  // enum TFieldDataType
	  const TFieldDataType =
	    "fdtString "
	    + "fdtNumeric "
	    + "fdtInteger "
	    + "fdtDate "
	    + "fdtText "
	    + "fdtUnknown "
	    + "fdtWideString "
	    + "fdtLargeInteger ";

	  // enum TFolderType
	  const TFolderType =
	    "ftInbox "
	    + "ftOutbox "
	    + "ftFavorites "
	    + "ftCommonFolder "
	    + "ftUserFolder "
	    + "ftComponents "
	    + "ftQuickLaunch "
	    + "ftShortcuts "
	    + "ftSearch ";

	  // enum TGridRowHeight
	  const TGridRowHeight = "grhAuto " + "grhX1 " + "grhX2 " + "grhX3 ";

	  // enum THyperlinkType
	  const THyperlinkType = "hltText " + "hltRTF " + "hltHTML ";

	  // enum TImageFileFormat
	  const TImageFileFormat =
	    "iffBMP "
	    + "iffJPEG "
	    + "iffMultiPageTIFF "
	    + "iffSinglePageTIFF "
	    + "iffTIFF "
	    + "iffPNG ";

	  // enum TImageMode
	  const TImageMode = "im8bGrayscale " + "im24bRGB " + "im1bMonochrome ";

	  // enum TImageType
	  const TImageType = "itBMP " + "itJPEG " + "itWMF " + "itPNG ";

	  // enum TInplaceHintKind
	  const TInplaceHintKind =
	    "ikhInformation " + "ikhWarning " + "ikhError " + "ikhNoIcon ";

	  // enum TISBLContext
	  const TISBLContext =
	    "icUnknown "
	    + "icScript "
	    + "icFunction "
	    + "icIntegratedReport "
	    + "icAnalyticReport "
	    + "icDataSetEventHandler "
	    + "icActionHandler "
	    + "icFormEventHandler "
	    + "icLookUpEventHandler "
	    + "icRequisiteChangeEventHandler "
	    + "icBeforeSearchEventHandler "
	    + "icRoleCalculation "
	    + "icSelectRouteEventHandler "
	    + "icBlockPropertyCalculation "
	    + "icBlockQueryParamsEventHandler "
	    + "icChangeSearchResultEventHandler "
	    + "icBlockEventHandler "
	    + "icSubTaskInitEventHandler "
	    + "icEDocDataSetEventHandler "
	    + "icEDocLookUpEventHandler "
	    + "icEDocActionHandler "
	    + "icEDocFormEventHandler "
	    + "icEDocRequisiteChangeEventHandler "
	    + "icStructuredConversionRule "
	    + "icStructuredConversionEventBefore "
	    + "icStructuredConversionEventAfter "
	    + "icWizardEventHandler "
	    + "icWizardFinishEventHandler "
	    + "icWizardStepEventHandler "
	    + "icWizardStepFinishEventHandler "
	    + "icWizardActionEnableEventHandler "
	    + "icWizardActionExecuteEventHandler "
	    + "icCreateJobsHandler "
	    + "icCreateNoticesHandler "
	    + "icBeforeLookUpEventHandler "
	    + "icAfterLookUpEventHandler "
	    + "icTaskAbortEventHandler "
	    + "icWorkflowBlockActionHandler "
	    + "icDialogDataSetEventHandler "
	    + "icDialogActionHandler "
	    + "icDialogLookUpEventHandler "
	    + "icDialogRequisiteChangeEventHandler "
	    + "icDialogFormEventHandler "
	    + "icDialogValidCloseEventHandler "
	    + "icBlockFormEventHandler "
	    + "icTaskFormEventHandler "
	    + "icReferenceMethod "
	    + "icEDocMethod "
	    + "icDialogMethod "
	    + "icProcessMessageHandler ";

	  // enum TItemShow
	  const TItemShow = "isShow " + "isHide " + "isByUserSettings ";

	  // enum TJobKind
	  const TJobKind = "jkJob " + "jkNotice " + "jkControlJob ";

	  // enum TJoinType
	  const TJoinType = "jtInner " + "jtLeft " + "jtRight " + "jtFull " + "jtCross ";

	  // enum TLabelPos
	  const TLabelPos = "lbpAbove " + "lbpBelow " + "lbpLeft " + "lbpRight ";

	  // enum TLicensingType
	  const TLicensingType = "eltPerConnection " + "eltPerUser ";

	  // enum TLifeCycleStageFontColor
	  const TLifeCycleStageFontColor =
	    "sfcUndefined "
	    + "sfcBlack "
	    + "sfcGreen "
	    + "sfcRed "
	    + "sfcBlue "
	    + "sfcOrange "
	    + "sfcLilac ";

	  // enum TLifeCycleStageFontStyle
	  const TLifeCycleStageFontStyle = "sfsItalic " + "sfsStrikeout " + "sfsNormal ";

	  // enum TLockableDevelopmentComponentType
	  const TLockableDevelopmentComponentType =
	    "ldctStandardRoute "
	    + "ldctWizard "
	    + "ldctScript "
	    + "ldctFunction "
	    + "ldctRouteBlock "
	    + "ldctIntegratedReport "
	    + "ldctAnalyticReport "
	    + "ldctReferenceType "
	    + "ldctEDocumentType "
	    + "ldctDialog "
	    + "ldctServerEvents ";

	  // enum TMaxRecordCountRestrictionType
	  const TMaxRecordCountRestrictionType =
	    "mrcrtNone " + "mrcrtUser " + "mrcrtMaximal " + "mrcrtCustom ";

	  // enum TRangeValueType
	  const TRangeValueType =
	    "vtEqual " + "vtGreaterOrEqual " + "vtLessOrEqual " + "vtRange ";

	  // enum TRelativeDate
	  const TRelativeDate =
	    "rdYesterday "
	    + "rdToday "
	    + "rdTomorrow "
	    + "rdThisWeek "
	    + "rdThisMonth "
	    + "rdThisYear "
	    + "rdNextMonth "
	    + "rdNextWeek "
	    + "rdLastWeek "
	    + "rdLastMonth ";

	  // enum TReportDestination
	  const TReportDestination = "rdWindow " + "rdFile " + "rdPrinter ";

	  // enum TReqDataType
	  const TReqDataType =
	    "rdtString "
	    + "rdtNumeric "
	    + "rdtInteger "
	    + "rdtDate "
	    + "rdtReference "
	    + "rdtAccount "
	    + "rdtText "
	    + "rdtPick "
	    + "rdtUnknown "
	    + "rdtLargeInteger "
	    + "rdtDocument ";

	  // enum TRequisiteEventType
	  const TRequisiteEventType = "reOnChange " + "reOnChangeValues ";

	  // enum TSBTimeType
	  const TSBTimeType = "ttGlobal " + "ttLocal " + "ttUser " + "ttSystem ";

	  // enum TSearchShowMode
	  const TSearchShowMode =
	    "ssmBrowse " + "ssmSelect " + "ssmMultiSelect " + "ssmBrowseModal ";

	  // enum TSelectMode
	  const TSelectMode = "smSelect " + "smLike " + "smCard ";

	  // enum TSignatureType
	  const TSignatureType = "stNone " + "stAuthenticating " + "stApproving ";

	  // enum TSignerContentType
	  const TSignerContentType = "sctString " + "sctStream ";

	  // enum TStringsSortType
	  const TStringsSortType = "sstAnsiSort " + "sstNaturalSort ";

	  // enum TStringValueType
	  const TStringValueType = "svtEqual " + "svtContain ";

	  // enum TStructuredObjectAttributeType
	  const TStructuredObjectAttributeType =
	    "soatString "
	    + "soatNumeric "
	    + "soatInteger "
	    + "soatDatetime "
	    + "soatReferenceRecord "
	    + "soatText "
	    + "soatPick "
	    + "soatBoolean "
	    + "soatEDocument "
	    + "soatAccount "
	    + "soatIntegerCollection "
	    + "soatNumericCollection "
	    + "soatStringCollection "
	    + "soatPickCollection "
	    + "soatDatetimeCollection "
	    + "soatBooleanCollection "
	    + "soatReferenceRecordCollection "
	    + "soatEDocumentCollection "
	    + "soatAccountCollection "
	    + "soatContents "
	    + "soatUnknown ";

	  // enum TTaskAbortReason
	  const TTaskAbortReason = "tarAbortByUser " + "tarAbortByWorkflowException ";

	  // enum TTextValueType
	  const TTextValueType = "tvtAllWords " + "tvtExactPhrase " + "tvtAnyWord ";

	  // enum TUserObjectStatus
	  const TUserObjectStatus =
	    "usNone "
	    + "usCompleted "
	    + "usRedSquare "
	    + "usBlueSquare "
	    + "usYellowSquare "
	    + "usGreenSquare "
	    + "usOrangeSquare "
	    + "usPurpleSquare "
	    + "usFollowUp ";

	  // enum TUserType
	  const TUserType =
	    "utUnknown "
	    + "utUser "
	    + "utDeveloper "
	    + "utAdministrator "
	    + "utSystemDeveloper "
	    + "utDisconnected ";

	  // enum TValuesBuildType
	  const TValuesBuildType =
	    "btAnd " + "btDetailAnd " + "btOr " + "btNotOr " + "btOnly ";

	  // enum TViewMode
	  const TViewMode = "vmView " + "vmSelect " + "vmNavigation ";

	  // enum TViewSelectionMode
	  const TViewSelectionMode =
	    "vsmSingle " + "vsmMultiple " + "vsmMultipleCheck " + "vsmNoSelection ";

	  // enum TWizardActionType
	  const TWizardActionType =
	    "wfatPrevious " + "wfatNext " + "wfatCancel " + "wfatFinish ";

	  // enum TWizardFormElementProperty
	  const TWizardFormElementProperty =
	    "wfepUndefined "
	    + "wfepText3 "
	    + "wfepText6 "
	    + "wfepText9 "
	    + "wfepSpinEdit "
	    + "wfepDropDown "
	    + "wfepRadioGroup "
	    + "wfepFlag "
	    + "wfepText12 "
	    + "wfepText15 "
	    + "wfepText18 "
	    + "wfepText21 "
	    + "wfepText24 "
	    + "wfepText27 "
	    + "wfepText30 "
	    + "wfepRadioGroupColumn1 "
	    + "wfepRadioGroupColumn2 "
	    + "wfepRadioGroupColumn3 ";

	  // enum TWizardFormElementType
	  const TWizardFormElementType =
	    "wfetQueryParameter " + "wfetText " + "wfetDelimiter " + "wfetLabel ";

	  // enum TWizardParamType
	  const TWizardParamType =
	    "wptString "
	    + "wptInteger "
	    + "wptNumeric "
	    + "wptBoolean "
	    + "wptDateTime "
	    + "wptPick "
	    + "wptText "
	    + "wptUser "
	    + "wptUserList "
	    + "wptEDocumentInfo "
	    + "wptEDocumentInfoList "
	    + "wptReferenceRecordInfo "
	    + "wptReferenceRecordInfoList "
	    + "wptFolderInfo "
	    + "wptTaskInfo "
	    + "wptContents "
	    + "wptFileName "
	    + "wptDate ";

	  // enum TWizardStepResult
	  const TWizardStepResult =
	    "wsrComplete "
	    + "wsrGoNext "
	    + "wsrGoPrevious "
	    + "wsrCustom "
	    + "wsrCancel "
	    + "wsrGoFinal ";

	  // enum TWizardStepType
	  const TWizardStepType =
	    "wstForm "
	    + "wstEDocument "
	    + "wstTaskCard "
	    + "wstReferenceRecordCard "
	    + "wstFinal ";

	  // enum TWorkAccessType
	  const TWorkAccessType = "waAll " + "waPerformers " + "waManual ";

	  // enum TWorkflowBlockType
	  const TWorkflowBlockType =
	    "wsbStart "
	    + "wsbFinish "
	    + "wsbNotice "
	    + "wsbStep "
	    + "wsbDecision "
	    + "wsbWait "
	    + "wsbMonitor "
	    + "wsbScript "
	    + "wsbConnector "
	    + "wsbSubTask "
	    + "wsbLifeCycleStage "
	    + "wsbPause ";

	  // enum TWorkflowDataType
	  const TWorkflowDataType =
	    "wdtInteger "
	    + "wdtFloat "
	    + "wdtString "
	    + "wdtPick "
	    + "wdtDateTime "
	    + "wdtBoolean "
	    + "wdtTask "
	    + "wdtJob "
	    + "wdtFolder "
	    + "wdtEDocument "
	    + "wdtReferenceRecord "
	    + "wdtUser "
	    + "wdtGroup "
	    + "wdtRole "
	    + "wdtIntegerCollection "
	    + "wdtFloatCollection "
	    + "wdtStringCollection "
	    + "wdtPickCollection "
	    + "wdtDateTimeCollection "
	    + "wdtBooleanCollection "
	    + "wdtTaskCollection "
	    + "wdtJobCollection "
	    + "wdtFolderCollection "
	    + "wdtEDocumentCollection "
	    + "wdtReferenceRecordCollection "
	    + "wdtUserCollection "
	    + "wdtGroupCollection "
	    + "wdtRoleCollection "
	    + "wdtContents "
	    + "wdtUserList "
	    + "wdtSearchDescription "
	    + "wdtDeadLine "
	    + "wdtPickSet "
	    + "wdtAccountCollection ";

	  // enum TWorkImportance
	  const TWorkImportance = "wiLow " + "wiNormal " + "wiHigh ";

	  // enum TWorkRouteType
	  const TWorkRouteType = "wrtSoft " + "wrtHard ";

	  // enum TWorkState
	  const TWorkState =
	    "wsInit "
	    + "wsRunning "
	    + "wsDone "
	    + "wsControlled "
	    + "wsAborted "
	    + "wsContinued ";

	  // enum TWorkTextBuildingMode
	  const TWorkTextBuildingMode =
	    "wtmFull " + "wtmFromCurrent " + "wtmOnlyCurrent ";

	  // Перечисления
	  const ENUMS =
	    TAccountType
	    + TActionEnabledMode
	    + TAddPosition
	    + TAlignment
	    + TAreaShowMode
	    + TCertificateInvalidationReason
	    + TCertificateType
	    + TCheckListBoxItemState
	    + TCloseOnEsc
	    + TCompType
	    + TConditionFormat
	    + TConnectionIntent
	    + TContentKind
	    + TControlType
	    + TCriterionContentType
	    + TCultureType
	    + TDataSetEventType
	    + TDataSetState
	    + TDateFormatType
	    + TDateOffsetType
	    + TDateTimeKind
	    + TDeaAccessRights
	    + TDocumentDefaultAction
	    + TEditMode
	    + TEditorCloseObservType
	    + TEdmsApplicationAction
	    + TEDocumentLockType
	    + TEDocumentStepShowMode
	    + TEDocumentStepVersionType
	    + TEDocumentStorageFunction
	    + TEDocumentStorageType
	    + TEDocumentVersionSourceType
	    + TEDocumentVersionState
	    + TEncodeType
	    + TExceptionCategory
	    + TExportedSignaturesType
	    + TExportedVersionType
	    + TFieldDataType
	    + TFolderType
	    + TGridRowHeight
	    + THyperlinkType
	    + TImageFileFormat
	    + TImageMode
	    + TImageType
	    + TInplaceHintKind
	    + TISBLContext
	    + TItemShow
	    + TJobKind
	    + TJoinType
	    + TLabelPos
	    + TLicensingType
	    + TLifeCycleStageFontColor
	    + TLifeCycleStageFontStyle
	    + TLockableDevelopmentComponentType
	    + TMaxRecordCountRestrictionType
	    + TRangeValueType
	    + TRelativeDate
	    + TReportDestination
	    + TReqDataType
	    + TRequisiteEventType
	    + TSBTimeType
	    + TSearchShowMode
	    + TSelectMode
	    + TSignatureType
	    + TSignerContentType
	    + TStringsSortType
	    + TStringValueType
	    + TStructuredObjectAttributeType
	    + TTaskAbortReason
	    + TTextValueType
	    + TUserObjectStatus
	    + TUserType
	    + TValuesBuildType
	    + TViewMode
	    + TViewSelectionMode
	    + TWizardActionType
	    + TWizardFormElementProperty
	    + TWizardFormElementType
	    + TWizardParamType
	    + TWizardStepResult
	    + TWizardStepType
	    + TWorkAccessType
	    + TWorkflowBlockType
	    + TWorkflowDataType
	    + TWorkImportance
	    + TWorkRouteType
	    + TWorkState
	    + TWorkTextBuildingMode;

	  // Системные функции ==> SYSFUNCTIONS
	  const system_functions =
	    "AddSubString "
	    + "AdjustLineBreaks "
	    + "AmountInWords "
	    + "Analysis "
	    + "ArrayDimCount "
	    + "ArrayHighBound "
	    + "ArrayLowBound "
	    + "ArrayOf "
	    + "ArrayReDim "
	    + "Assert "
	    + "Assigned "
	    + "BeginOfMonth "
	    + "BeginOfPeriod "
	    + "BuildProfilingOperationAnalysis "
	    + "CallProcedure "
	    + "CanReadFile "
	    + "CArrayElement "
	    + "CDataSetRequisite "
	    + "ChangeDate "
	    + "ChangeReferenceDataset "
	    + "Char "
	    + "CharPos "
	    + "CheckParam "
	    + "CheckParamValue "
	    + "CompareStrings "
	    + "ConstantExists "
	    + "ControlState "
	    + "ConvertDateStr "
	    + "Copy "
	    + "CopyFile "
	    + "CreateArray "
	    + "CreateCachedReference "
	    + "CreateConnection "
	    + "CreateDialog "
	    + "CreateDualListDialog "
	    + "CreateEditor "
	    + "CreateException "
	    + "CreateFile "
	    + "CreateFolderDialog "
	    + "CreateInputDialog "
	    + "CreateLinkFile "
	    + "CreateList "
	    + "CreateLock "
	    + "CreateMemoryDataSet "
	    + "CreateObject "
	    + "CreateOpenDialog "
	    + "CreateProgress "
	    + "CreateQuery "
	    + "CreateReference "
	    + "CreateReport "
	    + "CreateSaveDialog "
	    + "CreateScript "
	    + "CreateSQLPivotFunction "
	    + "CreateStringList "
	    + "CreateTreeListSelectDialog "
	    + "CSelectSQL "
	    + "CSQL "
	    + "CSubString "
	    + "CurrentUserID "
	    + "CurrentUserName "
	    + "CurrentVersion "
	    + "DataSetLocateEx "
	    + "DateDiff "
	    + "DateTimeDiff "
	    + "DateToStr "
	    + "DayOfWeek "
	    + "DeleteFile "
	    + "DirectoryExists "
	    + "DisableCheckAccessRights "
	    + "DisableCheckFullShowingRestriction "
	    + "DisableMassTaskSendingRestrictions "
	    + "DropTable "
	    + "DupeString "
	    + "EditText "
	    + "EnableCheckAccessRights "
	    + "EnableCheckFullShowingRestriction "
	    + "EnableMassTaskSendingRestrictions "
	    + "EndOfMonth "
	    + "EndOfPeriod "
	    + "ExceptionExists "
	    + "ExceptionsOff "
	    + "ExceptionsOn "
	    + "Execute "
	    + "ExecuteProcess "
	    + "Exit "
	    + "ExpandEnvironmentVariables "
	    + "ExtractFileDrive "
	    + "ExtractFileExt "
	    + "ExtractFileName "
	    + "ExtractFilePath "
	    + "ExtractParams "
	    + "FileExists "
	    + "FileSize "
	    + "FindFile "
	    + "FindSubString "
	    + "FirmContext "
	    + "ForceDirectories "
	    + "Format "
	    + "FormatDate "
	    + "FormatNumeric "
	    + "FormatSQLDate "
	    + "FormatString "
	    + "FreeException "
	    + "GetComponent "
	    + "GetComponentLaunchParam "
	    + "GetConstant "
	    + "GetLastException "
	    + "GetReferenceRecord "
	    + "GetRefTypeByRefID "
	    + "GetTableID "
	    + "GetTempFolder "
	    + "IfThen "
	    + "In "
	    + "IndexOf "
	    + "InputDialog "
	    + "InputDialogEx "
	    + "InteractiveMode "
	    + "IsFileLocked "
	    + "IsGraphicFile "
	    + "IsNumeric "
	    + "Length "
	    + "LoadString "
	    + "LoadStringFmt "
	    + "LocalTimeToUTC "
	    + "LowerCase "
	    + "Max "
	    + "MessageBox "
	    + "MessageBoxEx "
	    + "MimeDecodeBinary "
	    + "MimeDecodeString "
	    + "MimeEncodeBinary "
	    + "MimeEncodeString "
	    + "Min "
	    + "MoneyInWords "
	    + "MoveFile "
	    + "NewID "
	    + "Now "
	    + "OpenFile "
	    + "Ord "
	    + "Precision "
	    + "Raise "
	    + "ReadCertificateFromFile "
	    + "ReadFile "
	    + "ReferenceCodeByID "
	    + "ReferenceNumber "
	    + "ReferenceRequisiteMode "
	    + "ReferenceRequisiteValue "
	    + "RegionDateSettings "
	    + "RegionNumberSettings "
	    + "RegionTimeSettings "
	    + "RegRead "
	    + "RegWrite "
	    + "RenameFile "
	    + "Replace "
	    + "Round "
	    + "SelectServerCode "
	    + "SelectSQL "
	    + "ServerDateTime "
	    + "SetConstant "
	    + "SetManagedFolderFieldsState "
	    + "ShowConstantsInputDialog "
	    + "ShowMessage "
	    + "Sleep "
	    + "Split "
	    + "SQL "
	    + "SQL2XLSTAB "
	    + "SQLProfilingSendReport "
	    + "StrToDate "
	    + "SubString "
	    + "SubStringCount "
	    + "SystemSetting "
	    + "Time "
	    + "TimeDiff "
	    + "Today "
	    + "Transliterate "
	    + "Trim "
	    + "UpperCase "
	    + "UserStatus "
	    + "UTCToLocalTime "
	    + "ValidateXML "
	    + "VarIsClear "
	    + "VarIsEmpty "
	    + "VarIsNull "
	    + "WorkTimeDiff "
	    + "WriteFile "
	    + "WriteFileEx "
	    + "WriteObjectHistory "
	    + "Анализ "
	    + "БазаДанных "
	    + "БлокЕсть "
	    + "БлокЕстьРасш "
	    + "БлокИнфо "
	    + "БлокСнять "
	    + "БлокСнятьРасш "
	    + "БлокУстановить "
	    + "Ввод "
	    + "ВводМеню "
	    + "ВедС "
	    + "ВедСпр "
	    + "ВерхняяГраницаМассива "
	    + "ВнешПрогр "
	    + "Восст "
	    + "ВременнаяПапка "
	    + "Время "
	    + "ВыборSQL "
	    + "ВыбратьЗапись "
	    + "ВыделитьСтр "
	    + "Вызвать "
	    + "Выполнить "
	    + "ВыпПрогр "
	    + "ГрафическийФайл "
	    + "ГруппаДополнительно "
	    + "ДатаВремяСерв "
	    + "ДеньНедели "
	    + "ДиалогДаНет "
	    + "ДлинаСтр "
	    + "ДобПодстр "
	    + "ЕПусто "
	    + "ЕслиТо "
	    + "ЕЧисло "
	    + "ЗамПодстр "
	    + "ЗаписьСправочника "
	    + "ЗначПоляСпр "
	    + "ИДТипСпр "
	    + "ИзвлечьДиск "
	    + "ИзвлечьИмяФайла "
	    + "ИзвлечьПуть "
	    + "ИзвлечьРасширение "
	    + "ИзмДат "
	    + "ИзменитьРазмерМассива "
	    + "ИзмеренийМассива "
	    + "ИмяОрг "
	    + "ИмяПоляСпр "
	    + "Индекс "
	    + "ИндикаторЗакрыть "
	    + "ИндикаторОткрыть "
	    + "ИндикаторШаг "
	    + "ИнтерактивныйРежим "
	    + "ИтогТблСпр "
	    + "КодВидВедСпр "
	    + "КодВидСпрПоИД "
	    + "КодПоAnalit "
	    + "КодСимвола "
	    + "КодСпр "
	    + "КолПодстр "
	    + "КолПроп "
	    + "КонМес "
	    + "Конст "
	    + "КонстЕсть "
	    + "КонстЗнач "
	    + "КонТран "
	    + "КопироватьФайл "
	    + "КопияСтр "
	    + "КПериод "
	    + "КСтрТблСпр "
	    + "Макс "
	    + "МаксСтрТблСпр "
	    + "Массив "
	    + "Меню "
	    + "МенюРасш "
	    + "Мин "
	    + "НаборДанныхНайтиРасш "
	    + "НаимВидСпр "
	    + "НаимПоAnalit "
	    + "НаимСпр "
	    + "НастроитьПереводыСтрок "
	    + "НачМес "
	    + "НачТран "
	    + "НижняяГраницаМассива "
	    + "НомерСпр "
	    + "НПериод "
	    + "Окно "
	    + "Окр "
	    + "Окружение "
	    + "ОтлИнфДобавить "
	    + "ОтлИнфУдалить "
	    + "Отчет "
	    + "ОтчетАнал "
	    + "ОтчетИнт "
	    + "ПапкаСуществует "
	    + "Пауза "
	    + "ПВыборSQL "
	    + "ПереименоватьФайл "
	    + "Переменные "
	    + "ПереместитьФайл "
	    + "Подстр "
	    + "ПоискПодстр "
	    + "ПоискСтр "
	    + "ПолучитьИДТаблицы "
	    + "ПользовательДополнительно "
	    + "ПользовательИД "
	    + "ПользовательИмя "
	    + "ПользовательСтатус "
	    + "Прервать "
	    + "ПроверитьПараметр "
	    + "ПроверитьПараметрЗнач "
	    + "ПроверитьУсловие "
	    + "РазбСтр "
	    + "РазнВремя "
	    + "РазнДат "
	    + "РазнДатаВремя "
	    + "РазнРабВремя "
	    + "РегУстВрем "
	    + "РегУстДат "
	    + "РегУстЧсл "
	    + "РедТекст "
	    + "РеестрЗапись "
	    + "РеестрСписокИменПарам "
	    + "РеестрЧтение "
	    + "РеквСпр "
	    + "РеквСпрПр "
	    + "Сегодня "
	    + "Сейчас "
	    + "Сервер "
	    + "СерверПроцессИД "
	    + "СертификатФайлСчитать "
	    + "СжПроб "
	    + "Символ "
	    + "СистемаДиректумКод "
	    + "СистемаИнформация "
	    + "СистемаКод "
	    + "Содержит "
	    + "СоединениеЗакрыть "
	    + "СоединениеОткрыть "
	    + "СоздатьДиалог "
	    + "СоздатьДиалогВыбораИзДвухСписков "
	    + "СоздатьДиалогВыбораПапки "
	    + "СоздатьДиалогОткрытияФайла "
	    + "СоздатьДиалогСохраненияФайла "
	    + "СоздатьЗапрос "
	    + "СоздатьИндикатор "
	    + "СоздатьИсключение "
	    + "СоздатьКэшированныйСправочник "
	    + "СоздатьМассив "
	    + "СоздатьНаборДанных "
	    + "СоздатьОбъект "
	    + "СоздатьОтчет "
	    + "СоздатьПапку "
	    + "СоздатьРедактор "
	    + "СоздатьСоединение "
	    + "СоздатьСписок "
	    + "СоздатьСписокСтрок "
	    + "СоздатьСправочник "
	    + "СоздатьСценарий "
	    + "СоздСпр "
	    + "СостСпр "
	    + "Сохр "
	    + "СохрСпр "
	    + "СписокСистем "
	    + "Спр "
	    + "Справочник "
	    + "СпрБлокЕсть "
	    + "СпрБлокСнять "
	    + "СпрБлокСнятьРасш "
	    + "СпрБлокУстановить "
	    + "СпрИзмНабДан "
	    + "СпрКод "
	    + "СпрНомер "
	    + "СпрОбновить "
	    + "СпрОткрыть "
	    + "СпрОтменить "
	    + "СпрПарам "
	    + "СпрПолеЗнач "
	    + "СпрПолеИмя "
	    + "СпрРекв "
	    + "СпрРеквВведЗн "
	    + "СпрРеквНовые "
	    + "СпрРеквПр "
	    + "СпрРеквПредЗн "
	    + "СпрРеквРежим "
	    + "СпрРеквТипТекст "
	    + "СпрСоздать "
	    + "СпрСост "
	    + "СпрСохранить "
	    + "СпрТблИтог "
	    + "СпрТблСтр "
	    + "СпрТблСтрКол "
	    + "СпрТблСтрМакс "
	    + "СпрТблСтрМин "
	    + "СпрТблСтрПред "
	    + "СпрТблСтрСлед "
	    + "СпрТблСтрСозд "
	    + "СпрТблСтрУд "
	    + "СпрТекПредст "
	    + "СпрУдалить "
	    + "СравнитьСтр "
	    + "СтрВерхРегистр "
	    + "СтрНижнРегистр "
	    + "СтрТблСпр "
	    + "СумПроп "
	    + "Сценарий "
	    + "СценарийПарам "
	    + "ТекВерсия "
	    + "ТекОрг "
	    + "Точн "
	    + "Тран "
	    + "Транслитерация "
	    + "УдалитьТаблицу "
	    + "УдалитьФайл "
	    + "УдСпр "
	    + "УдСтрТблСпр "
	    + "Уст "
	    + "УстановкиКонстант "
	    + "ФайлАтрибутСчитать "
	    + "ФайлАтрибутУстановить "
	    + "ФайлВремя "
	    + "ФайлВремяУстановить "
	    + "ФайлВыбрать "
	    + "ФайлЗанят "
	    + "ФайлЗаписать "
	    + "ФайлИскать "
	    + "ФайлКопировать "
	    + "ФайлМожноЧитать "
	    + "ФайлОткрыть "
	    + "ФайлПереименовать "
	    + "ФайлПерекодировать "
	    + "ФайлПереместить "
	    + "ФайлПросмотреть "
	    + "ФайлРазмер "
	    + "ФайлСоздать "
	    + "ФайлСсылкаСоздать "
	    + "ФайлСуществует "
	    + "ФайлСчитать "
	    + "ФайлУдалить "
	    + "ФмтSQLДат "
	    + "ФмтДат "
	    + "ФмтСтр "
	    + "ФмтЧсл "
	    + "Формат "
	    + "ЦМассивЭлемент "
	    + "ЦНаборДанныхРеквизит "
	    + "ЦПодстр ";

	  // Предопределенные переменные ==> built_in
	  const predefined_variables =
	    "AltState "
	    + "Application "
	    + "CallType "
	    + "ComponentTokens "
	    + "CreatedJobs "
	    + "CreatedNotices "
	    + "ControlState "
	    + "DialogResult "
	    + "Dialogs "
	    + "EDocuments "
	    + "EDocumentVersionSource "
	    + "Folders "
	    + "GlobalIDs "
	    + "Job "
	    + "Jobs "
	    + "InputValue "
	    + "LookUpReference "
	    + "LookUpRequisiteNames "
	    + "LookUpSearch "
	    + "Object "
	    + "ParentComponent "
	    + "Processes "
	    + "References "
	    + "Requisite "
	    + "ReportName "
	    + "Reports "
	    + "Result "
	    + "Scripts "
	    + "Searches "
	    + "SelectedAttachments "
	    + "SelectedItems "
	    + "SelectMode "
	    + "Sender "
	    + "ServerEvents "
	    + "ServiceFactory "
	    + "ShiftState "
	    + "SubTask "
	    + "SystemDialogs "
	    + "Tasks "
	    + "Wizard "
	    + "Wizards "
	    + "Work "
	    + "ВызовСпособ "
	    + "ИмяОтчета "
	    + "РеквЗнач ";

	  // Интерфейсы ==> type
	  const interfaces =
	    "IApplication "
	    + "IAccessRights "
	    + "IAccountRepository "
	    + "IAccountSelectionRestrictions "
	    + "IAction "
	    + "IActionList "
	    + "IAdministrationHistoryDescription "
	    + "IAnchors "
	    + "IApplication "
	    + "IArchiveInfo "
	    + "IAttachment "
	    + "IAttachmentList "
	    + "ICheckListBox "
	    + "ICheckPointedList "
	    + "IColumn "
	    + "IComponent "
	    + "IComponentDescription "
	    + "IComponentToken "
	    + "IComponentTokenFactory "
	    + "IComponentTokenInfo "
	    + "ICompRecordInfo "
	    + "IConnection "
	    + "IContents "
	    + "IControl "
	    + "IControlJob "
	    + "IControlJobInfo "
	    + "IControlList "
	    + "ICrypto "
	    + "ICrypto2 "
	    + "ICustomJob "
	    + "ICustomJobInfo "
	    + "ICustomListBox "
	    + "ICustomObjectWizardStep "
	    + "ICustomWork "
	    + "ICustomWorkInfo "
	    + "IDataSet "
	    + "IDataSetAccessInfo "
	    + "IDataSigner "
	    + "IDateCriterion "
	    + "IDateRequisite "
	    + "IDateRequisiteDescription "
	    + "IDateValue "
	    + "IDeaAccessRights "
	    + "IDeaObjectInfo "
	    + "IDevelopmentComponentLock "
	    + "IDialog "
	    + "IDialogFactory "
	    + "IDialogPickRequisiteItems "
	    + "IDialogsFactory "
	    + "IDICSFactory "
	    + "IDocRequisite "
	    + "IDocumentInfo "
	    + "IDualListDialog "
	    + "IECertificate "
	    + "IECertificateInfo "
	    + "IECertificates "
	    + "IEditControl "
	    + "IEditorForm "
	    + "IEdmsExplorer "
	    + "IEdmsObject "
	    + "IEdmsObjectDescription "
	    + "IEdmsObjectFactory "
	    + "IEdmsObjectInfo "
	    + "IEDocument "
	    + "IEDocumentAccessRights "
	    + "IEDocumentDescription "
	    + "IEDocumentEditor "
	    + "IEDocumentFactory "
	    + "IEDocumentInfo "
	    + "IEDocumentStorage "
	    + "IEDocumentVersion "
	    + "IEDocumentVersionListDialog "
	    + "IEDocumentVersionSource "
	    + "IEDocumentWizardStep "
	    + "IEDocVerSignature "
	    + "IEDocVersionState "
	    + "IEnabledMode "
	    + "IEncodeProvider "
	    + "IEncrypter "
	    + "IEvent "
	    + "IEventList "
	    + "IException "
	    + "IExternalEvents "
	    + "IExternalHandler "
	    + "IFactory "
	    + "IField "
	    + "IFileDialog "
	    + "IFolder "
	    + "IFolderDescription "
	    + "IFolderDialog "
	    + "IFolderFactory "
	    + "IFolderInfo "
	    + "IForEach "
	    + "IForm "
	    + "IFormTitle "
	    + "IFormWizardStep "
	    + "IGlobalIDFactory "
	    + "IGlobalIDInfo "
	    + "IGrid "
	    + "IHasher "
	    + "IHistoryDescription "
	    + "IHyperLinkControl "
	    + "IImageButton "
	    + "IImageControl "
	    + "IInnerPanel "
	    + "IInplaceHint "
	    + "IIntegerCriterion "
	    + "IIntegerList "
	    + "IIntegerRequisite "
	    + "IIntegerValue "
	    + "IISBLEditorForm "
	    + "IJob "
	    + "IJobDescription "
	    + "IJobFactory "
	    + "IJobForm "
	    + "IJobInfo "
	    + "ILabelControl "
	    + "ILargeIntegerCriterion "
	    + "ILargeIntegerRequisite "
	    + "ILargeIntegerValue "
	    + "ILicenseInfo "
	    + "ILifeCycleStage "
	    + "IList "
	    + "IListBox "
	    + "ILocalIDInfo "
	    + "ILocalization "
	    + "ILock "
	    + "IMemoryDataSet "
	    + "IMessagingFactory "
	    + "IMetadataRepository "
	    + "INotice "
	    + "INoticeInfo "
	    + "INumericCriterion "
	    + "INumericRequisite "
	    + "INumericValue "
	    + "IObject "
	    + "IObjectDescription "
	    + "IObjectImporter "
	    + "IObjectInfo "
	    + "IObserver "
	    + "IPanelGroup "
	    + "IPickCriterion "
	    + "IPickProperty "
	    + "IPickRequisite "
	    + "IPickRequisiteDescription "
	    + "IPickRequisiteItem "
	    + "IPickRequisiteItems "
	    + "IPickValue "
	    + "IPrivilege "
	    + "IPrivilegeList "
	    + "IProcess "
	    + "IProcessFactory "
	    + "IProcessMessage "
	    + "IProgress "
	    + "IProperty "
	    + "IPropertyChangeEvent "
	    + "IQuery "
	    + "IReference "
	    + "IReferenceCriterion "
	    + "IReferenceEnabledMode "
	    + "IReferenceFactory "
	    + "IReferenceHistoryDescription "
	    + "IReferenceInfo "
	    + "IReferenceRecordCardWizardStep "
	    + "IReferenceRequisiteDescription "
	    + "IReferencesFactory "
	    + "IReferenceValue "
	    + "IRefRequisite "
	    + "IReport "
	    + "IReportFactory "
	    + "IRequisite "
	    + "IRequisiteDescription "
	    + "IRequisiteDescriptionList "
	    + "IRequisiteFactory "
	    + "IRichEdit "
	    + "IRouteStep "
	    + "IRule "
	    + "IRuleList "
	    + "ISchemeBlock "
	    + "IScript "
	    + "IScriptFactory "
	    + "ISearchCriteria "
	    + "ISearchCriterion "
	    + "ISearchDescription "
	    + "ISearchFactory "
	    + "ISearchFolderInfo "
	    + "ISearchForObjectDescription "
	    + "ISearchResultRestrictions "
	    + "ISecuredContext "
	    + "ISelectDialog "
	    + "IServerEvent "
	    + "IServerEventFactory "
	    + "IServiceDialog "
	    + "IServiceFactory "
	    + "ISignature "
	    + "ISignProvider "
	    + "ISignProvider2 "
	    + "ISignProvider3 "
	    + "ISimpleCriterion "
	    + "IStringCriterion "
	    + "IStringList "
	    + "IStringRequisite "
	    + "IStringRequisiteDescription "
	    + "IStringValue "
	    + "ISystemDialogsFactory "
	    + "ISystemInfo "
	    + "ITabSheet "
	    + "ITask "
	    + "ITaskAbortReasonInfo "
	    + "ITaskCardWizardStep "
	    + "ITaskDescription "
	    + "ITaskFactory "
	    + "ITaskInfo "
	    + "ITaskRoute "
	    + "ITextCriterion "
	    + "ITextRequisite "
	    + "ITextValue "
	    + "ITreeListSelectDialog "
	    + "IUser "
	    + "IUserList "
	    + "IValue "
	    + "IView "
	    + "IWebBrowserControl "
	    + "IWizard "
	    + "IWizardAction "
	    + "IWizardFactory "
	    + "IWizardFormElement "
	    + "IWizardParam "
	    + "IWizardPickParam "
	    + "IWizardReferenceParam "
	    + "IWizardStep "
	    + "IWorkAccessRights "
	    + "IWorkDescription "
	    + "IWorkflowAskableParam "
	    + "IWorkflowAskableParams "
	    + "IWorkflowBlock "
	    + "IWorkflowBlockResult "
	    + "IWorkflowEnabledMode "
	    + "IWorkflowParam "
	    + "IWorkflowPickParam "
	    + "IWorkflowReferenceParam "
	    + "IWorkState "
	    + "IWorkTreeCustomNode "
	    + "IWorkTreeJobNode "
	    + "IWorkTreeTaskNode "
	    + "IXMLEditorForm "
	    + "SBCrypto ";

	  // built_in : встроенные или библиотечные объекты (константы, перечисления)
	  const BUILTIN = CONSTANTS + ENUMS;

	  // class: встроенные наборы значений, системные объекты, фабрики
	  const CLASS = predefined_variables;

	  // literal : примитивные типы
	  const LITERAL = "null true false nil ";

	  // number : числа
	  const NUMBERS = {
	    className: "number",
	    begin: hljs.NUMBER_RE,
	    relevance: 0
	  };

	  // string : строки
	  const STRINGS = {
	    className: "string",
	    variants: [
	      {
	        begin: '"',
	        end: '"'
	      },
	      {
	        begin: "'",
	        end: "'"
	      }
	    ]
	  };

	  // Токены
	  const DOCTAGS = {
	    className: "doctag",
	    begin: "\\b(?:TODO|DONE|BEGIN|END|STUB|CHG|FIXME|NOTE|BUG|XXX)\\b",
	    relevance: 0
	  };

	  // Однострочный комментарий
	  const ISBL_LINE_COMMENT_MODE = {
	    className: "comment",
	    begin: "//",
	    end: "$",
	    relevance: 0,
	    contains: [
	      hljs.PHRASAL_WORDS_MODE,
	      DOCTAGS
	    ]
	  };

	  // Многострочный комментарий
	  const ISBL_BLOCK_COMMENT_MODE = {
	    className: "comment",
	    begin: "/\\*",
	    end: "\\*/",
	    relevance: 0,
	    contains: [
	      hljs.PHRASAL_WORDS_MODE,
	      DOCTAGS
	    ]
	  };

	  // comment : комментарии
	  const COMMENTS = { variants: [
	    ISBL_LINE_COMMENT_MODE,
	    ISBL_BLOCK_COMMENT_MODE
	  ] };

	  // keywords : ключевые слова
	  const KEYWORDS = {
	    $pattern: UNDERSCORE_IDENT_RE,
	    keyword: KEYWORD,
	    built_in: BUILTIN,
	    class: CLASS,
	    literal: LITERAL
	  };

	  // methods : методы
	  const METHODS = {
	    begin: "\\.\\s*" + hljs.UNDERSCORE_IDENT_RE,
	    keywords: KEYWORDS,
	    relevance: 0
	  };

	  // type : встроенные типы
	  const TYPES = {
	    className: "type",
	    begin: ":[ \\t]*(" + interfaces.trim().replace(/\s/g, "|") + ")",
	    end: "[ \\t]*=",
	    excludeEnd: true
	  };

	  // variables : переменные
	  const VARIABLES = {
	    className: "variable",
	    keywords: KEYWORDS,
	    begin: UNDERSCORE_IDENT_RE,
	    relevance: 0,
	    contains: [
	      TYPES,
	      METHODS
	    ]
	  };

	  // Имена функций
	  const FUNCTION_TITLE = FUNCTION_NAME_IDENT_RE + "\\(";

	  const TITLE_MODE = {
	    className: "title",
	    keywords: {
	      $pattern: UNDERSCORE_IDENT_RE,
	      built_in: system_functions
	    },
	    begin: FUNCTION_TITLE,
	    end: "\\(",
	    returnBegin: true,
	    excludeEnd: true
	  };

	  // function : функции
	  const FUNCTIONS = {
	    className: "function",
	    begin: FUNCTION_TITLE,
	    end: "\\)$",
	    returnBegin: true,
	    keywords: KEYWORDS,
	    illegal: "[\\[\\]\\|\\$\\?%,~#@]",
	    contains: [
	      TITLE_MODE,
	      METHODS,
	      VARIABLES,
	      STRINGS,
	      NUMBERS,
	      COMMENTS
	    ]
	  };

	  return {
	    name: 'ISBL',
	    case_insensitive: true,
	    keywords: KEYWORDS,
	    illegal: "\\$|\\?|%|,|;$|~|#|@|</",
	    contains: [
	      FUNCTIONS,
	      TYPES,
	      METHODS,
	      VARIABLES,
	      STRINGS,
	      NUMBERS,
	      COMMENTS
	    ]
	  };
	}

	isbl_1 = isbl;
	return isbl_1;
}

var java_1;
var hasRequiredJava;

function requireJava () {
	if (hasRequiredJava) return java_1;
	hasRequiredJava = 1;
	// https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10
	var decimalDigits = '[0-9](_*[0-9])*';
	var frac = `\\.(${decimalDigits})`;
	var hexDigits = '[0-9a-fA-F](_*[0-9a-fA-F])*';
	var NUMERIC = {
	  className: 'number',
	  variants: [
	    // DecimalFloatingPointLiteral
	    // including ExponentPart
	    { begin: `(\\b(${decimalDigits})((${frac})|\\.)?|(${frac}))` +
	      `[eE][+-]?(${decimalDigits})[fFdD]?\\b` },
	    // excluding ExponentPart
	    { begin: `\\b(${decimalDigits})((${frac})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
	    { begin: `(${frac})[fFdD]?\\b` },
	    { begin: `\\b(${decimalDigits})[fFdD]\\b` },

	    // HexadecimalFloatingPointLiteral
	    { begin: `\\b0[xX]((${hexDigits})\\.?|(${hexDigits})?\\.(${hexDigits}))` +
	      `[pP][+-]?(${decimalDigits})[fFdD]?\\b` },

	    // DecimalIntegerLiteral
	    { begin: '\\b(0|[1-9](_*[0-9])*)[lL]?\\b' },

	    // HexIntegerLiteral
	    { begin: `\\b0[xX](${hexDigits})[lL]?\\b` },

	    // OctalIntegerLiteral
	    { begin: '\\b0(_*[0-7])*[lL]?\\b' },

	    // BinaryIntegerLiteral
	    { begin: '\\b0[bB][01](_*[01])*[lL]?\\b' },
	  ],
	  relevance: 0
	};

	/*
	Language: Java
	Author: Vsevolod Solovyov <vsevolod.solovyov@gmail.com>
	Category: common, enterprise
	Website: https://www.java.com/
	*/


	/**
	 * Allows recursive regex expressions to a given depth
	 *
	 * ie: recurRegex("(abc~~~)", /~~~/g, 2) becomes:
	 * (abc(abc(abc)))
	 *
	 * @param {string} re
	 * @param {RegExp} substitution (should be a g mode regex)
	 * @param {number} depth
	 * @returns {string}``
	 */
	function recurRegex(re, substitution, depth) {
	  if (depth === -1) return "";

	  return re.replace(substitution, _ => {
	    return recurRegex(re, substitution, depth - 1);
	  });
	}

	/** @type LanguageFn */
	function java(hljs) {
	  const regex = hljs.regex;
	  const JAVA_IDENT_RE = '[\u00C0-\u02B8a-zA-Z_$][\u00C0-\u02B8a-zA-Z_$0-9]*';
	  const GENERIC_IDENT_RE = JAVA_IDENT_RE
	    + recurRegex('(?:<' + JAVA_IDENT_RE + '~~~(?:\\s*,\\s*' + JAVA_IDENT_RE + '~~~)*>)?', /~~~/g, 2);
	  const MAIN_KEYWORDS = [
	    'synchronized',
	    'abstract',
	    'private',
	    'var',
	    'static',
	    'if',
	    'const ',
	    'for',
	    'while',
	    'strictfp',
	    'finally',
	    'protected',
	    'import',
	    'native',
	    'final',
	    'void',
	    'enum',
	    'else',
	    'break',
	    'transient',
	    'catch',
	    'instanceof',
	    'volatile',
	    'case',
	    'assert',
	    'package',
	    'default',
	    'public',
	    'try',
	    'switch',
	    'continue',
	    'throws',
	    'protected',
	    'public',
	    'private',
	    'module',
	    'requires',
	    'exports',
	    'do',
	    'sealed',
	    'yield',
	    'permits'
	  ];

	  const BUILT_INS = [
	    'super',
	    'this'
	  ];

	  const LITERALS = [
	    'false',
	    'true',
	    'null'
	  ];

	  const TYPES = [
	    'char',
	    'boolean',
	    'long',
	    'float',
	    'int',
	    'byte',
	    'short',
	    'double'
	  ];

	  const KEYWORDS = {
	    keyword: MAIN_KEYWORDS,
	    literal: LITERALS,
	    type: TYPES,
	    built_in: BUILT_INS
	  };

	  const ANNOTATION = {
	    className: 'meta',
	    begin: '@' + JAVA_IDENT_RE,
	    contains: [
	      {
	        begin: /\(/,
	        end: /\)/,
	        contains: [ "self" ] // allow nested () inside our annotation
	      }
	    ]
	  };
	  const PARAMS = {
	    className: 'params',
	    begin: /\(/,
	    end: /\)/,
	    keywords: KEYWORDS,
	    relevance: 0,
	    contains: [ hljs.C_BLOCK_COMMENT_MODE ],
	    endsParent: true
	  };

	  return {
	    name: 'Java',
	    aliases: [ 'jsp' ],
	    keywords: KEYWORDS,
	    illegal: /<\/|#/,
	    contains: [
	      hljs.COMMENT(
	        '/\\*\\*',
	        '\\*/',
	        {
	          relevance: 0,
	          contains: [
	            {
	              // eat up @'s in emails to prevent them to be recognized as doctags
	              begin: /\w+@/,
	              relevance: 0
	            },
	            {
	              className: 'doctag',
	              begin: '@[A-Za-z]+'
	            }
	          ]
	        }
	      ),
	      // relevance boost
	      {
	        begin: /import java\.[a-z]+\./,
	        keywords: "import",
	        relevance: 2
	      },
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        begin: /"""/,
	        end: /"""/,
	        className: "string",
	        contains: [ hljs.BACKSLASH_ESCAPE ]
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        match: [
	          /\b(?:class|interface|enum|extends|implements|new)/,
	          /\s+/,
	          JAVA_IDENT_RE
	        ],
	        className: {
	          1: "keyword",
	          3: "title.class"
	        }
	      },
	      {
	        // Exceptions for hyphenated keywords
	        match: /non-sealed/,
	        scope: "keyword"
	      },
	      {
	        begin: [
	          regex.concat(/(?!else)/, JAVA_IDENT_RE),
	          /\s+/,
	          JAVA_IDENT_RE,
	          /\s+/,
	          /=(?!=)/
	        ],
	        className: {
	          1: "type",
	          3: "variable",
	          5: "operator"
	        }
	      },
	      {
	        begin: [
	          /record/,
	          /\s+/,
	          JAVA_IDENT_RE
	        ],
	        className: {
	          1: "keyword",
	          3: "title.class"
	        },
	        contains: [
	          PARAMS,
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      },
	      {
	        // Expression keywords prevent 'keyword Name(...)' from being
	        // recognized as a function definition
	        beginKeywords: 'new throw return else',
	        relevance: 0
	      },
	      {
	        begin: [
	          '(?:' + GENERIC_IDENT_RE + '\\s+)',
	          hljs.UNDERSCORE_IDENT_RE,
	          /\s*(?=\()/
	        ],
	        className: { 2: "title.function" },
	        keywords: KEYWORDS,
	        contains: [
	          {
	            className: 'params',
	            begin: /\(/,
	            end: /\)/,
	            keywords: KEYWORDS,
	            relevance: 0,
	            contains: [
	              ANNOTATION,
	              hljs.APOS_STRING_MODE,
	              hljs.QUOTE_STRING_MODE,
	              NUMERIC,
	              hljs.C_BLOCK_COMMENT_MODE
	            ]
	          },
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      },
	      NUMERIC,
	      ANNOTATION
	    ]
	  };
	}

	java_1 = java;
	return java_1;
}

var javascript_1;
var hasRequiredJavascript;

function requireJavascript () {
	if (hasRequiredJavascript) return javascript_1;
	hasRequiredJavascript = 1;
	const IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
	const KEYWORDS = [
	  "as", // for exports
	  "in",
	  "of",
	  "if",
	  "for",
	  "while",
	  "finally",
	  "var",
	  "new",
	  "function",
	  "do",
	  "return",
	  "void",
	  "else",
	  "break",
	  "catch",
	  "instanceof",
	  "with",
	  "throw",
	  "case",
	  "default",
	  "try",
	  "switch",
	  "continue",
	  "typeof",
	  "delete",
	  "let",
	  "yield",
	  "const",
	  "class",
	  // JS handles these with a special rule
	  // "get",
	  // "set",
	  "debugger",
	  "async",
	  "await",
	  "static",
	  "import",
	  "from",
	  "export",
	  "extends"
	];
	const LITERALS = [
	  "true",
	  "false",
	  "null",
	  "undefined",
	  "NaN",
	  "Infinity"
	];

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
	const TYPES = [
	  // Fundamental objects
	  "Object",
	  "Function",
	  "Boolean",
	  "Symbol",
	  // numbers and dates
	  "Math",
	  "Date",
	  "Number",
	  "BigInt",
	  // text
	  "String",
	  "RegExp",
	  // Indexed collections
	  "Array",
	  "Float32Array",
	  "Float64Array",
	  "Int8Array",
	  "Uint8Array",
	  "Uint8ClampedArray",
	  "Int16Array",
	  "Int32Array",
	  "Uint16Array",
	  "Uint32Array",
	  "BigInt64Array",
	  "BigUint64Array",
	  // Keyed collections
	  "Set",
	  "Map",
	  "WeakSet",
	  "WeakMap",
	  // Structured data
	  "ArrayBuffer",
	  "SharedArrayBuffer",
	  "Atomics",
	  "DataView",
	  "JSON",
	  // Control abstraction objects
	  "Promise",
	  "Generator",
	  "GeneratorFunction",
	  "AsyncFunction",
	  // Reflection
	  "Reflect",
	  "Proxy",
	  // Internationalization
	  "Intl",
	  // WebAssembly
	  "WebAssembly"
	];

	const ERROR_TYPES = [
	  "Error",
	  "EvalError",
	  "InternalError",
	  "RangeError",
	  "ReferenceError",
	  "SyntaxError",
	  "TypeError",
	  "URIError"
	];

	const BUILT_IN_GLOBALS = [
	  "setInterval",
	  "setTimeout",
	  "clearInterval",
	  "clearTimeout",

	  "require",
	  "exports",

	  "eval",
	  "isFinite",
	  "isNaN",
	  "parseFloat",
	  "parseInt",
	  "decodeURI",
	  "decodeURIComponent",
	  "encodeURI",
	  "encodeURIComponent",
	  "escape",
	  "unescape"
	];

	const BUILT_IN_VARIABLES = [
	  "arguments",
	  "this",
	  "super",
	  "console",
	  "window",
	  "document",
	  "localStorage",
	  "sessionStorage",
	  "module",
	  "global" // Node.js
	];

	const BUILT_INS = [].concat(
	  BUILT_IN_GLOBALS,
	  TYPES,
	  ERROR_TYPES
	);

	/*
	Language: JavaScript
	Description: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.
	Category: common, scripting, web
	Website: https://developer.mozilla.org/en-US/docs/Web/JavaScript
	*/


	/** @type LanguageFn */
	function javascript(hljs) {
	  const regex = hljs.regex;
	  /**
	   * Takes a string like "<Booger" and checks to see
	   * if we can find a matching "</Booger" later in the
	   * content.
	   * @param {RegExpMatchArray} match
	   * @param {{after:number}} param1
	   */
	  const hasClosingTag = (match, { after }) => {
	    const tag = "</" + match[0].slice(1);
	    const pos = match.input.indexOf(tag, after);
	    return pos !== -1;
	  };

	  const IDENT_RE$1 = IDENT_RE;
	  const FRAGMENT = {
	    begin: '<>',
	    end: '</>'
	  };
	  // to avoid some special cases inside isTrulyOpeningTag
	  const XML_SELF_CLOSING = /<[A-Za-z0-9\\._:-]+\s*\/>/;
	  const XML_TAG = {
	    begin: /<[A-Za-z0-9\\._:-]+/,
	    end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
	    /**
	     * @param {RegExpMatchArray} match
	     * @param {CallbackResponse} response
	     */
	    isTrulyOpeningTag: (match, response) => {
	      const afterMatchIndex = match[0].length + match.index;
	      const nextChar = match.input[afterMatchIndex];
	      if (
	        // HTML should not include another raw `<` inside a tag
	        // nested type?
	        // `<Array<Array<number>>`, etc.
	        nextChar === "<" ||
	        // the , gives away that this is not HTML
	        // `<T, A extends keyof T, V>`
	        nextChar === ","
	        ) {
	        response.ignoreMatch();
	        return;
	      }

	      // `<something>`
	      // Quite possibly a tag, lets look for a matching closing tag...
	      if (nextChar === ">") {
	        // if we cannot find a matching closing tag, then we
	        // will ignore it
	        if (!hasClosingTag(match, { after: afterMatchIndex })) {
	          response.ignoreMatch();
	        }
	      }

	      // `<blah />` (self-closing)
	      // handled by simpleSelfClosing rule

	      let m;
	      const afterMatch = match.input.substring(afterMatchIndex);

	      // some more template typing stuff
	      //  <T = any>(key?: string) => Modify<
	      if ((m = afterMatch.match(/^\s*=/))) {
	        response.ignoreMatch();
	        return;
	      }

	      // `<From extends string>`
	      // technically this could be HTML, but it smells like a type
	      // NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276
	      if ((m = afterMatch.match(/^\s+extends\s+/))) {
	        if (m.index === 0) {
	          response.ignoreMatch();
	          // eslint-disable-next-line no-useless-return
	          return;
	        }
	      }
	    }
	  };
	  const KEYWORDS$1 = {
	    $pattern: IDENT_RE,
	    keyword: KEYWORDS,
	    literal: LITERALS,
	    built_in: BUILT_INS,
	    "variable.language": BUILT_IN_VARIABLES
	  };

	  // https://tc39.es/ecma262/#sec-literals-numeric-literals
	  const decimalDigits = '[0-9](_?[0-9])*';
	  const frac = `\\.(${decimalDigits})`;
	  // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral
	  // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
	  const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;
	  const NUMBER = {
	    className: 'number',
	    variants: [
	      // DecimalLiteral
	      { begin: `(\\b(${decimalInteger})((${frac})|\\.)?|(${frac}))` +
	        `[eE][+-]?(${decimalDigits})\\b` },
	      { begin: `\\b(${decimalInteger})\\b((${frac})\\b|\\.)?|(${frac})\\b` },

	      // DecimalBigIntegerLiteral
	      { begin: `\\b(0|[1-9](_?[0-9])*)n\\b` },

	      // NonDecimalIntegerLiteral
	      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
	      { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
	      { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },

	      // LegacyOctalIntegerLiteral (does not include underscore separators)
	      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
	      { begin: "\\b0[0-7]+n?\\b" },
	    ],
	    relevance: 0
	  };

	  const SUBST = {
	    className: 'subst',
	    begin: '\\$\\{',
	    end: '\\}',
	    keywords: KEYWORDS$1,
	    contains: [] // defined later
	  };
	  const HTML_TEMPLATE = {
	    begin: 'html`',
	    end: '',
	    starts: {
	      end: '`',
	      returnEnd: false,
	      contains: [
	        hljs.BACKSLASH_ESCAPE,
	        SUBST
	      ],
	      subLanguage: 'xml'
	    }
	  };
	  const CSS_TEMPLATE = {
	    begin: 'css`',
	    end: '',
	    starts: {
	      end: '`',
	      returnEnd: false,
	      contains: [
	        hljs.BACKSLASH_ESCAPE,
	        SUBST
	      ],
	      subLanguage: 'css'
	    }
	  };
	  const GRAPHQL_TEMPLATE = {
	    begin: 'gql`',
	    end: '',
	    starts: {
	      end: '`',
	      returnEnd: false,
	      contains: [
	        hljs.BACKSLASH_ESCAPE,
	        SUBST
	      ],
	      subLanguage: 'graphql'
	    }
	  };
	  const TEMPLATE_STRING = {
	    className: 'string',
	    begin: '`',
	    end: '`',
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      SUBST
	    ]
	  };
	  const JSDOC_COMMENT = hljs.COMMENT(
	    /\/\*\*(?!\/)/,
	    '\\*/',
	    {
	      relevance: 0,
	      contains: [
	        {
	          begin: '(?=@[A-Za-z]+)',
	          relevance: 0,
	          contains: [
	            {
	              className: 'doctag',
	              begin: '@[A-Za-z]+'
	            },
	            {
	              className: 'type',
	              begin: '\\{',
	              end: '\\}',
	              excludeEnd: true,
	              excludeBegin: true,
	              relevance: 0
	            },
	            {
	              className: 'variable',
	              begin: IDENT_RE$1 + '(?=\\s*(-)|$)',
	              endsParent: true,
	              relevance: 0
	            },
	            // eat spaces (not newlines) so we can find
	            // types or variables
	            {
	              begin: /(?=[^\n])\s/,
	              relevance: 0
	            }
	          ]
	        }
	      ]
	    }
	  );
	  const COMMENT = {
	    className: "comment",
	    variants: [
	      JSDOC_COMMENT,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.C_LINE_COMMENT_MODE
	    ]
	  };
	  const SUBST_INTERNALS = [
	    hljs.APOS_STRING_MODE,
	    hljs.QUOTE_STRING_MODE,
	    HTML_TEMPLATE,
	    CSS_TEMPLATE,
	    GRAPHQL_TEMPLATE,
	    TEMPLATE_STRING,
	    // Skip numbers when they are part of a variable name
	    { match: /\$\d+/ },
	    NUMBER,
	    // This is intentional:
	    // See https://github.com/highlightjs/highlight.js/issues/3288
	    // hljs.REGEXP_MODE
	  ];
	  SUBST.contains = SUBST_INTERNALS
	    .concat({
	      // we need to pair up {} inside our subst to prevent
	      // it from ending too early by matching another }
	      begin: /\{/,
	      end: /\}/,
	      keywords: KEYWORDS$1,
	      contains: [
	        "self"
	      ].concat(SUBST_INTERNALS)
	    });
	  const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);
	  const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([
	    // eat recursive parens in sub expressions
	    {
	      begin: /\(/,
	      end: /\)/,
	      keywords: KEYWORDS$1,
	      contains: ["self"].concat(SUBST_AND_COMMENTS)
	    }
	  ]);
	  const PARAMS = {
	    className: 'params',
	    begin: /\(/,
	    end: /\)/,
	    excludeBegin: true,
	    excludeEnd: true,
	    keywords: KEYWORDS$1,
	    contains: PARAMS_CONTAINS
	  };

	  // ES6 classes
	  const CLASS_OR_EXTENDS = {
	    variants: [
	      // class Car extends vehicle
	      {
	        match: [
	          /class/,
	          /\s+/,
	          IDENT_RE$1,
	          /\s+/,
	          /extends/,
	          /\s+/,
	          regex.concat(IDENT_RE$1, "(", regex.concat(/\./, IDENT_RE$1), ")*")
	        ],
	        scope: {
	          1: "keyword",
	          3: "title.class",
	          5: "keyword",
	          7: "title.class.inherited"
	        }
	      },
	      // class Car
	      {
	        match: [
	          /class/,
	          /\s+/,
	          IDENT_RE$1
	        ],
	        scope: {
	          1: "keyword",
	          3: "title.class"
	        }
	      },

	    ]
	  };

	  const CLASS_REFERENCE = {
	    relevance: 0,
	    match:
	    regex.either(
	      // Hard coded exceptions
	      /\bJSON/,
	      // Float32Array, OutT
	      /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
	      // CSSFactory, CSSFactoryT
	      /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
	      // FPs, FPsT
	      /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/,
	      // P
	      // single letters are not highlighted
	      // BLAH
	      // this will be flagged as a UPPER_CASE_CONSTANT instead
	    ),
	    className: "title.class",
	    keywords: {
	      _: [
	        // se we still get relevance credit for JS library classes
	        ...TYPES,
	        ...ERROR_TYPES
	      ]
	    }
	  };

	  const USE_STRICT = {
	    label: "use_strict",
	    className: 'meta',
	    relevance: 10,
	    begin: /^\s*['"]use (strict|asm)['"]/
	  };

	  const FUNCTION_DEFINITION = {
	    variants: [
	      {
	        match: [
	          /function/,
	          /\s+/,
	          IDENT_RE$1,
	          /(?=\s*\()/
	        ]
	      },
	      // anonymous function
	      {
	        match: [
	          /function/,
	          /\s*(?=\()/
	        ]
	      }
	    ],
	    className: {
	      1: "keyword",
	      3: "title.function"
	    },
	    label: "func.def",
	    contains: [ PARAMS ],
	    illegal: /%/
	  };

	  const UPPER_CASE_CONSTANT = {
	    relevance: 0,
	    match: /\b[A-Z][A-Z_0-9]+\b/,
	    className: "variable.constant"
	  };

	  function noneOf(list) {
	    return regex.concat("(?!", list.join("|"), ")");
	  }

	  const FUNCTION_CALL = {
	    match: regex.concat(
	      /\b/,
	      noneOf([
	        ...BUILT_IN_GLOBALS,
	        "super",
	        "import"
	      ]),
	      IDENT_RE$1, regex.lookahead(/\(/)),
	    className: "title.function",
	    relevance: 0
	  };

	  const PROPERTY_ACCESS = {
	    begin: regex.concat(/\./, regex.lookahead(
	      regex.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/)
	    )),
	    end: IDENT_RE$1,
	    excludeBegin: true,
	    keywords: "prototype",
	    className: "property",
	    relevance: 0
	  };

	  const GETTER_OR_SETTER = {
	    match: [
	      /get|set/,
	      /\s+/,
	      IDENT_RE$1,
	      /(?=\()/
	    ],
	    className: {
	      1: "keyword",
	      3: "title.function"
	    },
	    contains: [
	      { // eat to avoid empty params
	        begin: /\(\)/
	      },
	      PARAMS
	    ]
	  };

	  const FUNC_LEAD_IN_RE = '(\\(' +
	    '[^()]*(\\(' +
	    '[^()]*(\\(' +
	    '[^()]*' +
	    '\\)[^()]*)*' +
	    '\\)[^()]*)*' +
	    '\\)|' + hljs.UNDERSCORE_IDENT_RE + ')\\s*=>';

	  const FUNCTION_VARIABLE = {
	    match: [
	      /const|var|let/, /\s+/,
	      IDENT_RE$1, /\s*/,
	      /=\s*/,
	      /(async\s*)?/, // async is optional
	      regex.lookahead(FUNC_LEAD_IN_RE)
	    ],
	    keywords: "async",
	    className: {
	      1: "keyword",
	      3: "title.function"
	    },
	    contains: [
	      PARAMS
	    ]
	  };

	  return {
	    name: 'JavaScript',
	    aliases: ['js', 'jsx', 'mjs', 'cjs'],
	    keywords: KEYWORDS$1,
	    // this will be extended by TypeScript
	    exports: { PARAMS_CONTAINS, CLASS_REFERENCE },
	    illegal: /#(?![$_A-z])/,
	    contains: [
	      hljs.SHEBANG({
	        label: "shebang",
	        binary: "node",
	        relevance: 5
	      }),
	      USE_STRICT,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      HTML_TEMPLATE,
	      CSS_TEMPLATE,
	      GRAPHQL_TEMPLATE,
	      TEMPLATE_STRING,
	      COMMENT,
	      // Skip numbers when they are part of a variable name
	      { match: /\$\d+/ },
	      NUMBER,
	      CLASS_REFERENCE,
	      {
	        className: 'attr',
	        begin: IDENT_RE$1 + regex.lookahead(':'),
	        relevance: 0
	      },
	      FUNCTION_VARIABLE,
	      { // "value" container
	        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
	        keywords: 'return throw case',
	        relevance: 0,
	        contains: [
	          COMMENT,
	          hljs.REGEXP_MODE,
	          {
	            className: 'function',
	            // we have to count the parens to make sure we actually have the
	            // correct bounding ( ) before the =>.  There could be any number of
	            // sub-expressions inside also surrounded by parens.
	            begin: FUNC_LEAD_IN_RE,
	            returnBegin: true,
	            end: '\\s*=>',
	            contains: [
	              {
	                className: 'params',
	                variants: [
	                  {
	                    begin: hljs.UNDERSCORE_IDENT_RE,
	                    relevance: 0
	                  },
	                  {
	                    className: null,
	                    begin: /\(\s*\)/,
	                    skip: true
	                  },
	                  {
	                    begin: /\(/,
	                    end: /\)/,
	                    excludeBegin: true,
	                    excludeEnd: true,
	                    keywords: KEYWORDS$1,
	                    contains: PARAMS_CONTAINS
	                  }
	                ]
	              }
	            ]
	          },
	          { // could be a comma delimited list of params to a function call
	            begin: /,/,
	            relevance: 0
	          },
	          {
	            match: /\s+/,
	            relevance: 0
	          },
	          { // JSX
	            variants: [
	              { begin: FRAGMENT.begin, end: FRAGMENT.end },
	              { match: XML_SELF_CLOSING },
	              {
	                begin: XML_TAG.begin,
	                // we carefully check the opening tag to see if it truly
	                // is a tag and not a false positive
	                'on:begin': XML_TAG.isTrulyOpeningTag,
	                end: XML_TAG.end
	              }
	            ],
	            subLanguage: 'xml',
	            contains: [
	              {
	                begin: XML_TAG.begin,
	                end: XML_TAG.end,
	                skip: true,
	                contains: ['self']
	              }
	            ]
	          }
	        ],
	      },
	      FUNCTION_DEFINITION,
	      {
	        // prevent this from getting swallowed up by function
	        // since they appear "function like"
	        beginKeywords: "while if switch catch for"
	      },
	      {
	        // we have to count the parens to make sure we actually have the correct
	        // bounding ( ).  There could be any number of sub-expressions inside
	        // also surrounded by parens.
	        begin: '\\b(?!function)' + hljs.UNDERSCORE_IDENT_RE +
	          '\\(' + // first parens
	          '[^()]*(\\(' +
	            '[^()]*(\\(' +
	              '[^()]*' +
	            '\\)[^()]*)*' +
	          '\\)[^()]*)*' +
	          '\\)\\s*\\{', // end parens
	        returnBegin:true,
	        label: "func.def",
	        contains: [
	          PARAMS,
	          hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1, className: "title.function" })
	        ]
	      },
	      // catch ... so it won't trigger the property rule below
	      {
	        match: /\.\.\./,
	        relevance: 0
	      },
	      PROPERTY_ACCESS,
	      // hack: prevents detection of keywords in some circumstances
	      // .keyword()
	      // $keyword = x
	      {
	        match: '\\$' + IDENT_RE$1,
	        relevance: 0
	      },
	      {
	        match: [ /\bconstructor(?=\s*\()/ ],
	        className: { 1: "title.function" },
	        contains: [ PARAMS ]
	      },
	      FUNCTION_CALL,
	      UPPER_CASE_CONSTANT,
	      CLASS_OR_EXTENDS,
	      GETTER_OR_SETTER,
	      {
	        match: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
	      }
	    ]
	  };
	}

	javascript_1 = javascript;
	return javascript_1;
}

/*
 Language: JBoss CLI
 Author: Raphaël Parrëe <rparree@edc4it.com>
 Description: language definition jboss cli
 Website: https://docs.jboss.org/author/display/WFLY/Command+Line+Interface
 Category: config
 */

var jbossCli_1;
var hasRequiredJbossCli;

function requireJbossCli () {
	if (hasRequiredJbossCli) return jbossCli_1;
	hasRequiredJbossCli = 1;
	function jbossCli(hljs) {
	  const PARAM = {
	    begin: /[\w-]+ *=/,
	    returnBegin: true,
	    relevance: 0,
	    contains: [
	      {
	        className: 'attr',
	        begin: /[\w-]+/
	      }
	    ]
	  };
	  const PARAMSBLOCK = {
	    className: 'params',
	    begin: /\(/,
	    end: /\)/,
	    contains: [ PARAM ],
	    relevance: 0
	  };
	  const OPERATION = {
	    className: 'function',
	    begin: /:[\w\-.]+/,
	    relevance: 0
	  };
	  const PATH = {
	    className: 'string',
	    begin: /\B([\/.])[\w\-.\/=]+/
	  };
	  const COMMAND_PARAMS = {
	    className: 'params',
	    begin: /--[\w\-=\/]+/
	  };
	  return {
	    name: 'JBoss CLI',
	    aliases: [ 'wildfly-cli' ],
	    keywords: {
	      $pattern: '[a-z\-]+',
	      keyword: 'alias batch cd clear command connect connection-factory connection-info data-source deploy '
	      + 'deployment-info deployment-overlay echo echo-dmr help history if jdbc-driver-info jms-queue|20 jms-topic|20 ls '
	      + 'patch pwd quit read-attribute read-operation reload rollout-plan run-batch set shutdown try unalias '
	      + 'undeploy unset version xa-data-source', // module
	      literal: 'true false'
	    },
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      COMMAND_PARAMS,
	      OPERATION,
	      PATH,
	      PARAMSBLOCK
	    ]
	  };
	}

	jbossCli_1 = jbossCli;
	return jbossCli_1;
}

/*
Language: JSON
Description: JSON (JavaScript Object Notation) is a lightweight data-interchange format.
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Website: http://www.json.org
Category: common, protocols, web
*/

var json_1;
var hasRequiredJson;

function requireJson () {
	if (hasRequiredJson) return json_1;
	hasRequiredJson = 1;
	function json(hljs) {
	  const ATTRIBUTE = {
	    className: 'attr',
	    begin: /"(\\.|[^\\"\r\n])*"(?=\s*:)/,
	    relevance: 1.01
	  };
	  const PUNCTUATION = {
	    match: /[{}[\],:]/,
	    className: "punctuation",
	    relevance: 0
	  };
	  const LITERALS = [
	    "true",
	    "false",
	    "null"
	  ];
	  // NOTE: normally we would rely on `keywords` for this but using a mode here allows us
	  // - to use the very tight `illegal: \S` rule later to flag any other character
	  // - as illegal indicating that despite looking like JSON we do not truly have
	  // - JSON and thus improve false-positively greatly since JSON will try and claim
	  // - all sorts of JSON looking stuff
	  const LITERALS_MODE = {
	    scope: "literal",
	    beginKeywords: LITERALS.join(" "),
	  };

	  return {
	    name: 'JSON',
	    keywords:{
	      literal: LITERALS,
	    },
	    contains: [
	      ATTRIBUTE,
	      PUNCTUATION,
	      hljs.QUOTE_STRING_MODE,
	      LITERALS_MODE,
	      hljs.C_NUMBER_MODE,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE
	    ],
	    illegal: '\\S'
	  };
	}

	json_1 = json;
	return json_1;
}

/*
Language: Julia
Description: Julia is a high-level, high-performance, dynamic programming language.
Author: Kenta Sato <bicycle1885@gmail.com>
Contributors: Alex Arslan <ararslan@comcast.net>, Fredrik Ekre <ekrefredrik@gmail.com>
Website: https://julialang.org
*/

var julia_1;
var hasRequiredJulia;

function requireJulia () {
	if (hasRequiredJulia) return julia_1;
	hasRequiredJulia = 1;
	function julia(hljs) {
	  // Since there are numerous special names in Julia, it is too much trouble
	  // to maintain them by hand. Hence these names (i.e. keywords, literals and
	  // built-ins) are automatically generated from Julia 1.5.2 itself through
	  // the following scripts for each.

	  // ref: https://docs.julialang.org/en/v1/manual/variables/#Allowed-Variable-Names
	  const VARIABLE_NAME_RE = '[A-Za-z_\\u00A1-\\uFFFF][A-Za-z_0-9\\u00A1-\\uFFFF]*';

	  // # keyword generator, multi-word keywords handled manually below (Julia 1.5.2)
	  // import REPL.REPLCompletions
	  // res = String["in", "isa", "where"]
	  // for kw in collect(x.keyword for x in REPLCompletions.complete_keyword(""))
	  //     if !(contains(kw, " ") || kw == "struct")
	  //         push!(res, kw)
	  //     end
	  // end
	  // sort!(unique!(res))
	  // foreach(x -> println("\'", x, "\',"), res)
	  const KEYWORD_LIST = [
	    'baremodule',
	    'begin',
	    'break',
	    'catch',
	    'ccall',
	    'const',
	    'continue',
	    'do',
	    'else',
	    'elseif',
	    'end',
	    'export',
	    'false',
	    'finally',
	    'for',
	    'function',
	    'global',
	    'if',
	    'import',
	    'in',
	    'isa',
	    'let',
	    'local',
	    'macro',
	    'module',
	    'quote',
	    'return',
	    'true',
	    'try',
	    'using',
	    'where',
	    'while',
	  ];

	  // # literal generator (Julia 1.5.2)
	  // import REPL.REPLCompletions
	  // res = String["true", "false"]
	  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),
	  //                     REPLCompletions.completions("", 0)[1])
	  //     try
	  //         v = eval(Symbol(compl.mod))
	  //         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)
	  //             push!(res, compl.mod)
	  //         end
	  //     catch e
	  //     end
	  // end
	  // sort!(unique!(res))
	  // foreach(x -> println("\'", x, "\',"), res)
	  const LITERAL_LIST = [
	    'ARGS',
	    'C_NULL',
	    'DEPOT_PATH',
	    'ENDIAN_BOM',
	    'ENV',
	    'Inf',
	    'Inf16',
	    'Inf32',
	    'Inf64',
	    'InsertionSort',
	    'LOAD_PATH',
	    'MergeSort',
	    'NaN',
	    'NaN16',
	    'NaN32',
	    'NaN64',
	    'PROGRAM_FILE',
	    'QuickSort',
	    'RoundDown',
	    'RoundFromZero',
	    'RoundNearest',
	    'RoundNearestTiesAway',
	    'RoundNearestTiesUp',
	    'RoundToZero',
	    'RoundUp',
	    'VERSION|0',
	    'devnull',
	    'false',
	    'im',
	    'missing',
	    'nothing',
	    'pi',
	    'stderr',
	    'stdin',
	    'stdout',
	    'true',
	    'undef',
	    'π',
	    'ℯ',
	  ];

	  // # built_in generator (Julia 1.5.2)
	  // import REPL.REPLCompletions
	  // res = String[]
	  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),
	  //                     REPLCompletions.completions("", 0)[1])
	  //     try
	  //         v = eval(Symbol(compl.mod))
	  //         if (v isa Type || v isa TypeVar) && (compl.mod != "=>")
	  //             push!(res, compl.mod)
	  //         end
	  //     catch e
	  //     end
	  // end
	  // sort!(unique!(res))
	  // foreach(x -> println("\'", x, "\',"), res)
	  const BUILT_IN_LIST = [
	    'AbstractArray',
	    'AbstractChannel',
	    'AbstractChar',
	    'AbstractDict',
	    'AbstractDisplay',
	    'AbstractFloat',
	    'AbstractIrrational',
	    'AbstractMatrix',
	    'AbstractRange',
	    'AbstractSet',
	    'AbstractString',
	    'AbstractUnitRange',
	    'AbstractVecOrMat',
	    'AbstractVector',
	    'Any',
	    'ArgumentError',
	    'Array',
	    'AssertionError',
	    'BigFloat',
	    'BigInt',
	    'BitArray',
	    'BitMatrix',
	    'BitSet',
	    'BitVector',
	    'Bool',
	    'BoundsError',
	    'CapturedException',
	    'CartesianIndex',
	    'CartesianIndices',
	    'Cchar',
	    'Cdouble',
	    'Cfloat',
	    'Channel',
	    'Char',
	    'Cint',
	    'Cintmax_t',
	    'Clong',
	    'Clonglong',
	    'Cmd',
	    'Colon',
	    'Complex',
	    'ComplexF16',
	    'ComplexF32',
	    'ComplexF64',
	    'CompositeException',
	    'Condition',
	    'Cptrdiff_t',
	    'Cshort',
	    'Csize_t',
	    'Cssize_t',
	    'Cstring',
	    'Cuchar',
	    'Cuint',
	    'Cuintmax_t',
	    'Culong',
	    'Culonglong',
	    'Cushort',
	    'Cvoid',
	    'Cwchar_t',
	    'Cwstring',
	    'DataType',
	    'DenseArray',
	    'DenseMatrix',
	    'DenseVecOrMat',
	    'DenseVector',
	    'Dict',
	    'DimensionMismatch',
	    'Dims',
	    'DivideError',
	    'DomainError',
	    'EOFError',
	    'Enum',
	    'ErrorException',
	    'Exception',
	    'ExponentialBackOff',
	    'Expr',
	    'Float16',
	    'Float32',
	    'Float64',
	    'Function',
	    'GlobalRef',
	    'HTML',
	    'IO',
	    'IOBuffer',
	    'IOContext',
	    'IOStream',
	    'IdDict',
	    'IndexCartesian',
	    'IndexLinear',
	    'IndexStyle',
	    'InexactError',
	    'InitError',
	    'Int',
	    'Int128',
	    'Int16',
	    'Int32',
	    'Int64',
	    'Int8',
	    'Integer',
	    'InterruptException',
	    'InvalidStateException',
	    'Irrational',
	    'KeyError',
	    'LinRange',
	    'LineNumberNode',
	    'LinearIndices',
	    'LoadError',
	    'MIME',
	    'Matrix',
	    'Method',
	    'MethodError',
	    'Missing',
	    'MissingException',
	    'Module',
	    'NTuple',
	    'NamedTuple',
	    'Nothing',
	    'Number',
	    'OrdinalRange',
	    'OutOfMemoryError',
	    'OverflowError',
	    'Pair',
	    'PartialQuickSort',
	    'PermutedDimsArray',
	    'Pipe',
	    'ProcessFailedException',
	    'Ptr',
	    'QuoteNode',
	    'Rational',
	    'RawFD',
	    'ReadOnlyMemoryError',
	    'Real',
	    'ReentrantLock',
	    'Ref',
	    'Regex',
	    'RegexMatch',
	    'RoundingMode',
	    'SegmentationFault',
	    'Set',
	    'Signed',
	    'Some',
	    'StackOverflowError',
	    'StepRange',
	    'StepRangeLen',
	    'StridedArray',
	    'StridedMatrix',
	    'StridedVecOrMat',
	    'StridedVector',
	    'String',
	    'StringIndexError',
	    'SubArray',
	    'SubString',
	    'SubstitutionString',
	    'Symbol',
	    'SystemError',
	    'Task',
	    'TaskFailedException',
	    'Text',
	    'TextDisplay',
	    'Timer',
	    'Tuple',
	    'Type',
	    'TypeError',
	    'TypeVar',
	    'UInt',
	    'UInt128',
	    'UInt16',
	    'UInt32',
	    'UInt64',
	    'UInt8',
	    'UndefInitializer',
	    'UndefKeywordError',
	    'UndefRefError',
	    'UndefVarError',
	    'Union',
	    'UnionAll',
	    'UnitRange',
	    'Unsigned',
	    'Val',
	    'Vararg',
	    'VecElement',
	    'VecOrMat',
	    'Vector',
	    'VersionNumber',
	    'WeakKeyDict',
	    'WeakRef',
	  ];

	  const KEYWORDS = {
	    $pattern: VARIABLE_NAME_RE,
	    keyword: KEYWORD_LIST,
	    literal: LITERAL_LIST,
	    built_in: BUILT_IN_LIST,
	  };

	  // placeholder for recursive self-reference
	  const DEFAULT = {
	    keywords: KEYWORDS,
	    illegal: /<\//
	  };

	  // ref: https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/
	  const NUMBER = {
	    className: 'number',
	    // supported numeric literals:
	    //  * binary literal (e.g. 0x10)
	    //  * octal literal (e.g. 0o76543210)
	    //  * hexadecimal literal (e.g. 0xfedcba876543210)
	    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)
	    //  * decimal literal (e.g. 9876543210, 100_000_000)
	    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)
	    begin: /(\b0x[\d_]*(\.[\d_]*)?|0x\.\d[\d_]*)p[-+]?\d+|\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\b\d[\d_]*(\.[\d_]*)?|\.\d[\d_]*)([eEfF][-+]?\d+)?/,
	    relevance: 0
	  };

	  const CHAR = {
	    className: 'string',
	    begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
	  };

	  const INTERPOLATION = {
	    className: 'subst',
	    begin: /\$\(/,
	    end: /\)/,
	    keywords: KEYWORDS
	  };

	  const INTERPOLATED_VARIABLE = {
	    className: 'variable',
	    begin: '\\$' + VARIABLE_NAME_RE
	  };

	  // TODO: neatly escape normal code in string literal
	  const STRING = {
	    className: 'string',
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      INTERPOLATION,
	      INTERPOLATED_VARIABLE
	    ],
	    variants: [
	      {
	        begin: /\w*"""/,
	        end: /"""\w*/,
	        relevance: 10
	      },
	      {
	        begin: /\w*"/,
	        end: /"\w*/
	      }
	    ]
	  };

	  const COMMAND = {
	    className: 'string',
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      INTERPOLATION,
	      INTERPOLATED_VARIABLE
	    ],
	    begin: '`',
	    end: '`'
	  };

	  const MACROCALL = {
	    className: 'meta',
	    begin: '@' + VARIABLE_NAME_RE
	  };

	  const COMMENT = {
	    className: 'comment',
	    variants: [
	      {
	        begin: '#=',
	        end: '=#',
	        relevance: 10
	      },
	      {
	        begin: '#',
	        end: '$'
	      }
	    ]
	  };

	  DEFAULT.name = 'Julia';
	  DEFAULT.contains = [
	    NUMBER,
	    CHAR,
	    STRING,
	    COMMAND,
	    MACROCALL,
	    COMMENT,
	    hljs.HASH_COMMENT_MODE,
	    {
	      className: 'keyword',
	      begin:
	        '\\b(((abstract|primitive)\\s+)type|(mutable\\s+)?struct)\\b'
	    },
	    { begin: /<:/ } // relevance booster
	  ];
	  INTERPOLATION.contains = DEFAULT.contains;

	  return DEFAULT;
	}

	julia_1 = julia;
	return julia_1;
}

/*
Language: Julia REPL
Description: Julia REPL sessions
Author: Morten Piibeleht <morten.piibeleht@gmail.com>
Website: https://julialang.org
Requires: julia.js

The Julia REPL code blocks look something like the following:

  julia> function foo(x)
             x + 1
         end
  foo (generic function with 1 method)

They start on a new line with "julia>". Usually there should also be a space after this, but
we also allow the code to start right after the > character. The code may run over multiple
lines, but the additional lines must start with six spaces (i.e. be indented to match
"julia>"). The rest of the code is assumed to be output from the executed code and will be
left un-highlighted.

Using simply spaces to identify line continuations may get a false-positive if the output
also prints out six spaces, but such cases should be rare.
*/

var juliaRepl_1;
var hasRequiredJuliaRepl;

function requireJuliaRepl () {
	if (hasRequiredJuliaRepl) return juliaRepl_1;
	hasRequiredJuliaRepl = 1;
	function juliaRepl(hljs) {
	  return {
	    name: 'Julia REPL',
	    contains: [
	      {
	        className: 'meta.prompt',
	        begin: /^julia>/,
	        relevance: 10,
	        starts: {
	          // end the highlighting if we are on a new line and the line does not have at
	          // least six spaces in the beginning
	          end: /^(?![ ]{6})/,
	          subLanguage: 'julia'
	        },
	      },
	    ],
	    // jldoctest Markdown blocks are used in the Julia manual and package docs indicate
	    // code snippets that should be verified when the documentation is built. They can be
	    // either REPL-like or script-like, but are usually REPL-like and therefore we apply
	    // julia-repl highlighting to them. More information can be found in Documenter's
	    // manual: https://juliadocs.github.io/Documenter.jl/latest/man/doctests.html
	    aliases: [ 'jldoctest' ],
	  };
	}

	juliaRepl_1 = juliaRepl;
	return juliaRepl_1;
}

var kotlin_1;
var hasRequiredKotlin;

function requireKotlin () {
	if (hasRequiredKotlin) return kotlin_1;
	hasRequiredKotlin = 1;
	// https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10
	var decimalDigits = '[0-9](_*[0-9])*';
	var frac = `\\.(${decimalDigits})`;
	var hexDigits = '[0-9a-fA-F](_*[0-9a-fA-F])*';
	var NUMERIC = {
	  className: 'number',
	  variants: [
	    // DecimalFloatingPointLiteral
	    // including ExponentPart
	    { begin: `(\\b(${decimalDigits})((${frac})|\\.)?|(${frac}))` +
	      `[eE][+-]?(${decimalDigits})[fFdD]?\\b` },
	    // excluding ExponentPart
	    { begin: `\\b(${decimalDigits})((${frac})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
	    { begin: `(${frac})[fFdD]?\\b` },
	    { begin: `\\b(${decimalDigits})[fFdD]\\b` },

	    // HexadecimalFloatingPointLiteral
	    { begin: `\\b0[xX]((${hexDigits})\\.?|(${hexDigits})?\\.(${hexDigits}))` +
	      `[pP][+-]?(${decimalDigits})[fFdD]?\\b` },

	    // DecimalIntegerLiteral
	    { begin: '\\b(0|[1-9](_*[0-9])*)[lL]?\\b' },

	    // HexIntegerLiteral
	    { begin: `\\b0[xX](${hexDigits})[lL]?\\b` },

	    // OctalIntegerLiteral
	    { begin: '\\b0(_*[0-7])*[lL]?\\b' },

	    // BinaryIntegerLiteral
	    { begin: '\\b0[bB][01](_*[01])*[lL]?\\b' },
	  ],
	  relevance: 0
	};

	/*
	 Language: Kotlin
	 Description: Kotlin is an OSS statically typed programming language that targets the JVM, Android, JavaScript and Native.
	 Author: Sergey Mashkov <cy6erGn0m@gmail.com>
	 Website: https://kotlinlang.org
	 Category: common
	 */


	function kotlin(hljs) {
	  const KEYWORDS = {
	    keyword:
	      'abstract as val var vararg get set class object open private protected public noinline '
	      + 'crossinline dynamic final enum if else do while for when throw try catch finally '
	      + 'import package is in fun override companion reified inline lateinit init '
	      + 'interface annotation data sealed internal infix operator out by constructor super '
	      + 'tailrec where const inner suspend typealias external expect actual',
	    built_in:
	      'Byte Short Char Int Long Boolean Float Double Void Unit Nothing',
	    literal:
	      'true false null'
	  };
	  const KEYWORDS_WITH_LABEL = {
	    className: 'keyword',
	    begin: /\b(break|continue|return|this)\b/,
	    starts: { contains: [
	      {
	        className: 'symbol',
	        begin: /@\w+/
	      }
	    ] }
	  };
	  const LABEL = {
	    className: 'symbol',
	    begin: hljs.UNDERSCORE_IDENT_RE + '@'
	  };

	  // for string templates
	  const SUBST = {
	    className: 'subst',
	    begin: /\$\{/,
	    end: /\}/,
	    contains: [ hljs.C_NUMBER_MODE ]
	  };
	  const VARIABLE = {
	    className: 'variable',
	    begin: '\\$' + hljs.UNDERSCORE_IDENT_RE
	  };
	  const STRING = {
	    className: 'string',
	    variants: [
	      {
	        begin: '"""',
	        end: '"""(?=[^"])',
	        contains: [
	          VARIABLE,
	          SUBST
	        ]
	      },
	      // Can't use built-in modes easily, as we want to use STRING in the meta
	      // context as 'meta-string' and there's no syntax to remove explicitly set
	      // classNames in built-in modes.
	      {
	        begin: '\'',
	        end: '\'',
	        illegal: /\n/,
	        contains: [ hljs.BACKSLASH_ESCAPE ]
	      },
	      {
	        begin: '"',
	        end: '"',
	        illegal: /\n/,
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          VARIABLE,
	          SUBST
	        ]
	      }
	    ]
	  };
	  SUBST.contains.push(STRING);

	  const ANNOTATION_USE_SITE = {
	    className: 'meta',
	    begin: '@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*' + hljs.UNDERSCORE_IDENT_RE + ')?'
	  };
	  const ANNOTATION = {
	    className: 'meta',
	    begin: '@' + hljs.UNDERSCORE_IDENT_RE,
	    contains: [
	      {
	        begin: /\(/,
	        end: /\)/,
	        contains: [
	          hljs.inherit(STRING, { className: 'string' }),
	          "self"
	        ]
	      }
	    ]
	  };

	  // https://kotlinlang.org/docs/reference/whatsnew11.html#underscores-in-numeric-literals
	  // According to the doc above, the number mode of kotlin is the same as java 8,
	  // so the code below is copied from java.js
	  const KOTLIN_NUMBER_MODE = NUMERIC;
	  const KOTLIN_NESTED_COMMENT = hljs.COMMENT(
	    '/\\*', '\\*/',
	    { contains: [ hljs.C_BLOCK_COMMENT_MODE ] }
	  );
	  const KOTLIN_PAREN_TYPE = { variants: [
	    {
	      className: 'type',
	      begin: hljs.UNDERSCORE_IDENT_RE
	    },
	    {
	      begin: /\(/,
	      end: /\)/,
	      contains: [] // defined later
	    }
	  ] };
	  const KOTLIN_PAREN_TYPE2 = KOTLIN_PAREN_TYPE;
	  KOTLIN_PAREN_TYPE2.variants[1].contains = [ KOTLIN_PAREN_TYPE ];
	  KOTLIN_PAREN_TYPE.variants[1].contains = [ KOTLIN_PAREN_TYPE2 ];

	  return {
	    name: 'Kotlin',
	    aliases: [
	      'kt',
	      'kts'
	    ],
	    keywords: KEYWORDS,
	    contains: [
	      hljs.COMMENT(
	        '/\\*\\*',
	        '\\*/',
	        {
	          relevance: 0,
	          contains: [
	            {
	              className: 'doctag',
	              begin: '@[A-Za-z]+'
	            }
	          ]
	        }
	      ),
	      hljs.C_LINE_COMMENT_MODE,
	      KOTLIN_NESTED_COMMENT,
	      KEYWORDS_WITH_LABEL,
	      LABEL,
	      ANNOTATION_USE_SITE,
	      ANNOTATION,
	      {
	        className: 'function',
	        beginKeywords: 'fun',
	        end: '[(]|$',
	        returnBegin: true,
	        excludeEnd: true,
	        keywords: KEYWORDS,
	        relevance: 5,
	        contains: [
	          {
	            begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
	            returnBegin: true,
	            relevance: 0,
	            contains: [ hljs.UNDERSCORE_TITLE_MODE ]
	          },
	          {
	            className: 'type',
	            begin: /</,
	            end: />/,
	            keywords: 'reified',
	            relevance: 0
	          },
	          {
	            className: 'params',
	            begin: /\(/,
	            end: /\)/,
	            endsParent: true,
	            keywords: KEYWORDS,
	            relevance: 0,
	            contains: [
	              {
	                begin: /:/,
	                end: /[=,\/]/,
	                endsWithParent: true,
	                contains: [
	                  KOTLIN_PAREN_TYPE,
	                  hljs.C_LINE_COMMENT_MODE,
	                  KOTLIN_NESTED_COMMENT
	                ],
	                relevance: 0
	              },
	              hljs.C_LINE_COMMENT_MODE,
	              KOTLIN_NESTED_COMMENT,
	              ANNOTATION_USE_SITE,
	              ANNOTATION,
	              STRING,
	              hljs.C_NUMBER_MODE
	            ]
	          },
	          KOTLIN_NESTED_COMMENT
	        ]
	      },
	      {
	        begin: [
	          /class|interface|trait/,
	          /\s+/,
	          hljs.UNDERSCORE_IDENT_RE
	        ],
	        beginScope: {
	          3: "title.class"
	        },
	        keywords: 'class interface trait',
	        end: /[:\{(]|$/,
	        excludeEnd: true,
	        illegal: 'extends implements',
	        contains: [
	          { beginKeywords: 'public protected internal private constructor' },
	          hljs.UNDERSCORE_TITLE_MODE,
	          {
	            className: 'type',
	            begin: /</,
	            end: />/,
	            excludeBegin: true,
	            excludeEnd: true,
	            relevance: 0
	          },
	          {
	            className: 'type',
	            begin: /[,:]\s*/,
	            end: /[<\(,){\s]|$/,
	            excludeBegin: true,
	            returnEnd: true
	          },
	          ANNOTATION_USE_SITE,
	          ANNOTATION
	        ]
	      },
	      STRING,
	      {
	        className: 'meta',
	        begin: "^#!/usr/bin/env",
	        end: '$',
	        illegal: '\n'
	      },
	      KOTLIN_NUMBER_MODE
	    ]
	  };
	}

	kotlin_1 = kotlin;
	return kotlin_1;
}

/*
Language: Lasso
Author: Eric Knibbe <eric@lassosoft.com>
Description: Lasso is a language and server platform for database-driven web applications. This definition handles Lasso 9 syntax and LassoScript for Lasso 8.6 and earlier.
Website: http://www.lassosoft.com/What-Is-Lasso
*/

var lasso_1;
var hasRequiredLasso;

function requireLasso () {
	if (hasRequiredLasso) return lasso_1;
	hasRequiredLasso = 1;
	function lasso(hljs) {
	  const LASSO_IDENT_RE = '[a-zA-Z_][\\w.]*';
	  const LASSO_ANGLE_RE = '<\\?(lasso(script)?|=)';
	  const LASSO_CLOSE_RE = '\\]|\\?>';
	  const LASSO_KEYWORDS = {
	    $pattern: LASSO_IDENT_RE + '|&[lg]t;',
	    literal:
	      'true false none minimal full all void and or not '
	      + 'bw nbw ew new cn ncn lt lte gt gte eq neq rx nrx ft',
	    built_in:
	      'array date decimal duration integer map pair string tag xml null '
	      + 'boolean bytes keyword list locale queue set stack staticarray '
	      + 'local var variable global data self inherited currentcapture givenblock',
	    keyword:
	      'cache database_names database_schemanames database_tablenames '
	      + 'define_tag define_type email_batch encode_set html_comment handle '
	      + 'handle_error header if inline iterate ljax_target link '
	      + 'link_currentaction link_currentgroup link_currentrecord link_detail '
	      + 'link_firstgroup link_firstrecord link_lastgroup link_lastrecord '
	      + 'link_nextgroup link_nextrecord link_prevgroup link_prevrecord log '
	      + 'loop namespace_using output_none portal private protect records '
	      + 'referer referrer repeating resultset rows search_args '
	      + 'search_arguments select sort_args sort_arguments thread_atomic '
	      + 'value_list while abort case else fail_if fail_ifnot fail if_empty '
	      + 'if_false if_null if_true loop_abort loop_continue loop_count params '
	      + 'params_up return return_value run_children soap_definetag '
	      + 'soap_lastrequest soap_lastresponse tag_name ascending average by '
	      + 'define descending do equals frozen group handle_failure import in '
	      + 'into join let match max min on order parent protected provide public '
	      + 'require returnhome skip split_thread sum take thread to trait type '
	      + 'where with yield yieldhome'
	  };
	  const HTML_COMMENT = hljs.COMMENT(
	    '<!--',
	    '-->',
	    { relevance: 0 }
	  );
	  const LASSO_NOPROCESS = {
	    className: 'meta',
	    begin: '\\[noprocess\\]',
	    starts: {
	      end: '\\[/noprocess\\]',
	      returnEnd: true,
	      contains: [ HTML_COMMENT ]
	    }
	  };
	  const LASSO_START = {
	    className: 'meta',
	    begin: '\\[/noprocess|' + LASSO_ANGLE_RE
	  };
	  const LASSO_DATAMEMBER = {
	    className: 'symbol',
	    begin: '\'' + LASSO_IDENT_RE + '\''
	  };
	  const LASSO_CODE = [
	    hljs.C_LINE_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE,
	    hljs.inherit(hljs.C_NUMBER_MODE, { begin: hljs.C_NUMBER_RE + '|(-?infinity|NaN)\\b' }),
	    hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
	    hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
	    {
	      className: 'string',
	      begin: '`',
	      end: '`'
	    },
	    { // variables
	      variants: [
	        { begin: '[#$]' + LASSO_IDENT_RE },
	        {
	          begin: '#',
	          end: '\\d+',
	          illegal: '\\W'
	        }
	      ] },
	    {
	      className: 'type',
	      begin: '::\\s*',
	      end: LASSO_IDENT_RE,
	      illegal: '\\W'
	    },
	    {
	      className: 'params',
	      variants: [
	        {
	          begin: '-(?!infinity)' + LASSO_IDENT_RE,
	          relevance: 0
	        },
	        { begin: '(\\.\\.\\.)' }
	      ]
	    },
	    {
	      begin: /(->|\.)\s*/,
	      relevance: 0,
	      contains: [ LASSO_DATAMEMBER ]
	    },
	    {
	      className: 'class',
	      beginKeywords: 'define',
	      returnEnd: true,
	      end: '\\(|=>',
	      contains: [ hljs.inherit(hljs.TITLE_MODE, { begin: LASSO_IDENT_RE + '(=(?!>))?|[-+*/%](?!>)' }) ]
	    }
	  ];
	  return {
	    name: 'Lasso',
	    aliases: [
	      'ls',
	      'lassoscript'
	    ],
	    case_insensitive: true,
	    keywords: LASSO_KEYWORDS,
	    contains: [
	      {
	        className: 'meta',
	        begin: LASSO_CLOSE_RE,
	        relevance: 0,
	        starts: { // markup
	          end: '\\[|' + LASSO_ANGLE_RE,
	          returnEnd: true,
	          relevance: 0,
	          contains: [ HTML_COMMENT ]
	        }
	      },
	      LASSO_NOPROCESS,
	      LASSO_START,
	      {
	        className: 'meta',
	        begin: '\\[no_square_brackets',
	        starts: {
	          end: '\\[/no_square_brackets\\]', // not implemented in the language
	          keywords: LASSO_KEYWORDS,
	          contains: [
	            {
	              className: 'meta',
	              begin: LASSO_CLOSE_RE,
	              relevance: 0,
	              starts: {
	                end: '\\[noprocess\\]|' + LASSO_ANGLE_RE,
	                returnEnd: true,
	                contains: [ HTML_COMMENT ]
	              }
	            },
	            LASSO_NOPROCESS,
	            LASSO_START
	          ].concat(LASSO_CODE)
	        }
	      },
	      {
	        className: 'meta',
	        begin: '\\[',
	        relevance: 0
	      },
	      {
	        className: 'meta',
	        begin: '^#!',
	        end: 'lasso9$',
	        relevance: 10
	      }
	    ].concat(LASSO_CODE)
	  };
	}

	lasso_1 = lasso;
	return lasso_1;
}

/*
Language: LaTeX
Author: Benedikt Wilde <bwilde@posteo.de>
Website: https://www.latex-project.org
Category: markup
*/

var latex_1;
var hasRequiredLatex;

function requireLatex () {
	if (hasRequiredLatex) return latex_1;
	hasRequiredLatex = 1;
	/** @type LanguageFn */
	function latex(hljs) {
	  const regex = hljs.regex;
	  const KNOWN_CONTROL_WORDS = regex.either(...[
	    '(?:NeedsTeXFormat|RequirePackage|GetIdInfo)',
	    'Provides(?:Expl)?(?:Package|Class|File)',
	    '(?:DeclareOption|ProcessOptions)',
	    '(?:documentclass|usepackage|input|include)',
	    'makeat(?:letter|other)',
	    'ExplSyntax(?:On|Off)',
	    '(?:new|renew|provide)?command',
	    '(?:re)newenvironment',
	    '(?:New|Renew|Provide|Declare)(?:Expandable)?DocumentCommand',
	    '(?:New|Renew|Provide|Declare)DocumentEnvironment',
	    '(?:(?:e|g|x)?def|let)',
	    '(?:begin|end)',
	    '(?:part|chapter|(?:sub){0,2}section|(?:sub)?paragraph)',
	    'caption',
	    '(?:label|(?:eq|page|name)?ref|(?:paren|foot|super)?cite)',
	    '(?:alpha|beta|[Gg]amma|[Dd]elta|(?:var)?epsilon|zeta|eta|[Tt]heta|vartheta)',
	    '(?:iota|(?:var)?kappa|[Ll]ambda|mu|nu|[Xx]i|[Pp]i|varpi|(?:var)rho)',
	    '(?:[Ss]igma|varsigma|tau|[Uu]psilon|[Pp]hi|varphi|chi|[Pp]si|[Oo]mega)',
	    '(?:frac|sum|prod|lim|infty|times|sqrt|leq|geq|left|right|middle|[bB]igg?)',
	    '(?:[lr]angle|q?quad|[lcvdi]?dots|d?dot|hat|tilde|bar)'
	  ].map(word => word + '(?![a-zA-Z@:_])'));
	  const L3_REGEX = new RegExp([
	    // A function \module_function_name:signature or \__module_function_name:signature,
	    // where both module and function_name need at least two characters and
	    // function_name may contain single underscores.
	    '(?:__)?[a-zA-Z]{2,}_[a-zA-Z](?:_?[a-zA-Z])+:[a-zA-Z]*',
	    // A variable \scope_module_and_name_type or \scope__module_ane_name_type,
	    // where scope is one of l, g or c, type needs at least two characters
	    // and module_and_name may contain single underscores.
	    '[lgc]__?[a-zA-Z](?:_?[a-zA-Z])*_[a-zA-Z]{2,}',
	    // A quark \q_the_name or \q__the_name or
	    // scan mark \s_the_name or \s__vthe_name,
	    // where variable_name needs at least two characters and
	    // may contain single underscores.
	    '[qs]__?[a-zA-Z](?:_?[a-zA-Z])+',
	    // Other LaTeX3 macro names that are not covered by the three rules above.
	    'use(?:_i)?:[a-zA-Z]*',
	    '(?:else|fi|or):',
	    '(?:if|cs|exp):w',
	    '(?:hbox|vbox):n',
	    '::[a-zA-Z]_unbraced',
	    '::[a-zA-Z:]'
	  ].map(pattern => pattern + '(?![a-zA-Z:_])').join('|'));
	  const L2_VARIANTS = [
	    { begin: /[a-zA-Z@]+/ }, // control word
	    { begin: /[^a-zA-Z@]?/ } // control symbol
	  ];
	  const DOUBLE_CARET_VARIANTS = [
	    { begin: /\^{6}[0-9a-f]{6}/ },
	    { begin: /\^{5}[0-9a-f]{5}/ },
	    { begin: /\^{4}[0-9a-f]{4}/ },
	    { begin: /\^{3}[0-9a-f]{3}/ },
	    { begin: /\^{2}[0-9a-f]{2}/ },
	    { begin: /\^{2}[\u0000-\u007f]/ }
	  ];
	  const CONTROL_SEQUENCE = {
	    className: 'keyword',
	    begin: /\\/,
	    relevance: 0,
	    contains: [
	      {
	        endsParent: true,
	        begin: KNOWN_CONTROL_WORDS
	      },
	      {
	        endsParent: true,
	        begin: L3_REGEX
	      },
	      {
	        endsParent: true,
	        variants: DOUBLE_CARET_VARIANTS
	      },
	      {
	        endsParent: true,
	        relevance: 0,
	        variants: L2_VARIANTS
	      }
	    ]
	  };
	  const MACRO_PARAM = {
	    className: 'params',
	    relevance: 0,
	    begin: /#+\d?/
	  };
	  const DOUBLE_CARET_CHAR = {
	    // relevance: 1
	    variants: DOUBLE_CARET_VARIANTS };
	  const SPECIAL_CATCODE = {
	    className: 'built_in',
	    relevance: 0,
	    begin: /[$&^_]/
	  };
	  const MAGIC_COMMENT = {
	    className: 'meta',
	    begin: /% ?!(T[eE]X|tex|BIB|bib)/,
	    end: '$',
	    relevance: 10
	  };
	  const COMMENT = hljs.COMMENT(
	    '%',
	    '$',
	    { relevance: 0 }
	  );
	  const EVERYTHING_BUT_VERBATIM = [
	    CONTROL_SEQUENCE,
	    MACRO_PARAM,
	    DOUBLE_CARET_CHAR,
	    SPECIAL_CATCODE,
	    MAGIC_COMMENT,
	    COMMENT
	  ];
	  const BRACE_GROUP_NO_VERBATIM = {
	    begin: /\{/,
	    end: /\}/,
	    relevance: 0,
	    contains: [
	      'self',
	      ...EVERYTHING_BUT_VERBATIM
	    ]
	  };
	  const ARGUMENT_BRACES = hljs.inherit(
	    BRACE_GROUP_NO_VERBATIM,
	    {
	      relevance: 0,
	      endsParent: true,
	      contains: [
	        BRACE_GROUP_NO_VERBATIM,
	        ...EVERYTHING_BUT_VERBATIM
	      ]
	    }
	  );
	  const ARGUMENT_BRACKETS = {
	    begin: /\[/,
	    end: /\]/,
	    endsParent: true,
	    relevance: 0,
	    contains: [
	      BRACE_GROUP_NO_VERBATIM,
	      ...EVERYTHING_BUT_VERBATIM
	    ]
	  };
	  const SPACE_GOBBLER = {
	    begin: /\s+/,
	    relevance: 0
	  };
	  const ARGUMENT_M = [ ARGUMENT_BRACES ];
	  const ARGUMENT_O = [ ARGUMENT_BRACKETS ];
	  const ARGUMENT_AND_THEN = function(arg, starts_mode) {
	    return {
	      contains: [ SPACE_GOBBLER ],
	      starts: {
	        relevance: 0,
	        contains: arg,
	        starts: starts_mode
	      }
	    };
	  };
	  const CSNAME = function(csname, starts_mode) {
	    return {
	      begin: '\\\\' + csname + '(?![a-zA-Z@:_])',
	      keywords: {
	        $pattern: /\\[a-zA-Z]+/,
	        keyword: '\\' + csname
	      },
	      relevance: 0,
	      contains: [ SPACE_GOBBLER ],
	      starts: starts_mode
	    };
	  };
	  const BEGIN_ENV = function(envname, starts_mode) {
	    return hljs.inherit(
	      {
	        begin: '\\\\begin(?=[ \t]*(\\r?\\n[ \t]*)?\\{' + envname + '\\})',
	        keywords: {
	          $pattern: /\\[a-zA-Z]+/,
	          keyword: '\\begin'
	        },
	        relevance: 0,
	      },
	      ARGUMENT_AND_THEN(ARGUMENT_M, starts_mode)
	    );
	  };
	  const VERBATIM_DELIMITED_EQUAL = (innerName = "string") => {
	    return hljs.END_SAME_AS_BEGIN({
	      className: innerName,
	      begin: /(.|\r?\n)/,
	      end: /(.|\r?\n)/,
	      excludeBegin: true,
	      excludeEnd: true,
	      endsParent: true
	    });
	  };
	  const VERBATIM_DELIMITED_ENV = function(envname) {
	    return {
	      className: 'string',
	      end: '(?=\\\\end\\{' + envname + '\\})'
	    };
	  };

	  const VERBATIM_DELIMITED_BRACES = (innerName = "string") => {
	    return {
	      relevance: 0,
	      begin: /\{/,
	      starts: {
	        endsParent: true,
	        contains: [
	          {
	            className: innerName,
	            end: /(?=\})/,
	            endsParent: true,
	            contains: [
	              {
	                begin: /\{/,
	                end: /\}/,
	                relevance: 0,
	                contains: [ "self" ]
	              }
	            ],
	          }
	        ]
	      }
	    };
	  };
	  const VERBATIM = [
	    ...[
	      'verb',
	      'lstinline'
	    ].map(csname => CSNAME(csname, { contains: [ VERBATIM_DELIMITED_EQUAL() ] })),
	    CSNAME('mint', ARGUMENT_AND_THEN(ARGUMENT_M, { contains: [ VERBATIM_DELIMITED_EQUAL() ] })),
	    CSNAME('mintinline', ARGUMENT_AND_THEN(ARGUMENT_M, { contains: [
	      VERBATIM_DELIMITED_BRACES(),
	      VERBATIM_DELIMITED_EQUAL()
	    ] })),
	    CSNAME('url', { contains: [
	      VERBATIM_DELIMITED_BRACES("link"),
	      VERBATIM_DELIMITED_BRACES("link")
	    ] }),
	    CSNAME('hyperref', { contains: [ VERBATIM_DELIMITED_BRACES("link") ] }),
	    CSNAME('href', ARGUMENT_AND_THEN(ARGUMENT_O, { contains: [ VERBATIM_DELIMITED_BRACES("link") ] })),
	    ...[].concat(...[
	      '',
	      '\\*'
	    ].map(suffix => [
	      BEGIN_ENV('verbatim' + suffix, VERBATIM_DELIMITED_ENV('verbatim' + suffix)),
	      BEGIN_ENV('filecontents' + suffix, ARGUMENT_AND_THEN(ARGUMENT_M, VERBATIM_DELIMITED_ENV('filecontents' + suffix))),
	      ...[
	        '',
	        'B',
	        'L'
	      ].map(prefix =>
	        BEGIN_ENV(prefix + 'Verbatim' + suffix, ARGUMENT_AND_THEN(ARGUMENT_O, VERBATIM_DELIMITED_ENV(prefix + 'Verbatim' + suffix)))
	      )
	    ])),
	    BEGIN_ENV('minted', ARGUMENT_AND_THEN(ARGUMENT_O, ARGUMENT_AND_THEN(ARGUMENT_M, VERBATIM_DELIMITED_ENV('minted')))),
	  ];

	  return {
	    name: 'LaTeX',
	    aliases: [ 'tex' ],
	    contains: [
	      ...VERBATIM,
	      ...EVERYTHING_BUT_VERBATIM
	    ]
	  };
	}

	latex_1 = latex;
	return latex_1;
}

/*
Language: LDIF
Contributors: Jacob Childress <jacobc@gmail.com>
Category: enterprise, config
Website: https://en.wikipedia.org/wiki/LDAP_Data_Interchange_Format
*/

var ldif_1;
var hasRequiredLdif;

function requireLdif () {
	if (hasRequiredLdif) return ldif_1;
	hasRequiredLdif = 1;
	/** @type LanguageFn */
	function ldif(hljs) {
	  return {
	    name: 'LDIF',
	    contains: [
	      {
	        className: 'attribute',
	        match: '^dn(?=:)',
	        relevance: 10
	      },
	      {
	        className: 'attribute',
	        match: '^\\w+(?=:)'
	      },
	      {
	        className: 'literal',
	        match: '^-'
	      },
	      hljs.HASH_COMMENT_MODE
	    ]
	  };
	}

	ldif_1 = ldif;
	return ldif_1;
}

/*
Language: Leaf
Description: A Swift-based templating language created for the Vapor project.
Website: https://docs.vapor.codes/leaf/overview
Category: template
*/

var leaf_1;
var hasRequiredLeaf;

function requireLeaf () {
	if (hasRequiredLeaf) return leaf_1;
	hasRequiredLeaf = 1;
	function leaf(hljs) {
	  const IDENT = /([A-Za-z_][A-Za-z_0-9]*)?/;
	  const LITERALS = [
	    'true',
	    'false',
	    'in'
	  ];
	  const PARAMS = {
	    scope: 'params',
	    begin: /\(/,
	    end: /\)(?=\:?)/,
	    endsParent: true,
	    relevance: 7,
	    contains: [
	      {
	        scope: 'string',
	        begin: '"',
	        end: '"'
	      },
	      {
	        scope: 'keyword',
	        match: LITERALS.join("|"),
	      },
	      {
	        scope: 'variable',
	        match: /[A-Za-z_][A-Za-z_0-9]*/
	      },
	      {
	        scope: 'operator',
	        match: /\+|\-|\*|\/|\%|\=\=|\=|\!|\>|\<|\&\&|\|\|/
	      }
	    ]
	  };
	  const INSIDE_DISPATCH = {
	    match: [
	      IDENT,
	      /(?=\()/,
	    ],
	    scope: {
	      1: "keyword"
	    },
	    contains: [ PARAMS ]
	  };
	  PARAMS.contains.unshift(INSIDE_DISPATCH);
	  return {
	    name: 'Leaf',
	    contains: [
	      // #ident():
	      {
	        match: [
	          /#+/,
	          IDENT,
	          /(?=\()/,
	        ],
	        scope: {
	          1: "punctuation",
	          2: "keyword"
	        },
	        // will start up after the ending `)` match from line ~44
	        // just to grab the trailing `:` if we can match it
	        starts: {
	          contains: [
	            {
	              match: /\:/,
	              scope: "punctuation"
	            }
	          ]
	        },
	        contains: [
	          PARAMS
	        ],
	      },
	      // #ident or #ident:
	      {
	        match: [
	          /#+/,
	          IDENT,
	          /:?/,
	        ],
	        scope: {
	          1: "punctuation",
	          2: "keyword",
	          3: "punctuation"
	        }
	      },
	    ]
	  };
	}

	leaf_1 = leaf;
	return leaf_1;
}

var less_1;
var hasRequiredLess;

function requireLess () {
	if (hasRequiredLess) return less_1;
	hasRequiredLess = 1;
	const MODES = (hljs) => {
	  return {
	    IMPORTANT: {
	      scope: 'meta',
	      begin: '!important'
	    },
	    BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
	    HEXCOLOR: {
	      scope: 'number',
	      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
	    },
	    FUNCTION_DISPATCH: {
	      className: "built_in",
	      begin: /[\w-]+(?=\()/
	    },
	    ATTRIBUTE_SELECTOR_MODE: {
	      scope: 'selector-attr',
	      begin: /\[/,
	      end: /\]/,
	      illegal: '$',
	      contains: [
	        hljs.APOS_STRING_MODE,
	        hljs.QUOTE_STRING_MODE
	      ]
	    },
	    CSS_NUMBER_MODE: {
	      scope: 'number',
	      begin: hljs.NUMBER_RE + '(' +
	        '%|em|ex|ch|rem' +
	        '|vw|vh|vmin|vmax' +
	        '|cm|mm|in|pt|pc|px' +
	        '|deg|grad|rad|turn' +
	        '|s|ms' +
	        '|Hz|kHz' +
	        '|dpi|dpcm|dppx' +
	        ')?',
	      relevance: 0
	    },
	    CSS_VARIABLE: {
	      className: "attr",
	      begin: /--[A-Za-z_][A-Za-z0-9_-]*/
	    }
	  };
	};

	const TAGS = [
	  'a',
	  'abbr',
	  'address',
	  'article',
	  'aside',
	  'audio',
	  'b',
	  'blockquote',
	  'body',
	  'button',
	  'canvas',
	  'caption',
	  'cite',
	  'code',
	  'dd',
	  'del',
	  'details',
	  'dfn',
	  'div',
	  'dl',
	  'dt',
	  'em',
	  'fieldset',
	  'figcaption',
	  'figure',
	  'footer',
	  'form',
	  'h1',
	  'h2',
	  'h3',
	  'h4',
	  'h5',
	  'h6',
	  'header',
	  'hgroup',
	  'html',
	  'i',
	  'iframe',
	  'img',
	  'input',
	  'ins',
	  'kbd',
	  'label',
	  'legend',
	  'li',
	  'main',
	  'mark',
	  'menu',
	  'nav',
	  'object',
	  'ol',
	  'p',
	  'q',
	  'quote',
	  'samp',
	  'section',
	  'span',
	  'strong',
	  'summary',
	  'sup',
	  'table',
	  'tbody',
	  'td',
	  'textarea',
	  'tfoot',
	  'th',
	  'thead',
	  'time',
	  'tr',
	  'ul',
	  'var',
	  'video'
	];

	const MEDIA_FEATURES = [
	  'any-hover',
	  'any-pointer',
	  'aspect-ratio',
	  'color',
	  'color-gamut',
	  'color-index',
	  'device-aspect-ratio',
	  'device-height',
	  'device-width',
	  'display-mode',
	  'forced-colors',
	  'grid',
	  'height',
	  'hover',
	  'inverted-colors',
	  'monochrome',
	  'orientation',
	  'overflow-block',
	  'overflow-inline',
	  'pointer',
	  'prefers-color-scheme',
	  'prefers-contrast',
	  'prefers-reduced-motion',
	  'prefers-reduced-transparency',
	  'resolution',
	  'scan',
	  'scripting',
	  'update',
	  'width',
	  // TODO: find a better solution?
	  'min-width',
	  'max-width',
	  'min-height',
	  'max-height'
	];

	// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
	const PSEUDO_CLASSES = [
	  'active',
	  'any-link',
	  'blank',
	  'checked',
	  'current',
	  'default',
	  'defined',
	  'dir', // dir()
	  'disabled',
	  'drop',
	  'empty',
	  'enabled',
	  'first',
	  'first-child',
	  'first-of-type',
	  'fullscreen',
	  'future',
	  'focus',
	  'focus-visible',
	  'focus-within',
	  'has', // has()
	  'host', // host or host()
	  'host-context', // host-context()
	  'hover',
	  'indeterminate',
	  'in-range',
	  'invalid',
	  'is', // is()
	  'lang', // lang()
	  'last-child',
	  'last-of-type',
	  'left',
	  'link',
	  'local-link',
	  'not', // not()
	  'nth-child', // nth-child()
	  'nth-col', // nth-col()
	  'nth-last-child', // nth-last-child()
	  'nth-last-col', // nth-last-col()
	  'nth-last-of-type', //nth-last-of-type()
	  'nth-of-type', //nth-of-type()
	  'only-child',
	  'only-of-type',
	  'optional',
	  'out-of-range',
	  'past',
	  'placeholder-shown',
	  'read-only',
	  'read-write',
	  'required',
	  'right',
	  'root',
	  'scope',
	  'target',
	  'target-within',
	  'user-invalid',
	  'valid',
	  'visited',
	  'where' // where()
	];

	// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
	const PSEUDO_ELEMENTS = [
	  'after',
	  'backdrop',
	  'before',
	  'cue',
	  'cue-region',
	  'first-letter',
	  'first-line',
	  'grammar-error',
	  'marker',
	  'part',
	  'placeholder',
	  'selection',
	  'slotted',
	  'spelling-error'
	];

	const ATTRIBUTES = [
	  'align-content',
	  'align-items',
	  'align-self',
	  'all',
	  'animation',
	  'animation-delay',
	  'animation-direction',
	  'animation-duration',
	  'animation-fill-mode',
	  'animation-iteration-count',
	  'animation-name',
	  'animation-play-state',
	  'animation-timing-function',
	  'backface-visibility',
	  'background',
	  'background-attachment',
	  'background-blend-mode',
	  'background-clip',
	  'background-color',
	  'background-image',
	  'background-origin',
	  'background-position',
	  'background-repeat',
	  'background-size',
	  'block-size',
	  'border',
	  'border-block',
	  'border-block-color',
	  'border-block-end',
	  'border-block-end-color',
	  'border-block-end-style',
	  'border-block-end-width',
	  'border-block-start',
	  'border-block-start-color',
	  'border-block-start-style',
	  'border-block-start-width',
	  'border-block-style',
	  'border-block-width',
	  'border-bottom',
	  'border-bottom-color',
	  'border-bottom-left-radius',
	  'border-bottom-right-radius',
	  'border-bottom-style',
	  'border-bottom-width',
	  'border-collapse',
	  'border-color',
	  'border-image',
	  'border-image-outset',
	  'border-image-repeat',
	  'border-image-slice',
	  'border-image-source',
	  'border-image-width',
	  'border-inline',
	  'border-inline-color',
	  'border-inline-end',
	  'border-inline-end-color',
	  'border-inline-end-style',
	  'border-inline-end-width',
	  'border-inline-start',
	  'border-inline-start-color',
	  'border-inline-start-style',
	  'border-inline-start-width',
	  'border-inline-style',
	  'border-inline-width',
	  'border-left',
	  'border-left-color',
	  'border-left-style',
	  'border-left-width',
	  'border-radius',
	  'border-right',
	  'border-right-color',
	  'border-right-style',
	  'border-right-width',
	  'border-spacing',
	  'border-style',
	  'border-top',
	  'border-top-color',
	  'border-top-left-radius',
	  'border-top-right-radius',
	  'border-top-style',
	  'border-top-width',
	  'border-width',
	  'bottom',
	  'box-decoration-break',
	  'box-shadow',
	  'box-sizing',
	  'break-after',
	  'break-before',
	  'break-inside',
	  'caption-side',
	  'caret-color',
	  'clear',
	  'clip',
	  'clip-path',
	  'clip-rule',
	  'color',
	  'column-count',
	  'column-fill',
	  'column-gap',
	  'column-rule',
	  'column-rule-color',
	  'column-rule-style',
	  'column-rule-width',
	  'column-span',
	  'column-width',
	  'columns',
	  'contain',
	  'content',
	  'content-visibility',
	  'counter-increment',
	  'counter-reset',
	  'cue',
	  'cue-after',
	  'cue-before',
	  'cursor',
	  'direction',
	  'display',
	  'empty-cells',
	  'filter',
	  'flex',
	  'flex-basis',
	  'flex-direction',
	  'flex-flow',
	  'flex-grow',
	  'flex-shrink',
	  'flex-wrap',
	  'float',
	  'flow',
	  'font',
	  'font-display',
	  'font-family',
	  'font-feature-settings',
	  'font-kerning',
	  'font-language-override',
	  'font-size',
	  'font-size-adjust',
	  'font-smoothing',
	  'font-stretch',
	  'font-style',
	  'font-synthesis',
	  'font-variant',
	  'font-variant-caps',
	  'font-variant-east-asian',
	  'font-variant-ligatures',
	  'font-variant-numeric',
	  'font-variant-position',
	  'font-variation-settings',
	  'font-weight',
	  'gap',
	  'glyph-orientation-vertical',
	  'grid',
	  'grid-area',
	  'grid-auto-columns',
	  'grid-auto-flow',
	  'grid-auto-rows',
	  'grid-column',
	  'grid-column-end',
	  'grid-column-start',
	  'grid-gap',
	  'grid-row',
	  'grid-row-end',
	  'grid-row-start',
	  'grid-template',
	  'grid-template-areas',
	  'grid-template-columns',
	  'grid-template-rows',
	  'hanging-punctuation',
	  'height',
	  'hyphens',
	  'icon',
	  'image-orientation',
	  'image-rendering',
	  'image-resolution',
	  'ime-mode',
	  'inline-size',
	  'isolation',
	  'justify-content',
	  'left',
	  'letter-spacing',
	  'line-break',
	  'line-height',
	  'list-style',
	  'list-style-image',
	  'list-style-position',
	  'list-style-type',
	  'margin',
	  'margin-block',
	  'margin-block-end',
	  'margin-block-start',
	  'margin-bottom',
	  'margin-inline',
	  'margin-inline-end',
	  'margin-inline-start',
	  'margin-left',
	  'margin-right',
	  'margin-top',
	  'marks',
	  'mask',
	  'mask-border',
	  'mask-border-mode',
	  'mask-border-outset',
	  'mask-border-repeat',
	  'mask-border-slice',
	  'mask-border-source',
	  'mask-border-width',
	  'mask-clip',
	  'mask-composite',
	  'mask-image',
	  'mask-mode',
	  'mask-origin',
	  'mask-position',
	  'mask-repeat',
	  'mask-size',
	  'mask-type',
	  'max-block-size',
	  'max-height',
	  'max-inline-size',
	  'max-width',
	  'min-block-size',
	  'min-height',
	  'min-inline-size',
	  'min-width',
	  'mix-blend-mode',
	  'nav-down',
	  'nav-index',
	  'nav-left',
	  'nav-right',
	  'nav-up',
	  'none',
	  'normal',
	  'object-fit',
	  'object-position',
	  'opacity',
	  'order',
	  'orphans',
	  'outline',
	  'outline-color',
	  'outline-offset',
	  'outline-style',
	  'outline-width',
	  'overflow',
	  'overflow-wrap',
	  'overflow-x',
	  'overflow-y',
	  'padding',
	  'padding-block',
	  'padding-block-end',
	  'padding-block-start',
	  'padding-bottom',
	  'padding-inline',
	  'padding-inline-end',
	  'padding-inline-start',
	  'padding-left',
	  'padding-right',
	  'padding-top',
	  'page-break-after',
	  'page-break-before',
	  'page-break-inside',
	  'pause',
	  'pause-after',
	  'pause-before',
	  'perspective',
	  'perspective-origin',
	  'pointer-events',
	  'position',
	  'quotes',
	  'resize',
	  'rest',
	  'rest-after',
	  'rest-before',
	  'right',
	  'row-gap',
	  'scroll-margin',
	  'scroll-margin-block',
	  'scroll-margin-block-end',
	  'scroll-margin-block-start',
	  'scroll-margin-bottom',
	  'scroll-margin-inline',
	  'scroll-margin-inline-end',
	  'scroll-margin-inline-start',
	  'scroll-margin-left',
	  'scroll-margin-right',
	  'scroll-margin-top',
	  'scroll-padding',
	  'scroll-padding-block',
	  'scroll-padding-block-end',
	  'scroll-padding-block-start',
	  'scroll-padding-bottom',
	  'scroll-padding-inline',
	  'scroll-padding-inline-end',
	  'scroll-padding-inline-start',
	  'scroll-padding-left',
	  'scroll-padding-right',
	  'scroll-padding-top',
	  'scroll-snap-align',
	  'scroll-snap-stop',
	  'scroll-snap-type',
	  'scrollbar-color',
	  'scrollbar-gutter',
	  'scrollbar-width',
	  'shape-image-threshold',
	  'shape-margin',
	  'shape-outside',
	  'speak',
	  'speak-as',
	  'src', // @font-face
	  'tab-size',
	  'table-layout',
	  'text-align',
	  'text-align-all',
	  'text-align-last',
	  'text-combine-upright',
	  'text-decoration',
	  'text-decoration-color',
	  'text-decoration-line',
	  'text-decoration-style',
	  'text-emphasis',
	  'text-emphasis-color',
	  'text-emphasis-position',
	  'text-emphasis-style',
	  'text-indent',
	  'text-justify',
	  'text-orientation',
	  'text-overflow',
	  'text-rendering',
	  'text-shadow',
	  'text-transform',
	  'text-underline-position',
	  'top',
	  'transform',
	  'transform-box',
	  'transform-origin',
	  'transform-style',
	  'transition',
	  'transition-delay',
	  'transition-duration',
	  'transition-property',
	  'transition-timing-function',
	  'unicode-bidi',
	  'vertical-align',
	  'visibility',
	  'voice-balance',
	  'voice-duration',
	  'voice-family',
	  'voice-pitch',
	  'voice-range',
	  'voice-rate',
	  'voice-stress',
	  'voice-volume',
	  'white-space',
	  'widows',
	  'width',
	  'will-change',
	  'word-break',
	  'word-spacing',
	  'word-wrap',
	  'writing-mode',
	  'z-index'
	  // reverse makes sure longer attributes `font-weight` are matched fully
	  // instead of getting false positives on say `font`
	].reverse();

	// some grammars use them all as a single group
	const PSEUDO_SELECTORS = PSEUDO_CLASSES.concat(PSEUDO_ELEMENTS);

	/*
	Language: Less
	Description: It's CSS, with just a little more.
	Author:   Max Mikhailov <seven.phases.max@gmail.com>
	Website: http://lesscss.org
	Category: common, css, web
	*/


	/** @type LanguageFn */
	function less(hljs) {
	  const modes = MODES(hljs);
	  const PSEUDO_SELECTORS$1 = PSEUDO_SELECTORS;

	  const AT_MODIFIERS = "and or not only";
	  const IDENT_RE = '[\\w-]+'; // yes, Less identifiers may begin with a digit
	  const INTERP_IDENT_RE = '(' + IDENT_RE + '|@\\{' + IDENT_RE + '\\})';

	  /* Generic Modes */

	  const RULES = []; const VALUE_MODES = []; // forward def. for recursive modes

	  const STRING_MODE = function(c) {
	    return {
	    // Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)
	      className: 'string',
	      begin: '~?' + c + '.*?' + c
	    };
	  };

	  const IDENT_MODE = function(name, begin, relevance) {
	    return {
	      className: name,
	      begin: begin,
	      relevance: relevance
	    };
	  };

	  const AT_KEYWORDS = {
	    $pattern: /[a-z-]+/,
	    keyword: AT_MODIFIERS,
	    attribute: MEDIA_FEATURES.join(" ")
	  };

	  const PARENS_MODE = {
	    // used only to properly balance nested parens inside mixin call, def. arg list
	    begin: '\\(',
	    end: '\\)',
	    contains: VALUE_MODES,
	    keywords: AT_KEYWORDS,
	    relevance: 0
	  };

	  // generic Less highlighter (used almost everywhere except selectors):
	  VALUE_MODES.push(
	    hljs.C_LINE_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE,
	    STRING_MODE("'"),
	    STRING_MODE('"'),
	    modes.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(
	    {
	      begin: '(url|data-uri)\\(',
	      starts: {
	        className: 'string',
	        end: '[\\)\\n]',
	        excludeEnd: true
	      }
	    },
	    modes.HEXCOLOR,
	    PARENS_MODE,
	    IDENT_MODE('variable', '@@?' + IDENT_RE, 10),
	    IDENT_MODE('variable', '@\\{' + IDENT_RE + '\\}'),
	    IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string
	    { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):
	      className: 'attribute',
	      begin: IDENT_RE + '\\s*:',
	      end: ':',
	      returnBegin: true,
	      excludeEnd: true
	    },
	    modes.IMPORTANT,
	    { beginKeywords: 'and not' },
	    modes.FUNCTION_DISPATCH
	  );

	  const VALUE_WITH_RULESETS = VALUE_MODES.concat({
	    begin: /\{/,
	    end: /\}/,
	    contains: RULES
	  });

	  const MIXIN_GUARD_MODE = {
	    beginKeywords: 'when',
	    endsWithParent: true,
	    contains: [ { beginKeywords: 'and not' } ].concat(VALUE_MODES) // using this form to override VALUE’s 'function' match
	  };

	  /* Rule-Level Modes */

	  const RULE_MODE = {
	    begin: INTERP_IDENT_RE + '\\s*:',
	    returnBegin: true,
	    end: /[;}]/,
	    relevance: 0,
	    contains: [
	      { begin: /-(webkit|moz|ms|o)-/ },
	      modes.CSS_VARIABLE,
	      {
	        className: 'attribute',
	        begin: '\\b(' + ATTRIBUTES.join('|') + ')\\b',
	        end: /(?=:)/,
	        starts: {
	          endsWithParent: true,
	          illegal: '[<=$]',
	          relevance: 0,
	          contains: VALUE_MODES
	        }
	      }
	    ]
	  };

	  const AT_RULE_MODE = {
	    className: 'keyword',
	    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b',
	    starts: {
	      end: '[;{}]',
	      keywords: AT_KEYWORDS,
	      returnEnd: true,
	      contains: VALUE_MODES,
	      relevance: 0
	    }
	  };

	  // variable definitions and calls
	  const VAR_RULE_MODE = {
	    className: 'variable',
	    variants: [
	      // using more strict pattern for higher relevance to increase chances of Less detection.
	      // this is *the only* Less specific statement used in most of the sources, so...
	      // (we’ll still often loose to the css-parser unless there's '//' comment,
	      // simply because 1 variable just can't beat 99 properties :)
	      {
	        begin: '@' + IDENT_RE + '\\s*:',
	        relevance: 15
	      },
	      { begin: '@' + IDENT_RE }
	    ],
	    starts: {
	      end: '[;}]',
	      returnEnd: true,
	      contains: VALUE_WITH_RULESETS
	    }
	  };

	  const SELECTOR_MODE = {
	    // first parse unambiguous selectors (i.e. those not starting with tag)
	    // then fall into the scary lookahead-discriminator variant.
	    // this mode also handles mixin definitions and calls
	    variants: [
	      {
	        begin: '[\\.#:&\\[>]',
	        end: '[;{}]' // mixin calls end with ';'
	      },
	      {
	        begin: INTERP_IDENT_RE,
	        end: /\{/
	      }
	    ],
	    returnBegin: true,
	    returnEnd: true,
	    illegal: '[<=\'$"]',
	    relevance: 0,
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      MIXIN_GUARD_MODE,
	      IDENT_MODE('keyword', 'all\\b'),
	      IDENT_MODE('variable', '@\\{' + IDENT_RE + '\\}'), // otherwise it’s identified as tag
	      
	      {
	        begin: '\\b(' + TAGS.join('|') + ')\\b',
	        className: 'selector-tag'
	      },
	      modes.CSS_NUMBER_MODE,
	      IDENT_MODE('selector-tag', INTERP_IDENT_RE, 0),
	      IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),
	      IDENT_MODE('selector-class', '\\.' + INTERP_IDENT_RE, 0),
	      IDENT_MODE('selector-tag', '&', 0),
	      modes.ATTRIBUTE_SELECTOR_MODE,
	      {
	        className: 'selector-pseudo',
	        begin: ':(' + PSEUDO_CLASSES.join('|') + ')'
	      },
	      {
	        className: 'selector-pseudo',
	        begin: ':(:)?(' + PSEUDO_ELEMENTS.join('|') + ')'
	      },
	      {
	        begin: /\(/,
	        end: /\)/,
	        relevance: 0,
	        contains: VALUE_WITH_RULESETS
	      }, // argument list of parametric mixins
	      { begin: '!important' }, // eat !important after mixin call or it will be colored as tag
	      modes.FUNCTION_DISPATCH
	    ]
	  };

	  const PSEUDO_SELECTOR_MODE = {
	    begin: IDENT_RE + ':(:)?' + `(${PSEUDO_SELECTORS$1.join('|')})`,
	    returnBegin: true,
	    contains: [ SELECTOR_MODE ]
	  };

	  RULES.push(
	    hljs.C_LINE_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE,
	    AT_RULE_MODE,
	    VAR_RULE_MODE,
	    PSEUDO_SELECTOR_MODE,
	    RULE_MODE,
	    SELECTOR_MODE,
	    MIXIN_GUARD_MODE,
	    modes.FUNCTION_DISPATCH
	  );

	  return {
	    name: 'Less',
	    case_insensitive: true,
	    illegal: '[=>\'/<($"]',
	    contains: RULES
	  };
	}

	less_1 = less;
	return less_1;
}

/*
Language: Lisp
Description: Generic lisp syntax
Author: Vasily Polovnyov <vast@whiteants.net>
Category: lisp
*/

var lisp_1;
var hasRequiredLisp;

function requireLisp () {
	if (hasRequiredLisp) return lisp_1;
	hasRequiredLisp = 1;
	function lisp(hljs) {
	  const LISP_IDENT_RE = '[a-zA-Z_\\-+\\*\\/<=>&#][a-zA-Z0-9_\\-+*\\/<=>&#!]*';
	  const MEC_RE = '\\|[^]*?\\|';
	  const LISP_SIMPLE_NUMBER_RE = '(-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|-)?\\d+)?';
	  const LITERAL = {
	    className: 'literal',
	    begin: '\\b(t{1}|nil)\\b'
	  };
	  const NUMBER = {
	    className: 'number',
	    variants: [
	      {
	        begin: LISP_SIMPLE_NUMBER_RE,
	        relevance: 0
	      },
	      { begin: '#(b|B)[0-1]+(/[0-1]+)?' },
	      { begin: '#(o|O)[0-7]+(/[0-7]+)?' },
	      { begin: '#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?' },
	      {
	        begin: '#(c|C)\\(' + LISP_SIMPLE_NUMBER_RE + ' +' + LISP_SIMPLE_NUMBER_RE,
	        end: '\\)'
	      }
	    ]
	  };
	  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
	  const COMMENT = hljs.COMMENT(
	    ';', '$',
	    { relevance: 0 }
	  );
	  const VARIABLE = {
	    begin: '\\*',
	    end: '\\*'
	  };
	  const KEYWORD = {
	    className: 'symbol',
	    begin: '[:&]' + LISP_IDENT_RE
	  };
	  const IDENT = {
	    begin: LISP_IDENT_RE,
	    relevance: 0
	  };
	  const MEC = { begin: MEC_RE };
	  const QUOTED_LIST = {
	    begin: '\\(',
	    end: '\\)',
	    contains: [
	      'self',
	      LITERAL,
	      STRING,
	      NUMBER,
	      IDENT
	    ]
	  };
	  const QUOTED = {
	    contains: [
	      NUMBER,
	      STRING,
	      VARIABLE,
	      KEYWORD,
	      QUOTED_LIST,
	      IDENT
	    ],
	    variants: [
	      {
	        begin: '[\'`]\\(',
	        end: '\\)'
	      },
	      {
	        begin: '\\(quote ',
	        end: '\\)',
	        keywords: { name: 'quote' }
	      },
	      { begin: '\'' + MEC_RE }
	    ]
	  };
	  const QUOTED_ATOM = { variants: [
	    { begin: '\'' + LISP_IDENT_RE },
	    { begin: '#\'' + LISP_IDENT_RE + '(::' + LISP_IDENT_RE + ')*' }
	  ] };
	  const LIST = {
	    begin: '\\(\\s*',
	    end: '\\)'
	  };
	  const BODY = {
	    endsWithParent: true,
	    relevance: 0
	  };
	  LIST.contains = [
	    {
	      className: 'name',
	      variants: [
	        {
	          begin: LISP_IDENT_RE,
	          relevance: 0,
	        },
	        { begin: MEC_RE }
	      ]
	    },
	    BODY
	  ];
	  BODY.contains = [
	    QUOTED,
	    QUOTED_ATOM,
	    LIST,
	    LITERAL,
	    NUMBER,
	    STRING,
	    COMMENT,
	    VARIABLE,
	    KEYWORD,
	    MEC,
	    IDENT
	  ];

	  return {
	    name: 'Lisp',
	    illegal: /\S/,
	    contains: [
	      NUMBER,
	      hljs.SHEBANG(),
	      LITERAL,
	      STRING,
	      COMMENT,
	      QUOTED,
	      QUOTED_ATOM,
	      LIST,
	      IDENT
	    ]
	  };
	}

	lisp_1 = lisp;
	return lisp_1;
}

/*
Language: LiveCode
Author: Ralf Bitter <rabit@revigniter.com>
Description: Language definition for LiveCode server accounting for revIgniter (a web application framework) characteristics.
Version: 1.1
Date: 2019-04-17
Category: enterprise
*/

var livecodeserver_1;
var hasRequiredLivecodeserver;

function requireLivecodeserver () {
	if (hasRequiredLivecodeserver) return livecodeserver_1;
	hasRequiredLivecodeserver = 1;
	function livecodeserver(hljs) {
	  const VARIABLE = {
	    className: 'variable',
	    variants: [
	      { begin: '\\b([gtps][A-Z]{1}[a-zA-Z0-9]*)(\\[.+\\])?(?:\\s*?)' },
	      { begin: '\\$_[A-Z]+' }
	    ],
	    relevance: 0
	  };
	  const COMMENT_MODES = [
	    hljs.C_BLOCK_COMMENT_MODE,
	    hljs.HASH_COMMENT_MODE,
	    hljs.COMMENT('--', '$'),
	    hljs.COMMENT('[^:]//', '$')
	  ];
	  const TITLE1 = hljs.inherit(hljs.TITLE_MODE, { variants: [
	    { begin: '\\b_*rig[A-Z][A-Za-z0-9_\\-]*' },
	    { begin: '\\b_[a-z0-9\\-]+' }
	  ] });
	  const TITLE2 = hljs.inherit(hljs.TITLE_MODE, { begin: '\\b([A-Za-z0-9_\\-]+)\\b' });
	  return {
	    name: 'LiveCode',
	    case_insensitive: false,
	    keywords: {
	      keyword:
	        '$_COOKIE $_FILES $_GET $_GET_BINARY $_GET_RAW $_POST $_POST_BINARY $_POST_RAW $_SESSION $_SERVER '
	        + 'codepoint codepoints segment segments codeunit codeunits sentence sentences trueWord trueWords paragraph '
	        + 'after byte bytes english the until http forever descending using line real8 with seventh '
	        + 'for stdout finally element word words fourth before black ninth sixth characters chars stderr '
	        + 'uInt1 uInt1s uInt2 uInt2s stdin string lines relative rel any fifth items from middle mid '
	        + 'at else of catch then third it file milliseconds seconds second secs sec int1 int1s int4 '
	        + 'int4s internet int2 int2s normal text item last long detailed effective uInt4 uInt4s repeat '
	        + 'end repeat URL in try into switch to words https token binfile each tenth as ticks tick '
	        + 'system real4 by dateItems without char character ascending eighth whole dateTime numeric short '
	        + 'first ftp integer abbreviated abbr abbrev private case while if '
	        + 'div mod wrap and or bitAnd bitNot bitOr bitXor among not in a an within '
	        + 'contains ends with begins the keys of keys',
	      literal:
	        'SIX TEN FORMFEED NINE ZERO NONE SPACE FOUR FALSE COLON CRLF PI COMMA ENDOFFILE EOF EIGHT FIVE '
	        + 'QUOTE EMPTY ONE TRUE RETURN CR LINEFEED RIGHT BACKSLASH NULL SEVEN TAB THREE TWO '
	        + 'six ten formfeed nine zero none space four false colon crlf pi comma endoffile eof eight five '
	        + 'quote empty one true return cr linefeed right backslash null seven tab three two '
	        + 'RIVERSION RISTATE FILE_READ_MODE FILE_WRITE_MODE FILE_WRITE_MODE DIR_WRITE_MODE FILE_READ_UMASK '
	        + 'FILE_WRITE_UMASK DIR_READ_UMASK DIR_WRITE_UMASK',
	      built_in:
	        'put abs acos aliasReference annuity arrayDecode arrayEncode asin atan atan2 average avg avgDev base64Decode '
	        + 'base64Encode baseConvert binaryDecode binaryEncode byteOffset byteToNum cachedURL cachedURLs charToNum '
	        + 'cipherNames codepointOffset codepointProperty codepointToNum codeunitOffset commandNames compound compress '
	        + 'constantNames cos date dateFormat decompress difference directories '
	        + 'diskSpace DNSServers exp exp1 exp2 exp10 extents files flushEvents folders format functionNames geometricMean global '
	        + 'globals hasMemory harmonicMean hostAddress hostAddressToName hostName hostNameToAddress isNumber ISOToMac itemOffset '
	        + 'keys len length libURLErrorData libUrlFormData libURLftpCommand libURLLastHTTPHeaders libURLLastRHHeaders '
	        + 'libUrlMultipartFormAddPart libUrlMultipartFormData libURLVersion lineOffset ln ln1 localNames log log2 log10 '
	        + 'longFilePath lower macToISO matchChunk matchText matrixMultiply max md5Digest median merge messageAuthenticationCode messageDigest millisec '
	        + 'millisecs millisecond milliseconds min monthNames nativeCharToNum normalizeText num number numToByte numToChar '
	        + 'numToCodepoint numToNativeChar offset open openfiles openProcesses openProcessIDs openSockets '
	        + 'paragraphOffset paramCount param params peerAddress pendingMessages platform popStdDev populationStandardDeviation '
	        + 'populationVariance popVariance processID random randomBytes replaceText result revCreateXMLTree revCreateXMLTreeFromFile '
	        + 'revCurrentRecord revCurrentRecordIsFirst revCurrentRecordIsLast revDatabaseColumnCount revDatabaseColumnIsNull '
	        + 'revDatabaseColumnLengths revDatabaseColumnNames revDatabaseColumnNamed revDatabaseColumnNumbered '
	        + 'revDatabaseColumnTypes revDatabaseConnectResult revDatabaseCursors revDatabaseID revDatabaseTableNames '
	        + 'revDatabaseType revDataFromQuery revdb_closeCursor revdb_columnbynumber revdb_columncount revdb_columnisnull '
	        + 'revdb_columnlengths revdb_columnnames revdb_columntypes revdb_commit revdb_connect revdb_connections '
	        + 'revdb_connectionerr revdb_currentrecord revdb_cursorconnection revdb_cursorerr revdb_cursors revdb_dbtype '
	        + 'revdb_disconnect revdb_execute revdb_iseof revdb_isbof revdb_movefirst revdb_movelast revdb_movenext '
	        + 'revdb_moveprev revdb_query revdb_querylist revdb_recordcount revdb_rollback revdb_tablenames '
	        + 'revGetDatabaseDriverPath revNumberOfRecords revOpenDatabase revOpenDatabases revQueryDatabase '
	        + 'revQueryDatabaseBlob revQueryResult revQueryIsAtStart revQueryIsAtEnd revUnixFromMacPath revXMLAttribute '
	        + 'revXMLAttributes revXMLAttributeValues revXMLChildContents revXMLChildNames revXMLCreateTreeFromFileWithNamespaces '
	        + 'revXMLCreateTreeWithNamespaces revXMLDataFromXPathQuery revXMLEvaluateXPath revXMLFirstChild revXMLMatchingNode '
	        + 'revXMLNextSibling revXMLNodeContents revXMLNumberOfChildren revXMLParent revXMLPreviousSibling '
	        + 'revXMLRootNode revXMLRPC_CreateRequest revXMLRPC_Documents revXMLRPC_Error '
	        + 'revXMLRPC_GetHost revXMLRPC_GetMethod revXMLRPC_GetParam revXMLText revXMLRPC_Execute '
	        + 'revXMLRPC_GetParamCount revXMLRPC_GetParamNode revXMLRPC_GetParamType revXMLRPC_GetPath revXMLRPC_GetPort '
	        + 'revXMLRPC_GetProtocol revXMLRPC_GetRequest revXMLRPC_GetResponse revXMLRPC_GetSocket revXMLTree '
	        + 'revXMLTrees revXMLValidateDTD revZipDescribeItem revZipEnumerateItems revZipOpenArchives round sampVariance '
	        + 'sec secs seconds sentenceOffset sha1Digest shell shortFilePath sin specialFolderPath sqrt standardDeviation statRound '
	        + 'stdDev sum sysError systemVersion tan tempName textDecode textEncode tick ticks time to tokenOffset toLower toUpper '
	        + 'transpose truewordOffset trunc uniDecode uniEncode upper URLDecode URLEncode URLStatus uuid value variableNames '
	        + 'variance version waitDepth weekdayNames wordOffset xsltApplyStylesheet xsltApplyStylesheetFromFile xsltLoadStylesheet '
	        + 'xsltLoadStylesheetFromFile add breakpoint cancel clear local variable file word line folder directory URL close socket process '
	        + 'combine constant convert create new alias folder directory decrypt delete variable word line folder '
	        + 'directory URL dispatch divide do encrypt filter get include intersect kill libURLDownloadToFile '
	        + 'libURLFollowHttpRedirects libURLftpUpload libURLftpUploadFile libURLresetAll libUrlSetAuthCallback libURLSetDriver '
	        + 'libURLSetCustomHTTPHeaders libUrlSetExpect100 libURLSetFTPListCommand libURLSetFTPMode libURLSetFTPStopTime '
	        + 'libURLSetStatusCallback load extension loadedExtensions multiply socket prepare process post seek rel relative read from process rename '
	        + 'replace require resetAll resolve revAddXMLNode revAppendXML revCloseCursor revCloseDatabase revCommitDatabase '
	        + 'revCopyFile revCopyFolder revCopyXMLNode revDeleteFolder revDeleteXMLNode revDeleteAllXMLTrees '
	        + 'revDeleteXMLTree revExecuteSQL revGoURL revInsertXMLNode revMoveFolder revMoveToFirstRecord revMoveToLastRecord '
	        + 'revMoveToNextRecord revMoveToPreviousRecord revMoveToRecord revMoveXMLNode revPutIntoXMLNode revRollBackDatabase '
	        + 'revSetDatabaseDriverPath revSetXMLAttribute revXMLRPC_AddParam revXMLRPC_DeleteAllDocuments revXMLAddDTD '
	        + 'revXMLRPC_Free revXMLRPC_FreeAll revXMLRPC_DeleteDocument revXMLRPC_DeleteParam revXMLRPC_SetHost '
	        + 'revXMLRPC_SetMethod revXMLRPC_SetPort revXMLRPC_SetProtocol revXMLRPC_SetSocket revZipAddItemWithData '
	        + 'revZipAddItemWithFile revZipAddUncompressedItemWithData revZipAddUncompressedItemWithFile revZipCancel '
	        + 'revZipCloseArchive revZipDeleteItem revZipExtractItemToFile revZipExtractItemToVariable revZipSetProgressCallback '
	        + 'revZipRenameItem revZipReplaceItemWithData revZipReplaceItemWithFile revZipOpenArchive send set sort split start stop '
	        + 'subtract symmetric union unload vectorDotProduct wait write'
	    },
	    contains: [
	      VARIABLE,
	      {
	        className: 'keyword',
	        begin: '\\bend\\sif\\b'
	      },
	      {
	        className: 'function',
	        beginKeywords: 'function',
	        end: '$',
	        contains: [
	          VARIABLE,
	          TITLE2,
	          hljs.APOS_STRING_MODE,
	          hljs.QUOTE_STRING_MODE,
	          hljs.BINARY_NUMBER_MODE,
	          hljs.C_NUMBER_MODE,
	          TITLE1
	        ]
	      },
	      {
	        className: 'function',
	        begin: '\\bend\\s+',
	        end: '$',
	        keywords: 'end',
	        contains: [
	          TITLE2,
	          TITLE1
	        ],
	        relevance: 0
	      },
	      {
	        beginKeywords: 'command on',
	        end: '$',
	        contains: [
	          VARIABLE,
	          TITLE2,
	          hljs.APOS_STRING_MODE,
	          hljs.QUOTE_STRING_MODE,
	          hljs.BINARY_NUMBER_MODE,
	          hljs.C_NUMBER_MODE,
	          TITLE1
	        ]
	      },
	      {
	        className: 'meta',
	        variants: [
	          {
	            begin: '<\\?(rev|lc|livecode)',
	            relevance: 10
	          },
	          { begin: '<\\?' },
	          { begin: '\\?>' }
	        ]
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.BINARY_NUMBER_MODE,
	      hljs.C_NUMBER_MODE,
	      TITLE1
	    ].concat(COMMENT_MODES),
	    illegal: ';$|^\\[|^=|&|\\{'
	  };
	}

	livecodeserver_1 = livecodeserver;
	return livecodeserver_1;
}

var livescript_1;
var hasRequiredLivescript;

function requireLivescript () {
	if (hasRequiredLivescript) return livescript_1;
	hasRequiredLivescript = 1;
	const KEYWORDS = [
	  "as", // for exports
	  "in",
	  "of",
	  "if",
	  "for",
	  "while",
	  "finally",
	  "var",
	  "new",
	  "function",
	  "do",
	  "return",
	  "void",
	  "else",
	  "break",
	  "catch",
	  "instanceof",
	  "with",
	  "throw",
	  "case",
	  "default",
	  "try",
	  "switch",
	  "continue",
	  "typeof",
	  "delete",
	  "let",
	  "yield",
	  "const",
	  "class",
	  // JS handles these with a special rule
	  // "get",
	  // "set",
	  "debugger",
	  "async",
	  "await",
	  "static",
	  "import",
	  "from",
	  "export",
	  "extends"
	];
	const LITERALS = [
	  "true",
	  "false",
	  "null",
	  "undefined",
	  "NaN",
	  "Infinity"
	];

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
	const TYPES = [
	  // Fundamental objects
	  "Object",
	  "Function",
	  "Boolean",
	  "Symbol",
	  // numbers and dates
	  "Math",
	  "Date",
	  "Number",
	  "BigInt",
	  // text
	  "String",
	  "RegExp",
	  // Indexed collections
	  "Array",
	  "Float32Array",
	  "Float64Array",
	  "Int8Array",
	  "Uint8Array",
	  "Uint8ClampedArray",
	  "Int16Array",
	  "Int32Array",
	  "Uint16Array",
	  "Uint32Array",
	  "BigInt64Array",
	  "BigUint64Array",
	  // Keyed collections
	  "Set",
	  "Map",
	  "WeakSet",
	  "WeakMap",
	  // Structured data
	  "ArrayBuffer",
	  "SharedArrayBuffer",
	  "Atomics",
	  "DataView",
	  "JSON",
	  // Control abstraction objects
	  "Promise",
	  "Generator",
	  "GeneratorFunction",
	  "AsyncFunction",
	  // Reflection
	  "Reflect",
	  "Proxy",
	  // Internationalization
	  "Intl",
	  // WebAssembly
	  "WebAssembly"
	];

	const ERROR_TYPES = [
	  "Error",
	  "EvalError",
	  "InternalError",
	  "RangeError",
	  "ReferenceError",
	  "SyntaxError",
	  "TypeError",
	  "URIError"
	];

	const BUILT_IN_GLOBALS = [
	  "setInterval",
	  "setTimeout",
	  "clearInterval",
	  "clearTimeout",

	  "require",
	  "exports",

	  "eval",
	  "isFinite",
	  "isNaN",
	  "parseFloat",
	  "parseInt",
	  "decodeURI",
	  "decodeURIComponent",
	  "encodeURI",
	  "encodeURIComponent",
	  "escape",
	  "unescape"
	];

	const BUILT_INS = [].concat(
	  BUILT_IN_GLOBALS,
	  TYPES,
	  ERROR_TYPES
	);

	/*
	Language: LiveScript
	Author: Taneli Vatanen <taneli.vatanen@gmail.com>
	Contributors: Jen Evers-Corvina <jen@sevvie.net>
	Origin: coffeescript.js
	Description: LiveScript is a programming language that transcompiles to JavaScript. For info about language see http://livescript.net/
	Website: https://livescript.net
	Category: scripting
	*/


	function livescript(hljs) {
	  const LIVESCRIPT_BUILT_INS = [
	    'npm',
	    'print'
	  ];
	  const LIVESCRIPT_LITERALS = [
	    'yes',
	    'no',
	    'on',
	    'off',
	    'it',
	    'that',
	    'void'
	  ];
	  const LIVESCRIPT_KEYWORDS = [
	    'then',
	    'unless',
	    'until',
	    'loop',
	    'of',
	    'by',
	    'when',
	    'and',
	    'or',
	    'is',
	    'isnt',
	    'not',
	    'it',
	    'that',
	    'otherwise',
	    'from',
	    'to',
	    'til',
	    'fallthrough',
	    'case',
	    'enum',
	    'native',
	    'list',
	    'map',
	    '__hasProp',
	    '__extends',
	    '__slice',
	    '__bind',
	    '__indexOf'
	  ];
	  const KEYWORDS$1 = {
	    keyword: KEYWORDS.concat(LIVESCRIPT_KEYWORDS),
	    literal: LITERALS.concat(LIVESCRIPT_LITERALS),
	    built_in: BUILT_INS.concat(LIVESCRIPT_BUILT_INS)
	  };
	  const JS_IDENT_RE = '[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*';
	  const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
	  const SUBST = {
	    className: 'subst',
	    begin: /#\{/,
	    end: /\}/,
	    keywords: KEYWORDS$1
	  };
	  const SUBST_SIMPLE = {
	    className: 'subst',
	    begin: /#[A-Za-z$_]/,
	    end: /(?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*/,
	    keywords: KEYWORDS$1
	  };
	  const EXPRESSIONS = [
	    hljs.BINARY_NUMBER_MODE,
	    {
	      className: 'number',
	      begin: '(\\b0[xX][a-fA-F0-9_]+)|(\\b\\d(\\d|_\\d)*(\\.(\\d(\\d|_\\d)*)?)?(_*[eE]([-+]\\d(_\\d|\\d)*)?)?[_a-z]*)',
	      relevance: 0,
	      starts: {
	        end: '(\\s*/)?',
	        relevance: 0
	      } // a number tries to eat the following slash to prevent treating it as a regexp
	    },
	    {
	      className: 'string',
	      variants: [
	        {
	          begin: /'''/,
	          end: /'''/,
	          contains: [ hljs.BACKSLASH_ESCAPE ]
	        },
	        {
	          begin: /'/,
	          end: /'/,
	          contains: [ hljs.BACKSLASH_ESCAPE ]
	        },
	        {
	          begin: /"""/,
	          end: /"""/,
	          contains: [
	            hljs.BACKSLASH_ESCAPE,
	            SUBST,
	            SUBST_SIMPLE
	          ]
	        },
	        {
	          begin: /"/,
	          end: /"/,
	          contains: [
	            hljs.BACKSLASH_ESCAPE,
	            SUBST,
	            SUBST_SIMPLE
	          ]
	        },
	        {
	          begin: /\\/,
	          end: /(\s|$)/,
	          excludeEnd: true
	        }
	      ]
	    },
	    {
	      className: 'regexp',
	      variants: [
	        {
	          begin: '//',
	          end: '//[gim]*',
	          contains: [
	            SUBST,
	            hljs.HASH_COMMENT_MODE
	          ]
	        },
	        {
	          // regex can't start with space to parse x / 2 / 3 as two divisions
	          // regex can't start with *, and it supports an "illegal" in the main mode
	          begin: /\/(?![ *])(\\.|[^\\\n])*?\/[gim]*(?=\W)/ }
	      ]
	    },
	    { begin: '@' + JS_IDENT_RE },
	    {
	      begin: '``',
	      end: '``',
	      excludeBegin: true,
	      excludeEnd: true,
	      subLanguage: 'javascript'
	    }
	  ];
	  SUBST.contains = EXPRESSIONS;

	  const PARAMS = {
	    className: 'params',
	    begin: '\\(',
	    returnBegin: true,
	    /* We need another contained nameless mode to not have every nested
	    pair of parens to be called "params" */
	    contains: [
	      {
	        begin: /\(/,
	        end: /\)/,
	        keywords: KEYWORDS$1,
	        contains: [ 'self' ].concat(EXPRESSIONS)
	      }
	    ]
	  };

	  const SYMBOLS = { begin: '(#=>|=>|\\|>>|-?->|!->)' };

	  const CLASS_DEFINITION = {
	    variants: [
	      { match: [
	        /class\s+/,
	        JS_IDENT_RE,
	        /\s+extends\s+/,
	        JS_IDENT_RE
	      ] },
	      { match: [
	        /class\s+/,
	        JS_IDENT_RE
	      ] }
	    ],
	    scope: {
	      2: "title.class",
	      4: "title.class.inherited"
	    },
	    keywords: KEYWORDS$1
	  };

	  return {
	    name: 'LiveScript',
	    aliases: [ 'ls' ],
	    keywords: KEYWORDS$1,
	    illegal: /\/\*/,
	    contains: EXPRESSIONS.concat([
	      hljs.COMMENT('\\/\\*', '\\*\\/'),
	      hljs.HASH_COMMENT_MODE,
	      SYMBOLS, // relevance booster
	      {
	        className: 'function',
	        contains: [
	          TITLE,
	          PARAMS
	        ],
	        returnBegin: true,
	        variants: [
	          {
	            begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?(\\(.*\\)\\s*)?\\B->\\*?',
	            end: '->\\*?'
	          },
	          {
	            begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?!?(\\(.*\\)\\s*)?\\B[-~]{1,2}>\\*?',
	            end: '[-~]{1,2}>\\*?'
	          },
	          {
	            begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?(\\(.*\\)\\s*)?\\B!?[-~]{1,2}>\\*?',
	            end: '!?[-~]{1,2}>\\*?'
	          }
	        ]
	      },
	      CLASS_DEFINITION,
	      {
	        begin: JS_IDENT_RE + ':',
	        end: ':',
	        returnBegin: true,
	        returnEnd: true,
	        relevance: 0
	      }
	    ])
	  };
	}

	livescript_1 = livescript;
	return livescript_1;
}

/*
Language: LLVM IR
Author: Michael Rodler <contact@f0rki.at>
Description: language used as intermediate representation in the LLVM compiler framework
Website: https://llvm.org/docs/LangRef.html
Category: assembler
Audit: 2020
*/

var llvm_1;
var hasRequiredLlvm;

function requireLlvm () {
	if (hasRequiredLlvm) return llvm_1;
	hasRequiredLlvm = 1;
	/** @type LanguageFn */
	function llvm(hljs) {
	  const regex = hljs.regex;
	  const IDENT_RE = /([-a-zA-Z$._][\w$.-]*)/;
	  const TYPE = {
	    className: 'type',
	    begin: /\bi\d+(?=\s|\b)/
	  };
	  const OPERATOR = {
	    className: 'operator',
	    relevance: 0,
	    begin: /=/
	  };
	  const PUNCTUATION = {
	    className: 'punctuation',
	    relevance: 0,
	    begin: /,/
	  };
	  const NUMBER = {
	    className: 'number',
	    variants: [
	      { begin: /[su]?0[xX][KMLHR]?[a-fA-F0-9]+/ },
	      { begin: /[-+]?\d+(?:[.]\d+)?(?:[eE][-+]?\d+(?:[.]\d+)?)?/ }
	    ],
	    relevance: 0
	  };
	  const LABEL = {
	    className: 'symbol',
	    variants: [ { begin: /^\s*[a-z]+:/ }, // labels
	    ],
	    relevance: 0
	  };
	  const VARIABLE = {
	    className: 'variable',
	    variants: [
	      { begin: regex.concat(/%/, IDENT_RE) },
	      { begin: /%\d+/ },
	      { begin: /#\d+/ },
	    ]
	  };
	  const FUNCTION = {
	    className: 'title',
	    variants: [
	      { begin: regex.concat(/@/, IDENT_RE) },
	      { begin: /@\d+/ },
	      { begin: regex.concat(/!/, IDENT_RE) },
	      { begin: regex.concat(/!\d+/, IDENT_RE) },
	      // https://llvm.org/docs/LangRef.html#namedmetadatastructure
	      // obviously a single digit can also be used in this fashion
	      { begin: /!\d+/ }
	    ]
	  };

	  return {
	    name: 'LLVM IR',
	    // TODO: split into different categories of keywords
	    keywords:
	      'begin end true false declare define global '
	      + 'constant private linker_private internal '
	      + 'available_externally linkonce linkonce_odr weak '
	      + 'weak_odr appending dllimport dllexport common '
	      + 'default hidden protected extern_weak external '
	      + 'thread_local zeroinitializer undef null to tail '
	      + 'target triple datalayout volatile nuw nsw nnan '
	      + 'ninf nsz arcp fast exact inbounds align '
	      + 'addrspace section alias module asm sideeffect '
	      + 'gc dbg linker_private_weak attributes blockaddress '
	      + 'initialexec localdynamic localexec prefix unnamed_addr '
	      + 'ccc fastcc coldcc x86_stdcallcc x86_fastcallcc '
	      + 'arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device '
	      + 'ptx_kernel intel_ocl_bicc msp430_intrcc spir_func '
	      + 'spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc '
	      + 'cc c signext zeroext inreg sret nounwind '
	      + 'noreturn noalias nocapture byval nest readnone '
	      + 'readonly inlinehint noinline alwaysinline optsize ssp '
	      + 'sspreq noredzone noimplicitfloat naked builtin cold '
	      + 'nobuiltin noduplicate nonlazybind optnone returns_twice '
	      + 'sanitize_address sanitize_memory sanitize_thread sspstrong '
	      + 'uwtable returned type opaque eq ne slt sgt '
	      + 'sle sge ult ugt ule uge oeq one olt ogt '
	      + 'ole oge ord uno ueq une x acq_rel acquire '
	      + 'alignstack atomic catch cleanup filter inteldialect '
	      + 'max min monotonic nand personality release seq_cst '
	      + 'singlethread umax umin unordered xchg add fadd '
	      + 'sub fsub mul fmul udiv sdiv fdiv urem srem '
	      + 'frem shl lshr ashr and or xor icmp fcmp '
	      + 'phi call trunc zext sext fptrunc fpext uitofp '
	      + 'sitofp fptoui fptosi inttoptr ptrtoint bitcast '
	      + 'addrspacecast select va_arg ret br switch invoke '
	      + 'unwind unreachable indirectbr landingpad resume '
	      + 'malloc alloca free load store getelementptr '
	      + 'extractelement insertelement shufflevector getresult '
	      + 'extractvalue insertvalue atomicrmw cmpxchg fence '
	      + 'argmemonly double',
	    contains: [
	      TYPE,
	      // this matches "empty comments"...
	      // ...because it's far more likely this is a statement terminator in
	      // another language than an actual comment
	      hljs.COMMENT(/;\s*$/, null, { relevance: 0 }),
	      hljs.COMMENT(/;/, /$/),
	      {
	        className: 'string',
	        begin: /"/,
	        end: /"/,
	        contains: [
	          {
	            className: 'char.escape',
	            match: /\\\d\d/
	          }
	        ]
	      },
	      FUNCTION,
	      PUNCTUATION,
	      OPERATOR,
	      VARIABLE,
	      LABEL,
	      NUMBER
	    ]
	  };
	}

	llvm_1 = llvm;
	return llvm_1;
}

/*
Language: LSL (Linden Scripting Language)
Description: The Linden Scripting Language is used in Second Life by Linden Labs.
Author: Builder's Brewery <buildersbrewery@gmail.com>
Website: http://wiki.secondlife.com/wiki/LSL_Portal
Category: scripting
*/

var lsl_1;
var hasRequiredLsl;

function requireLsl () {
	if (hasRequiredLsl) return lsl_1;
	hasRequiredLsl = 1;
	function lsl(hljs) {
	  const LSL_STRING_ESCAPE_CHARS = {
	    className: 'subst',
	    begin: /\\[tn"\\]/
	  };

	  const LSL_STRINGS = {
	    className: 'string',
	    begin: '"',
	    end: '"',
	    contains: [ LSL_STRING_ESCAPE_CHARS ]
	  };

	  const LSL_NUMBERS = {
	    className: 'number',
	    relevance: 0,
	    begin: hljs.C_NUMBER_RE
	  };

	  const LSL_CONSTANTS = {
	    className: 'literal',
	    variants: [
	      { begin: '\\b(PI|TWO_PI|PI_BY_TWO|DEG_TO_RAD|RAD_TO_DEG|SQRT2)\\b' },
	      { begin: '\\b(XP_ERROR_(EXPERIENCES_DISABLED|EXPERIENCE_(DISABLED|SUSPENDED)|INVALID_(EXPERIENCE|PARAMETERS)|KEY_NOT_FOUND|MATURITY_EXCEEDED|NONE|NOT_(FOUND|PERMITTED(_LAND)?)|NO_EXPERIENCE|QUOTA_EXCEEDED|RETRY_UPDATE|STORAGE_EXCEPTION|STORE_DISABLED|THROTTLED|UNKNOWN_ERROR)|JSON_APPEND|STATUS_(PHYSICS|ROTATE_[XYZ]|PHANTOM|SANDBOX|BLOCK_GRAB(_OBJECT)?|(DIE|RETURN)_AT_EDGE|CAST_SHADOWS|OK|MALFORMED_PARAMS|TYPE_MISMATCH|BOUNDS_ERROR|NOT_(FOUND|SUPPORTED)|INTERNAL_ERROR|WHITELIST_FAILED)|AGENT(_(BY_(LEGACY_|USER)NAME|FLYING|ATTACHMENTS|SCRIPTED|MOUSELOOK|SITTING|ON_OBJECT|AWAY|WALKING|IN_AIR|TYPING|CROUCHING|BUSY|ALWAYS_RUN|AUTOPILOT|LIST_(PARCEL(_OWNER)?|REGION)))?|CAMERA_(PITCH|DISTANCE|BEHINDNESS_(ANGLE|LAG)|(FOCUS|POSITION)(_(THRESHOLD|LOCKED|LAG))?|FOCUS_OFFSET|ACTIVE)|ANIM_ON|LOOP|REVERSE|PING_PONG|SMOOTH|ROTATE|SCALE|ALL_SIDES|LINK_(ROOT|SET|ALL_(OTHERS|CHILDREN)|THIS)|ACTIVE|PASS(IVE|_(ALWAYS|IF_NOT_HANDLED|NEVER))|SCRIPTED|CONTROL_(FWD|BACK|(ROT_)?(LEFT|RIGHT)|UP|DOWN|(ML_)?LBUTTON)|PERMISSION_(RETURN_OBJECTS|DEBIT|OVERRIDE_ANIMATIONS|SILENT_ESTATE_MANAGEMENT|TAKE_CONTROLS|TRIGGER_ANIMATION|ATTACH|CHANGE_LINKS|(CONTROL|TRACK)_CAMERA|TELEPORT)|INVENTORY_(TEXTURE|SOUND|OBJECT|SCRIPT|LANDMARK|CLOTHING|NOTECARD|BODYPART|ANIMATION|GESTURE|ALL|NONE)|CHANGED_(INVENTORY|COLOR|SHAPE|SCALE|TEXTURE|LINK|ALLOWED_DROP|OWNER|REGION(_START)?|TELEPORT|MEDIA)|OBJECT_(CLICK_ACTION|HOVER_HEIGHT|LAST_OWNER_ID|(PHYSICS|SERVER|STREAMING)_COST|UNKNOWN_DETAIL|CHARACTER_TIME|PHANTOM|PHYSICS|TEMP_(ATTACHED|ON_REZ)|NAME|DESC|POS|PRIM_(COUNT|EQUIVALENCE)|RETURN_(PARCEL(_OWNER)?|REGION)|REZZER_KEY|ROO?T|VELOCITY|OMEGA|OWNER|GROUP(_TAG)?|CREATOR|ATTACHED_(POINT|SLOTS_AVAILABLE)|RENDER_WEIGHT|(BODY_SHAPE|PATHFINDING)_TYPE|(RUNNING|TOTAL)_SCRIPT_COUNT|TOTAL_INVENTORY_COUNT|SCRIPT_(MEMORY|TIME))|TYPE_(INTEGER|FLOAT|STRING|KEY|VECTOR|ROTATION|INVALID)|(DEBUG|PUBLIC)_CHANNEL|ATTACH_(AVATAR_CENTER|CHEST|HEAD|BACK|PELVIS|MOUTH|CHIN|NECK|NOSE|BELLY|[LR](SHOULDER|HAND|FOOT|EAR|EYE|[UL](ARM|LEG)|HIP)|(LEFT|RIGHT)_PEC|HUD_(CENTER_[12]|TOP_(RIGHT|CENTER|LEFT)|BOTTOM(_(RIGHT|LEFT))?)|[LR]HAND_RING1|TAIL_(BASE|TIP)|[LR]WING|FACE_(JAW|[LR]EAR|[LR]EYE|TOUNGE)|GROIN|HIND_[LR]FOOT)|LAND_(LEVEL|RAISE|LOWER|SMOOTH|NOISE|REVERT)|DATA_(ONLINE|NAME|BORN|SIM_(POS|STATUS|RATING)|PAYINFO)|PAYMENT_INFO_(ON_FILE|USED)|REMOTE_DATA_(CHANNEL|REQUEST|REPLY)|PSYS_(PART_(BF_(ZERO|ONE(_MINUS_(DEST_COLOR|SOURCE_(ALPHA|COLOR)))?|DEST_COLOR|SOURCE_(ALPHA|COLOR))|BLEND_FUNC_(DEST|SOURCE)|FLAGS|(START|END)_(COLOR|ALPHA|SCALE|GLOW)|MAX_AGE|(RIBBON|WIND|INTERP_(COLOR|SCALE)|BOUNCE|FOLLOW_(SRC|VELOCITY)|TARGET_(POS|LINEAR)|EMISSIVE)_MASK)|SRC_(MAX_AGE|PATTERN|ANGLE_(BEGIN|END)|BURST_(RATE|PART_COUNT|RADIUS|SPEED_(MIN|MAX))|ACCEL|TEXTURE|TARGET_KEY|OMEGA|PATTERN_(DROP|EXPLODE|ANGLE(_CONE(_EMPTY)?)?)))|VEHICLE_(REFERENCE_FRAME|TYPE_(NONE|SLED|CAR|BOAT|AIRPLANE|BALLOON)|(LINEAR|ANGULAR)_(FRICTION_TIMESCALE|MOTOR_DIRECTION)|LINEAR_MOTOR_OFFSET|HOVER_(HEIGHT|EFFICIENCY|TIMESCALE)|BUOYANCY|(LINEAR|ANGULAR)_(DEFLECTION_(EFFICIENCY|TIMESCALE)|MOTOR_(DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(EFFICIENCY|TIMESCALE)|BANKING_(EFFICIENCY|MIX|TIMESCALE)|FLAG_(NO_DEFLECTION_UP|LIMIT_(ROLL_ONLY|MOTOR_UP)|HOVER_((WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(ALLOW_UNSIT|ALPHA_MODE(_(BLEND|EMISSIVE|MASK|NONE))?|NORMAL|SPECULAR|TYPE(_(BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(_(STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(NONE|LOW|MEDIUM|HIGH)|BUMP_(NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(DEFAULT|PLANAR)|SCRIPTED_SIT_ONLY|SCULPT_(TYPE_(SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(MIRROR|INVERT))|PHYSICS(_(SHAPE_(CONVEX|NONE|PRIM|TYPE)))?|(POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIT_TARGET|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(ALT_IMAGE_ENABLE|CONTROLS|(CURRENT|HOME)_URL|AUTO_(LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(WIDTH|HEIGHT)_PIXELS|WHITELIST(_ENABLE)?|PERMS_(INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(STANDARD|MINI)|PERM_(NONE|OWNER|GROUP|ANYONE)|MAX_(URL_LENGTH|WHITELIST_(SIZE|COUNT)|(WIDTH|HEIGHT)_PIXELS)))|MASK_(BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(MEDIA_COMMAND_(STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(ALLOW_(FLY|(GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(GROUP_)?OBJECTS)|USE_(ACCESS_(GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(GROUP|ALL)_OBJECT_ENTRY)|COUNT_(TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(HIDE|DEFAULT)|REGION_FLAG_(ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(METHOD|MIMETYPE|BODY_(MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|SIT_(INVALID_(AGENT|LINK_OBJECT)|NO(T_EXPERIENCE|_(ACCESS|EXPERIENCE_PERMISSION|SIT_TARGET)))|STRING_(TRIM(_(HEAD|TAIL))?)|CLICK_ACTION_(NONE|TOUCH|SIT|BUY|PAY|OPEN(_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(NONE|SCRIPT_MEMORY)|RC_(DATA_FLAGS|DETECT_PHANTOM|GET_(LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(TYPES|AGENTS|(NON)?PHYSICAL|LAND))|RCERR_(CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(ALLOWED_(AGENT|GROUP)_(ADD|REMOVE)|BANNED_AGENT_(ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(COMMAND|CMD_(PLAY|STOP|PAUSE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(CMD_((SMOOTH_)?STOP|JUMP)|DESIRED_(TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(_([ABCD]|NONE))?|MAX_(DECEL|TURN_RADIUS|(ACCEL|SPEED)))|PURSUIT_(OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(EVADE_(HIDDEN|SPOTTED)|FAILURE_(DYNAMIC_PATHFINDING_DISABLED|INVALID_(GOAL|START)|NO_(NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(PARCEL_)?UNREACHABLE)|(GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(_(FAST|NONE|SLOW))?|CONTENT_TYPE_(ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(RADIUS|STATIC)|(PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_(AVATAR|CHARACTER|EXCLUSION_VOLUME|LEGACY_LINKSET|MATERIAL_VOLUME|OTHER|STATIC_OBSTACLE|WALKABLE)|SIM_STAT_PCT_CHARS_STEPPED)\\b' },
	      { begin: '\\b(FALSE|TRUE)\\b' },
	      { begin: '\\b(ZERO_ROTATION)\\b' },
	      { begin: '\\b(EOF|JSON_(ARRAY|DELETE|FALSE|INVALID|NULL|NUMBER|OBJECT|STRING|TRUE)|NULL_KEY|TEXTURE_(BLANK|DEFAULT|MEDIA|PLYWOOD|TRANSPARENT)|URL_REQUEST_(GRANTED|DENIED))\\b' },
	      { begin: '\\b(ZERO_VECTOR|TOUCH_INVALID_(TEXCOORD|VECTOR))\\b' }
	    ]
	  };

	  const LSL_FUNCTIONS = {
	    className: 'built_in',
	    begin: '\\b(ll(AgentInExperience|(Create|DataSize|Delete|KeyCount|Keys|Read|Update)KeyValue|GetExperience(Details|ErrorMessage)|ReturnObjectsBy(ID|Owner)|Json(2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(Mag|Norm|Dist)|Rot(Between|2(Euler|Fwd|Left|Up))|(Euler|Axes)2Rot|Whisper|(Region|Owner)?Say|Shout|Listen(Control|Remove)?|Sensor(Repeat|Remove)?|Detected(Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|([GS]et)(AnimationOverride|MemoryLimit|PrimMediaParams|ParcelMusicURL|Object(Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(Scale|Offset|Rotate)Texture|(Rot)?Target(Remove)?|(Stop)?MoveToTarget|Apply(Rotational)?Impulse|Set(KeyframedMotion|ContentType|RegionPos|(Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(Queueing|Radius)|Vehicle(Type|(Float|Vector|Rotation)Param)|(Touch|Sit)?Text|Camera(Eye|At)Offset|PrimitiveParams|ClickAction|Link(Alpha|Color|PrimitiveParams(Fast)?|Texture(Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get((Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(PrimitiveParams|Number(OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(Details|PermMask|PrimCount)|Parcel(MaxPrims|Details|Prim(Count|Owners))|Attached(List)?|(SPMax|Free|Used)Memory|Region(Name|TimeDilation|FPS|Corner|AgentCount)|Root(Position|Rotation)|UnixTime|(Parcel|Region)Flags|(Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(Prims|NotecardLines|Sides)|Animation(List)?|(Camera|Local)(Pos|Rot)|Vel|Accel|Omega|Time(stamp|OfDay)|(Object|CenterOf)?Mass|MassMKS|Energy|Owner|(Owner)?Key|SunDirection|Texture(Offset|Scale|Rot)|Inventory(Number|Name|Key|Type|Creator|PermMask)|Permissions(Key)?|StartParameter|List(Length|EntryType)|Date|Agent(Size|Info|Language|List)|LandOwnerAt|NotecardLine|Script(Name|State))|(Get|Reset|GetAndReset)Time|PlaySound(Slave)?|LoopSound(Master|Slave)?|(Trigger|Stop|Preload)Sound|((Get|Delete)Sub|Insert)String|To(Upper|Lower)|Give(InventoryList|Money)|RezObject|(Stop)?LookAt|Sleep|CollisionFilter|(Take|Release)Controls|DetachFromAvatar|AttachToAvatar(Temp)?|InstantMessage|(GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(Length|Trim)|(Start|Stop)Animation|TargetOmega|Request(Experience)?Permissions|(Create|Break)Link|BreakAllLinks|(Give|Remove)Inventory|Water|PassTouches|Request(Agent|Inventory)Data|TeleportAgent(Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(Axis|Angle)|A(cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(CSV|Integer|Json|Float|String|Key|Vector|Rot|List(Strided)?)|DeleteSubList|List(Statistics|Sort|Randomize|(Insert|Find|Replace)List)|EdgeOfWorld|AdjustSoundVolume|Key2Name|TriggerSoundLimited|EjectFromLand|(CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(Slope|Normal|Contour)|GroundRepel|(Set|Remove)VehicleFlags|SitOnLink|(AvatarOn)?(Link)?SitTarget|Script(Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(Integer|String)ToBase64|XorBase64|Log(10)?|Base64To(String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|(Load|Release|(E|Une)scape)URL|ParcelMedia(CommandList|Query)|ModPow|MapDestination|(RemoveFrom|AddTo|Reset)Land(Pass|Ban)List|(Set|Clear)CameraParams|HTTP(Request|Response)|TextBox|DetectedTouch(UV|Face|Pos|(N|Bin)ormal|ST)|(MD5|SHA1|DumpList2)String|Request(Secure)?URL|Clear(Prim|Link)Media|(Link)?ParticleSystem|(Get|Request)(Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(Create|Delete)Character|ExecCharacterCmd|Evade|FleeFrom|NavigateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\\b'
	  };

	  return {
	    name: 'LSL (Linden Scripting Language)',
	    illegal: ':',
	    contains: [
	      LSL_STRINGS,
	      {
	        className: 'comment',
	        variants: [
	          hljs.COMMENT('//', '$'),
	          hljs.COMMENT('/\\*', '\\*/')
	        ],
	        relevance: 0
	      },
	      LSL_NUMBERS,
	      {
	        className: 'section',
	        variants: [
	          { begin: '\\b(state|default)\\b' },
	          { begin: '\\b(state_(entry|exit)|touch(_(start|end))?|(land_)?collision(_(start|end))?|timer|listen|(no_)?sensor|control|(not_)?at_(rot_)?target|money|email|experience_permissions(_denied)?|run_time_permissions|changed|attach|dataserver|moving_(start|end)|link_message|(on|object)_rez|remote_data|http_re(sponse|quest)|path_update|transaction_result)\\b' }
	        ]
	      },
	      LSL_FUNCTIONS,
	      LSL_CONSTANTS,
	      {
	        className: 'type',
	        begin: '\\b(integer|float|string|key|vector|quaternion|rotation|list)\\b'
	      }
	    ]
	  };
	}

	lsl_1 = lsl;
	return lsl_1;
}

/*
Language: Lua
Description: Lua is a powerful, efficient, lightweight, embeddable scripting language.
Author: Andrew Fedorov <dmmdrs@mail.ru>
Category: common, scripting
Website: https://www.lua.org
*/

var lua_1;
var hasRequiredLua;

function requireLua () {
	if (hasRequiredLua) return lua_1;
	hasRequiredLua = 1;
	function lua(hljs) {
	  const OPENING_LONG_BRACKET = '\\[=*\\[';
	  const CLOSING_LONG_BRACKET = '\\]=*\\]';
	  const LONG_BRACKETS = {
	    begin: OPENING_LONG_BRACKET,
	    end: CLOSING_LONG_BRACKET,
	    contains: [ 'self' ]
	  };
	  const COMMENTS = [
	    hljs.COMMENT('--(?!' + OPENING_LONG_BRACKET + ')', '$'),
	    hljs.COMMENT(
	      '--' + OPENING_LONG_BRACKET,
	      CLOSING_LONG_BRACKET,
	      {
	        contains: [ LONG_BRACKETS ],
	        relevance: 10
	      }
	    )
	  ];
	  return {
	    name: 'Lua',
	    keywords: {
	      $pattern: hljs.UNDERSCORE_IDENT_RE,
	      literal: "true false nil",
	      keyword: "and break do else elseif end for goto if in local not or repeat return then until while",
	      built_in:
	        // Metatags and globals:
	        '_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len '
	        + '__gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert '
	        // Standard methods and properties:
	        + 'collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring '
	        + 'module next pairs pcall print rawequal rawget rawset require select setfenv '
	        + 'setmetatable tonumber tostring type unpack xpcall arg self '
	        // Library methods and properties (one line per library):
	        + 'coroutine resume yield status wrap create running debug getupvalue '
	        + 'debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv '
	        + 'io lines write close flush open output type read stderr stdin input stdout popen tmpfile '
	        + 'math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan '
	        + 'os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall '
	        + 'string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower '
	        + 'table setn insert getn foreachi maxn foreach concat sort remove'
	    },
	    contains: COMMENTS.concat([
	      {
	        className: 'function',
	        beginKeywords: 'function',
	        end: '\\)',
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, { begin: '([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*' }),
	          {
	            className: 'params',
	            begin: '\\(',
	            endsWithParent: true,
	            contains: COMMENTS
	          }
	        ].concat(COMMENTS)
	      },
	      hljs.C_NUMBER_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'string',
	        begin: OPENING_LONG_BRACKET,
	        end: CLOSING_LONG_BRACKET,
	        contains: [ LONG_BRACKETS ],
	        relevance: 5
	      }
	    ])
	  };
	}

	lua_1 = lua;
	return lua_1;
}

/*
Language: Makefile
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Contributors: Joël Porquet <joel@porquet.org>
Website: https://www.gnu.org/software/make/manual/html_node/Introduction.html
Category: common
*/

var makefile_1;
var hasRequiredMakefile;

function requireMakefile () {
	if (hasRequiredMakefile) return makefile_1;
	hasRequiredMakefile = 1;
	function makefile(hljs) {
	  /* Variables: simple (eg $(var)) and special (eg $@) */
	  const VARIABLE = {
	    className: 'variable',
	    variants: [
	      {
	        begin: '\\$\\(' + hljs.UNDERSCORE_IDENT_RE + '\\)',
	        contains: [ hljs.BACKSLASH_ESCAPE ]
	      },
	      { begin: /\$[@%<?\^\+\*]/ }
	    ]
	  };
	  /* Quoted string with variables inside */
	  const QUOTE_STRING = {
	    className: 'string',
	    begin: /"/,
	    end: /"/,
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      VARIABLE
	    ]
	  };
	  /* Function: $(func arg,...) */
	  const FUNC = {
	    className: 'variable',
	    begin: /\$\([\w-]+\s/,
	    end: /\)/,
	    keywords: { built_in:
	        'subst patsubst strip findstring filter filter-out sort '
	        + 'word wordlist firstword lastword dir notdir suffix basename '
	        + 'addsuffix addprefix join wildcard realpath abspath error warning '
	        + 'shell origin flavor foreach if or and call eval file value' },
	    contains: [ VARIABLE ]
	  };
	  /* Variable assignment */
	  const ASSIGNMENT = { begin: '^' + hljs.UNDERSCORE_IDENT_RE + '\\s*(?=[:+?]?=)' };
	  /* Meta targets (.PHONY) */
	  const META = {
	    className: 'meta',
	    begin: /^\.PHONY:/,
	    end: /$/,
	    keywords: {
	      $pattern: /[\.\w]+/,
	      keyword: '.PHONY'
	    }
	  };
	  /* Targets */
	  const TARGET = {
	    className: 'section',
	    begin: /^[^\s]+:/,
	    end: /$/,
	    contains: [ VARIABLE ]
	  };
	  return {
	    name: 'Makefile',
	    aliases: [
	      'mk',
	      'mak',
	      'make',
	    ],
	    keywords: {
	      $pattern: /[\w-]+/,
	      keyword: 'define endef undefine ifdef ifndef ifeq ifneq else endif '
	      + 'include -include sinclude override export unexport private vpath'
	    },
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      VARIABLE,
	      QUOTE_STRING,
	      FUNC,
	      ASSIGNMENT,
	      META,
	      TARGET
	    ]
	  };
	}

	makefile_1 = makefile;
	return makefile_1;
}

var mathematica_1;
var hasRequiredMathematica;

function requireMathematica () {
	if (hasRequiredMathematica) return mathematica_1;
	hasRequiredMathematica = 1;
	const SYSTEM_SYMBOLS = [
	  "AASTriangle",
	  "AbelianGroup",
	  "Abort",
	  "AbortKernels",
	  "AbortProtect",
	  "AbortScheduledTask",
	  "Above",
	  "Abs",
	  "AbsArg",
	  "AbsArgPlot",
	  "Absolute",
	  "AbsoluteCorrelation",
	  "AbsoluteCorrelationFunction",
	  "AbsoluteCurrentValue",
	  "AbsoluteDashing",
	  "AbsoluteFileName",
	  "AbsoluteOptions",
	  "AbsolutePointSize",
	  "AbsoluteThickness",
	  "AbsoluteTime",
	  "AbsoluteTiming",
	  "AcceptanceThreshold",
	  "AccountingForm",
	  "Accumulate",
	  "Accuracy",
	  "AccuracyGoal",
	  "AcousticAbsorbingValue",
	  "AcousticImpedanceValue",
	  "AcousticNormalVelocityValue",
	  "AcousticPDEComponent",
	  "AcousticPressureCondition",
	  "AcousticRadiationValue",
	  "AcousticSoundHardValue",
	  "AcousticSoundSoftCondition",
	  "ActionDelay",
	  "ActionMenu",
	  "ActionMenuBox",
	  "ActionMenuBoxOptions",
	  "Activate",
	  "Active",
	  "ActiveClassification",
	  "ActiveClassificationObject",
	  "ActiveItem",
	  "ActivePrediction",
	  "ActivePredictionObject",
	  "ActiveStyle",
	  "AcyclicGraphQ",
	  "AddOnHelpPath",
	  "AddSides",
	  "AddTo",
	  "AddToSearchIndex",
	  "AddUsers",
	  "AdjacencyGraph",
	  "AdjacencyList",
	  "AdjacencyMatrix",
	  "AdjacentMeshCells",
	  "Adjugate",
	  "AdjustmentBox",
	  "AdjustmentBoxOptions",
	  "AdjustTimeSeriesForecast",
	  "AdministrativeDivisionData",
	  "AffineHalfSpace",
	  "AffineSpace",
	  "AffineStateSpaceModel",
	  "AffineTransform",
	  "After",
	  "AggregatedEntityClass",
	  "AggregationLayer",
	  "AircraftData",
	  "AirportData",
	  "AirPressureData",
	  "AirSoundAttenuation",
	  "AirTemperatureData",
	  "AiryAi",
	  "AiryAiPrime",
	  "AiryAiZero",
	  "AiryBi",
	  "AiryBiPrime",
	  "AiryBiZero",
	  "AlgebraicIntegerQ",
	  "AlgebraicNumber",
	  "AlgebraicNumberDenominator",
	  "AlgebraicNumberNorm",
	  "AlgebraicNumberPolynomial",
	  "AlgebraicNumberTrace",
	  "AlgebraicRules",
	  "AlgebraicRulesData",
	  "Algebraics",
	  "AlgebraicUnitQ",
	  "Alignment",
	  "AlignmentMarker",
	  "AlignmentPoint",
	  "All",
	  "AllowAdultContent",
	  "AllowChatServices",
	  "AllowedCloudExtraParameters",
	  "AllowedCloudParameterExtensions",
	  "AllowedDimensions",
	  "AllowedFrequencyRange",
	  "AllowedHeads",
	  "AllowGroupClose",
	  "AllowIncomplete",
	  "AllowInlineCells",
	  "AllowKernelInitialization",
	  "AllowLooseGrammar",
	  "AllowReverseGroupClose",
	  "AllowScriptLevelChange",
	  "AllowVersionUpdate",
	  "AllTrue",
	  "Alphabet",
	  "AlphabeticOrder",
	  "AlphabeticSort",
	  "AlphaChannel",
	  "AlternateImage",
	  "AlternatingFactorial",
	  "AlternatingGroup",
	  "AlternativeHypothesis",
	  "Alternatives",
	  "AltitudeMethod",
	  "AmbientLight",
	  "AmbiguityFunction",
	  "AmbiguityList",
	  "Analytic",
	  "AnatomyData",
	  "AnatomyForm",
	  "AnatomyPlot3D",
	  "AnatomySkinStyle",
	  "AnatomyStyling",
	  "AnchoredSearch",
	  "And",
	  "AndersonDarlingTest",
	  "AngerJ",
	  "AngleBisector",
	  "AngleBracket",
	  "AnglePath",
	  "AnglePath3D",
	  "AngleVector",
	  "AngularGauge",
	  "Animate",
	  "AnimatedImage",
	  "AnimationCycleOffset",
	  "AnimationCycleRepetitions",
	  "AnimationDirection",
	  "AnimationDisplayTime",
	  "AnimationRate",
	  "AnimationRepetitions",
	  "AnimationRunning",
	  "AnimationRunTime",
	  "AnimationTimeIndex",
	  "AnimationVideo",
	  "Animator",
	  "AnimatorBox",
	  "AnimatorBoxOptions",
	  "AnimatorElements",
	  "Annotate",
	  "Annotation",
	  "AnnotationDelete",
	  "AnnotationKeys",
	  "AnnotationRules",
	  "AnnotationValue",
	  "Annuity",
	  "AnnuityDue",
	  "Annulus",
	  "AnomalyDetection",
	  "AnomalyDetector",
	  "AnomalyDetectorFunction",
	  "Anonymous",
	  "Antialiasing",
	  "Antihermitian",
	  "AntihermitianMatrixQ",
	  "Antisymmetric",
	  "AntisymmetricMatrixQ",
	  "Antonyms",
	  "AnyOrder",
	  "AnySubset",
	  "AnyTrue",
	  "Apart",
	  "ApartSquareFree",
	  "APIFunction",
	  "Appearance",
	  "AppearanceElements",
	  "AppearanceRules",
	  "AppellF1",
	  "Append",
	  "AppendCheck",
	  "AppendLayer",
	  "AppendTo",
	  "Application",
	  "Apply",
	  "ApplyReaction",
	  "ApplySides",
	  "ApplyTo",
	  "ArcCos",
	  "ArcCosh",
	  "ArcCot",
	  "ArcCoth",
	  "ArcCsc",
	  "ArcCsch",
	  "ArcCurvature",
	  "ARCHProcess",
	  "ArcLength",
	  "ArcSec",
	  "ArcSech",
	  "ArcSin",
	  "ArcSinDistribution",
	  "ArcSinh",
	  "ArcTan",
	  "ArcTanh",
	  "Area",
	  "Arg",
	  "ArgMax",
	  "ArgMin",
	  "ArgumentCountQ",
	  "ArgumentsOptions",
	  "ARIMAProcess",
	  "ArithmeticGeometricMean",
	  "ARMAProcess",
	  "Around",
	  "AroundReplace",
	  "ARProcess",
	  "Array",
	  "ArrayComponents",
	  "ArrayDepth",
	  "ArrayFilter",
	  "ArrayFlatten",
	  "ArrayMesh",
	  "ArrayPad",
	  "ArrayPlot",
	  "ArrayPlot3D",
	  "ArrayQ",
	  "ArrayReduce",
	  "ArrayResample",
	  "ArrayReshape",
	  "ArrayRules",
	  "Arrays",
	  "Arrow",
	  "Arrow3DBox",
	  "ArrowBox",
	  "Arrowheads",
	  "ASATriangle",
	  "Ask",
	  "AskAppend",
	  "AskConfirm",
	  "AskDisplay",
	  "AskedQ",
	  "AskedValue",
	  "AskFunction",
	  "AskState",
	  "AskTemplateDisplay",
	  "AspectRatio",
	  "AspectRatioFixed",
	  "Assert",
	  "AssessmentFunction",
	  "AssessmentResultObject",
	  "AssociateTo",
	  "Association",
	  "AssociationFormat",
	  "AssociationMap",
	  "AssociationQ",
	  "AssociationThread",
	  "AssumeDeterministic",
	  "Assuming",
	  "Assumptions",
	  "AstroAngularSeparation",
	  "AstroBackground",
	  "AstroCenter",
	  "AstroDistance",
	  "AstroGraphics",
	  "AstroGridLines",
	  "AstroGridLinesStyle",
	  "AstronomicalData",
	  "AstroPosition",
	  "AstroProjection",
	  "AstroRange",
	  "AstroRangePadding",
	  "AstroReferenceFrame",
	  "AstroStyling",
	  "AstroZoomLevel",
	  "Asymptotic",
	  "AsymptoticDSolveValue",
	  "AsymptoticEqual",
	  "AsymptoticEquivalent",
	  "AsymptoticExpectation",
	  "AsymptoticGreater",
	  "AsymptoticGreaterEqual",
	  "AsymptoticIntegrate",
	  "AsymptoticLess",
	  "AsymptoticLessEqual",
	  "AsymptoticOutputTracker",
	  "AsymptoticProbability",
	  "AsymptoticProduct",
	  "AsymptoticRSolveValue",
	  "AsymptoticSolve",
	  "AsymptoticSum",
	  "Asynchronous",
	  "AsynchronousTaskObject",
	  "AsynchronousTasks",
	  "Atom",
	  "AtomCoordinates",
	  "AtomCount",
	  "AtomDiagramCoordinates",
	  "AtomLabels",
	  "AtomLabelStyle",
	  "AtomList",
	  "AtomQ",
	  "AttachCell",
	  "AttachedCell",
	  "AttentionLayer",
	  "Attributes",
	  "Audio",
	  "AudioAmplify",
	  "AudioAnnotate",
	  "AudioAnnotationLookup",
	  "AudioBlockMap",
	  "AudioCapture",
	  "AudioChannelAssignment",
	  "AudioChannelCombine",
	  "AudioChannelMix",
	  "AudioChannels",
	  "AudioChannelSeparate",
	  "AudioData",
	  "AudioDelay",
	  "AudioDelete",
	  "AudioDevice",
	  "AudioDistance",
	  "AudioEncoding",
	  "AudioFade",
	  "AudioFrequencyShift",
	  "AudioGenerator",
	  "AudioIdentify",
	  "AudioInputDevice",
	  "AudioInsert",
	  "AudioInstanceQ",
	  "AudioIntervals",
	  "AudioJoin",
	  "AudioLabel",
	  "AudioLength",
	  "AudioLocalMeasurements",
	  "AudioLooping",
	  "AudioLoudness",
	  "AudioMeasurements",
	  "AudioNormalize",
	  "AudioOutputDevice",
	  "AudioOverlay",
	  "AudioPad",
	  "AudioPan",
	  "AudioPartition",
	  "AudioPause",
	  "AudioPitchShift",
	  "AudioPlay",
	  "AudioPlot",
	  "AudioQ",
	  "AudioRecord",
	  "AudioReplace",
	  "AudioResample",
	  "AudioReverb",
	  "AudioReverse",
	  "AudioSampleRate",
	  "AudioSpectralMap",
	  "AudioSpectralTransformation",
	  "AudioSplit",
	  "AudioStop",
	  "AudioStream",
	  "AudioStreams",
	  "AudioTimeStretch",
	  "AudioTrackApply",
	  "AudioTrackSelection",
	  "AudioTrim",
	  "AudioType",
	  "AugmentedPolyhedron",
	  "AugmentedSymmetricPolynomial",
	  "Authenticate",
	  "Authentication",
	  "AuthenticationDialog",
	  "AutoAction",
	  "Autocomplete",
	  "AutocompletionFunction",
	  "AutoCopy",
	  "AutocorrelationTest",
	  "AutoDelete",
	  "AutoEvaluateEvents",
	  "AutoGeneratedPackage",
	  "AutoIndent",
	  "AutoIndentSpacings",
	  "AutoItalicWords",
	  "AutoloadPath",
	  "AutoMatch",
	  "Automatic",
	  "AutomaticImageSize",
	  "AutoMultiplicationSymbol",
	  "AutoNumberFormatting",
	  "AutoOpenNotebooks",
	  "AutoOpenPalettes",
	  "AutoOperatorRenderings",
	  "AutoQuoteCharacters",
	  "AutoRefreshed",
	  "AutoRemove",
	  "AutorunSequencing",
	  "AutoScaling",
	  "AutoScroll",
	  "AutoSpacing",
	  "AutoStyleOptions",
	  "AutoStyleWords",
	  "AutoSubmitting",
	  "Axes",
	  "AxesEdge",
	  "AxesLabel",
	  "AxesOrigin",
	  "AxesStyle",
	  "AxiomaticTheory",
	  "Axis",
	  "Axis3DBox",
	  "Axis3DBoxOptions",
	  "AxisBox",
	  "AxisBoxOptions",
	  "AxisLabel",
	  "AxisObject",
	  "AxisStyle",
	  "BabyMonsterGroupB",
	  "Back",
	  "BackFaceColor",
	  "BackFaceGlowColor",
	  "BackFaceOpacity",
	  "BackFaceSpecularColor",
	  "BackFaceSpecularExponent",
	  "BackFaceSurfaceAppearance",
	  "BackFaceTexture",
	  "Background",
	  "BackgroundAppearance",
	  "BackgroundTasksSettings",
	  "Backslash",
	  "Backsubstitution",
	  "Backward",
	  "Ball",
	  "Band",
	  "BandpassFilter",
	  "BandstopFilter",
	  "BarabasiAlbertGraphDistribution",
	  "BarChart",
	  "BarChart3D",
	  "BarcodeImage",
	  "BarcodeRecognize",
	  "BaringhausHenzeTest",
	  "BarLegend",
	  "BarlowProschanImportance",
	  "BarnesG",
	  "BarOrigin",
	  "BarSpacing",
	  "BartlettHannWindow",
	  "BartlettWindow",
	  "BaseDecode",
	  "BaseEncode",
	  "BaseForm",
	  "Baseline",
	  "BaselinePosition",
	  "BaseStyle",
	  "BasicRecurrentLayer",
	  "BatchNormalizationLayer",
	  "BatchSize",
	  "BatesDistribution",
	  "BattleLemarieWavelet",
	  "BayesianMaximization",
	  "BayesianMaximizationObject",
	  "BayesianMinimization",
	  "BayesianMinimizationObject",
	  "Because",
	  "BeckmannDistribution",
	  "Beep",
	  "Before",
	  "Begin",
	  "BeginDialogPacket",
	  "BeginPackage",
	  "BellB",
	  "BellY",
	  "Below",
	  "BenfordDistribution",
	  "BeniniDistribution",
	  "BenktanderGibratDistribution",
	  "BenktanderWeibullDistribution",
	  "BernoulliB",
	  "BernoulliDistribution",
	  "BernoulliGraphDistribution",
	  "BernoulliProcess",
	  "BernsteinBasis",
	  "BesagL",
	  "BesselFilterModel",
	  "BesselI",
	  "BesselJ",
	  "BesselJZero",
	  "BesselK",
	  "BesselY",
	  "BesselYZero",
	  "Beta",
	  "BetaBinomialDistribution",
	  "BetaDistribution",
	  "BetaNegativeBinomialDistribution",
	  "BetaPrimeDistribution",
	  "BetaRegularized",
	  "Between",
	  "BetweennessCentrality",
	  "Beveled",
	  "BeveledPolyhedron",
	  "BezierCurve",
	  "BezierCurve3DBox",
	  "BezierCurve3DBoxOptions",
	  "BezierCurveBox",
	  "BezierCurveBoxOptions",
	  "BezierFunction",
	  "BilateralFilter",
	  "BilateralLaplaceTransform",
	  "BilateralZTransform",
	  "Binarize",
	  "BinaryDeserialize",
	  "BinaryDistance",
	  "BinaryFormat",
	  "BinaryImageQ",
	  "BinaryRead",
	  "BinaryReadList",
	  "BinarySerialize",
	  "BinaryWrite",
	  "BinCounts",
	  "BinLists",
	  "BinnedVariogramList",
	  "Binomial",
	  "BinomialDistribution",
	  "BinomialPointProcess",
	  "BinomialProcess",
	  "BinormalDistribution",
	  "BiorthogonalSplineWavelet",
	  "BioSequence",
	  "BioSequenceBackTranslateList",
	  "BioSequenceComplement",
	  "BioSequenceInstances",
	  "BioSequenceModify",
	  "BioSequencePlot",
	  "BioSequenceQ",
	  "BioSequenceReverseComplement",
	  "BioSequenceTranscribe",
	  "BioSequenceTranslate",
	  "BipartiteGraphQ",
	  "BiquadraticFilterModel",
	  "BirnbaumImportance",
	  "BirnbaumSaundersDistribution",
	  "BitAnd",
	  "BitClear",
	  "BitGet",
	  "BitLength",
	  "BitNot",
	  "BitOr",
	  "BitRate",
	  "BitSet",
	  "BitShiftLeft",
	  "BitShiftRight",
	  "BitXor",
	  "BiweightLocation",
	  "BiweightMidvariance",
	  "Black",
	  "BlackmanHarrisWindow",
	  "BlackmanNuttallWindow",
	  "BlackmanWindow",
	  "Blank",
	  "BlankForm",
	  "BlankNullSequence",
	  "BlankSequence",
	  "Blend",
	  "Block",
	  "BlockchainAddressData",
	  "BlockchainBase",
	  "BlockchainBlockData",
	  "BlockchainContractValue",
	  "BlockchainData",
	  "BlockchainGet",
	  "BlockchainKeyEncode",
	  "BlockchainPut",
	  "BlockchainTokenData",
	  "BlockchainTransaction",
	  "BlockchainTransactionData",
	  "BlockchainTransactionSign",
	  "BlockchainTransactionSubmit",
	  "BlockDiagonalMatrix",
	  "BlockLowerTriangularMatrix",
	  "BlockMap",
	  "BlockRandom",
	  "BlockUpperTriangularMatrix",
	  "BlomqvistBeta",
	  "BlomqvistBetaTest",
	  "Blue",
	  "Blur",
	  "Blurring",
	  "BodePlot",
	  "BohmanWindow",
	  "Bold",
	  "Bond",
	  "BondCount",
	  "BondLabels",
	  "BondLabelStyle",
	  "BondList",
	  "BondQ",
	  "Bookmarks",
	  "Boole",
	  "BooleanConsecutiveFunction",
	  "BooleanConvert",
	  "BooleanCountingFunction",
	  "BooleanFunction",
	  "BooleanGraph",
	  "BooleanMaxterms",
	  "BooleanMinimize",
	  "BooleanMinterms",
	  "BooleanQ",
	  "BooleanRegion",
	  "Booleans",
	  "BooleanStrings",
	  "BooleanTable",
	  "BooleanVariables",
	  "BorderDimensions",
	  "BorelTannerDistribution",
	  "Bottom",
	  "BottomHatTransform",
	  "BoundaryDiscretizeGraphics",
	  "BoundaryDiscretizeRegion",
	  "BoundaryMesh",
	  "BoundaryMeshRegion",
	  "BoundaryMeshRegionQ",
	  "BoundaryStyle",
	  "BoundedRegionQ",
	  "BoundingRegion",
	  "Bounds",
	  "Box",
	  "BoxBaselineShift",
	  "BoxData",
	  "BoxDimensions",
	  "Boxed",
	  "Boxes",
	  "BoxForm",
	  "BoxFormFormatTypes",
	  "BoxFrame",
	  "BoxID",
	  "BoxMargins",
	  "BoxMatrix",
	  "BoxObject",
	  "BoxRatios",
	  "BoxRotation",
	  "BoxRotationPoint",
	  "BoxStyle",
	  "BoxWhiskerChart",
	  "Bra",
	  "BracketingBar",
	  "BraKet",
	  "BrayCurtisDistance",
	  "BreadthFirstScan",
	  "Break",
	  "BridgeData",
	  "BrightnessEqualize",
	  "BroadcastStationData",
	  "Brown",
	  "BrownForsytheTest",
	  "BrownianBridgeProcess",
	  "BrowserCategory",
	  "BSplineBasis",
	  "BSplineCurve",
	  "BSplineCurve3DBox",
	  "BSplineCurve3DBoxOptions",
	  "BSplineCurveBox",
	  "BSplineCurveBoxOptions",
	  "BSplineFunction",
	  "BSplineSurface",
	  "BSplineSurface3DBox",
	  "BSplineSurface3DBoxOptions",
	  "BubbleChart",
	  "BubbleChart3D",
	  "BubbleScale",
	  "BubbleSizes",
	  "BuckyballGraph",
	  "BuildCompiledComponent",
	  "BuildingData",
	  "BulletGauge",
	  "BusinessDayQ",
	  "ButterflyGraph",
	  "ButterworthFilterModel",
	  "Button",
	  "ButtonBar",
	  "ButtonBox",
	  "ButtonBoxOptions",
	  "ButtonCell",
	  "ButtonContents",
	  "ButtonData",
	  "ButtonEvaluator",
	  "ButtonExpandable",
	  "ButtonFrame",
	  "ButtonFunction",
	  "ButtonMargins",
	  "ButtonMinHeight",
	  "ButtonNote",
	  "ButtonNotebook",
	  "ButtonSource",
	  "ButtonStyle",
	  "ButtonStyleMenuListing",
	  "Byte",
	  "ByteArray",
	  "ByteArrayFormat",
	  "ByteArrayFormatQ",
	  "ByteArrayQ",
	  "ByteArrayToString",
	  "ByteCount",
	  "ByteOrdering",
	  "C",
	  "CachedValue",
	  "CacheGraphics",
	  "CachePersistence",
	  "CalendarConvert",
	  "CalendarData",
	  "CalendarType",
	  "Callout",
	  "CalloutMarker",
	  "CalloutStyle",
	  "CallPacket",
	  "CanberraDistance",
	  "Cancel",
	  "CancelButton",
	  "CandlestickChart",
	  "CanonicalGraph",
	  "CanonicalizePolygon",
	  "CanonicalizePolyhedron",
	  "CanonicalizeRegion",
	  "CanonicalName",
	  "CanonicalWarpingCorrespondence",
	  "CanonicalWarpingDistance",
	  "CantorMesh",
	  "CantorStaircase",
	  "Canvas",
	  "Cap",
	  "CapForm",
	  "CapitalDifferentialD",
	  "Capitalize",
	  "CapsuleShape",
	  "CaptureRunning",
	  "CaputoD",
	  "CardinalBSplineBasis",
	  "CarlemanLinearize",
	  "CarlsonRC",
	  "CarlsonRD",
	  "CarlsonRE",
	  "CarlsonRF",
	  "CarlsonRG",
	  "CarlsonRJ",
	  "CarlsonRK",
	  "CarlsonRM",
	  "CarmichaelLambda",
	  "CaseOrdering",
	  "Cases",
	  "CaseSensitive",
	  "Cashflow",
	  "Casoratian",
	  "Cast",
	  "Catalan",
	  "CatalanNumber",
	  "Catch",
	  "CategoricalDistribution",
	  "Catenate",
	  "CatenateLayer",
	  "CauchyDistribution",
	  "CauchyMatrix",
	  "CauchyPointProcess",
	  "CauchyWindow",
	  "CayleyGraph",
	  "CDF",
	  "CDFDeploy",
	  "CDFInformation",
	  "CDFWavelet",
	  "Ceiling",
	  "CelestialSystem",
	  "Cell",
	  "CellAutoOverwrite",
	  "CellBaseline",
	  "CellBoundingBox",
	  "CellBracketOptions",
	  "CellChangeTimes",
	  "CellContents",
	  "CellContext",
	  "CellDingbat",
	  "CellDingbatMargin",
	  "CellDynamicExpression",
	  "CellEditDuplicate",
	  "CellElementsBoundingBox",
	  "CellElementSpacings",
	  "CellEpilog",
	  "CellEvaluationDuplicate",
	  "CellEvaluationFunction",
	  "CellEvaluationLanguage",
	  "CellEventActions",
	  "CellFrame",
	  "CellFrameColor",
	  "CellFrameLabelMargins",
	  "CellFrameLabels",
	  "CellFrameMargins",
	  "CellFrameStyle",
	  "CellGroup",
	  "CellGroupData",
	  "CellGrouping",
	  "CellGroupingRules",
	  "CellHorizontalScrolling",
	  "CellID",
	  "CellInsertionPointCell",
	  "CellLabel",
	  "CellLabelAutoDelete",
	  "CellLabelMargins",
	  "CellLabelPositioning",
	  "CellLabelStyle",
	  "CellLabelTemplate",
	  "CellMargins",
	  "CellObject",
	  "CellOpen",
	  "CellPrint",
	  "CellProlog",
	  "Cells",
	  "CellSize",
	  "CellStyle",
	  "CellTags",
	  "CellTrayPosition",
	  "CellTrayWidgets",
	  "CellularAutomaton",
	  "CensoredDistribution",
	  "Censoring",
	  "Center",
	  "CenterArray",
	  "CenterDot",
	  "CenteredInterval",
	  "CentralFeature",
	  "CentralMoment",
	  "CentralMomentGeneratingFunction",
	  "Cepstrogram",
	  "CepstrogramArray",
	  "CepstrumArray",
	  "CForm",
	  "ChampernowneNumber",
	  "ChangeOptions",
	  "ChannelBase",
	  "ChannelBrokerAction",
	  "ChannelDatabin",
	  "ChannelHistoryLength",
	  "ChannelListen",
	  "ChannelListener",
	  "ChannelListeners",
	  "ChannelListenerWait",
	  "ChannelObject",
	  "ChannelPreSendFunction",
	  "ChannelReceiverFunction",
	  "ChannelSend",
	  "ChannelSubscribers",
	  "ChanVeseBinarize",
	  "Character",
	  "CharacterCounts",
	  "CharacterEncoding",
	  "CharacterEncodingsPath",
	  "CharacteristicFunction",
	  "CharacteristicPolynomial",
	  "CharacterName",
	  "CharacterNormalize",
	  "CharacterRange",
	  "Characters",
	  "ChartBaseStyle",
	  "ChartElementData",
	  "ChartElementDataFunction",
	  "ChartElementFunction",
	  "ChartElements",
	  "ChartLabels",
	  "ChartLayout",
	  "ChartLegends",
	  "ChartStyle",
	  "Chebyshev1FilterModel",
	  "Chebyshev2FilterModel",
	  "ChebyshevDistance",
	  "ChebyshevT",
	  "ChebyshevU",
	  "Check",
	  "CheckAbort",
	  "CheckAll",
	  "CheckArguments",
	  "Checkbox",
	  "CheckboxBar",
	  "CheckboxBox",
	  "CheckboxBoxOptions",
	  "ChemicalConvert",
	  "ChemicalData",
	  "ChemicalFormula",
	  "ChemicalInstance",
	  "ChemicalReaction",
	  "ChessboardDistance",
	  "ChiDistribution",
	  "ChineseRemainder",
	  "ChiSquareDistribution",
	  "ChoiceButtons",
	  "ChoiceDialog",
	  "CholeskyDecomposition",
	  "Chop",
	  "ChromaticityPlot",
	  "ChromaticityPlot3D",
	  "ChromaticPolynomial",
	  "Circle",
	  "CircleBox",
	  "CircleDot",
	  "CircleMinus",
	  "CirclePlus",
	  "CirclePoints",
	  "CircleThrough",
	  "CircleTimes",
	  "CirculantGraph",
	  "CircularArcThrough",
	  "CircularOrthogonalMatrixDistribution",
	  "CircularQuaternionMatrixDistribution",
	  "CircularRealMatrixDistribution",
	  "CircularSymplecticMatrixDistribution",
	  "CircularUnitaryMatrixDistribution",
	  "Circumsphere",
	  "CityData",
	  "ClassifierFunction",
	  "ClassifierInformation",
	  "ClassifierMeasurements",
	  "ClassifierMeasurementsObject",
	  "Classify",
	  "ClassPriors",
	  "Clear",
	  "ClearAll",
	  "ClearAttributes",
	  "ClearCookies",
	  "ClearPermissions",
	  "ClearSystemCache",
	  "ClebschGordan",
	  "ClickPane",
	  "ClickToCopy",
	  "ClickToCopyEnabled",
	  "Clip",
	  "ClipboardNotebook",
	  "ClipFill",
	  "ClippingStyle",
	  "ClipPlanes",
	  "ClipPlanesStyle",
	  "ClipRange",
	  "Clock",
	  "ClockGauge",
	  "ClockwiseContourIntegral",
	  "Close",
	  "Closed",
	  "CloseKernels",
	  "ClosenessCentrality",
	  "Closing",
	  "ClosingAutoSave",
	  "ClosingEvent",
	  "CloudAccountData",
	  "CloudBase",
	  "CloudConnect",
	  "CloudConnections",
	  "CloudDeploy",
	  "CloudDirectory",
	  "CloudDisconnect",
	  "CloudEvaluate",
	  "CloudExport",
	  "CloudExpression",
	  "CloudExpressions",
	  "CloudFunction",
	  "CloudGet",
	  "CloudImport",
	  "CloudLoggingData",
	  "CloudObject",
	  "CloudObjectInformation",
	  "CloudObjectInformationData",
	  "CloudObjectNameFormat",
	  "CloudObjects",
	  "CloudObjectURLType",
	  "CloudPublish",
	  "CloudPut",
	  "CloudRenderingMethod",
	  "CloudSave",
	  "CloudShare",
	  "CloudSubmit",
	  "CloudSymbol",
	  "CloudUnshare",
	  "CloudUserID",
	  "ClusterClassify",
	  "ClusterDissimilarityFunction",
	  "ClusteringComponents",
	  "ClusteringMeasurements",
	  "ClusteringTree",
	  "CMYKColor",
	  "Coarse",
	  "CodeAssistOptions",
	  "Coefficient",
	  "CoefficientArrays",
	  "CoefficientDomain",
	  "CoefficientList",
	  "CoefficientRules",
	  "CoifletWavelet",
	  "Collect",
	  "CollinearPoints",
	  "Colon",
	  "ColonForm",
	  "ColorBalance",
	  "ColorCombine",
	  "ColorConvert",
	  "ColorCoverage",
	  "ColorData",
	  "ColorDataFunction",
	  "ColorDetect",
	  "ColorDistance",
	  "ColorFunction",
	  "ColorFunctionBinning",
	  "ColorFunctionScaling",
	  "Colorize",
	  "ColorNegate",
	  "ColorOutput",
	  "ColorProfileData",
	  "ColorQ",
	  "ColorQuantize",
	  "ColorReplace",
	  "ColorRules",
	  "ColorSelectorSettings",
	  "ColorSeparate",
	  "ColorSetter",
	  "ColorSetterBox",
	  "ColorSetterBoxOptions",
	  "ColorSlider",
	  "ColorsNear",
	  "ColorSpace",
	  "ColorToneMapping",
	  "Column",
	  "ColumnAlignments",
	  "ColumnBackgrounds",
	  "ColumnForm",
	  "ColumnLines",
	  "ColumnsEqual",
	  "ColumnSpacings",
	  "ColumnWidths",
	  "CombinatorB",
	  "CombinatorC",
	  "CombinatorI",
	  "CombinatorK",
	  "CombinatorS",
	  "CombinatorW",
	  "CombinatorY",
	  "CombinedEntityClass",
	  "CombinerFunction",
	  "CometData",
	  "CommonDefaultFormatTypes",
	  "Commonest",
	  "CommonestFilter",
	  "CommonName",
	  "CommonUnits",
	  "CommunityBoundaryStyle",
	  "CommunityGraphPlot",
	  "CommunityLabels",
	  "CommunityRegionStyle",
	  "CompanyData",
	  "CompatibleUnitQ",
	  "CompilationOptions",
	  "CompilationTarget",
	  "Compile",
	  "Compiled",
	  "CompiledCodeFunction",
	  "CompiledComponent",
	  "CompiledExpressionDeclaration",
	  "CompiledFunction",
	  "CompiledLayer",
	  "CompilerCallback",
	  "CompilerEnvironment",
	  "CompilerEnvironmentAppend",
	  "CompilerEnvironmentAppendTo",
	  "CompilerEnvironmentObject",
	  "CompilerOptions",
	  "Complement",
	  "ComplementedEntityClass",
	  "CompleteGraph",
	  "CompleteGraphQ",
	  "CompleteIntegral",
	  "CompleteKaryTree",
	  "CompletionsListPacket",
	  "Complex",
	  "ComplexArrayPlot",
	  "ComplexContourPlot",
	  "Complexes",
	  "ComplexExpand",
	  "ComplexInfinity",
	  "ComplexityFunction",
	  "ComplexListPlot",
	  "ComplexPlot",
	  "ComplexPlot3D",
	  "ComplexRegionPlot",
	  "ComplexStreamPlot",
	  "ComplexVectorPlot",
	  "ComponentMeasurements",
	  "ComponentwiseContextMenu",
	  "Compose",
	  "ComposeList",
	  "ComposeSeries",
	  "CompositeQ",
	  "Composition",
	  "CompoundElement",
	  "CompoundExpression",
	  "CompoundPoissonDistribution",
	  "CompoundPoissonProcess",
	  "CompoundRenewalProcess",
	  "Compress",
	  "CompressedData",
	  "CompressionLevel",
	  "ComputeUncertainty",
	  "ConcaveHullMesh",
	  "Condition",
	  "ConditionalExpression",
	  "Conditioned",
	  "Cone",
	  "ConeBox",
	  "ConfidenceLevel",
	  "ConfidenceRange",
	  "ConfidenceTransform",
	  "ConfigurationPath",
	  "Confirm",
	  "ConfirmAssert",
	  "ConfirmBy",
	  "ConfirmMatch",
	  "ConfirmQuiet",
	  "ConformationMethod",
	  "ConformAudio",
	  "ConformImages",
	  "Congruent",
	  "ConicGradientFilling",
	  "ConicHullRegion",
	  "ConicHullRegion3DBox",
	  "ConicHullRegion3DBoxOptions",
	  "ConicHullRegionBox",
	  "ConicHullRegionBoxOptions",
	  "ConicOptimization",
	  "Conjugate",
	  "ConjugateTranspose",
	  "Conjunction",
	  "Connect",
	  "ConnectedComponents",
	  "ConnectedGraphComponents",
	  "ConnectedGraphQ",
	  "ConnectedMeshComponents",
	  "ConnectedMoleculeComponents",
	  "ConnectedMoleculeQ",
	  "ConnectionSettings",
	  "ConnectLibraryCallbackFunction",
	  "ConnectSystemModelComponents",
	  "ConnectSystemModelController",
	  "ConnesWindow",
	  "ConoverTest",
	  "ConservativeConvectionPDETerm",
	  "ConsoleMessage",
	  "Constant",
	  "ConstantArray",
	  "ConstantArrayLayer",
	  "ConstantImage",
	  "ConstantPlusLayer",
	  "ConstantRegionQ",
	  "Constants",
	  "ConstantTimesLayer",
	  "ConstellationData",
	  "ConstrainedMax",
	  "ConstrainedMin",
	  "Construct",
	  "Containing",
	  "ContainsAll",
	  "ContainsAny",
	  "ContainsExactly",
	  "ContainsNone",
	  "ContainsOnly",
	  "ContentDetectorFunction",
	  "ContentFieldOptions",
	  "ContentLocationFunction",
	  "ContentObject",
	  "ContentPadding",
	  "ContentsBoundingBox",
	  "ContentSelectable",
	  "ContentSize",
	  "Context",
	  "ContextMenu",
	  "Contexts",
	  "ContextToFileName",
	  "Continuation",
	  "Continue",
	  "ContinuedFraction",
	  "ContinuedFractionK",
	  "ContinuousAction",
	  "ContinuousMarkovProcess",
	  "ContinuousTask",
	  "ContinuousTimeModelQ",
	  "ContinuousWaveletData",
	  "ContinuousWaveletTransform",
	  "ContourDetect",
	  "ContourGraphics",
	  "ContourIntegral",
	  "ContourLabels",
	  "ContourLines",
	  "ContourPlot",
	  "ContourPlot3D",
	  "Contours",
	  "ContourShading",
	  "ContourSmoothing",
	  "ContourStyle",
	  "ContraharmonicMean",
	  "ContrastiveLossLayer",
	  "Control",
	  "ControlActive",
	  "ControlAlignment",
	  "ControlGroupContentsBox",
	  "ControllabilityGramian",
	  "ControllabilityMatrix",
	  "ControllableDecomposition",
	  "ControllableModelQ",
	  "ControllerDuration",
	  "ControllerInformation",
	  "ControllerInformationData",
	  "ControllerLinking",
	  "ControllerManipulate",
	  "ControllerMethod",
	  "ControllerPath",
	  "ControllerState",
	  "ControlPlacement",
	  "ControlsRendering",
	  "ControlType",
	  "ConvectionPDETerm",
	  "Convergents",
	  "ConversionOptions",
	  "ConversionRules",
	  "ConvertToPostScript",
	  "ConvertToPostScriptPacket",
	  "ConvexHullMesh",
	  "ConvexHullRegion",
	  "ConvexOptimization",
	  "ConvexPolygonQ",
	  "ConvexPolyhedronQ",
	  "ConvexRegionQ",
	  "ConvolutionLayer",
	  "Convolve",
	  "ConwayGroupCo1",
	  "ConwayGroupCo2",
	  "ConwayGroupCo3",
	  "CookieFunction",
	  "Cookies",
	  "CoordinateBoundingBox",
	  "CoordinateBoundingBoxArray",
	  "CoordinateBounds",
	  "CoordinateBoundsArray",
	  "CoordinateChartData",
	  "CoordinatesToolOptions",
	  "CoordinateTransform",
	  "CoordinateTransformData",
	  "CoplanarPoints",
	  "CoprimeQ",
	  "Coproduct",
	  "CopulaDistribution",
	  "Copyable",
	  "CopyDatabin",
	  "CopyDirectory",
	  "CopyFile",
	  "CopyFunction",
	  "CopyTag",
	  "CopyToClipboard",
	  "CoreNilpotentDecomposition",
	  "CornerFilter",
	  "CornerNeighbors",
	  "Correlation",
	  "CorrelationDistance",
	  "CorrelationFunction",
	  "CorrelationTest",
	  "Cos",
	  "Cosh",
	  "CoshIntegral",
	  "CosineDistance",
	  "CosineWindow",
	  "CosIntegral",
	  "Cot",
	  "Coth",
	  "CoulombF",
	  "CoulombG",
	  "CoulombH1",
	  "CoulombH2",
	  "Count",
	  "CountDistinct",
	  "CountDistinctBy",
	  "CounterAssignments",
	  "CounterBox",
	  "CounterBoxOptions",
	  "CounterClockwiseContourIntegral",
	  "CounterEvaluator",
	  "CounterFunction",
	  "CounterIncrements",
	  "CounterStyle",
	  "CounterStyleMenuListing",
	  "CountRoots",
	  "CountryData",
	  "Counts",
	  "CountsBy",
	  "Covariance",
	  "CovarianceEstimatorFunction",
	  "CovarianceFunction",
	  "CoxianDistribution",
	  "CoxIngersollRossProcess",
	  "CoxModel",
	  "CoxModelFit",
	  "CramerVonMisesTest",
	  "CreateArchive",
	  "CreateCellID",
	  "CreateChannel",
	  "CreateCloudExpression",
	  "CreateCompilerEnvironment",
	  "CreateDatabin",
	  "CreateDataStructure",
	  "CreateDataSystemModel",
	  "CreateDialog",
	  "CreateDirectory",
	  "CreateDocument",
	  "CreateFile",
	  "CreateIntermediateDirectories",
	  "CreateLicenseEntitlement",
	  "CreateManagedLibraryExpression",
	  "CreateNotebook",
	  "CreatePacletArchive",
	  "CreatePalette",
	  "CreatePermissionsGroup",
	  "CreateScheduledTask",
	  "CreateSearchIndex",
	  "CreateSystemModel",
	  "CreateTemporary",
	  "CreateTypeInstance",
	  "CreateUUID",
	  "CreateWindow",
	  "CriterionFunction",
	  "CriticalityFailureImportance",
	  "CriticalitySuccessImportance",
	  "CriticalSection",
	  "Cross",
	  "CrossEntropyLossLayer",
	  "CrossingCount",
	  "CrossingDetect",
	  "CrossingPolygon",
	  "CrossMatrix",
	  "Csc",
	  "Csch",
	  "CSGRegion",
	  "CSGRegionQ",
	  "CSGRegionTree",
	  "CTCLossLayer",
	  "Cube",
	  "CubeRoot",
	  "Cubics",
	  "Cuboid",
	  "CuboidBox",
	  "CuboidBoxOptions",
	  "Cumulant",
	  "CumulantGeneratingFunction",
	  "CumulativeFeatureImpactPlot",
	  "Cup",
	  "CupCap",
	  "Curl",
	  "CurlyDoubleQuote",
	  "CurlyQuote",
	  "CurrencyConvert",
	  "CurrentDate",
	  "CurrentImage",
	  "CurrentNotebookImage",
	  "CurrentScreenImage",
	  "CurrentValue",
	  "Curry",
	  "CurryApplied",
	  "CurvatureFlowFilter",
	  "CurveClosed",
	  "Cyan",
	  "CycleGraph",
	  "CycleIndexPolynomial",
	  "Cycles",
	  "CyclicGroup",
	  "Cyclotomic",
	  "Cylinder",
	  "CylinderBox",
	  "CylinderBoxOptions",
	  "CylindricalDecomposition",
	  "CylindricalDecompositionFunction",
	  "D",
	  "DagumDistribution",
	  "DamData",
	  "DamerauLevenshteinDistance",
	  "DampingFactor",
	  "Darker",
	  "Dashed",
	  "Dashing",
	  "DatabaseConnect",
	  "DatabaseDisconnect",
	  "DatabaseReference",
	  "Databin",
	  "DatabinAdd",
	  "DatabinRemove",
	  "Databins",
	  "DatabinSubmit",
	  "DatabinUpload",
	  "DataCompression",
	  "DataDistribution",
	  "DataRange",
	  "DataReversed",
	  "Dataset",
	  "DatasetDisplayPanel",
	  "DatasetTheme",
	  "DataStructure",
	  "DataStructureQ",
	  "Date",
	  "DateBounds",
	  "Dated",
	  "DateDelimiters",
	  "DateDifference",
	  "DatedUnit",
	  "DateFormat",
	  "DateFunction",
	  "DateGranularity",
	  "DateHistogram",
	  "DateInterval",
	  "DateList",
	  "DateListLogPlot",
	  "DateListPlot",
	  "DateListStepPlot",
	  "DateObject",
	  "DateObjectQ",
	  "DateOverlapsQ",
	  "DatePattern",
	  "DatePlus",
	  "DateRange",
	  "DateReduction",
	  "DateScale",
	  "DateSelect",
	  "DateString",
	  "DateTicksFormat",
	  "DateValue",
	  "DateWithinQ",
	  "DaubechiesWavelet",
	  "DavisDistribution",
	  "DawsonF",
	  "DayCount",
	  "DayCountConvention",
	  "DayHemisphere",
	  "DaylightQ",
	  "DayMatchQ",
	  "DayName",
	  "DayNightTerminator",
	  "DayPlus",
	  "DayRange",
	  "DayRound",
	  "DeBruijnGraph",
	  "DeBruijnSequence",
	  "Debug",
	  "DebugTag",
	  "Decapitalize",
	  "Decimal",
	  "DecimalForm",
	  "DeclareCompiledComponent",
	  "DeclareKnownSymbols",
	  "DeclarePackage",
	  "Decompose",
	  "DeconvolutionLayer",
	  "Decrement",
	  "Decrypt",
	  "DecryptFile",
	  "DedekindEta",
	  "DeepSpaceProbeData",
	  "Default",
	  "Default2DTool",
	  "Default3DTool",
	  "DefaultAttachedCellStyle",
	  "DefaultAxesStyle",
	  "DefaultBaseStyle",
	  "DefaultBoxStyle",
	  "DefaultButton",
	  "DefaultColor",
	  "DefaultControlPlacement",
	  "DefaultDockedCellStyle",
	  "DefaultDuplicateCellStyle",
	  "DefaultDuration",
	  "DefaultElement",
	  "DefaultFaceGridsStyle",
	  "DefaultFieldHintStyle",
	  "DefaultFont",
	  "DefaultFontProperties",
	  "DefaultFormatType",
	  "DefaultFrameStyle",
	  "DefaultFrameTicksStyle",
	  "DefaultGridLinesStyle",
	  "DefaultInlineFormatType",
	  "DefaultInputFormatType",
	  "DefaultLabelStyle",
	  "DefaultMenuStyle",
	  "DefaultNaturalLanguage",
	  "DefaultNewCellStyle",
	  "DefaultNewInlineCellStyle",
	  "DefaultNotebook",
	  "DefaultOptions",
	  "DefaultOutputFormatType",
	  "DefaultPrintPrecision",
	  "DefaultStyle",
	  "DefaultStyleDefinitions",
	  "DefaultTextFormatType",
	  "DefaultTextInlineFormatType",
	  "DefaultTicksStyle",
	  "DefaultTooltipStyle",
	  "DefaultValue",
	  "DefaultValues",
	  "Defer",
	  "DefineExternal",
	  "DefineInputStreamMethod",
	  "DefineOutputStreamMethod",
	  "DefineResourceFunction",
	  "Definition",
	  "Degree",
	  "DegreeCentrality",
	  "DegreeGraphDistribution",
	  "DegreeLexicographic",
	  "DegreeReverseLexicographic",
	  "DEigensystem",
	  "DEigenvalues",
	  "Deinitialization",
	  "Del",
	  "DelaunayMesh",
	  "Delayed",
	  "Deletable",
	  "Delete",
	  "DeleteAdjacentDuplicates",
	  "DeleteAnomalies",
	  "DeleteBorderComponents",
	  "DeleteCases",
	  "DeleteChannel",
	  "DeleteCloudExpression",
	  "DeleteContents",
	  "DeleteDirectory",
	  "DeleteDuplicates",
	  "DeleteDuplicatesBy",
	  "DeleteElements",
	  "DeleteFile",
	  "DeleteMissing",
	  "DeleteObject",
	  "DeletePermissionsKey",
	  "DeleteSearchIndex",
	  "DeleteSmallComponents",
	  "DeleteStopwords",
	  "DeleteWithContents",
	  "DeletionWarning",
	  "DelimitedArray",
	  "DelimitedSequence",
	  "Delimiter",
	  "DelimiterAutoMatching",
	  "DelimiterFlashTime",
	  "DelimiterMatching",
	  "Delimiters",
	  "DeliveryFunction",
	  "Dendrogram",
	  "Denominator",
	  "DensityGraphics",
	  "DensityHistogram",
	  "DensityPlot",
	  "DensityPlot3D",
	  "DependentVariables",
	  "Deploy",
	  "Deployed",
	  "Depth",
	  "DepthFirstScan",
	  "Derivative",
	  "DerivativeFilter",
	  "DerivativePDETerm",
	  "DerivedKey",
	  "DescriptorStateSpace",
	  "DesignMatrix",
	  "DestroyAfterEvaluation",
	  "Det",
	  "DeviceClose",
	  "DeviceConfigure",
	  "DeviceExecute",
	  "DeviceExecuteAsynchronous",
	  "DeviceObject",
	  "DeviceOpen",
	  "DeviceOpenQ",
	  "DeviceRead",
	  "DeviceReadBuffer",
	  "DeviceReadLatest",
	  "DeviceReadList",
	  "DeviceReadTimeSeries",
	  "Devices",
	  "DeviceStreams",
	  "DeviceWrite",
	  "DeviceWriteBuffer",
	  "DGaussianWavelet",
	  "DiacriticalPositioning",
	  "Diagonal",
	  "DiagonalizableMatrixQ",
	  "DiagonalMatrix",
	  "DiagonalMatrixQ",
	  "Dialog",
	  "DialogIndent",
	  "DialogInput",
	  "DialogLevel",
	  "DialogNotebook",
	  "DialogProlog",
	  "DialogReturn",
	  "DialogSymbols",
	  "Diamond",
	  "DiamondMatrix",
	  "DiceDissimilarity",
	  "DictionaryLookup",
	  "DictionaryWordQ",
	  "DifferenceDelta",
	  "DifferenceOrder",
	  "DifferenceQuotient",
	  "DifferenceRoot",
	  "DifferenceRootReduce",
	  "Differences",
	  "DifferentialD",
	  "DifferentialRoot",
	  "DifferentialRootReduce",
	  "DifferentiatorFilter",
	  "DiffusionPDETerm",
	  "DiggleGatesPointProcess",
	  "DiggleGrattonPointProcess",
	  "DigitalSignature",
	  "DigitBlock",
	  "DigitBlockMinimum",
	  "DigitCharacter",
	  "DigitCount",
	  "DigitQ",
	  "DihedralAngle",
	  "DihedralGroup",
	  "Dilation",
	  "DimensionalCombinations",
	  "DimensionalMeshComponents",
	  "DimensionReduce",
	  "DimensionReducerFunction",
	  "DimensionReduction",
	  "Dimensions",
	  "DiracComb",
	  "DiracDelta",
	  "DirectedEdge",
	  "DirectedEdges",
	  "DirectedGraph",
	  "DirectedGraphQ",
	  "DirectedInfinity",
	  "Direction",
	  "DirectionalLight",
	  "Directive",
	  "Directory",
	  "DirectoryName",
	  "DirectoryQ",
	  "DirectoryStack",
	  "DirichletBeta",
	  "DirichletCharacter",
	  "DirichletCondition",
	  "DirichletConvolve",
	  "DirichletDistribution",
	  "DirichletEta",
	  "DirichletL",
	  "DirichletLambda",
	  "DirichletTransform",
	  "DirichletWindow",
	  "DisableConsolePrintPacket",
	  "DisableFormatting",
	  "DiscreteAsymptotic",
	  "DiscreteChirpZTransform",
	  "DiscreteConvolve",
	  "DiscreteDelta",
	  "DiscreteHadamardTransform",
	  "DiscreteIndicator",
	  "DiscreteInputOutputModel",
	  "DiscreteLimit",
	  "DiscreteLQEstimatorGains",
	  "DiscreteLQRegulatorGains",
	  "DiscreteLyapunovSolve",
	  "DiscreteMarkovProcess",
	  "DiscreteMaxLimit",
	  "DiscreteMinLimit",
	  "DiscretePlot",
	  "DiscretePlot3D",
	  "DiscreteRatio",
	  "DiscreteRiccatiSolve",
	  "DiscreteShift",
	  "DiscreteTimeModelQ",
	  "DiscreteUniformDistribution",
	  "DiscreteVariables",
	  "DiscreteWaveletData",
	  "DiscreteWaveletPacketTransform",
	  "DiscreteWaveletTransform",
	  "DiscretizeGraphics",
	  "DiscretizeRegion",
	  "Discriminant",
	  "DisjointQ",
	  "Disjunction",
	  "Disk",
	  "DiskBox",
	  "DiskBoxOptions",
	  "DiskMatrix",
	  "DiskSegment",
	  "Dispatch",
	  "DispatchQ",
	  "DispersionEstimatorFunction",
	  "Display",
	  "DisplayAllSteps",
	  "DisplayEndPacket",
	  "DisplayForm",
	  "DisplayFunction",
	  "DisplayPacket",
	  "DisplayRules",
	  "DisplayString",
	  "DisplayTemporary",
	  "DisplayWith",
	  "DisplayWithRef",
	  "DisplayWithVariable",
	  "DistanceFunction",
	  "DistanceMatrix",
	  "DistanceTransform",
	  "Distribute",
	  "Distributed",
	  "DistributedContexts",
	  "DistributeDefinitions",
	  "DistributionChart",
	  "DistributionDomain",
	  "DistributionFitTest",
	  "DistributionParameterAssumptions",
	  "DistributionParameterQ",
	  "Dithering",
	  "Div",
	  "Divergence",
	  "Divide",
	  "DivideBy",
	  "Dividers",
	  "DivideSides",
	  "Divisible",
	  "Divisors",
	  "DivisorSigma",
	  "DivisorSum",
	  "DMSList",
	  "DMSString",
	  "Do",
	  "DockedCell",
	  "DockedCells",
	  "DocumentGenerator",
	  "DocumentGeneratorInformation",
	  "DocumentGeneratorInformationData",
	  "DocumentGenerators",
	  "DocumentNotebook",
	  "DocumentWeightingRules",
	  "Dodecahedron",
	  "DomainRegistrationInformation",
	  "DominantColors",
	  "DominatorTreeGraph",
	  "DominatorVertexList",
	  "DOSTextFormat",
	  "Dot",
	  "DotDashed",
	  "DotEqual",
	  "DotLayer",
	  "DotPlusLayer",
	  "Dotted",
	  "DoubleBracketingBar",
	  "DoubleContourIntegral",
	  "DoubleDownArrow",
	  "DoubleLeftArrow",
	  "DoubleLeftRightArrow",
	  "DoubleLeftTee",
	  "DoubleLongLeftArrow",
	  "DoubleLongLeftRightArrow",
	  "DoubleLongRightArrow",
	  "DoubleRightArrow",
	  "DoubleRightTee",
	  "DoubleUpArrow",
	  "DoubleUpDownArrow",
	  "DoubleVerticalBar",
	  "DoublyInfinite",
	  "Down",
	  "DownArrow",
	  "DownArrowBar",
	  "DownArrowUpArrow",
	  "DownLeftRightVector",
	  "DownLeftTeeVector",
	  "DownLeftVector",
	  "DownLeftVectorBar",
	  "DownRightTeeVector",
	  "DownRightVector",
	  "DownRightVectorBar",
	  "Downsample",
	  "DownTee",
	  "DownTeeArrow",
	  "DownValues",
	  "DownValuesFunction",
	  "DragAndDrop",
	  "DrawBackFaces",
	  "DrawEdges",
	  "DrawFrontFaces",
	  "DrawHighlighted",
	  "DrazinInverse",
	  "Drop",
	  "DropoutLayer",
	  "DropShadowing",
	  "DSolve",
	  "DSolveChangeVariables",
	  "DSolveValue",
	  "Dt",
	  "DualLinearProgramming",
	  "DualPlanarGraph",
	  "DualPolyhedron",
	  "DualSystemsModel",
	  "DumpGet",
	  "DumpSave",
	  "DuplicateFreeQ",
	  "Duration",
	  "Dynamic",
	  "DynamicBox",
	  "DynamicBoxOptions",
	  "DynamicEvaluationTimeout",
	  "DynamicGeoGraphics",
	  "DynamicImage",
	  "DynamicLocation",
	  "DynamicModule",
	  "DynamicModuleBox",
	  "DynamicModuleBoxOptions",
	  "DynamicModuleParent",
	  "DynamicModuleValues",
	  "DynamicName",
	  "DynamicNamespace",
	  "DynamicReference",
	  "DynamicSetting",
	  "DynamicUpdating",
	  "DynamicWrapper",
	  "DynamicWrapperBox",
	  "DynamicWrapperBoxOptions",
	  "E",
	  "EarthImpactData",
	  "EarthquakeData",
	  "EccentricityCentrality",
	  "Echo",
	  "EchoEvaluation",
	  "EchoFunction",
	  "EchoLabel",
	  "EchoTiming",
	  "EclipseType",
	  "EdgeAdd",
	  "EdgeBetweennessCentrality",
	  "EdgeCapacity",
	  "EdgeCapForm",
	  "EdgeChromaticNumber",
	  "EdgeColor",
	  "EdgeConnectivity",
	  "EdgeContract",
	  "EdgeCost",
	  "EdgeCount",
	  "EdgeCoverQ",
	  "EdgeCycleMatrix",
	  "EdgeDashing",
	  "EdgeDelete",
	  "EdgeDetect",
	  "EdgeForm",
	  "EdgeIndex",
	  "EdgeJoinForm",
	  "EdgeLabeling",
	  "EdgeLabels",
	  "EdgeLabelStyle",
	  "EdgeList",
	  "EdgeOpacity",
	  "EdgeQ",
	  "EdgeRenderingFunction",
	  "EdgeRules",
	  "EdgeShapeFunction",
	  "EdgeStyle",
	  "EdgeTaggedGraph",
	  "EdgeTaggedGraphQ",
	  "EdgeTags",
	  "EdgeThickness",
	  "EdgeTransitiveGraphQ",
	  "EdgeValueRange",
	  "EdgeValueSizes",
	  "EdgeWeight",
	  "EdgeWeightedGraphQ",
	  "Editable",
	  "EditButtonSettings",
	  "EditCellTagsSettings",
	  "EditDistance",
	  "EffectiveInterest",
	  "Eigensystem",
	  "Eigenvalues",
	  "EigenvectorCentrality",
	  "Eigenvectors",
	  "Element",
	  "ElementData",
	  "ElementwiseLayer",
	  "ElidedForms",
	  "Eliminate",
	  "EliminationOrder",
	  "Ellipsoid",
	  "EllipticE",
	  "EllipticExp",
	  "EllipticExpPrime",
	  "EllipticF",
	  "EllipticFilterModel",
	  "EllipticK",
	  "EllipticLog",
	  "EllipticNomeQ",
	  "EllipticPi",
	  "EllipticReducedHalfPeriods",
	  "EllipticTheta",
	  "EllipticThetaPrime",
	  "EmbedCode",
	  "EmbeddedHTML",
	  "EmbeddedService",
	  "EmbeddedSQLEntityClass",
	  "EmbeddedSQLExpression",
	  "EmbeddingLayer",
	  "EmbeddingObject",
	  "EmitSound",
	  "EmphasizeSyntaxErrors",
	  "EmpiricalDistribution",
	  "Empty",
	  "EmptyGraphQ",
	  "EmptyRegion",
	  "EmptySpaceF",
	  "EnableConsolePrintPacket",
	  "Enabled",
	  "Enclose",
	  "Encode",
	  "Encrypt",
	  "EncryptedObject",
	  "EncryptFile",
	  "End",
	  "EndAdd",
	  "EndDialogPacket",
	  "EndOfBuffer",
	  "EndOfFile",
	  "EndOfLine",
	  "EndOfString",
	  "EndPackage",
	  "EngineEnvironment",
	  "EngineeringForm",
	  "Enter",
	  "EnterExpressionPacket",
	  "EnterTextPacket",
	  "Entity",
	  "EntityClass",
	  "EntityClassList",
	  "EntityCopies",
	  "EntityFunction",
	  "EntityGroup",
	  "EntityInstance",
	  "EntityList",
	  "EntityPrefetch",
	  "EntityProperties",
	  "EntityProperty",
	  "EntityPropertyClass",
	  "EntityRegister",
	  "EntityStore",
	  "EntityStores",
	  "EntityTypeName",
	  "EntityUnregister",
	  "EntityValue",
	  "Entropy",
	  "EntropyFilter",
	  "Environment",
	  "Epilog",
	  "EpilogFunction",
	  "Equal",
	  "EqualColumns",
	  "EqualRows",
	  "EqualTilde",
	  "EqualTo",
	  "EquatedTo",
	  "Equilibrium",
	  "EquirippleFilterKernel",
	  "Equivalent",
	  "Erf",
	  "Erfc",
	  "Erfi",
	  "ErlangB",
	  "ErlangC",
	  "ErlangDistribution",
	  "Erosion",
	  "ErrorBox",
	  "ErrorBoxOptions",
	  "ErrorNorm",
	  "ErrorPacket",
	  "ErrorsDialogSettings",
	  "EscapeRadius",
	  "EstimatedBackground",
	  "EstimatedDistribution",
	  "EstimatedPointNormals",
	  "EstimatedPointProcess",
	  "EstimatedProcess",
	  "EstimatedVariogramModel",
	  "EstimatorGains",
	  "EstimatorRegulator",
	  "EuclideanDistance",
	  "EulerAngles",
	  "EulerCharacteristic",
	  "EulerE",
	  "EulerGamma",
	  "EulerianGraphQ",
	  "EulerMatrix",
	  "EulerPhi",
	  "Evaluatable",
	  "Evaluate",
	  "Evaluated",
	  "EvaluatePacket",
	  "EvaluateScheduledTask",
	  "EvaluationBox",
	  "EvaluationCell",
	  "EvaluationCompletionAction",
	  "EvaluationData",
	  "EvaluationElements",
	  "EvaluationEnvironment",
	  "EvaluationMode",
	  "EvaluationMonitor",
	  "EvaluationNotebook",
	  "EvaluationObject",
	  "EvaluationOrder",
	  "EvaluationPrivileges",
	  "EvaluationRateLimit",
	  "Evaluator",
	  "EvaluatorNames",
	  "EvenQ",
	  "EventData",
	  "EventEvaluator",
	  "EventHandler",
	  "EventHandlerTag",
	  "EventLabels",
	  "EventSeries",
	  "ExactBlackmanWindow",
	  "ExactNumberQ",
	  "ExactRootIsolation",
	  "ExampleData",
	  "Except",
	  "ExcludedContexts",
	  "ExcludedForms",
	  "ExcludedLines",
	  "ExcludedPhysicalQuantities",
	  "ExcludePods",
	  "Exclusions",
	  "ExclusionsStyle",
	  "Exists",
	  "Exit",
	  "ExitDialog",
	  "ExoplanetData",
	  "Exp",
	  "Expand",
	  "ExpandAll",
	  "ExpandDenominator",
	  "ExpandFileName",
	  "ExpandNumerator",
	  "Expectation",
	  "ExpectationE",
	  "ExpectedValue",
	  "ExpGammaDistribution",
	  "ExpIntegralE",
	  "ExpIntegralEi",
	  "ExpirationDate",
	  "Exponent",
	  "ExponentFunction",
	  "ExponentialDistribution",
	  "ExponentialFamily",
	  "ExponentialGeneratingFunction",
	  "ExponentialMovingAverage",
	  "ExponentialPowerDistribution",
	  "ExponentPosition",
	  "ExponentStep",
	  "Export",
	  "ExportAutoReplacements",
	  "ExportByteArray",
	  "ExportForm",
	  "ExportPacket",
	  "ExportString",
	  "Expression",
	  "ExpressionCell",
	  "ExpressionGraph",
	  "ExpressionPacket",
	  "ExpressionTree",
	  "ExpressionUUID",
	  "ExpToTrig",
	  "ExtendedEntityClass",
	  "ExtendedGCD",
	  "Extension",
	  "ExtentElementFunction",
	  "ExtentMarkers",
	  "ExtentSize",
	  "ExternalBundle",
	  "ExternalCall",
	  "ExternalDataCharacterEncoding",
	  "ExternalEvaluate",
	  "ExternalFunction",
	  "ExternalFunctionName",
	  "ExternalIdentifier",
	  "ExternalObject",
	  "ExternalOptions",
	  "ExternalSessionObject",
	  "ExternalSessions",
	  "ExternalStorageBase",
	  "ExternalStorageDownload",
	  "ExternalStorageGet",
	  "ExternalStorageObject",
	  "ExternalStoragePut",
	  "ExternalStorageUpload",
	  "ExternalTypeSignature",
	  "ExternalValue",
	  "Extract",
	  "ExtractArchive",
	  "ExtractLayer",
	  "ExtractPacletArchive",
	  "ExtremeValueDistribution",
	  "FaceAlign",
	  "FaceForm",
	  "FaceGrids",
	  "FaceGridsStyle",
	  "FaceRecognize",
	  "FacialFeatures",
	  "Factor",
	  "FactorComplete",
	  "Factorial",
	  "Factorial2",
	  "FactorialMoment",
	  "FactorialMomentGeneratingFunction",
	  "FactorialPower",
	  "FactorInteger",
	  "FactorList",
	  "FactorSquareFree",
	  "FactorSquareFreeList",
	  "FactorTerms",
	  "FactorTermsList",
	  "Fail",
	  "Failure",
	  "FailureAction",
	  "FailureDistribution",
	  "FailureQ",
	  "False",
	  "FareySequence",
	  "FARIMAProcess",
	  "FeatureDistance",
	  "FeatureExtract",
	  "FeatureExtraction",
	  "FeatureExtractor",
	  "FeatureExtractorFunction",
	  "FeatureImpactPlot",
	  "FeatureNames",
	  "FeatureNearest",
	  "FeatureSpacePlot",
	  "FeatureSpacePlot3D",
	  "FeatureTypes",
	  "FeatureValueDependencyPlot",
	  "FeatureValueImpactPlot",
	  "FEDisableConsolePrintPacket",
	  "FeedbackLinearize",
	  "FeedbackSector",
	  "FeedbackSectorStyle",
	  "FeedbackType",
	  "FEEnableConsolePrintPacket",
	  "FetalGrowthData",
	  "Fibonacci",
	  "Fibonorial",
	  "FieldCompletionFunction",
	  "FieldHint",
	  "FieldHintStyle",
	  "FieldMasked",
	  "FieldSize",
	  "File",
	  "FileBaseName",
	  "FileByteCount",
	  "FileConvert",
	  "FileDate",
	  "FileExistsQ",
	  "FileExtension",
	  "FileFormat",
	  "FileFormatProperties",
	  "FileFormatQ",
	  "FileHandler",
	  "FileHash",
	  "FileInformation",
	  "FileName",
	  "FileNameDepth",
	  "FileNameDialogSettings",
	  "FileNameDrop",
	  "FileNameForms",
	  "FileNameJoin",
	  "FileNames",
	  "FileNameSetter",
	  "FileNameSplit",
	  "FileNameTake",
	  "FileNameToFormatList",
	  "FilePrint",
	  "FileSize",
	  "FileSystemMap",
	  "FileSystemScan",
	  "FileSystemTree",
	  "FileTemplate",
	  "FileTemplateApply",
	  "FileType",
	  "FilledCurve",
	  "FilledCurveBox",
	  "FilledCurveBoxOptions",
	  "FilledTorus",
	  "FillForm",
	  "Filling",
	  "FillingStyle",
	  "FillingTransform",
	  "FilteredEntityClass",
	  "FilterRules",
	  "FinancialBond",
	  "FinancialData",
	  "FinancialDerivative",
	  "FinancialIndicator",
	  "Find",
	  "FindAnomalies",
	  "FindArgMax",
	  "FindArgMin",
	  "FindChannels",
	  "FindClique",
	  "FindClusters",
	  "FindCookies",
	  "FindCurvePath",
	  "FindCycle",
	  "FindDevices",
	  "FindDistribution",
	  "FindDistributionParameters",
	  "FindDivisions",
	  "FindEdgeColoring",
	  "FindEdgeCover",
	  "FindEdgeCut",
	  "FindEdgeIndependentPaths",
	  "FindEquationalProof",
	  "FindEulerianCycle",
	  "FindExternalEvaluators",
	  "FindFaces",
	  "FindFile",
	  "FindFit",
	  "FindFormula",
	  "FindFundamentalCycles",
	  "FindGeneratingFunction",
	  "FindGeoLocation",
	  "FindGeometricConjectures",
	  "FindGeometricTransform",
	  "FindGraphCommunities",
	  "FindGraphIsomorphism",
	  "FindGraphPartition",
	  "FindHamiltonianCycle",
	  "FindHamiltonianPath",
	  "FindHiddenMarkovStates",
	  "FindImageText",
	  "FindIndependentEdgeSet",
	  "FindIndependentVertexSet",
	  "FindInstance",
	  "FindIntegerNullVector",
	  "FindIsomers",
	  "FindIsomorphicSubgraph",
	  "FindKClan",
	  "FindKClique",
	  "FindKClub",
	  "FindKPlex",
	  "FindLibrary",
	  "FindLinearRecurrence",
	  "FindList",
	  "FindMatchingColor",
	  "FindMaximum",
	  "FindMaximumCut",
	  "FindMaximumFlow",
	  "FindMaxValue",
	  "FindMeshDefects",
	  "FindMinimum",
	  "FindMinimumCostFlow",
	  "FindMinimumCut",
	  "FindMinValue",
	  "FindMoleculeSubstructure",
	  "FindPath",
	  "FindPeaks",
	  "FindPermutation",
	  "FindPlanarColoring",
	  "FindPointProcessParameters",
	  "FindPostmanTour",
	  "FindProcessParameters",
	  "FindRegionTransform",
	  "FindRepeat",
	  "FindRoot",
	  "FindSequenceFunction",
	  "FindSettings",
	  "FindShortestPath",
	  "FindShortestTour",
	  "FindSpanningTree",
	  "FindSubgraphIsomorphism",
	  "FindSystemModelEquilibrium",
	  "FindTextualAnswer",
	  "FindThreshold",
	  "FindTransientRepeat",
	  "FindVertexColoring",
	  "FindVertexCover",
	  "FindVertexCut",
	  "FindVertexIndependentPaths",
	  "Fine",
	  "FinishDynamic",
	  "FiniteAbelianGroupCount",
	  "FiniteGroupCount",
	  "FiniteGroupData",
	  "First",
	  "FirstCase",
	  "FirstPassageTimeDistribution",
	  "FirstPosition",
	  "FischerGroupFi22",
	  "FischerGroupFi23",
	  "FischerGroupFi24Prime",
	  "FisherHypergeometricDistribution",
	  "FisherRatioTest",
	  "FisherZDistribution",
	  "Fit",
	  "FitAll",
	  "FitRegularization",
	  "FittedModel",
	  "FixedOrder",
	  "FixedPoint",
	  "FixedPointList",
	  "FlashSelection",
	  "Flat",
	  "FlatShading",
	  "Flatten",
	  "FlattenAt",
	  "FlattenLayer",
	  "FlatTopWindow",
	  "FlightData",
	  "FlipView",
	  "Floor",
	  "FlowPolynomial",
	  "Fold",
	  "FoldList",
	  "FoldPair",
	  "FoldPairList",
	  "FoldWhile",
	  "FoldWhileList",
	  "FollowRedirects",
	  "Font",
	  "FontColor",
	  "FontFamily",
	  "FontForm",
	  "FontName",
	  "FontOpacity",
	  "FontPostScriptName",
	  "FontProperties",
	  "FontReencoding",
	  "FontSize",
	  "FontSlant",
	  "FontSubstitutions",
	  "FontTracking",
	  "FontVariations",
	  "FontWeight",
	  "For",
	  "ForAll",
	  "ForAllType",
	  "ForceVersionInstall",
	  "Format",
	  "FormatRules",
	  "FormatType",
	  "FormatTypeAutoConvert",
	  "FormatValues",
	  "FormBox",
	  "FormBoxOptions",
	  "FormControl",
	  "FormFunction",
	  "FormLayoutFunction",
	  "FormObject",
	  "FormPage",
	  "FormProtectionMethod",
	  "FormTheme",
	  "FormulaData",
	  "FormulaLookup",
	  "FortranForm",
	  "Forward",
	  "ForwardBackward",
	  "ForwardCloudCredentials",
	  "Fourier",
	  "FourierCoefficient",
	  "FourierCosCoefficient",
	  "FourierCosSeries",
	  "FourierCosTransform",
	  "FourierDCT",
	  "FourierDCTFilter",
	  "FourierDCTMatrix",
	  "FourierDST",
	  "FourierDSTMatrix",
	  "FourierMatrix",
	  "FourierParameters",
	  "FourierSequenceTransform",
	  "FourierSeries",
	  "FourierSinCoefficient",
	  "FourierSinSeries",
	  "FourierSinTransform",
	  "FourierTransform",
	  "FourierTrigSeries",
	  "FoxH",
	  "FoxHReduce",
	  "FractionalBrownianMotionProcess",
	  "FractionalD",
	  "FractionalGaussianNoiseProcess",
	  "FractionalPart",
	  "FractionBox",
	  "FractionBoxOptions",
	  "FractionLine",
	  "Frame",
	  "FrameBox",
	  "FrameBoxOptions",
	  "Framed",
	  "FrameInset",
	  "FrameLabel",
	  "Frameless",
	  "FrameListVideo",
	  "FrameMargins",
	  "FrameRate",
	  "FrameStyle",
	  "FrameTicks",
	  "FrameTicksStyle",
	  "FRatioDistribution",
	  "FrechetDistribution",
	  "FreeQ",
	  "FrenetSerretSystem",
	  "FrequencySamplingFilterKernel",
	  "FresnelC",
	  "FresnelF",
	  "FresnelG",
	  "FresnelS",
	  "Friday",
	  "FrobeniusNumber",
	  "FrobeniusSolve",
	  "FromAbsoluteTime",
	  "FromCharacterCode",
	  "FromCoefficientRules",
	  "FromContinuedFraction",
	  "FromDate",
	  "FromDateString",
	  "FromDigits",
	  "FromDMS",
	  "FromEntity",
	  "FromJulianDate",
	  "FromLetterNumber",
	  "FromPolarCoordinates",
	  "FromRawPointer",
	  "FromRomanNumeral",
	  "FromSphericalCoordinates",
	  "FromUnixTime",
	  "Front",
	  "FrontEndDynamicExpression",
	  "FrontEndEventActions",
	  "FrontEndExecute",
	  "FrontEndObject",
	  "FrontEndResource",
	  "FrontEndResourceString",
	  "FrontEndStackSize",
	  "FrontEndToken",
	  "FrontEndTokenExecute",
	  "FrontEndValueCache",
	  "FrontEndVersion",
	  "FrontFaceColor",
	  "FrontFaceGlowColor",
	  "FrontFaceOpacity",
	  "FrontFaceSpecularColor",
	  "FrontFaceSpecularExponent",
	  "FrontFaceSurfaceAppearance",
	  "FrontFaceTexture",
	  "Full",
	  "FullAxes",
	  "FullDefinition",
	  "FullForm",
	  "FullGraphics",
	  "FullInformationOutputRegulator",
	  "FullOptions",
	  "FullRegion",
	  "FullSimplify",
	  "Function",
	  "FunctionAnalytic",
	  "FunctionBijective",
	  "FunctionCompile",
	  "FunctionCompileExport",
	  "FunctionCompileExportByteArray",
	  "FunctionCompileExportLibrary",
	  "FunctionCompileExportString",
	  "FunctionContinuous",
	  "FunctionConvexity",
	  "FunctionDeclaration",
	  "FunctionDiscontinuities",
	  "FunctionDomain",
	  "FunctionExpand",
	  "FunctionInjective",
	  "FunctionInterpolation",
	  "FunctionLayer",
	  "FunctionMeromorphic",
	  "FunctionMonotonicity",
	  "FunctionPeriod",
	  "FunctionPoles",
	  "FunctionRange",
	  "FunctionSign",
	  "FunctionSingularities",
	  "FunctionSpace",
	  "FunctionSurjective",
	  "FussellVeselyImportance",
	  "GaborFilter",
	  "GaborMatrix",
	  "GaborWavelet",
	  "GainMargins",
	  "GainPhaseMargins",
	  "GalaxyData",
	  "GalleryView",
	  "Gamma",
	  "GammaDistribution",
	  "GammaRegularized",
	  "GapPenalty",
	  "GARCHProcess",
	  "GatedRecurrentLayer",
	  "Gather",
	  "GatherBy",
	  "GaugeFaceElementFunction",
	  "GaugeFaceStyle",
	  "GaugeFrameElementFunction",
	  "GaugeFrameSize",
	  "GaugeFrameStyle",
	  "GaugeLabels",
	  "GaugeMarkers",
	  "GaugeStyle",
	  "GaussianFilter",
	  "GaussianIntegers",
	  "GaussianMatrix",
	  "GaussianOrthogonalMatrixDistribution",
	  "GaussianSymplecticMatrixDistribution",
	  "GaussianUnitaryMatrixDistribution",
	  "GaussianWindow",
	  "GCD",
	  "GegenbauerC",
	  "General",
	  "GeneralizedLinearModelFit",
	  "GenerateAsymmetricKeyPair",
	  "GenerateConditions",
	  "GeneratedAssetFormat",
	  "GeneratedAssetLocation",
	  "GeneratedCell",
	  "GeneratedCellStyles",
	  "GeneratedDocumentBinding",
	  "GenerateDerivedKey",
	  "GenerateDigitalSignature",
	  "GenerateDocument",
	  "GeneratedParameters",
	  "GeneratedQuantityMagnitudes",
	  "GenerateFileSignature",
	  "GenerateHTTPResponse",
	  "GenerateSecuredAuthenticationKey",
	  "GenerateSymmetricKey",
	  "GeneratingFunction",
	  "GeneratorDescription",
	  "GeneratorHistoryLength",
	  "GeneratorOutputType",
	  "Generic",
	  "GenericCylindricalDecomposition",
	  "GenomeData",
	  "GenomeLookup",
	  "GeoAntipode",
	  "GeoArea",
	  "GeoArraySize",
	  "GeoBackground",
	  "GeoBoundary",
	  "GeoBoundingBox",
	  "GeoBounds",
	  "GeoBoundsRegion",
	  "GeoBoundsRegionBoundary",
	  "GeoBubbleChart",
	  "GeoCenter",
	  "GeoCircle",
	  "GeoContourPlot",
	  "GeoDensityPlot",
	  "GeodesicClosing",
	  "GeodesicDilation",
	  "GeodesicErosion",
	  "GeodesicOpening",
	  "GeodesicPolyhedron",
	  "GeoDestination",
	  "GeodesyData",
	  "GeoDirection",
	  "GeoDisk",
	  "GeoDisplacement",
	  "GeoDistance",
	  "GeoDistanceList",
	  "GeoElevationData",
	  "GeoEntities",
	  "GeoGraphics",
	  "GeoGraphPlot",
	  "GeoGraphValuePlot",
	  "GeogravityModelData",
	  "GeoGridDirectionDifference",
	  "GeoGridLines",
	  "GeoGridLinesStyle",
	  "GeoGridPosition",
	  "GeoGridRange",
	  "GeoGridRangePadding",
	  "GeoGridUnitArea",
	  "GeoGridUnitDistance",
	  "GeoGridVector",
	  "GeoGroup",
	  "GeoHemisphere",
	  "GeoHemisphereBoundary",
	  "GeoHistogram",
	  "GeoIdentify",
	  "GeoImage",
	  "GeoLabels",
	  "GeoLength",
	  "GeoListPlot",
	  "GeoLocation",
	  "GeologicalPeriodData",
	  "GeomagneticModelData",
	  "GeoMarker",
	  "GeometricAssertion",
	  "GeometricBrownianMotionProcess",
	  "GeometricDistribution",
	  "GeometricMean",
	  "GeometricMeanFilter",
	  "GeometricOptimization",
	  "GeometricScene",
	  "GeometricStep",
	  "GeometricStylingRules",
	  "GeometricTest",
	  "GeometricTransformation",
	  "GeometricTransformation3DBox",
	  "GeometricTransformation3DBoxOptions",
	  "GeometricTransformationBox",
	  "GeometricTransformationBoxOptions",
	  "GeoModel",
	  "GeoNearest",
	  "GeoOrientationData",
	  "GeoPath",
	  "GeoPolygon",
	  "GeoPosition",
	  "GeoPositionENU",
	  "GeoPositionXYZ",
	  "GeoProjection",
	  "GeoProjectionData",
	  "GeoRange",
	  "GeoRangePadding",
	  "GeoRegionValuePlot",
	  "GeoResolution",
	  "GeoScaleBar",
	  "GeoServer",
	  "GeoSmoothHistogram",
	  "GeoStreamPlot",
	  "GeoStyling",
	  "GeoStylingImageFunction",
	  "GeoVariant",
	  "GeoVector",
	  "GeoVectorENU",
	  "GeoVectorPlot",
	  "GeoVectorXYZ",
	  "GeoVisibleRegion",
	  "GeoVisibleRegionBoundary",
	  "GeoWithinQ",
	  "GeoZoomLevel",
	  "GestureHandler",
	  "GestureHandlerTag",
	  "Get",
	  "GetContext",
	  "GetEnvironment",
	  "GetFileName",
	  "GetLinebreakInformationPacket",
	  "GibbsPointProcess",
	  "Glaisher",
	  "GlobalClusteringCoefficient",
	  "GlobalPreferences",
	  "GlobalSession",
	  "Glow",
	  "GoldenAngle",
	  "GoldenRatio",
	  "GompertzMakehamDistribution",
	  "GoochShading",
	  "GoodmanKruskalGamma",
	  "GoodmanKruskalGammaTest",
	  "Goto",
	  "GouraudShading",
	  "Grad",
	  "Gradient",
	  "GradientFilter",
	  "GradientFittedMesh",
	  "GradientOrientationFilter",
	  "GrammarApply",
	  "GrammarRules",
	  "GrammarToken",
	  "Graph",
	  "Graph3D",
	  "GraphAssortativity",
	  "GraphAutomorphismGroup",
	  "GraphCenter",
	  "GraphComplement",
	  "GraphData",
	  "GraphDensity",
	  "GraphDiameter",
	  "GraphDifference",
	  "GraphDisjointUnion",
	  "GraphDistance",
	  "GraphDistanceMatrix",
	  "GraphEmbedding",
	  "GraphHighlight",
	  "GraphHighlightStyle",
	  "GraphHub",
	  "Graphics",
	  "Graphics3D",
	  "Graphics3DBox",
	  "Graphics3DBoxOptions",
	  "GraphicsArray",
	  "GraphicsBaseline",
	  "GraphicsBox",
	  "GraphicsBoxOptions",
	  "GraphicsColor",
	  "GraphicsColumn",
	  "GraphicsComplex",
	  "GraphicsComplex3DBox",
	  "GraphicsComplex3DBoxOptions",
	  "GraphicsComplexBox",
	  "GraphicsComplexBoxOptions",
	  "GraphicsContents",
	  "GraphicsData",
	  "GraphicsGrid",
	  "GraphicsGridBox",
	  "GraphicsGroup",
	  "GraphicsGroup3DBox",
	  "GraphicsGroup3DBoxOptions",
	  "GraphicsGroupBox",
	  "GraphicsGroupBoxOptions",
	  "GraphicsGrouping",
	  "GraphicsHighlightColor",
	  "GraphicsRow",
	  "GraphicsSpacing",
	  "GraphicsStyle",
	  "GraphIntersection",
	  "GraphJoin",
	  "GraphLayerLabels",
	  "GraphLayers",
	  "GraphLayerStyle",
	  "GraphLayout",
	  "GraphLinkEfficiency",
	  "GraphPeriphery",
	  "GraphPlot",
	  "GraphPlot3D",
	  "GraphPower",
	  "GraphProduct",
	  "GraphPropertyDistribution",
	  "GraphQ",
	  "GraphRadius",
	  "GraphReciprocity",
	  "GraphRoot",
	  "GraphStyle",
	  "GraphSum",
	  "GraphTree",
	  "GraphUnion",
	  "Gray",
	  "GrayLevel",
	  "Greater",
	  "GreaterEqual",
	  "GreaterEqualLess",
	  "GreaterEqualThan",
	  "GreaterFullEqual",
	  "GreaterGreater",
	  "GreaterLess",
	  "GreaterSlantEqual",
	  "GreaterThan",
	  "GreaterTilde",
	  "GreekStyle",
	  "Green",
	  "GreenFunction",
	  "Grid",
	  "GridBaseline",
	  "GridBox",
	  "GridBoxAlignment",
	  "GridBoxBackground",
	  "GridBoxDividers",
	  "GridBoxFrame",
	  "GridBoxItemSize",
	  "GridBoxItemStyle",
	  "GridBoxOptions",
	  "GridBoxSpacings",
	  "GridCreationSettings",
	  "GridDefaultElement",
	  "GridElementStyleOptions",
	  "GridFrame",
	  "GridFrameMargins",
	  "GridGraph",
	  "GridLines",
	  "GridLinesStyle",
	  "GridVideo",
	  "GroebnerBasis",
	  "GroupActionBase",
	  "GroupBy",
	  "GroupCentralizer",
	  "GroupElementFromWord",
	  "GroupElementPosition",
	  "GroupElementQ",
	  "GroupElements",
	  "GroupElementToWord",
	  "GroupGenerators",
	  "Groupings",
	  "GroupMultiplicationTable",
	  "GroupOpenerColor",
	  "GroupOpenerInsideFrame",
	  "GroupOrbits",
	  "GroupOrder",
	  "GroupPageBreakWithin",
	  "GroupSetwiseStabilizer",
	  "GroupStabilizer",
	  "GroupStabilizerChain",
	  "GroupTogetherGrouping",
	  "GroupTogetherNestedGrouping",
	  "GrowCutComponents",
	  "Gudermannian",
	  "GuidedFilter",
	  "GumbelDistribution",
	  "HaarWavelet",
	  "HadamardMatrix",
	  "HalfLine",
	  "HalfNormalDistribution",
	  "HalfPlane",
	  "HalfSpace",
	  "HalftoneShading",
	  "HamiltonianGraphQ",
	  "HammingDistance",
	  "HammingWindow",
	  "HandlerFunctions",
	  "HandlerFunctionsKeys",
	  "HankelH1",
	  "HankelH2",
	  "HankelMatrix",
	  "HankelTransform",
	  "HannPoissonWindow",
	  "HannWindow",
	  "HaradaNortonGroupHN",
	  "HararyGraph",
	  "HardcorePointProcess",
	  "HarmonicMean",
	  "HarmonicMeanFilter",
	  "HarmonicNumber",
	  "Hash",
	  "HatchFilling",
	  "HatchShading",
	  "Haversine",
	  "HazardFunction",
	  "Head",
	  "HeadCompose",
	  "HeaderAlignment",
	  "HeaderBackground",
	  "HeaderDisplayFunction",
	  "HeaderLines",
	  "Headers",
	  "HeaderSize",
	  "HeaderStyle",
	  "Heads",
	  "HeatFluxValue",
	  "HeatInsulationValue",
	  "HeatOutflowValue",
	  "HeatRadiationValue",
	  "HeatSymmetryValue",
	  "HeatTemperatureCondition",
	  "HeatTransferPDEComponent",
	  "HeatTransferValue",
	  "HeavisideLambda",
	  "HeavisidePi",
	  "HeavisideTheta",
	  "HeldGroupHe",
	  "HeldPart",
	  "HelmholtzPDEComponent",
	  "HelpBrowserLookup",
	  "HelpBrowserNotebook",
	  "HelpBrowserSettings",
	  "HelpViewerSettings",
	  "Here",
	  "HermiteDecomposition",
	  "HermiteH",
	  "Hermitian",
	  "HermitianMatrixQ",
	  "HessenbergDecomposition",
	  "Hessian",
	  "HeunB",
	  "HeunBPrime",
	  "HeunC",
	  "HeunCPrime",
	  "HeunD",
	  "HeunDPrime",
	  "HeunG",
	  "HeunGPrime",
	  "HeunT",
	  "HeunTPrime",
	  "HexadecimalCharacter",
	  "Hexahedron",
	  "HexahedronBox",
	  "HexahedronBoxOptions",
	  "HiddenItems",
	  "HiddenMarkovProcess",
	  "HiddenSurface",
	  "Highlighted",
	  "HighlightGraph",
	  "HighlightImage",
	  "HighlightMesh",
	  "HighlightString",
	  "HighpassFilter",
	  "HigmanSimsGroupHS",
	  "HilbertCurve",
	  "HilbertFilter",
	  "HilbertMatrix",
	  "Histogram",
	  "Histogram3D",
	  "HistogramDistribution",
	  "HistogramList",
	  "HistogramPointDensity",
	  "HistogramTransform",
	  "HistogramTransformInterpolation",
	  "HistoricalPeriodData",
	  "HitMissTransform",
	  "HITSCentrality",
	  "HjorthDistribution",
	  "HodgeDual",
	  "HoeffdingD",
	  "HoeffdingDTest",
	  "Hold",
	  "HoldAll",
	  "HoldAllComplete",
	  "HoldComplete",
	  "HoldFirst",
	  "HoldForm",
	  "HoldPattern",
	  "HoldRest",
	  "HolidayCalendar",
	  "HomeDirectory",
	  "HomePage",
	  "Horizontal",
	  "HorizontalForm",
	  "HorizontalGauge",
	  "HorizontalScrollPosition",
	  "HornerForm",
	  "HostLookup",
	  "HotellingTSquareDistribution",
	  "HoytDistribution",
	  "HTMLSave",
	  "HTTPErrorResponse",
	  "HTTPRedirect",
	  "HTTPRequest",
	  "HTTPRequestData",
	  "HTTPResponse",
	  "Hue",
	  "HumanGrowthData",
	  "HumpDownHump",
	  "HumpEqual",
	  "HurwitzLerchPhi",
	  "HurwitzZeta",
	  "HyperbolicDistribution",
	  "HypercubeGraph",
	  "HyperexponentialDistribution",
	  "Hyperfactorial",
	  "Hypergeometric0F1",
	  "Hypergeometric0F1Regularized",
	  "Hypergeometric1F1",
	  "Hypergeometric1F1Regularized",
	  "Hypergeometric2F1",
	  "Hypergeometric2F1Regularized",
	  "HypergeometricDistribution",
	  "HypergeometricPFQ",
	  "HypergeometricPFQRegularized",
	  "HypergeometricU",
	  "Hyperlink",
	  "HyperlinkAction",
	  "HyperlinkCreationSettings",
	  "Hyperplane",
	  "Hyphenation",
	  "HyphenationOptions",
	  "HypoexponentialDistribution",
	  "HypothesisTestData",
	  "I",
	  "IconData",
	  "Iconize",
	  "IconizedObject",
	  "IconRules",
	  "Icosahedron",
	  "Identity",
	  "IdentityMatrix",
	  "If",
	  "IfCompiled",
	  "IgnoreCase",
	  "IgnoreDiacritics",
	  "IgnoreIsotopes",
	  "IgnorePunctuation",
	  "IgnoreSpellCheck",
	  "IgnoreStereochemistry",
	  "IgnoringInactive",
	  "Im",
	  "Image",
	  "Image3D",
	  "Image3DProjection",
	  "Image3DSlices",
	  "ImageAccumulate",
	  "ImageAdd",
	  "ImageAdjust",
	  "ImageAlign",
	  "ImageApply",
	  "ImageApplyIndexed",
	  "ImageAspectRatio",
	  "ImageAssemble",
	  "ImageAugmentationLayer",
	  "ImageBoundingBoxes",
	  "ImageCache",
	  "ImageCacheValid",
	  "ImageCapture",
	  "ImageCaptureFunction",
	  "ImageCases",
	  "ImageChannels",
	  "ImageClip",
	  "ImageCollage",
	  "ImageColorSpace",
	  "ImageCompose",
	  "ImageContainsQ",
	  "ImageContents",
	  "ImageConvolve",
	  "ImageCooccurrence",
	  "ImageCorners",
	  "ImageCorrelate",
	  "ImageCorrespondingPoints",
	  "ImageCrop",
	  "ImageData",
	  "ImageDeconvolve",
	  "ImageDemosaic",
	  "ImageDifference",
	  "ImageDimensions",
	  "ImageDisplacements",
	  "ImageDistance",
	  "ImageEditMode",
	  "ImageEffect",
	  "ImageExposureCombine",
	  "ImageFeatureTrack",
	  "ImageFileApply",
	  "ImageFileFilter",
	  "ImageFileScan",
	  "ImageFilter",
	  "ImageFocusCombine",
	  "ImageForestingComponents",
	  "ImageFormattingWidth",
	  "ImageForwardTransformation",
	  "ImageGraphics",
	  "ImageHistogram",
	  "ImageIdentify",
	  "ImageInstanceQ",
	  "ImageKeypoints",
	  "ImageLabels",
	  "ImageLegends",
	  "ImageLevels",
	  "ImageLines",
	  "ImageMargins",
	  "ImageMarker",
	  "ImageMarkers",
	  "ImageMeasurements",
	  "ImageMesh",
	  "ImageMultiply",
	  "ImageOffset",
	  "ImagePad",
	  "ImagePadding",
	  "ImagePartition",
	  "ImagePeriodogram",
	  "ImagePerspectiveTransformation",
	  "ImagePosition",
	  "ImagePreviewFunction",
	  "ImagePyramid",
	  "ImagePyramidApply",
	  "ImageQ",
	  "ImageRangeCache",
	  "ImageRecolor",
	  "ImageReflect",
	  "ImageRegion",
	  "ImageResize",
	  "ImageResolution",
	  "ImageRestyle",
	  "ImageRotate",
	  "ImageRotated",
	  "ImageSaliencyFilter",
	  "ImageScaled",
	  "ImageScan",
	  "ImageSize",
	  "ImageSizeAction",
	  "ImageSizeCache",
	  "ImageSizeMultipliers",
	  "ImageSizeRaw",
	  "ImageStitch",
	  "ImageSubtract",
	  "ImageTake",
	  "ImageTransformation",
	  "ImageTrim",
	  "ImageType",
	  "ImageValue",
	  "ImageValuePositions",
	  "ImageVectorscopePlot",
	  "ImageWaveformPlot",
	  "ImagingDevice",
	  "ImplicitD",
	  "ImplicitRegion",
	  "Implies",
	  "Import",
	  "ImportAutoReplacements",
	  "ImportByteArray",
	  "ImportedObject",
	  "ImportOptions",
	  "ImportString",
	  "ImprovementImportance",
	  "In",
	  "Inactivate",
	  "Inactive",
	  "InactiveStyle",
	  "IncidenceGraph",
	  "IncidenceList",
	  "IncidenceMatrix",
	  "IncludeAromaticBonds",
	  "IncludeConstantBasis",
	  "IncludedContexts",
	  "IncludeDefinitions",
	  "IncludeDirectories",
	  "IncludeFileExtension",
	  "IncludeGeneratorTasks",
	  "IncludeHydrogens",
	  "IncludeInflections",
	  "IncludeMetaInformation",
	  "IncludePods",
	  "IncludeQuantities",
	  "IncludeRelatedTables",
	  "IncludeSingularSolutions",
	  "IncludeSingularTerm",
	  "IncludeWindowTimes",
	  "Increment",
	  "IndefiniteMatrixQ",
	  "Indent",
	  "IndentingNewlineSpacings",
	  "IndentMaxFraction",
	  "IndependenceTest",
	  "IndependentEdgeSetQ",
	  "IndependentPhysicalQuantity",
	  "IndependentUnit",
	  "IndependentUnitDimension",
	  "IndependentVertexSetQ",
	  "Indeterminate",
	  "IndeterminateThreshold",
	  "IndexCreationOptions",
	  "Indexed",
	  "IndexEdgeTaggedGraph",
	  "IndexGraph",
	  "IndexTag",
	  "Inequality",
	  "InertEvaluate",
	  "InertExpression",
	  "InexactNumberQ",
	  "InexactNumbers",
	  "InfiniteFuture",
	  "InfiniteLine",
	  "InfiniteLineThrough",
	  "InfinitePast",
	  "InfinitePlane",
	  "Infinity",
	  "Infix",
	  "InflationAdjust",
	  "InflationMethod",
	  "Information",
	  "InformationData",
	  "InformationDataGrid",
	  "Inherited",
	  "InheritScope",
	  "InhomogeneousPoissonPointProcess",
	  "InhomogeneousPoissonProcess",
	  "InitialEvaluationHistory",
	  "Initialization",
	  "InitializationCell",
	  "InitializationCellEvaluation",
	  "InitializationCellWarning",
	  "InitializationObject",
	  "InitializationObjects",
	  "InitializationValue",
	  "Initialize",
	  "InitialSeeding",
	  "InlineCounterAssignments",
	  "InlineCounterIncrements",
	  "InlineRules",
	  "Inner",
	  "InnerPolygon",
	  "InnerPolyhedron",
	  "Inpaint",
	  "Input",
	  "InputAliases",
	  "InputAssumptions",
	  "InputAutoReplacements",
	  "InputField",
	  "InputFieldBox",
	  "InputFieldBoxOptions",
	  "InputForm",
	  "InputGrouping",
	  "InputNamePacket",
	  "InputNotebook",
	  "InputPacket",
	  "InputPorts",
	  "InputSettings",
	  "InputStream",
	  "InputString",
	  "InputStringPacket",
	  "InputToBoxFormPacket",
	  "Insert",
	  "InsertionFunction",
	  "InsertionPointObject",
	  "InsertLinebreaks",
	  "InsertResults",
	  "Inset",
	  "Inset3DBox",
	  "Inset3DBoxOptions",
	  "InsetBox",
	  "InsetBoxOptions",
	  "Insphere",
	  "Install",
	  "InstallService",
	  "InstanceNormalizationLayer",
	  "InString",
	  "Integer",
	  "IntegerDigits",
	  "IntegerExponent",
	  "IntegerLength",
	  "IntegerName",
	  "IntegerPart",
	  "IntegerPartitions",
	  "IntegerQ",
	  "IntegerReverse",
	  "Integers",
	  "IntegerString",
	  "Integral",
	  "Integrate",
	  "IntegrateChangeVariables",
	  "Interactive",
	  "InteractiveTradingChart",
	  "InterfaceSwitched",
	  "Interlaced",
	  "Interleaving",
	  "InternallyBalancedDecomposition",
	  "InterpolatingFunction",
	  "InterpolatingPolynomial",
	  "Interpolation",
	  "InterpolationOrder",
	  "InterpolationPoints",
	  "InterpolationPrecision",
	  "Interpretation",
	  "InterpretationBox",
	  "InterpretationBoxOptions",
	  "InterpretationFunction",
	  "Interpreter",
	  "InterpretTemplate",
	  "InterquartileRange",
	  "Interrupt",
	  "InterruptSettings",
	  "IntersectedEntityClass",
	  "IntersectingQ",
	  "Intersection",
	  "Interval",
	  "IntervalIntersection",
	  "IntervalMarkers",
	  "IntervalMarkersStyle",
	  "IntervalMemberQ",
	  "IntervalSlider",
	  "IntervalUnion",
	  "Into",
	  "Inverse",
	  "InverseBetaRegularized",
	  "InverseBilateralLaplaceTransform",
	  "InverseBilateralZTransform",
	  "InverseCDF",
	  "InverseChiSquareDistribution",
	  "InverseContinuousWaveletTransform",
	  "InverseDistanceTransform",
	  "InverseEllipticNomeQ",
	  "InverseErf",
	  "InverseErfc",
	  "InverseFourier",
	  "InverseFourierCosTransform",
	  "InverseFourierSequenceTransform",
	  "InverseFourierSinTransform",
	  "InverseFourierTransform",
	  "InverseFunction",
	  "InverseFunctions",
	  "InverseGammaDistribution",
	  "InverseGammaRegularized",
	  "InverseGaussianDistribution",
	  "InverseGudermannian",
	  "InverseHankelTransform",
	  "InverseHaversine",
	  "InverseImagePyramid",
	  "InverseJacobiCD",
	  "InverseJacobiCN",
	  "InverseJacobiCS",
	  "InverseJacobiDC",
	  "InverseJacobiDN",
	  "InverseJacobiDS",
	  "InverseJacobiNC",
	  "InverseJacobiND",
	  "InverseJacobiNS",
	  "InverseJacobiSC",
	  "InverseJacobiSD",
	  "InverseJacobiSN",
	  "InverseLaplaceTransform",
	  "InverseMellinTransform",
	  "InversePermutation",
	  "InverseRadon",
	  "InverseRadonTransform",
	  "InverseSeries",
	  "InverseShortTimeFourier",
	  "InverseSpectrogram",
	  "InverseSurvivalFunction",
	  "InverseTransformedRegion",
	  "InverseWaveletTransform",
	  "InverseWeierstrassP",
	  "InverseWishartMatrixDistribution",
	  "InverseZTransform",
	  "Invisible",
	  "InvisibleApplication",
	  "InvisibleTimes",
	  "IPAddress",
	  "IrreduciblePolynomialQ",
	  "IslandData",
	  "IsolatingInterval",
	  "IsomorphicGraphQ",
	  "IsomorphicSubgraphQ",
	  "IsotopeData",
	  "Italic",
	  "Item",
	  "ItemAspectRatio",
	  "ItemBox",
	  "ItemBoxOptions",
	  "ItemDisplayFunction",
	  "ItemSize",
	  "ItemStyle",
	  "ItoProcess",
	  "JaccardDissimilarity",
	  "JacobiAmplitude",
	  "Jacobian",
	  "JacobiCD",
	  "JacobiCN",
	  "JacobiCS",
	  "JacobiDC",
	  "JacobiDN",
	  "JacobiDS",
	  "JacobiEpsilon",
	  "JacobiNC",
	  "JacobiND",
	  "JacobiNS",
	  "JacobiP",
	  "JacobiSC",
	  "JacobiSD",
	  "JacobiSN",
	  "JacobiSymbol",
	  "JacobiZeta",
	  "JacobiZN",
	  "JankoGroupJ1",
	  "JankoGroupJ2",
	  "JankoGroupJ3",
	  "JankoGroupJ4",
	  "JarqueBeraALMTest",
	  "JohnsonDistribution",
	  "Join",
	  "JoinAcross",
	  "Joined",
	  "JoinedCurve",
	  "JoinedCurveBox",
	  "JoinedCurveBoxOptions",
	  "JoinForm",
	  "JordanDecomposition",
	  "JordanModelDecomposition",
	  "JulianDate",
	  "JuliaSetBoettcher",
	  "JuliaSetIterationCount",
	  "JuliaSetPlot",
	  "JuliaSetPoints",
	  "K",
	  "KagiChart",
	  "KaiserBesselWindow",
	  "KaiserWindow",
	  "KalmanEstimator",
	  "KalmanFilter",
	  "KarhunenLoeveDecomposition",
	  "KaryTree",
	  "KatzCentrality",
	  "KCoreComponents",
	  "KDistribution",
	  "KEdgeConnectedComponents",
	  "KEdgeConnectedGraphQ",
	  "KeepExistingVersion",
	  "KelvinBei",
	  "KelvinBer",
	  "KelvinKei",
	  "KelvinKer",
	  "KendallTau",
	  "KendallTauTest",
	  "KernelConfiguration",
	  "KernelExecute",
	  "KernelFunction",
	  "KernelMixtureDistribution",
	  "KernelObject",
	  "Kernels",
	  "Ket",
	  "Key",
	  "KeyCollisionFunction",
	  "KeyComplement",
	  "KeyDrop",
	  "KeyDropFrom",
	  "KeyExistsQ",
	  "KeyFreeQ",
	  "KeyIntersection",
	  "KeyMap",
	  "KeyMemberQ",
	  "KeypointStrength",
	  "Keys",
	  "KeySelect",
	  "KeySort",
	  "KeySortBy",
	  "KeyTake",
	  "KeyUnion",
	  "KeyValueMap",
	  "KeyValuePattern",
	  "Khinchin",
	  "KillProcess",
	  "KirchhoffGraph",
	  "KirchhoffMatrix",
	  "KleinInvariantJ",
	  "KnapsackSolve",
	  "KnightTourGraph",
	  "KnotData",
	  "KnownUnitQ",
	  "KochCurve",
	  "KolmogorovSmirnovTest",
	  "KroneckerDelta",
	  "KroneckerModelDecomposition",
	  "KroneckerProduct",
	  "KroneckerSymbol",
	  "KuiperTest",
	  "KumaraswamyDistribution",
	  "Kurtosis",
	  "KuwaharaFilter",
	  "KVertexConnectedComponents",
	  "KVertexConnectedGraphQ",
	  "LABColor",
	  "Label",
	  "Labeled",
	  "LabeledSlider",
	  "LabelingFunction",
	  "LabelingSize",
	  "LabelStyle",
	  "LabelVisibility",
	  "LaguerreL",
	  "LakeData",
	  "LambdaComponents",
	  "LambertW",
	  "LameC",
	  "LameCPrime",
	  "LameEigenvalueA",
	  "LameEigenvalueB",
	  "LameS",
	  "LameSPrime",
	  "LaminaData",
	  "LanczosWindow",
	  "LandauDistribution",
	  "Language",
	  "LanguageCategory",
	  "LanguageData",
	  "LanguageIdentify",
	  "LanguageOptions",
	  "LaplaceDistribution",
	  "LaplaceTransform",
	  "Laplacian",
	  "LaplacianFilter",
	  "LaplacianGaussianFilter",
	  "LaplacianPDETerm",
	  "Large",
	  "Larger",
	  "Last",
	  "Latitude",
	  "LatitudeLongitude",
	  "LatticeData",
	  "LatticeReduce",
	  "Launch",
	  "LaunchKernels",
	  "LayeredGraphPlot",
	  "LayeredGraphPlot3D",
	  "LayerSizeFunction",
	  "LayoutInformation",
	  "LCHColor",
	  "LCM",
	  "LeaderSize",
	  "LeafCount",
	  "LeapVariant",
	  "LeapYearQ",
	  "LearnDistribution",
	  "LearnedDistribution",
	  "LearningRate",
	  "LearningRateMultipliers",
	  "LeastSquares",
	  "LeastSquaresFilterKernel",
	  "Left",
	  "LeftArrow",
	  "LeftArrowBar",
	  "LeftArrowRightArrow",
	  "LeftDownTeeVector",
	  "LeftDownVector",
	  "LeftDownVectorBar",
	  "LeftRightArrow",
	  "LeftRightVector",
	  "LeftTee",
	  "LeftTeeArrow",
	  "LeftTeeVector",
	  "LeftTriangle",
	  "LeftTriangleBar",
	  "LeftTriangleEqual",
	  "LeftUpDownVector",
	  "LeftUpTeeVector",
	  "LeftUpVector",
	  "LeftUpVectorBar",
	  "LeftVector",
	  "LeftVectorBar",
	  "LegendAppearance",
	  "Legended",
	  "LegendFunction",
	  "LegendLabel",
	  "LegendLayout",
	  "LegendMargins",
	  "LegendMarkers",
	  "LegendMarkerSize",
	  "LegendreP",
	  "LegendreQ",
	  "LegendreType",
	  "Length",
	  "LengthWhile",
	  "LerchPhi",
	  "Less",
	  "LessEqual",
	  "LessEqualGreater",
	  "LessEqualThan",
	  "LessFullEqual",
	  "LessGreater",
	  "LessLess",
	  "LessSlantEqual",
	  "LessThan",
	  "LessTilde",
	  "LetterCharacter",
	  "LetterCounts",
	  "LetterNumber",
	  "LetterQ",
	  "Level",
	  "LeveneTest",
	  "LeviCivitaTensor",
	  "LevyDistribution",
	  "Lexicographic",
	  "LexicographicOrder",
	  "LexicographicSort",
	  "LibraryDataType",
	  "LibraryFunction",
	  "LibraryFunctionDeclaration",
	  "LibraryFunctionError",
	  "LibraryFunctionInformation",
	  "LibraryFunctionLoad",
	  "LibraryFunctionUnload",
	  "LibraryLoad",
	  "LibraryUnload",
	  "LicenseEntitlementObject",
	  "LicenseEntitlements",
	  "LicenseID",
	  "LicensingSettings",
	  "LiftingFilterData",
	  "LiftingWaveletTransform",
	  "LightBlue",
	  "LightBrown",
	  "LightCyan",
	  "Lighter",
	  "LightGray",
	  "LightGreen",
	  "Lighting",
	  "LightingAngle",
	  "LightMagenta",
	  "LightOrange",
	  "LightPink",
	  "LightPurple",
	  "LightRed",
	  "LightSources",
	  "LightYellow",
	  "Likelihood",
	  "Limit",
	  "LimitsPositioning",
	  "LimitsPositioningTokens",
	  "LindleyDistribution",
	  "Line",
	  "Line3DBox",
	  "Line3DBoxOptions",
	  "LinearFilter",
	  "LinearFractionalOptimization",
	  "LinearFractionalTransform",
	  "LinearGradientFilling",
	  "LinearGradientImage",
	  "LinearizingTransformationData",
	  "LinearLayer",
	  "LinearModelFit",
	  "LinearOffsetFunction",
	  "LinearOptimization",
	  "LinearProgramming",
	  "LinearRecurrence",
	  "LinearSolve",
	  "LinearSolveFunction",
	  "LineBox",
	  "LineBoxOptions",
	  "LineBreak",
	  "LinebreakAdjustments",
	  "LineBreakChart",
	  "LinebreakSemicolonWeighting",
	  "LineBreakWithin",
	  "LineColor",
	  "LineGraph",
	  "LineIndent",
	  "LineIndentMaxFraction",
	  "LineIntegralConvolutionPlot",
	  "LineIntegralConvolutionScale",
	  "LineLegend",
	  "LineOpacity",
	  "LineSpacing",
	  "LineWrapParts",
	  "LinkActivate",
	  "LinkClose",
	  "LinkConnect",
	  "LinkConnectedQ",
	  "LinkCreate",
	  "LinkError",
	  "LinkFlush",
	  "LinkFunction",
	  "LinkHost",
	  "LinkInterrupt",
	  "LinkLaunch",
	  "LinkMode",
	  "LinkObject",
	  "LinkOpen",
	  "LinkOptions",
	  "LinkPatterns",
	  "LinkProtocol",
	  "LinkRankCentrality",
	  "LinkRead",
	  "LinkReadHeld",
	  "LinkReadyQ",
	  "Links",
	  "LinkService",
	  "LinkWrite",
	  "LinkWriteHeld",
	  "LiouvilleLambda",
	  "List",
	  "Listable",
	  "ListAnimate",
	  "ListContourPlot",
	  "ListContourPlot3D",
	  "ListConvolve",
	  "ListCorrelate",
	  "ListCurvePathPlot",
	  "ListDeconvolve",
	  "ListDensityPlot",
	  "ListDensityPlot3D",
	  "Listen",
	  "ListFormat",
	  "ListFourierSequenceTransform",
	  "ListInterpolation",
	  "ListLineIntegralConvolutionPlot",
	  "ListLinePlot",
	  "ListLinePlot3D",
	  "ListLogLinearPlot",
	  "ListLogLogPlot",
	  "ListLogPlot",
	  "ListPicker",
	  "ListPickerBox",
	  "ListPickerBoxBackground",
	  "ListPickerBoxOptions",
	  "ListPlay",
	  "ListPlot",
	  "ListPlot3D",
	  "ListPointPlot3D",
	  "ListPolarPlot",
	  "ListQ",
	  "ListSliceContourPlot3D",
	  "ListSliceDensityPlot3D",
	  "ListSliceVectorPlot3D",
	  "ListStepPlot",
	  "ListStreamDensityPlot",
	  "ListStreamPlot",
	  "ListStreamPlot3D",
	  "ListSurfacePlot3D",
	  "ListVectorDensityPlot",
	  "ListVectorDisplacementPlot",
	  "ListVectorDisplacementPlot3D",
	  "ListVectorPlot",
	  "ListVectorPlot3D",
	  "ListZTransform",
	  "Literal",
	  "LiteralSearch",
	  "LiteralType",
	  "LoadCompiledComponent",
	  "LocalAdaptiveBinarize",
	  "LocalCache",
	  "LocalClusteringCoefficient",
	  "LocalEvaluate",
	  "LocalizeDefinitions",
	  "LocalizeVariables",
	  "LocalObject",
	  "LocalObjects",
	  "LocalResponseNormalizationLayer",
	  "LocalSubmit",
	  "LocalSymbol",
	  "LocalTime",
	  "LocalTimeZone",
	  "LocationEquivalenceTest",
	  "LocationTest",
	  "Locator",
	  "LocatorAutoCreate",
	  "LocatorBox",
	  "LocatorBoxOptions",
	  "LocatorCentering",
	  "LocatorPane",
	  "LocatorPaneBox",
	  "LocatorPaneBoxOptions",
	  "LocatorRegion",
	  "Locked",
	  "Log",
	  "Log10",
	  "Log2",
	  "LogBarnesG",
	  "LogGamma",
	  "LogGammaDistribution",
	  "LogicalExpand",
	  "LogIntegral",
	  "LogisticDistribution",
	  "LogisticSigmoid",
	  "LogitModelFit",
	  "LogLikelihood",
	  "LogLinearPlot",
	  "LogLogisticDistribution",
	  "LogLogPlot",
	  "LogMultinormalDistribution",
	  "LogNormalDistribution",
	  "LogPlot",
	  "LogRankTest",
	  "LogSeriesDistribution",
	  "LongEqual",
	  "Longest",
	  "LongestCommonSequence",
	  "LongestCommonSequencePositions",
	  "LongestCommonSubsequence",
	  "LongestCommonSubsequencePositions",
	  "LongestMatch",
	  "LongestOrderedSequence",
	  "LongForm",
	  "Longitude",
	  "LongLeftArrow",
	  "LongLeftRightArrow",
	  "LongRightArrow",
	  "LongShortTermMemoryLayer",
	  "Lookup",
	  "Loopback",
	  "LoopFreeGraphQ",
	  "Looping",
	  "LossFunction",
	  "LowerCaseQ",
	  "LowerLeftArrow",
	  "LowerRightArrow",
	  "LowerTriangularize",
	  "LowerTriangularMatrix",
	  "LowerTriangularMatrixQ",
	  "LowpassFilter",
	  "LQEstimatorGains",
	  "LQGRegulator",
	  "LQOutputRegulatorGains",
	  "LQRegulatorGains",
	  "LUBackSubstitution",
	  "LucasL",
	  "LuccioSamiComponents",
	  "LUDecomposition",
	  "LunarEclipse",
	  "LUVColor",
	  "LyapunovSolve",
	  "LyonsGroupLy",
	  "MachineID",
	  "MachineName",
	  "MachineNumberQ",
	  "MachinePrecision",
	  "MacintoshSystemPageSetup",
	  "Magenta",
	  "Magnification",
	  "Magnify",
	  "MailAddressValidation",
	  "MailExecute",
	  "MailFolder",
	  "MailItem",
	  "MailReceiverFunction",
	  "MailResponseFunction",
	  "MailSearch",
	  "MailServerConnect",
	  "MailServerConnection",
	  "MailSettings",
	  "MainSolve",
	  "MaintainDynamicCaches",
	  "Majority",
	  "MakeBoxes",
	  "MakeExpression",
	  "MakeRules",
	  "ManagedLibraryExpressionID",
	  "ManagedLibraryExpressionQ",
	  "MandelbrotSetBoettcher",
	  "MandelbrotSetDistance",
	  "MandelbrotSetIterationCount",
	  "MandelbrotSetMemberQ",
	  "MandelbrotSetPlot",
	  "MangoldtLambda",
	  "ManhattanDistance",
	  "Manipulate",
	  "Manipulator",
	  "MannedSpaceMissionData",
	  "MannWhitneyTest",
	  "MantissaExponent",
	  "Manual",
	  "Map",
	  "MapAll",
	  "MapApply",
	  "MapAt",
	  "MapIndexed",
	  "MAProcess",
	  "MapThread",
	  "MarchenkoPasturDistribution",
	  "MarcumQ",
	  "MardiaCombinedTest",
	  "MardiaKurtosisTest",
	  "MardiaSkewnessTest",
	  "MarginalDistribution",
	  "MarkovProcessProperties",
	  "Masking",
	  "MassConcentrationCondition",
	  "MassFluxValue",
	  "MassImpermeableBoundaryValue",
	  "MassOutflowValue",
	  "MassSymmetryValue",
	  "MassTransferValue",
	  "MassTransportPDEComponent",
	  "MatchingDissimilarity",
	  "MatchLocalNameQ",
	  "MatchLocalNames",
	  "MatchQ",
	  "Material",
	  "MaterialShading",
	  "MaternPointProcess",
	  "MathematicalFunctionData",
	  "MathematicaNotation",
	  "MathieuC",
	  "MathieuCharacteristicA",
	  "MathieuCharacteristicB",
	  "MathieuCharacteristicExponent",
	  "MathieuCPrime",
	  "MathieuGroupM11",
	  "MathieuGroupM12",
	  "MathieuGroupM22",
	  "MathieuGroupM23",
	  "MathieuGroupM24",
	  "MathieuS",
	  "MathieuSPrime",
	  "MathMLForm",
	  "MathMLText",
	  "Matrices",
	  "MatrixExp",
	  "MatrixForm",
	  "MatrixFunction",
	  "MatrixLog",
	  "MatrixNormalDistribution",
	  "MatrixPlot",
	  "MatrixPower",
	  "MatrixPropertyDistribution",
	  "MatrixQ",
	  "MatrixRank",
	  "MatrixTDistribution",
	  "Max",
	  "MaxBend",
	  "MaxCellMeasure",
	  "MaxColorDistance",
	  "MaxDate",
	  "MaxDetect",
	  "MaxDisplayedChildren",
	  "MaxDuration",
	  "MaxExtraBandwidths",
	  "MaxExtraConditions",
	  "MaxFeatureDisplacement",
	  "MaxFeatures",
	  "MaxFilter",
	  "MaximalBy",
	  "Maximize",
	  "MaxItems",
	  "MaxIterations",
	  "MaxLimit",
	  "MaxMemoryUsed",
	  "MaxMixtureKernels",
	  "MaxOverlapFraction",
	  "MaxPlotPoints",
	  "MaxPoints",
	  "MaxRecursion",
	  "MaxStableDistribution",
	  "MaxStepFraction",
	  "MaxSteps",
	  "MaxStepSize",
	  "MaxTrainingRounds",
	  "MaxValue",
	  "MaxwellDistribution",
	  "MaxWordGap",
	  "McLaughlinGroupMcL",
	  "Mean",
	  "MeanAbsoluteLossLayer",
	  "MeanAround",
	  "MeanClusteringCoefficient",
	  "MeanDegreeConnectivity",
	  "MeanDeviation",
	  "MeanFilter",
	  "MeanGraphDistance",
	  "MeanNeighborDegree",
	  "MeanPointDensity",
	  "MeanShift",
	  "MeanShiftFilter",
	  "MeanSquaredLossLayer",
	  "Median",
	  "MedianDeviation",
	  "MedianFilter",
	  "MedicalTestData",
	  "Medium",
	  "MeijerG",
	  "MeijerGReduce",
	  "MeixnerDistribution",
	  "MellinConvolve",
	  "MellinTransform",
	  "MemberQ",
	  "MemoryAvailable",
	  "MemoryConstrained",
	  "MemoryConstraint",
	  "MemoryInUse",
	  "MengerMesh",
	  "Menu",
	  "MenuAppearance",
	  "MenuCommandKey",
	  "MenuEvaluator",
	  "MenuItem",
	  "MenuList",
	  "MenuPacket",
	  "MenuSortingValue",
	  "MenuStyle",
	  "MenuView",
	  "Merge",
	  "MergeDifferences",
	  "MergingFunction",
	  "MersennePrimeExponent",
	  "MersennePrimeExponentQ",
	  "Mesh",
	  "MeshCellCentroid",
	  "MeshCellCount",
	  "MeshCellHighlight",
	  "MeshCellIndex",
	  "MeshCellLabel",
	  "MeshCellMarker",
	  "MeshCellMeasure",
	  "MeshCellQuality",
	  "MeshCells",
	  "MeshCellShapeFunction",
	  "MeshCellStyle",
	  "MeshConnectivityGraph",
	  "MeshCoordinates",
	  "MeshFunctions",
	  "MeshPrimitives",
	  "MeshQualityGoal",
	  "MeshRange",
	  "MeshRefinementFunction",
	  "MeshRegion",
	  "MeshRegionQ",
	  "MeshShading",
	  "MeshStyle",
	  "Message",
	  "MessageDialog",
	  "MessageList",
	  "MessageName",
	  "MessageObject",
	  "MessageOptions",
	  "MessagePacket",
	  "Messages",
	  "MessagesNotebook",
	  "MetaCharacters",
	  "MetaInformation",
	  "MeteorShowerData",
	  "Method",
	  "MethodOptions",
	  "MexicanHatWavelet",
	  "MeyerWavelet",
	  "Midpoint",
	  "MIMETypeToFormatList",
	  "Min",
	  "MinColorDistance",
	  "MinDate",
	  "MinDetect",
	  "MineralData",
	  "MinFilter",
	  "MinimalBy",
	  "MinimalPolynomial",
	  "MinimalStateSpaceModel",
	  "Minimize",
	  "MinimumTimeIncrement",
	  "MinIntervalSize",
	  "MinkowskiQuestionMark",
	  "MinLimit",
	  "MinMax",
	  "MinorPlanetData",
	  "Minors",
	  "MinPointSeparation",
	  "MinRecursion",
	  "MinSize",
	  "MinStableDistribution",
	  "Minus",
	  "MinusPlus",
	  "MinValue",
	  "Missing",
	  "MissingBehavior",
	  "MissingDataMethod",
	  "MissingDataRules",
	  "MissingQ",
	  "MissingString",
	  "MissingStyle",
	  "MissingValuePattern",
	  "MissingValueSynthesis",
	  "MittagLefflerE",
	  "MixedFractionParts",
	  "MixedGraphQ",
	  "MixedMagnitude",
	  "MixedRadix",
	  "MixedRadixQuantity",
	  "MixedUnit",
	  "MixtureDistribution",
	  "Mod",
	  "Modal",
	  "Mode",
	  "ModelPredictiveController",
	  "Modular",
	  "ModularInverse",
	  "ModularLambda",
	  "Module",
	  "Modulus",
	  "MoebiusMu",
	  "Molecule",
	  "MoleculeAlign",
	  "MoleculeContainsQ",
	  "MoleculeDraw",
	  "MoleculeEquivalentQ",
	  "MoleculeFreeQ",
	  "MoleculeGraph",
	  "MoleculeMatchQ",
	  "MoleculeMaximumCommonSubstructure",
	  "MoleculeModify",
	  "MoleculeName",
	  "MoleculePattern",
	  "MoleculePlot",
	  "MoleculePlot3D",
	  "MoleculeProperty",
	  "MoleculeQ",
	  "MoleculeRecognize",
	  "MoleculeSubstructureCount",
	  "MoleculeValue",
	  "Moment",
	  "MomentConvert",
	  "MomentEvaluate",
	  "MomentGeneratingFunction",
	  "MomentOfInertia",
	  "Monday",
	  "Monitor",
	  "MonomialList",
	  "MonomialOrder",
	  "MonsterGroupM",
	  "MoonPhase",
	  "MoonPosition",
	  "MorletWavelet",
	  "MorphologicalBinarize",
	  "MorphologicalBranchPoints",
	  "MorphologicalComponents",
	  "MorphologicalEulerNumber",
	  "MorphologicalGraph",
	  "MorphologicalPerimeter",
	  "MorphologicalTransform",
	  "MortalityData",
	  "Most",
	  "MountainData",
	  "MouseAnnotation",
	  "MouseAppearance",
	  "MouseAppearanceTag",
	  "MouseButtons",
	  "Mouseover",
	  "MousePointerNote",
	  "MousePosition",
	  "MovieData",
	  "MovingAverage",
	  "MovingMap",
	  "MovingMedian",
	  "MoyalDistribution",
	  "MultiaxisArrangement",
	  "Multicolumn",
	  "MultiedgeStyle",
	  "MultigraphQ",
	  "MultilaunchWarning",
	  "MultiLetterItalics",
	  "MultiLetterStyle",
	  "MultilineFunction",
	  "Multinomial",
	  "MultinomialDistribution",
	  "MultinormalDistribution",
	  "MultiplicativeOrder",
	  "Multiplicity",
	  "MultiplySides",
	  "MultiscriptBoxOptions",
	  "Multiselection",
	  "MultivariateHypergeometricDistribution",
	  "MultivariatePoissonDistribution",
	  "MultivariateTDistribution",
	  "N",
	  "NakagamiDistribution",
	  "NameQ",
	  "Names",
	  "NamespaceBox",
	  "NamespaceBoxOptions",
	  "Nand",
	  "NArgMax",
	  "NArgMin",
	  "NBernoulliB",
	  "NBodySimulation",
	  "NBodySimulationData",
	  "NCache",
	  "NCaputoD",
	  "NDEigensystem",
	  "NDEigenvalues",
	  "NDSolve",
	  "NDSolveValue",
	  "Nearest",
	  "NearestFunction",
	  "NearestMeshCells",
	  "NearestNeighborG",
	  "NearestNeighborGraph",
	  "NearestTo",
	  "NebulaData",
	  "NeedlemanWunschSimilarity",
	  "Needs",
	  "Negative",
	  "NegativeBinomialDistribution",
	  "NegativeDefiniteMatrixQ",
	  "NegativeIntegers",
	  "NegativelyOrientedPoints",
	  "NegativeMultinomialDistribution",
	  "NegativeRationals",
	  "NegativeReals",
	  "NegativeSemidefiniteMatrixQ",
	  "NeighborhoodData",
	  "NeighborhoodGraph",
	  "Nest",
	  "NestedGreaterGreater",
	  "NestedLessLess",
	  "NestedScriptRules",
	  "NestGraph",
	  "NestList",
	  "NestTree",
	  "NestWhile",
	  "NestWhileList",
	  "NetAppend",
	  "NetArray",
	  "NetArrayLayer",
	  "NetBidirectionalOperator",
	  "NetChain",
	  "NetDecoder",
	  "NetDelete",
	  "NetDrop",
	  "NetEncoder",
	  "NetEvaluationMode",
	  "NetExternalObject",
	  "NetExtract",
	  "NetFlatten",
	  "NetFoldOperator",
	  "NetGANOperator",
	  "NetGraph",
	  "NetInformation",
	  "NetInitialize",
	  "NetInsert",
	  "NetInsertSharedArrays",
	  "NetJoin",
	  "NetMapOperator",
	  "NetMapThreadOperator",
	  "NetMeasurements",
	  "NetModel",
	  "NetNestOperator",
	  "NetPairEmbeddingOperator",
	  "NetPort",
	  "NetPortGradient",
	  "NetPrepend",
	  "NetRename",
	  "NetReplace",
	  "NetReplacePart",
	  "NetSharedArray",
	  "NetStateObject",
	  "NetTake",
	  "NetTrain",
	  "NetTrainResultsObject",
	  "NetUnfold",
	  "NetworkPacketCapture",
	  "NetworkPacketRecording",
	  "NetworkPacketRecordingDuring",
	  "NetworkPacketTrace",
	  "NeumannValue",
	  "NevilleThetaC",
	  "NevilleThetaD",
	  "NevilleThetaN",
	  "NevilleThetaS",
	  "NewPrimitiveStyle",
	  "NExpectation",
	  "Next",
	  "NextCell",
	  "NextDate",
	  "NextPrime",
	  "NextScheduledTaskTime",
	  "NeymanScottPointProcess",
	  "NFractionalD",
	  "NHoldAll",
	  "NHoldFirst",
	  "NHoldRest",
	  "NicholsGridLines",
	  "NicholsPlot",
	  "NightHemisphere",
	  "NIntegrate",
	  "NMaximize",
	  "NMaxValue",
	  "NMinimize",
	  "NMinValue",
	  "NominalScale",
	  "NominalVariables",
	  "NonAssociative",
	  "NoncentralBetaDistribution",
	  "NoncentralChiSquareDistribution",
	  "NoncentralFRatioDistribution",
	  "NoncentralStudentTDistribution",
	  "NonCommutativeMultiply",
	  "NonConstants",
	  "NondimensionalizationTransform",
	  "None",
	  "NoneTrue",
	  "NonlinearModelFit",
	  "NonlinearStateSpaceModel",
	  "NonlocalMeansFilter",
	  "NonNegative",
	  "NonNegativeIntegers",
	  "NonNegativeRationals",
	  "NonNegativeReals",
	  "NonPositive",
	  "NonPositiveIntegers",
	  "NonPositiveRationals",
	  "NonPositiveReals",
	  "Nor",
	  "NorlundB",
	  "Norm",
	  "Normal",
	  "NormalDistribution",
	  "NormalGrouping",
	  "NormalizationLayer",
	  "Normalize",
	  "Normalized",
	  "NormalizedSquaredEuclideanDistance",
	  "NormalMatrixQ",
	  "NormalsFunction",
	  "NormFunction",
	  "Not",
	  "NotCongruent",
	  "NotCupCap",
	  "NotDoubleVerticalBar",
	  "Notebook",
	  "NotebookApply",
	  "NotebookAutoSave",
	  "NotebookBrowseDirectory",
	  "NotebookClose",
	  "NotebookConvertSettings",
	  "NotebookCreate",
	  "NotebookDefault",
	  "NotebookDelete",
	  "NotebookDirectory",
	  "NotebookDynamicExpression",
	  "NotebookEvaluate",
	  "NotebookEventActions",
	  "NotebookFileName",
	  "NotebookFind",
	  "NotebookGet",
	  "NotebookImport",
	  "NotebookInformation",
	  "NotebookInterfaceObject",
	  "NotebookLocate",
	  "NotebookObject",
	  "NotebookOpen",
	  "NotebookPath",
	  "NotebookPrint",
	  "NotebookPut",
	  "NotebookRead",
	  "Notebooks",
	  "NotebookSave",
	  "NotebookSelection",
	  "NotebooksMenu",
	  "NotebookTemplate",
	  "NotebookWrite",
	  "NotElement",
	  "NotEqualTilde",
	  "NotExists",
	  "NotGreater",
	  "NotGreaterEqual",
	  "NotGreaterFullEqual",
	  "NotGreaterGreater",
	  "NotGreaterLess",
	  "NotGreaterSlantEqual",
	  "NotGreaterTilde",
	  "Nothing",
	  "NotHumpDownHump",
	  "NotHumpEqual",
	  "NotificationFunction",
	  "NotLeftTriangle",
	  "NotLeftTriangleBar",
	  "NotLeftTriangleEqual",
	  "NotLess",
	  "NotLessEqual",
	  "NotLessFullEqual",
	  "NotLessGreater",
	  "NotLessLess",
	  "NotLessSlantEqual",
	  "NotLessTilde",
	  "NotNestedGreaterGreater",
	  "NotNestedLessLess",
	  "NotPrecedes",
	  "NotPrecedesEqual",
	  "NotPrecedesSlantEqual",
	  "NotPrecedesTilde",
	  "NotReverseElement",
	  "NotRightTriangle",
	  "NotRightTriangleBar",
	  "NotRightTriangleEqual",
	  "NotSquareSubset",
	  "NotSquareSubsetEqual",
	  "NotSquareSuperset",
	  "NotSquareSupersetEqual",
	  "NotSubset",
	  "NotSubsetEqual",
	  "NotSucceeds",
	  "NotSucceedsEqual",
	  "NotSucceedsSlantEqual",
	  "NotSucceedsTilde",
	  "NotSuperset",
	  "NotSupersetEqual",
	  "NotTilde",
	  "NotTildeEqual",
	  "NotTildeFullEqual",
	  "NotTildeTilde",
	  "NotVerticalBar",
	  "Now",
	  "NoWhitespace",
	  "NProbability",
	  "NProduct",
	  "NProductFactors",
	  "NRoots",
	  "NSolve",
	  "NSolveValues",
	  "NSum",
	  "NSumTerms",
	  "NuclearExplosionData",
	  "NuclearReactorData",
	  "Null",
	  "NullRecords",
	  "NullSpace",
	  "NullWords",
	  "Number",
	  "NumberCompose",
	  "NumberDecompose",
	  "NumberDigit",
	  "NumberExpand",
	  "NumberFieldClassNumber",
	  "NumberFieldDiscriminant",
	  "NumberFieldFundamentalUnits",
	  "NumberFieldIntegralBasis",
	  "NumberFieldNormRepresentatives",
	  "NumberFieldRegulator",
	  "NumberFieldRootsOfUnity",
	  "NumberFieldSignature",
	  "NumberForm",
	  "NumberFormat",
	  "NumberLinePlot",
	  "NumberMarks",
	  "NumberMultiplier",
	  "NumberPadding",
	  "NumberPoint",
	  "NumberQ",
	  "NumberSeparator",
	  "NumberSigns",
	  "NumberString",
	  "Numerator",
	  "NumeratorDenominator",
	  "NumericalOrder",
	  "NumericalSort",
	  "NumericArray",
	  "NumericArrayQ",
	  "NumericArrayType",
	  "NumericFunction",
	  "NumericQ",
	  "NuttallWindow",
	  "NValues",
	  "NyquistGridLines",
	  "NyquistPlot",
	  "O",
	  "ObjectExistsQ",
	  "ObservabilityGramian",
	  "ObservabilityMatrix",
	  "ObservableDecomposition",
	  "ObservableModelQ",
	  "OceanData",
	  "Octahedron",
	  "OddQ",
	  "Off",
	  "Offset",
	  "OLEData",
	  "On",
	  "ONanGroupON",
	  "Once",
	  "OneIdentity",
	  "Opacity",
	  "OpacityFunction",
	  "OpacityFunctionScaling",
	  "Open",
	  "OpenAppend",
	  "Opener",
	  "OpenerBox",
	  "OpenerBoxOptions",
	  "OpenerView",
	  "OpenFunctionInspectorPacket",
	  "Opening",
	  "OpenRead",
	  "OpenSpecialOptions",
	  "OpenTemporary",
	  "OpenWrite",
	  "Operate",
	  "OperatingSystem",
	  "OperatorApplied",
	  "OptimumFlowData",
	  "Optional",
	  "OptionalElement",
	  "OptionInspectorSettings",
	  "OptionQ",
	  "Options",
	  "OptionsPacket",
	  "OptionsPattern",
	  "OptionValue",
	  "OptionValueBox",
	  "OptionValueBoxOptions",
	  "Or",
	  "Orange",
	  "Order",
	  "OrderDistribution",
	  "OrderedQ",
	  "Ordering",
	  "OrderingBy",
	  "OrderingLayer",
	  "Orderless",
	  "OrderlessPatternSequence",
	  "OrdinalScale",
	  "OrnsteinUhlenbeckProcess",
	  "Orthogonalize",
	  "OrthogonalMatrixQ",
	  "Out",
	  "Outer",
	  "OuterPolygon",
	  "OuterPolyhedron",
	  "OutputAutoOverwrite",
	  "OutputControllabilityMatrix",
	  "OutputControllableModelQ",
	  "OutputForm",
	  "OutputFormData",
	  "OutputGrouping",
	  "OutputMathEditExpression",
	  "OutputNamePacket",
	  "OutputPorts",
	  "OutputResponse",
	  "OutputSizeLimit",
	  "OutputStream",
	  "Over",
	  "OverBar",
	  "OverDot",
	  "Overflow",
	  "OverHat",
	  "Overlaps",
	  "Overlay",
	  "OverlayBox",
	  "OverlayBoxOptions",
	  "OverlayVideo",
	  "Overscript",
	  "OverscriptBox",
	  "OverscriptBoxOptions",
	  "OverTilde",
	  "OverVector",
	  "OverwriteTarget",
	  "OwenT",
	  "OwnValues",
	  "Package",
	  "PackingMethod",
	  "PackPaclet",
	  "PacletDataRebuild",
	  "PacletDirectoryAdd",
	  "PacletDirectoryLoad",
	  "PacletDirectoryRemove",
	  "PacletDirectoryUnload",
	  "PacletDisable",
	  "PacletEnable",
	  "PacletFind",
	  "PacletFindRemote",
	  "PacletInformation",
	  "PacletInstall",
	  "PacletInstallSubmit",
	  "PacletNewerQ",
	  "PacletObject",
	  "PacletObjectQ",
	  "PacletSite",
	  "PacletSiteObject",
	  "PacletSiteRegister",
	  "PacletSites",
	  "PacletSiteUnregister",
	  "PacletSiteUpdate",
	  "PacletSymbol",
	  "PacletUninstall",
	  "PacletUpdate",
	  "PaddedForm",
	  "Padding",
	  "PaddingLayer",
	  "PaddingSize",
	  "PadeApproximant",
	  "PadLeft",
	  "PadRight",
	  "PageBreakAbove",
	  "PageBreakBelow",
	  "PageBreakWithin",
	  "PageFooterLines",
	  "PageFooters",
	  "PageHeaderLines",
	  "PageHeaders",
	  "PageHeight",
	  "PageRankCentrality",
	  "PageTheme",
	  "PageWidth",
	  "Pagination",
	  "PairCorrelationG",
	  "PairedBarChart",
	  "PairedHistogram",
	  "PairedSmoothHistogram",
	  "PairedTTest",
	  "PairedZTest",
	  "PaletteNotebook",
	  "PalettePath",
	  "PalettesMenuSettings",
	  "PalindromeQ",
	  "Pane",
	  "PaneBox",
	  "PaneBoxOptions",
	  "Panel",
	  "PanelBox",
	  "PanelBoxOptions",
	  "Paneled",
	  "PaneSelector",
	  "PaneSelectorBox",
	  "PaneSelectorBoxOptions",
	  "PaperWidth",
	  "ParabolicCylinderD",
	  "ParagraphIndent",
	  "ParagraphSpacing",
	  "ParallelArray",
	  "ParallelAxisPlot",
	  "ParallelCombine",
	  "ParallelDo",
	  "Parallelepiped",
	  "ParallelEvaluate",
	  "Parallelization",
	  "Parallelize",
	  "ParallelKernels",
	  "ParallelMap",
	  "ParallelNeeds",
	  "Parallelogram",
	  "ParallelProduct",
	  "ParallelSubmit",
	  "ParallelSum",
	  "ParallelTable",
	  "ParallelTry",
	  "Parameter",
	  "ParameterEstimator",
	  "ParameterMixtureDistribution",
	  "ParameterVariables",
	  "ParametricConvexOptimization",
	  "ParametricFunction",
	  "ParametricNDSolve",
	  "ParametricNDSolveValue",
	  "ParametricPlot",
	  "ParametricPlot3D",
	  "ParametricRampLayer",
	  "ParametricRegion",
	  "ParentBox",
	  "ParentCell",
	  "ParentConnect",
	  "ParentDirectory",
	  "ParentEdgeLabel",
	  "ParentEdgeLabelFunction",
	  "ParentEdgeLabelStyle",
	  "ParentEdgeShapeFunction",
	  "ParentEdgeStyle",
	  "ParentEdgeStyleFunction",
	  "ParentForm",
	  "Parenthesize",
	  "ParentList",
	  "ParentNotebook",
	  "ParetoDistribution",
	  "ParetoPickandsDistribution",
	  "ParkData",
	  "Part",
	  "PartBehavior",
	  "PartialCorrelationFunction",
	  "PartialD",
	  "ParticleAcceleratorData",
	  "ParticleData",
	  "Partition",
	  "PartitionGranularity",
	  "PartitionsP",
	  "PartitionsQ",
	  "PartLayer",
	  "PartOfSpeech",
	  "PartProtection",
	  "ParzenWindow",
	  "PascalDistribution",
	  "PassEventsDown",
	  "PassEventsUp",
	  "Paste",
	  "PasteAutoQuoteCharacters",
	  "PasteBoxFormInlineCells",
	  "PasteButton",
	  "Path",
	  "PathGraph",
	  "PathGraphQ",
	  "Pattern",
	  "PatternFilling",
	  "PatternReaction",
	  "PatternSequence",
	  "PatternTest",
	  "PauliMatrix",
	  "PaulWavelet",
	  "Pause",
	  "PausedTime",
	  "PDF",
	  "PeakDetect",
	  "PeanoCurve",
	  "PearsonChiSquareTest",
	  "PearsonCorrelationTest",
	  "PearsonDistribution",
	  "PenttinenPointProcess",
	  "PercentForm",
	  "PerfectNumber",
	  "PerfectNumberQ",
	  "PerformanceGoal",
	  "Perimeter",
	  "PeriodicBoundaryCondition",
	  "PeriodicInterpolation",
	  "Periodogram",
	  "PeriodogramArray",
	  "Permanent",
	  "Permissions",
	  "PermissionsGroup",
	  "PermissionsGroupMemberQ",
	  "PermissionsGroups",
	  "PermissionsKey",
	  "PermissionsKeys",
	  "PermutationCycles",
	  "PermutationCyclesQ",
	  "PermutationGroup",
	  "PermutationLength",
	  "PermutationList",
	  "PermutationListQ",
	  "PermutationMatrix",
	  "PermutationMax",
	  "PermutationMin",
	  "PermutationOrder",
	  "PermutationPower",
	  "PermutationProduct",
	  "PermutationReplace",
	  "Permutations",
	  "PermutationSupport",
	  "Permute",
	  "PeronaMalikFilter",
	  "Perpendicular",
	  "PerpendicularBisector",
	  "PersistenceLocation",
	  "PersistenceTime",
	  "PersistentObject",
	  "PersistentObjects",
	  "PersistentSymbol",
	  "PersistentValue",
	  "PersonData",
	  "PERTDistribution",
	  "PetersenGraph",
	  "PhaseMargins",
	  "PhaseRange",
	  "PhongShading",
	  "PhysicalSystemData",
	  "Pi",
	  "Pick",
	  "PickedElements",
	  "PickMode",
	  "PIDData",
	  "PIDDerivativeFilter",
	  "PIDFeedforward",
	  "PIDTune",
	  "Piecewise",
	  "PiecewiseExpand",
	  "PieChart",
	  "PieChart3D",
	  "PillaiTrace",
	  "PillaiTraceTest",
	  "PingTime",
	  "Pink",
	  "PitchRecognize",
	  "Pivoting",
	  "PixelConstrained",
	  "PixelValue",
	  "PixelValuePositions",
	  "Placed",
	  "Placeholder",
	  "PlaceholderLayer",
	  "PlaceholderReplace",
	  "Plain",
	  "PlanarAngle",
	  "PlanarFaceList",
	  "PlanarGraph",
	  "PlanarGraphQ",
	  "PlanckRadiationLaw",
	  "PlaneCurveData",
	  "PlanetaryMoonData",
	  "PlanetData",
	  "PlantData",
	  "Play",
	  "PlaybackSettings",
	  "PlayRange",
	  "Plot",
	  "Plot3D",
	  "Plot3Matrix",
	  "PlotDivision",
	  "PlotJoined",
	  "PlotLabel",
	  "PlotLabels",
	  "PlotLayout",
	  "PlotLegends",
	  "PlotMarkers",
	  "PlotPoints",
	  "PlotRange",
	  "PlotRangeClipping",
	  "PlotRangeClipPlanesStyle",
	  "PlotRangePadding",
	  "PlotRegion",
	  "PlotStyle",
	  "PlotTheme",
	  "Pluralize",
	  "Plus",
	  "PlusMinus",
	  "Pochhammer",
	  "PodStates",
	  "PodWidth",
	  "Point",
	  "Point3DBox",
	  "Point3DBoxOptions",
	  "PointBox",
	  "PointBoxOptions",
	  "PointCountDistribution",
	  "PointDensity",
	  "PointDensityFunction",
	  "PointFigureChart",
	  "PointLegend",
	  "PointLight",
	  "PointProcessEstimator",
	  "PointProcessFitTest",
	  "PointProcessParameterAssumptions",
	  "PointProcessParameterQ",
	  "PointSize",
	  "PointStatisticFunction",
	  "PointValuePlot",
	  "PoissonConsulDistribution",
	  "PoissonDistribution",
	  "PoissonPDEComponent",
	  "PoissonPointProcess",
	  "PoissonProcess",
	  "PoissonWindow",
	  "PolarAxes",
	  "PolarAxesOrigin",
	  "PolarGridLines",
	  "PolarPlot",
	  "PolarTicks",
	  "PoleZeroMarkers",
	  "PolyaAeppliDistribution",
	  "PolyGamma",
	  "Polygon",
	  "Polygon3DBox",
	  "Polygon3DBoxOptions",
	  "PolygonalNumber",
	  "PolygonAngle",
	  "PolygonBox",
	  "PolygonBoxOptions",
	  "PolygonCoordinates",
	  "PolygonDecomposition",
	  "PolygonHoleScale",
	  "PolygonIntersections",
	  "PolygonScale",
	  "Polyhedron",
	  "PolyhedronAngle",
	  "PolyhedronBox",
	  "PolyhedronBoxOptions",
	  "PolyhedronCoordinates",
	  "PolyhedronData",
	  "PolyhedronDecomposition",
	  "PolyhedronGenus",
	  "PolyLog",
	  "PolynomialExpressionQ",
	  "PolynomialExtendedGCD",
	  "PolynomialForm",
	  "PolynomialGCD",
	  "PolynomialLCM",
	  "PolynomialMod",
	  "PolynomialQ",
	  "PolynomialQuotient",
	  "PolynomialQuotientRemainder",
	  "PolynomialReduce",
	  "PolynomialRemainder",
	  "Polynomials",
	  "PolynomialSumOfSquaresList",
	  "PoolingLayer",
	  "PopupMenu",
	  "PopupMenuBox",
	  "PopupMenuBoxOptions",
	  "PopupView",
	  "PopupWindow",
	  "Position",
	  "PositionIndex",
	  "PositionLargest",
	  "PositionSmallest",
	  "Positive",
	  "PositiveDefiniteMatrixQ",
	  "PositiveIntegers",
	  "PositivelyOrientedPoints",
	  "PositiveRationals",
	  "PositiveReals",
	  "PositiveSemidefiniteMatrixQ",
	  "PossibleZeroQ",
	  "Postfix",
	  "PostScript",
	  "Power",
	  "PowerDistribution",
	  "PowerExpand",
	  "PowerMod",
	  "PowerModList",
	  "PowerRange",
	  "PowerSpectralDensity",
	  "PowersRepresentations",
	  "PowerSymmetricPolynomial",
	  "Precedence",
	  "PrecedenceForm",
	  "Precedes",
	  "PrecedesEqual",
	  "PrecedesSlantEqual",
	  "PrecedesTilde",
	  "Precision",
	  "PrecisionGoal",
	  "PreDecrement",
	  "Predict",
	  "PredictionRoot",
	  "PredictorFunction",
	  "PredictorInformation",
	  "PredictorMeasurements",
	  "PredictorMeasurementsObject",
	  "PreemptProtect",
	  "PreferencesPath",
	  "PreferencesSettings",
	  "Prefix",
	  "PreIncrement",
	  "Prepend",
	  "PrependLayer",
	  "PrependTo",
	  "PreprocessingRules",
	  "PreserveColor",
	  "PreserveImageOptions",
	  "Previous",
	  "PreviousCell",
	  "PreviousDate",
	  "PriceGraphDistribution",
	  "PrimaryPlaceholder",
	  "Prime",
	  "PrimeNu",
	  "PrimeOmega",
	  "PrimePi",
	  "PrimePowerQ",
	  "PrimeQ",
	  "Primes",
	  "PrimeZetaP",
	  "PrimitivePolynomialQ",
	  "PrimitiveRoot",
	  "PrimitiveRootList",
	  "PrincipalComponents",
	  "PrincipalValue",
	  "Print",
	  "PrintableASCIIQ",
	  "PrintAction",
	  "PrintForm",
	  "PrintingCopies",
	  "PrintingOptions",
	  "PrintingPageRange",
	  "PrintingStartingPageNumber",
	  "PrintingStyleEnvironment",
	  "Printout3D",
	  "Printout3DPreviewer",
	  "PrintPrecision",
	  "PrintTemporary",
	  "Prism",
	  "PrismBox",
	  "PrismBoxOptions",
	  "PrivateCellOptions",
	  "PrivateEvaluationOptions",
	  "PrivateFontOptions",
	  "PrivateFrontEndOptions",
	  "PrivateKey",
	  "PrivateNotebookOptions",
	  "PrivatePaths",
	  "Probability",
	  "ProbabilityDistribution",
	  "ProbabilityPlot",
	  "ProbabilityPr",
	  "ProbabilityScalePlot",
	  "ProbitModelFit",
	  "ProcessConnection",
	  "ProcessDirectory",
	  "ProcessEnvironment",
	  "Processes",
	  "ProcessEstimator",
	  "ProcessInformation",
	  "ProcessObject",
	  "ProcessParameterAssumptions",
	  "ProcessParameterQ",
	  "ProcessStateDomain",
	  "ProcessStatus",
	  "ProcessTimeDomain",
	  "Product",
	  "ProductDistribution",
	  "ProductLog",
	  "ProgressIndicator",
	  "ProgressIndicatorBox",
	  "ProgressIndicatorBoxOptions",
	  "ProgressReporting",
	  "Projection",
	  "Prolog",
	  "PromptForm",
	  "ProofObject",
	  "PropagateAborts",
	  "Properties",
	  "Property",
	  "PropertyList",
	  "PropertyValue",
	  "Proportion",
	  "Proportional",
	  "Protect",
	  "Protected",
	  "ProteinData",
	  "Pruning",
	  "PseudoInverse",
	  "PsychrometricPropertyData",
	  "PublicKey",
	  "PublisherID",
	  "PulsarData",
	  "PunctuationCharacter",
	  "Purple",
	  "Put",
	  "PutAppend",
	  "Pyramid",
	  "PyramidBox",
	  "PyramidBoxOptions",
	  "QBinomial",
	  "QFactorial",
	  "QGamma",
	  "QHypergeometricPFQ",
	  "QnDispersion",
	  "QPochhammer",
	  "QPolyGamma",
	  "QRDecomposition",
	  "QuadraticIrrationalQ",
	  "QuadraticOptimization",
	  "Quantile",
	  "QuantilePlot",
	  "Quantity",
	  "QuantityArray",
	  "QuantityDistribution",
	  "QuantityForm",
	  "QuantityMagnitude",
	  "QuantityQ",
	  "QuantityUnit",
	  "QuantityVariable",
	  "QuantityVariableCanonicalUnit",
	  "QuantityVariableDimensions",
	  "QuantityVariableIdentifier",
	  "QuantityVariablePhysicalQuantity",
	  "Quartics",
	  "QuartileDeviation",
	  "Quartiles",
	  "QuartileSkewness",
	  "Query",
	  "QuestionGenerator",
	  "QuestionInterface",
	  "QuestionObject",
	  "QuestionSelector",
	  "QueueingNetworkProcess",
	  "QueueingProcess",
	  "QueueProperties",
	  "Quiet",
	  "QuietEcho",
	  "Quit",
	  "Quotient",
	  "QuotientRemainder",
	  "RadialAxisPlot",
	  "RadialGradientFilling",
	  "RadialGradientImage",
	  "RadialityCentrality",
	  "RadicalBox",
	  "RadicalBoxOptions",
	  "RadioButton",
	  "RadioButtonBar",
	  "RadioButtonBox",
	  "RadioButtonBoxOptions",
	  "Radon",
	  "RadonTransform",
	  "RamanujanTau",
	  "RamanujanTauL",
	  "RamanujanTauTheta",
	  "RamanujanTauZ",
	  "Ramp",
	  "Random",
	  "RandomArrayLayer",
	  "RandomChoice",
	  "RandomColor",
	  "RandomComplex",
	  "RandomDate",
	  "RandomEntity",
	  "RandomFunction",
	  "RandomGeneratorState",
	  "RandomGeoPosition",
	  "RandomGraph",
	  "RandomImage",
	  "RandomInstance",
	  "RandomInteger",
	  "RandomPermutation",
	  "RandomPoint",
	  "RandomPointConfiguration",
	  "RandomPolygon",
	  "RandomPolyhedron",
	  "RandomPrime",
	  "RandomReal",
	  "RandomSample",
	  "RandomSeed",
	  "RandomSeeding",
	  "RandomTime",
	  "RandomTree",
	  "RandomVariate",
	  "RandomWalkProcess",
	  "RandomWord",
	  "Range",
	  "RangeFilter",
	  "RangeSpecification",
	  "RankedMax",
	  "RankedMin",
	  "RarerProbability",
	  "Raster",
	  "Raster3D",
	  "Raster3DBox",
	  "Raster3DBoxOptions",
	  "RasterArray",
	  "RasterBox",
	  "RasterBoxOptions",
	  "Rasterize",
	  "RasterSize",
	  "Rational",
	  "RationalExpressionQ",
	  "RationalFunctions",
	  "Rationalize",
	  "Rationals",
	  "Ratios",
	  "RawArray",
	  "RawBoxes",
	  "RawData",
	  "RawMedium",
	  "RayleighDistribution",
	  "Re",
	  "ReactionBalance",
	  "ReactionBalancedQ",
	  "ReactionPDETerm",
	  "Read",
	  "ReadByteArray",
	  "ReadLine",
	  "ReadList",
	  "ReadProtected",
	  "ReadString",
	  "Real",
	  "RealAbs",
	  "RealBlockDiagonalForm",
	  "RealDigits",
	  "RealExponent",
	  "Reals",
	  "RealSign",
	  "Reap",
	  "RebuildPacletData",
	  "RecalibrationFunction",
	  "RecognitionPrior",
	  "RecognitionThreshold",
	  "ReconstructionMesh",
	  "Record",
	  "RecordLists",
	  "RecordSeparators",
	  "Rectangle",
	  "RectangleBox",
	  "RectangleBoxOptions",
	  "RectangleChart",
	  "RectangleChart3D",
	  "RectangularRepeatingElement",
	  "RecurrenceFilter",
	  "RecurrenceTable",
	  "RecurringDigitsForm",
	  "Red",
	  "Reduce",
	  "RefBox",
	  "ReferenceLineStyle",
	  "ReferenceMarkers",
	  "ReferenceMarkerStyle",
	  "Refine",
	  "ReflectionMatrix",
	  "ReflectionTransform",
	  "Refresh",
	  "RefreshRate",
	  "Region",
	  "RegionBinarize",
	  "RegionBoundary",
	  "RegionBoundaryStyle",
	  "RegionBounds",
	  "RegionCentroid",
	  "RegionCongruent",
	  "RegionConvert",
	  "RegionDifference",
	  "RegionDilation",
	  "RegionDimension",
	  "RegionDisjoint",
	  "RegionDistance",
	  "RegionDistanceFunction",
	  "RegionEmbeddingDimension",
	  "RegionEqual",
	  "RegionErosion",
	  "RegionFillingStyle",
	  "RegionFit",
	  "RegionFunction",
	  "RegionImage",
	  "RegionIntersection",
	  "RegionMeasure",
	  "RegionMember",
	  "RegionMemberFunction",
	  "RegionMoment",
	  "RegionNearest",
	  "RegionNearestFunction",
	  "RegionPlot",
	  "RegionPlot3D",
	  "RegionProduct",
	  "RegionQ",
	  "RegionResize",
	  "RegionSimilar",
	  "RegionSize",
	  "RegionSymmetricDifference",
	  "RegionUnion",
	  "RegionWithin",
	  "RegisterExternalEvaluator",
	  "RegularExpression",
	  "Regularization",
	  "RegularlySampledQ",
	  "RegularPolygon",
	  "ReIm",
	  "ReImLabels",
	  "ReImPlot",
	  "ReImStyle",
	  "Reinstall",
	  "RelationalDatabase",
	  "RelationGraph",
	  "Release",
	  "ReleaseHold",
	  "ReliabilityDistribution",
	  "ReliefImage",
	  "ReliefPlot",
	  "RemoteAuthorizationCaching",
	  "RemoteBatchJobAbort",
	  "RemoteBatchJobObject",
	  "RemoteBatchJobs",
	  "RemoteBatchMapSubmit",
	  "RemoteBatchSubmissionEnvironment",
	  "RemoteBatchSubmit",
	  "RemoteConnect",
	  "RemoteConnectionObject",
	  "RemoteEvaluate",
	  "RemoteFile",
	  "RemoteInputFiles",
	  "RemoteKernelObject",
	  "RemoteProviderSettings",
	  "RemoteRun",
	  "RemoteRunProcess",
	  "RemovalConditions",
	  "Remove",
	  "RemoveAlphaChannel",
	  "RemoveAsynchronousTask",
	  "RemoveAudioStream",
	  "RemoveBackground",
	  "RemoveChannelListener",
	  "RemoveChannelSubscribers",
	  "Removed",
	  "RemoveDiacritics",
	  "RemoveInputStreamMethod",
	  "RemoveOutputStreamMethod",
	  "RemoveProperty",
	  "RemoveScheduledTask",
	  "RemoveUsers",
	  "RemoveVideoStream",
	  "RenameDirectory",
	  "RenameFile",
	  "RenderAll",
	  "RenderingOptions",
	  "RenewalProcess",
	  "RenkoChart",
	  "RepairMesh",
	  "Repeated",
	  "RepeatedNull",
	  "RepeatedString",
	  "RepeatedTiming",
	  "RepeatingElement",
	  "Replace",
	  "ReplaceAll",
	  "ReplaceAt",
	  "ReplaceHeldPart",
	  "ReplaceImageValue",
	  "ReplaceList",
	  "ReplacePart",
	  "ReplacePixelValue",
	  "ReplaceRepeated",
	  "ReplicateLayer",
	  "RequiredPhysicalQuantities",
	  "Resampling",
	  "ResamplingAlgorithmData",
	  "ResamplingMethod",
	  "Rescale",
	  "RescalingTransform",
	  "ResetDirectory",
	  "ResetScheduledTask",
	  "ReshapeLayer",
	  "Residue",
	  "ResidueSum",
	  "ResizeLayer",
	  "Resolve",
	  "ResolveContextAliases",
	  "ResourceAcquire",
	  "ResourceData",
	  "ResourceFunction",
	  "ResourceObject",
	  "ResourceRegister",
	  "ResourceRemove",
	  "ResourceSearch",
	  "ResourceSubmissionObject",
	  "ResourceSubmit",
	  "ResourceSystemBase",
	  "ResourceSystemPath",
	  "ResourceUpdate",
	  "ResourceVersion",
	  "ResponseForm",
	  "Rest",
	  "RestartInterval",
	  "Restricted",
	  "Resultant",
	  "ResumePacket",
	  "Return",
	  "ReturnCreatesNewCell",
	  "ReturnEntersInput",
	  "ReturnExpressionPacket",
	  "ReturnInputFormPacket",
	  "ReturnPacket",
	  "ReturnReceiptFunction",
	  "ReturnTextPacket",
	  "Reverse",
	  "ReverseApplied",
	  "ReverseBiorthogonalSplineWavelet",
	  "ReverseElement",
	  "ReverseEquilibrium",
	  "ReverseGraph",
	  "ReverseSort",
	  "ReverseSortBy",
	  "ReverseUpEquilibrium",
	  "RevolutionAxis",
	  "RevolutionPlot3D",
	  "RGBColor",
	  "RiccatiSolve",
	  "RiceDistribution",
	  "RidgeFilter",
	  "RiemannR",
	  "RiemannSiegelTheta",
	  "RiemannSiegelZ",
	  "RiemannXi",
	  "Riffle",
	  "Right",
	  "RightArrow",
	  "RightArrowBar",
	  "RightArrowLeftArrow",
	  "RightComposition",
	  "RightCosetRepresentative",
	  "RightDownTeeVector",
	  "RightDownVector",
	  "RightDownVectorBar",
	  "RightTee",
	  "RightTeeArrow",
	  "RightTeeVector",
	  "RightTriangle",
	  "RightTriangleBar",
	  "RightTriangleEqual",
	  "RightUpDownVector",
	  "RightUpTeeVector",
	  "RightUpVector",
	  "RightUpVectorBar",
	  "RightVector",
	  "RightVectorBar",
	  "RipleyK",
	  "RipleyRassonRegion",
	  "RiskAchievementImportance",
	  "RiskReductionImportance",
	  "RobustConvexOptimization",
	  "RogersTanimotoDissimilarity",
	  "RollPitchYawAngles",
	  "RollPitchYawMatrix",
	  "RomanNumeral",
	  "Root",
	  "RootApproximant",
	  "RootIntervals",
	  "RootLocusPlot",
	  "RootMeanSquare",
	  "RootOfUnityQ",
	  "RootReduce",
	  "Roots",
	  "RootSum",
	  "RootTree",
	  "Rotate",
	  "RotateLabel",
	  "RotateLeft",
	  "RotateRight",
	  "RotationAction",
	  "RotationBox",
	  "RotationBoxOptions",
	  "RotationMatrix",
	  "RotationTransform",
	  "Round",
	  "RoundImplies",
	  "RoundingRadius",
	  "Row",
	  "RowAlignments",
	  "RowBackgrounds",
	  "RowBox",
	  "RowHeights",
	  "RowLines",
	  "RowMinHeight",
	  "RowReduce",
	  "RowsEqual",
	  "RowSpacings",
	  "RSolve",
	  "RSolveValue",
	  "RudinShapiro",
	  "RudvalisGroupRu",
	  "Rule",
	  "RuleCondition",
	  "RuleDelayed",
	  "RuleForm",
	  "RulePlot",
	  "RulerUnits",
	  "RulesTree",
	  "Run",
	  "RunProcess",
	  "RunScheduledTask",
	  "RunThrough",
	  "RuntimeAttributes",
	  "RuntimeOptions",
	  "RussellRaoDissimilarity",
	  "SameAs",
	  "SameQ",
	  "SameTest",
	  "SameTestProperties",
	  "SampledEntityClass",
	  "SampleDepth",
	  "SampledSoundFunction",
	  "SampledSoundList",
	  "SampleRate",
	  "SamplingPeriod",
	  "SARIMAProcess",
	  "SARMAProcess",
	  "SASTriangle",
	  "SatelliteData",
	  "SatisfiabilityCount",
	  "SatisfiabilityInstances",
	  "SatisfiableQ",
	  "Saturday",
	  "Save",
	  "Saveable",
	  "SaveAutoDelete",
	  "SaveConnection",
	  "SaveDefinitions",
	  "SavitzkyGolayMatrix",
	  "SawtoothWave",
	  "Scale",
	  "Scaled",
	  "ScaleDivisions",
	  "ScaledMousePosition",
	  "ScaleOrigin",
	  "ScalePadding",
	  "ScaleRanges",
	  "ScaleRangeStyle",
	  "ScalingFunctions",
	  "ScalingMatrix",
	  "ScalingTransform",
	  "Scan",
	  "ScheduledTask",
	  "ScheduledTaskActiveQ",
	  "ScheduledTaskInformation",
	  "ScheduledTaskInformationData",
	  "ScheduledTaskObject",
	  "ScheduledTasks",
	  "SchurDecomposition",
	  "ScientificForm",
	  "ScientificNotationThreshold",
	  "ScorerGi",
	  "ScorerGiPrime",
	  "ScorerHi",
	  "ScorerHiPrime",
	  "ScreenRectangle",
	  "ScreenStyleEnvironment",
	  "ScriptBaselineShifts",
	  "ScriptForm",
	  "ScriptLevel",
	  "ScriptMinSize",
	  "ScriptRules",
	  "ScriptSizeMultipliers",
	  "Scrollbars",
	  "ScrollingOptions",
	  "ScrollPosition",
	  "SearchAdjustment",
	  "SearchIndexObject",
	  "SearchIndices",
	  "SearchQueryString",
	  "SearchResultObject",
	  "Sec",
	  "Sech",
	  "SechDistribution",
	  "SecondOrderConeOptimization",
	  "SectionGrouping",
	  "SectorChart",
	  "SectorChart3D",
	  "SectorOrigin",
	  "SectorSpacing",
	  "SecuredAuthenticationKey",
	  "SecuredAuthenticationKeys",
	  "SecurityCertificate",
	  "SeedRandom",
	  "Select",
	  "Selectable",
	  "SelectComponents",
	  "SelectedCells",
	  "SelectedNotebook",
	  "SelectFirst",
	  "Selection",
	  "SelectionAnimate",
	  "SelectionCell",
	  "SelectionCellCreateCell",
	  "SelectionCellDefaultStyle",
	  "SelectionCellParentStyle",
	  "SelectionCreateCell",
	  "SelectionDebuggerTag",
	  "SelectionEvaluate",
	  "SelectionEvaluateCreateCell",
	  "SelectionMove",
	  "SelectionPlaceholder",
	  "SelectWithContents",
	  "SelfLoops",
	  "SelfLoopStyle",
	  "SemanticImport",
	  "SemanticImportString",
	  "SemanticInterpretation",
	  "SemialgebraicComponentInstances",
	  "SemidefiniteOptimization",
	  "SendMail",
	  "SendMessage",
	  "Sequence",
	  "SequenceAlignment",
	  "SequenceAttentionLayer",
	  "SequenceCases",
	  "SequenceCount",
	  "SequenceFold",
	  "SequenceFoldList",
	  "SequenceForm",
	  "SequenceHold",
	  "SequenceIndicesLayer",
	  "SequenceLastLayer",
	  "SequenceMostLayer",
	  "SequencePosition",
	  "SequencePredict",
	  "SequencePredictorFunction",
	  "SequenceReplace",
	  "SequenceRestLayer",
	  "SequenceReverseLayer",
	  "SequenceSplit",
	  "Series",
	  "SeriesCoefficient",
	  "SeriesData",
	  "SeriesTermGoal",
	  "ServiceConnect",
	  "ServiceDisconnect",
	  "ServiceExecute",
	  "ServiceObject",
	  "ServiceRequest",
	  "ServiceResponse",
	  "ServiceSubmit",
	  "SessionSubmit",
	  "SessionTime",
	  "Set",
	  "SetAccuracy",
	  "SetAlphaChannel",
	  "SetAttributes",
	  "Setbacks",
	  "SetCloudDirectory",
	  "SetCookies",
	  "SetDelayed",
	  "SetDirectory",
	  "SetEnvironment",
	  "SetFileDate",
	  "SetFileFormatProperties",
	  "SetOptions",
	  "SetOptionsPacket",
	  "SetPermissions",
	  "SetPrecision",
	  "SetProperty",
	  "SetSecuredAuthenticationKey",
	  "SetSelectedNotebook",
	  "SetSharedFunction",
	  "SetSharedVariable",
	  "SetStreamPosition",
	  "SetSystemModel",
	  "SetSystemOptions",
	  "Setter",
	  "SetterBar",
	  "SetterBox",
	  "SetterBoxOptions",
	  "Setting",
	  "SetUsers",
	  "Shading",
	  "Shallow",
	  "ShannonWavelet",
	  "ShapiroWilkTest",
	  "Share",
	  "SharingList",
	  "Sharpen",
	  "ShearingMatrix",
	  "ShearingTransform",
	  "ShellRegion",
	  "ShenCastanMatrix",
	  "ShiftedGompertzDistribution",
	  "ShiftRegisterSequence",
	  "Short",
	  "ShortDownArrow",
	  "Shortest",
	  "ShortestMatch",
	  "ShortestPathFunction",
	  "ShortLeftArrow",
	  "ShortRightArrow",
	  "ShortTimeFourier",
	  "ShortTimeFourierData",
	  "ShortUpArrow",
	  "Show",
	  "ShowAutoConvert",
	  "ShowAutoSpellCheck",
	  "ShowAutoStyles",
	  "ShowCellBracket",
	  "ShowCellLabel",
	  "ShowCellTags",
	  "ShowClosedCellArea",
	  "ShowCodeAssist",
	  "ShowContents",
	  "ShowControls",
	  "ShowCursorTracker",
	  "ShowGroupOpenCloseIcon",
	  "ShowGroupOpener",
	  "ShowInvisibleCharacters",
	  "ShowPageBreaks",
	  "ShowPredictiveInterface",
	  "ShowSelection",
	  "ShowShortBoxForm",
	  "ShowSpecialCharacters",
	  "ShowStringCharacters",
	  "ShowSyntaxStyles",
	  "ShrinkingDelay",
	  "ShrinkWrapBoundingBox",
	  "SiderealTime",
	  "SiegelTheta",
	  "SiegelTukeyTest",
	  "SierpinskiCurve",
	  "SierpinskiMesh",
	  "Sign",
	  "Signature",
	  "SignedRankTest",
	  "SignedRegionDistance",
	  "SignificanceLevel",
	  "SignPadding",
	  "SignTest",
	  "SimilarityRules",
	  "SimpleGraph",
	  "SimpleGraphQ",
	  "SimplePolygonQ",
	  "SimplePolyhedronQ",
	  "Simplex",
	  "Simplify",
	  "Sin",
	  "Sinc",
	  "SinghMaddalaDistribution",
	  "SingleEvaluation",
	  "SingleLetterItalics",
	  "SingleLetterStyle",
	  "SingularValueDecomposition",
	  "SingularValueList",
	  "SingularValuePlot",
	  "SingularValues",
	  "Sinh",
	  "SinhIntegral",
	  "SinIntegral",
	  "SixJSymbol",
	  "Skeleton",
	  "SkeletonTransform",
	  "SkellamDistribution",
	  "Skewness",
	  "SkewNormalDistribution",
	  "SkinStyle",
	  "Skip",
	  "SliceContourPlot3D",
	  "SliceDensityPlot3D",
	  "SliceDistribution",
	  "SliceVectorPlot3D",
	  "Slider",
	  "Slider2D",
	  "Slider2DBox",
	  "Slider2DBoxOptions",
	  "SliderBox",
	  "SliderBoxOptions",
	  "SlideShowVideo",
	  "SlideView",
	  "Slot",
	  "SlotSequence",
	  "Small",
	  "SmallCircle",
	  "Smaller",
	  "SmithDecomposition",
	  "SmithDelayCompensator",
	  "SmithWatermanSimilarity",
	  "SmoothDensityHistogram",
	  "SmoothHistogram",
	  "SmoothHistogram3D",
	  "SmoothKernelDistribution",
	  "SmoothPointDensity",
	  "SnDispersion",
	  "Snippet",
	  "SnippetsVideo",
	  "SnubPolyhedron",
	  "SocialMediaData",
	  "Socket",
	  "SocketConnect",
	  "SocketListen",
	  "SocketListener",
	  "SocketObject",
	  "SocketOpen",
	  "SocketReadMessage",
	  "SocketReadyQ",
	  "Sockets",
	  "SocketWaitAll",
	  "SocketWaitNext",
	  "SoftmaxLayer",
	  "SokalSneathDissimilarity",
	  "SolarEclipse",
	  "SolarSystemFeatureData",
	  "SolarTime",
	  "SolidAngle",
	  "SolidBoundaryLoadValue",
	  "SolidData",
	  "SolidDisplacementCondition",
	  "SolidFixedCondition",
	  "SolidMechanicsPDEComponent",
	  "SolidMechanicsStrain",
	  "SolidMechanicsStress",
	  "SolidRegionQ",
	  "Solve",
	  "SolveAlways",
	  "SolveDelayed",
	  "SolveValues",
	  "Sort",
	  "SortBy",
	  "SortedBy",
	  "SortedEntityClass",
	  "Sound",
	  "SoundAndGraphics",
	  "SoundNote",
	  "SoundVolume",
	  "SourceLink",
	  "SourcePDETerm",
	  "Sow",
	  "Space",
	  "SpaceCurveData",
	  "SpaceForm",
	  "Spacer",
	  "Spacings",
	  "Span",
	  "SpanAdjustments",
	  "SpanCharacterRounding",
	  "SpanFromAbove",
	  "SpanFromBoth",
	  "SpanFromLeft",
	  "SpanLineThickness",
	  "SpanMaxSize",
	  "SpanMinSize",
	  "SpanningCharacters",
	  "SpanSymmetric",
	  "SparseArray",
	  "SparseArrayQ",
	  "SpatialBinnedPointData",
	  "SpatialBoundaryCorrection",
	  "SpatialEstimate",
	  "SpatialEstimatorFunction",
	  "SpatialGraphDistribution",
	  "SpatialJ",
	  "SpatialMedian",
	  "SpatialNoiseLevel",
	  "SpatialObservationRegionQ",
	  "SpatialPointData",
	  "SpatialPointSelect",
	  "SpatialRandomnessTest",
	  "SpatialTransformationLayer",
	  "SpatialTrendFunction",
	  "Speak",
	  "SpeakerMatchQ",
	  "SpearmanRankTest",
	  "SpearmanRho",
	  "SpeciesData",
	  "SpecificityGoal",
	  "SpectralLineData",
	  "Spectrogram",
	  "SpectrogramArray",
	  "Specularity",
	  "SpeechCases",
	  "SpeechInterpreter",
	  "SpeechRecognize",
	  "SpeechSynthesize",
	  "SpellingCorrection",
	  "SpellingCorrectionList",
	  "SpellingDictionaries",
	  "SpellingDictionariesPath",
	  "SpellingOptions",
	  "Sphere",
	  "SphereBox",
	  "SphereBoxOptions",
	  "SpherePoints",
	  "SphericalBesselJ",
	  "SphericalBesselY",
	  "SphericalHankelH1",
	  "SphericalHankelH2",
	  "SphericalHarmonicY",
	  "SphericalPlot3D",
	  "SphericalRegion",
	  "SphericalShell",
	  "SpheroidalEigenvalue",
	  "SpheroidalJoiningFactor",
	  "SpheroidalPS",
	  "SpheroidalPSPrime",
	  "SpheroidalQS",
	  "SpheroidalQSPrime",
	  "SpheroidalRadialFactor",
	  "SpheroidalS1",
	  "SpheroidalS1Prime",
	  "SpheroidalS2",
	  "SpheroidalS2Prime",
	  "Splice",
	  "SplicedDistribution",
	  "SplineClosed",
	  "SplineDegree",
	  "SplineKnots",
	  "SplineWeights",
	  "Split",
	  "SplitBy",
	  "SpokenString",
	  "SpotLight",
	  "Sqrt",
	  "SqrtBox",
	  "SqrtBoxOptions",
	  "Square",
	  "SquaredEuclideanDistance",
	  "SquareFreeQ",
	  "SquareIntersection",
	  "SquareMatrixQ",
	  "SquareRepeatingElement",
	  "SquaresR",
	  "SquareSubset",
	  "SquareSubsetEqual",
	  "SquareSuperset",
	  "SquareSupersetEqual",
	  "SquareUnion",
	  "SquareWave",
	  "SSSTriangle",
	  "StabilityMargins",
	  "StabilityMarginsStyle",
	  "StableDistribution",
	  "Stack",
	  "StackBegin",
	  "StackComplete",
	  "StackedDateListPlot",
	  "StackedListPlot",
	  "StackInhibit",
	  "StadiumShape",
	  "StandardAtmosphereData",
	  "StandardDeviation",
	  "StandardDeviationFilter",
	  "StandardForm",
	  "Standardize",
	  "Standardized",
	  "StandardOceanData",
	  "StandbyDistribution",
	  "Star",
	  "StarClusterData",
	  "StarData",
	  "StarGraph",
	  "StartAsynchronousTask",
	  "StartExternalSession",
	  "StartingStepSize",
	  "StartOfLine",
	  "StartOfString",
	  "StartProcess",
	  "StartScheduledTask",
	  "StartupSound",
	  "StartWebSession",
	  "StateDimensions",
	  "StateFeedbackGains",
	  "StateOutputEstimator",
	  "StateResponse",
	  "StateSpaceModel",
	  "StateSpaceRealization",
	  "StateSpaceTransform",
	  "StateTransformationLinearize",
	  "StationaryDistribution",
	  "StationaryWaveletPacketTransform",
	  "StationaryWaveletTransform",
	  "StatusArea",
	  "StatusCentrality",
	  "StepMonitor",
	  "StereochemistryElements",
	  "StieltjesGamma",
	  "StippleShading",
	  "StirlingS1",
	  "StirlingS2",
	  "StopAsynchronousTask",
	  "StoppingPowerData",
	  "StopScheduledTask",
	  "StrataVariables",
	  "StratonovichProcess",
	  "StraussHardcorePointProcess",
	  "StraussPointProcess",
	  "StreamColorFunction",
	  "StreamColorFunctionScaling",
	  "StreamDensityPlot",
	  "StreamMarkers",
	  "StreamPlot",
	  "StreamPlot3D",
	  "StreamPoints",
	  "StreamPosition",
	  "Streams",
	  "StreamScale",
	  "StreamStyle",
	  "StrictInequalities",
	  "String",
	  "StringBreak",
	  "StringByteCount",
	  "StringCases",
	  "StringContainsQ",
	  "StringCount",
	  "StringDelete",
	  "StringDrop",
	  "StringEndsQ",
	  "StringExpression",
	  "StringExtract",
	  "StringForm",
	  "StringFormat",
	  "StringFormatQ",
	  "StringFreeQ",
	  "StringInsert",
	  "StringJoin",
	  "StringLength",
	  "StringMatchQ",
	  "StringPadLeft",
	  "StringPadRight",
	  "StringPart",
	  "StringPartition",
	  "StringPosition",
	  "StringQ",
	  "StringRepeat",
	  "StringReplace",
	  "StringReplaceList",
	  "StringReplacePart",
	  "StringReverse",
	  "StringRiffle",
	  "StringRotateLeft",
	  "StringRotateRight",
	  "StringSkeleton",
	  "StringSplit",
	  "StringStartsQ",
	  "StringTake",
	  "StringTakeDrop",
	  "StringTemplate",
	  "StringToByteArray",
	  "StringToStream",
	  "StringTrim",
	  "StripBoxes",
	  "StripOnInput",
	  "StripStyleOnPaste",
	  "StripWrapperBoxes",
	  "StrokeForm",
	  "Struckthrough",
	  "StructuralImportance",
	  "StructuredArray",
	  "StructuredArrayHeadQ",
	  "StructuredSelection",
	  "StruveH",
	  "StruveL",
	  "Stub",
	  "StudentTDistribution",
	  "Style",
	  "StyleBox",
	  "StyleBoxAutoDelete",
	  "StyleData",
	  "StyleDefinitions",
	  "StyleForm",
	  "StyleHints",
	  "StyleKeyMapping",
	  "StyleMenuListing",
	  "StyleNameDialogSettings",
	  "StyleNames",
	  "StylePrint",
	  "StyleSheetPath",
	  "Subdivide",
	  "Subfactorial",
	  "Subgraph",
	  "SubMinus",
	  "SubPlus",
	  "SubresultantPolynomialRemainders",
	  "SubresultantPolynomials",
	  "Subresultants",
	  "Subscript",
	  "SubscriptBox",
	  "SubscriptBoxOptions",
	  "Subscripted",
	  "Subsequences",
	  "Subset",
	  "SubsetCases",
	  "SubsetCount",
	  "SubsetEqual",
	  "SubsetMap",
	  "SubsetPosition",
	  "SubsetQ",
	  "SubsetReplace",
	  "Subsets",
	  "SubStar",
	  "SubstitutionSystem",
	  "Subsuperscript",
	  "SubsuperscriptBox",
	  "SubsuperscriptBoxOptions",
	  "SubtitleEncoding",
	  "SubtitleTrackSelection",
	  "Subtract",
	  "SubtractFrom",
	  "SubtractSides",
	  "SubValues",
	  "Succeeds",
	  "SucceedsEqual",
	  "SucceedsSlantEqual",
	  "SucceedsTilde",
	  "Success",
	  "SuchThat",
	  "Sum",
	  "SumConvergence",
	  "SummationLayer",
	  "Sunday",
	  "SunPosition",
	  "Sunrise",
	  "Sunset",
	  "SuperDagger",
	  "SuperMinus",
	  "SupernovaData",
	  "SuperPlus",
	  "Superscript",
	  "SuperscriptBox",
	  "SuperscriptBoxOptions",
	  "Superset",
	  "SupersetEqual",
	  "SuperStar",
	  "Surd",
	  "SurdForm",
	  "SurfaceAppearance",
	  "SurfaceArea",
	  "SurfaceColor",
	  "SurfaceData",
	  "SurfaceGraphics",
	  "SurvivalDistribution",
	  "SurvivalFunction",
	  "SurvivalModel",
	  "SurvivalModelFit",
	  "SuspendPacket",
	  "SuzukiDistribution",
	  "SuzukiGroupSuz",
	  "SwatchLegend",
	  "Switch",
	  "Symbol",
	  "SymbolName",
	  "SymletWavelet",
	  "Symmetric",
	  "SymmetricDifference",
	  "SymmetricGroup",
	  "SymmetricKey",
	  "SymmetricMatrixQ",
	  "SymmetricPolynomial",
	  "SymmetricReduction",
	  "Symmetrize",
	  "SymmetrizedArray",
	  "SymmetrizedArrayRules",
	  "SymmetrizedDependentComponents",
	  "SymmetrizedIndependentComponents",
	  "SymmetrizedReplacePart",
	  "SynchronousInitialization",
	  "SynchronousUpdating",
	  "Synonyms",
	  "Syntax",
	  "SyntaxForm",
	  "SyntaxInformation",
	  "SyntaxLength",
	  "SyntaxPacket",
	  "SyntaxQ",
	  "SynthesizeMissingValues",
	  "SystemCredential",
	  "SystemCredentialData",
	  "SystemCredentialKey",
	  "SystemCredentialKeys",
	  "SystemCredentialStoreObject",
	  "SystemDialogInput",
	  "SystemException",
	  "SystemGet",
	  "SystemHelpPath",
	  "SystemInformation",
	  "SystemInformationData",
	  "SystemInstall",
	  "SystemModel",
	  "SystemModeler",
	  "SystemModelExamples",
	  "SystemModelLinearize",
	  "SystemModelMeasurements",
	  "SystemModelParametricSimulate",
	  "SystemModelPlot",
	  "SystemModelProgressReporting",
	  "SystemModelReliability",
	  "SystemModels",
	  "SystemModelSimulate",
	  "SystemModelSimulateSensitivity",
	  "SystemModelSimulationData",
	  "SystemOpen",
	  "SystemOptions",
	  "SystemProcessData",
	  "SystemProcesses",
	  "SystemsConnectionsModel",
	  "SystemsModelControllerData",
	  "SystemsModelDelay",
	  "SystemsModelDelayApproximate",
	  "SystemsModelDelete",
	  "SystemsModelDimensions",
	  "SystemsModelExtract",
	  "SystemsModelFeedbackConnect",
	  "SystemsModelLabels",
	  "SystemsModelLinearity",
	  "SystemsModelMerge",
	  "SystemsModelOrder",
	  "SystemsModelParallelConnect",
	  "SystemsModelSeriesConnect",
	  "SystemsModelStateFeedbackConnect",
	  "SystemsModelVectorRelativeOrders",
	  "SystemStub",
	  "SystemTest",
	  "Tab",
	  "TabFilling",
	  "Table",
	  "TableAlignments",
	  "TableDepth",
	  "TableDirections",
	  "TableForm",
	  "TableHeadings",
	  "TableSpacing",
	  "TableView",
	  "TableViewBox",
	  "TableViewBoxAlignment",
	  "TableViewBoxBackground",
	  "TableViewBoxHeaders",
	  "TableViewBoxItemSize",
	  "TableViewBoxItemStyle",
	  "TableViewBoxOptions",
	  "TabSpacings",
	  "TabView",
	  "TabViewBox",
	  "TabViewBoxOptions",
	  "TagBox",
	  "TagBoxNote",
	  "TagBoxOptions",
	  "TaggingRules",
	  "TagSet",
	  "TagSetDelayed",
	  "TagStyle",
	  "TagUnset",
	  "Take",
	  "TakeDrop",
	  "TakeLargest",
	  "TakeLargestBy",
	  "TakeList",
	  "TakeSmallest",
	  "TakeSmallestBy",
	  "TakeWhile",
	  "Tally",
	  "Tan",
	  "Tanh",
	  "TargetDevice",
	  "TargetFunctions",
	  "TargetSystem",
	  "TargetUnits",
	  "TaskAbort",
	  "TaskExecute",
	  "TaskObject",
	  "TaskRemove",
	  "TaskResume",
	  "Tasks",
	  "TaskSuspend",
	  "TaskWait",
	  "TautologyQ",
	  "TelegraphProcess",
	  "TemplateApply",
	  "TemplateArgBox",
	  "TemplateBox",
	  "TemplateBoxOptions",
	  "TemplateEvaluate",
	  "TemplateExpression",
	  "TemplateIf",
	  "TemplateObject",
	  "TemplateSequence",
	  "TemplateSlot",
	  "TemplateSlotSequence",
	  "TemplateUnevaluated",
	  "TemplateVerbatim",
	  "TemplateWith",
	  "TemporalData",
	  "TemporalRegularity",
	  "Temporary",
	  "TemporaryVariable",
	  "TensorContract",
	  "TensorDimensions",
	  "TensorExpand",
	  "TensorProduct",
	  "TensorQ",
	  "TensorRank",
	  "TensorReduce",
	  "TensorSymmetry",
	  "TensorTranspose",
	  "TensorWedge",
	  "TerminatedEvaluation",
	  "TernaryListPlot",
	  "TernaryPlotCorners",
	  "TestID",
	  "TestReport",
	  "TestReportObject",
	  "TestResultObject",
	  "Tetrahedron",
	  "TetrahedronBox",
	  "TetrahedronBoxOptions",
	  "TeXForm",
	  "TeXSave",
	  "Text",
	  "Text3DBox",
	  "Text3DBoxOptions",
	  "TextAlignment",
	  "TextBand",
	  "TextBoundingBox",
	  "TextBox",
	  "TextCases",
	  "TextCell",
	  "TextClipboardType",
	  "TextContents",
	  "TextData",
	  "TextElement",
	  "TextForm",
	  "TextGrid",
	  "TextJustification",
	  "TextLine",
	  "TextPacket",
	  "TextParagraph",
	  "TextPosition",
	  "TextRecognize",
	  "TextSearch",
	  "TextSearchReport",
	  "TextSentences",
	  "TextString",
	  "TextStructure",
	  "TextStyle",
	  "TextTranslation",
	  "Texture",
	  "TextureCoordinateFunction",
	  "TextureCoordinateScaling",
	  "TextWords",
	  "Therefore",
	  "ThermodynamicData",
	  "ThermometerGauge",
	  "Thick",
	  "Thickness",
	  "Thin",
	  "Thinning",
	  "ThisLink",
	  "ThomasPointProcess",
	  "ThompsonGroupTh",
	  "Thread",
	  "Threaded",
	  "ThreadingLayer",
	  "ThreeJSymbol",
	  "Threshold",
	  "Through",
	  "Throw",
	  "ThueMorse",
	  "Thumbnail",
	  "Thursday",
	  "TickDirection",
	  "TickLabelOrientation",
	  "TickLabelPositioning",
	  "TickLabels",
	  "TickLengths",
	  "TickPositions",
	  "Ticks",
	  "TicksStyle",
	  "TideData",
	  "Tilde",
	  "TildeEqual",
	  "TildeFullEqual",
	  "TildeTilde",
	  "TimeConstrained",
	  "TimeConstraint",
	  "TimeDirection",
	  "TimeFormat",
	  "TimeGoal",
	  "TimelinePlot",
	  "TimeObject",
	  "TimeObjectQ",
	  "TimeRemaining",
	  "Times",
	  "TimesBy",
	  "TimeSeries",
	  "TimeSeriesAggregate",
	  "TimeSeriesForecast",
	  "TimeSeriesInsert",
	  "TimeSeriesInvertibility",
	  "TimeSeriesMap",
	  "TimeSeriesMapThread",
	  "TimeSeriesModel",
	  "TimeSeriesModelFit",
	  "TimeSeriesResample",
	  "TimeSeriesRescale",
	  "TimeSeriesShift",
	  "TimeSeriesThread",
	  "TimeSeriesWindow",
	  "TimeSystem",
	  "TimeSystemConvert",
	  "TimeUsed",
	  "TimeValue",
	  "TimeWarpingCorrespondence",
	  "TimeWarpingDistance",
	  "TimeZone",
	  "TimeZoneConvert",
	  "TimeZoneOffset",
	  "Timing",
	  "Tiny",
	  "TitleGrouping",
	  "TitsGroupT",
	  "ToBoxes",
	  "ToCharacterCode",
	  "ToColor",
	  "ToContinuousTimeModel",
	  "ToDate",
	  "Today",
	  "ToDiscreteTimeModel",
	  "ToEntity",
	  "ToeplitzMatrix",
	  "ToExpression",
	  "ToFileName",
	  "Together",
	  "Toggle",
	  "ToggleFalse",
	  "Toggler",
	  "TogglerBar",
	  "TogglerBox",
	  "TogglerBoxOptions",
	  "ToHeldExpression",
	  "ToInvertibleTimeSeries",
	  "TokenWords",
	  "Tolerance",
	  "ToLowerCase",
	  "Tomorrow",
	  "ToNumberField",
	  "TooBig",
	  "Tooltip",
	  "TooltipBox",
	  "TooltipBoxOptions",
	  "TooltipDelay",
	  "TooltipStyle",
	  "ToonShading",
	  "Top",
	  "TopHatTransform",
	  "ToPolarCoordinates",
	  "TopologicalSort",
	  "ToRadicals",
	  "ToRawPointer",
	  "ToRules",
	  "Torus",
	  "TorusGraph",
	  "ToSphericalCoordinates",
	  "ToString",
	  "Total",
	  "TotalHeight",
	  "TotalLayer",
	  "TotalVariationFilter",
	  "TotalWidth",
	  "TouchPosition",
	  "TouchscreenAutoZoom",
	  "TouchscreenControlPlacement",
	  "ToUpperCase",
	  "TourVideo",
	  "Tr",
	  "Trace",
	  "TraceAbove",
	  "TraceAction",
	  "TraceBackward",
	  "TraceDepth",
	  "TraceDialog",
	  "TraceForward",
	  "TraceInternal",
	  "TraceLevel",
	  "TraceOff",
	  "TraceOn",
	  "TraceOriginal",
	  "TracePrint",
	  "TraceScan",
	  "TrackCellChangeTimes",
	  "TrackedSymbols",
	  "TrackingFunction",
	  "TracyWidomDistribution",
	  "TradingChart",
	  "TraditionalForm",
	  "TraditionalFunctionNotation",
	  "TraditionalNotation",
	  "TraditionalOrder",
	  "TrainImageContentDetector",
	  "TrainingProgressCheckpointing",
	  "TrainingProgressFunction",
	  "TrainingProgressMeasurements",
	  "TrainingProgressReporting",
	  "TrainingStoppingCriterion",
	  "TrainingUpdateSchedule",
	  "TrainTextContentDetector",
	  "TransferFunctionCancel",
	  "TransferFunctionExpand",
	  "TransferFunctionFactor",
	  "TransferFunctionModel",
	  "TransferFunctionPoles",
	  "TransferFunctionTransform",
	  "TransferFunctionZeros",
	  "TransformationClass",
	  "TransformationFunction",
	  "TransformationFunctions",
	  "TransformationMatrix",
	  "TransformedDistribution",
	  "TransformedField",
	  "TransformedProcess",
	  "TransformedRegion",
	  "TransitionDirection",
	  "TransitionDuration",
	  "TransitionEffect",
	  "TransitiveClosureGraph",
	  "TransitiveReductionGraph",
	  "Translate",
	  "TranslationOptions",
	  "TranslationTransform",
	  "Transliterate",
	  "Transparent",
	  "TransparentColor",
	  "Transpose",
	  "TransposeLayer",
	  "TrapEnterKey",
	  "TrapSelection",
	  "TravelDirections",
	  "TravelDirectionsData",
	  "TravelDistance",
	  "TravelDistanceList",
	  "TravelMethod",
	  "TravelTime",
	  "Tree",
	  "TreeCases",
	  "TreeChildren",
	  "TreeCount",
	  "TreeData",
	  "TreeDelete",
	  "TreeDepth",
	  "TreeElementCoordinates",
	  "TreeElementLabel",
	  "TreeElementLabelFunction",
	  "TreeElementLabelStyle",
	  "TreeElementShape",
	  "TreeElementShapeFunction",
	  "TreeElementSize",
	  "TreeElementSizeFunction",
	  "TreeElementStyle",
	  "TreeElementStyleFunction",
	  "TreeExpression",
	  "TreeExtract",
	  "TreeFold",
	  "TreeForm",
	  "TreeGraph",
	  "TreeGraphQ",
	  "TreeInsert",
	  "TreeLayout",
	  "TreeLeafCount",
	  "TreeLeafQ",
	  "TreeLeaves",
	  "TreeLevel",
	  "TreeMap",
	  "TreeMapAt",
	  "TreeOutline",
	  "TreePlot",
	  "TreePosition",
	  "TreeQ",
	  "TreeReplacePart",
	  "TreeRules",
	  "TreeScan",
	  "TreeSelect",
	  "TreeSize",
	  "TreeTraversalOrder",
	  "TrendStyle",
	  "Triangle",
	  "TriangleCenter",
	  "TriangleConstruct",
	  "TriangleMeasurement",
	  "TriangleWave",
	  "TriangularDistribution",
	  "TriangulateMesh",
	  "Trig",
	  "TrigExpand",
	  "TrigFactor",
	  "TrigFactorList",
	  "Trigger",
	  "TrigReduce",
	  "TrigToExp",
	  "TrimmedMean",
	  "TrimmedVariance",
	  "TropicalStormData",
	  "True",
	  "TrueQ",
	  "TruncatedDistribution",
	  "TruncatedPolyhedron",
	  "TsallisQExponentialDistribution",
	  "TsallisQGaussianDistribution",
	  "TTest",
	  "Tube",
	  "TubeBezierCurveBox",
	  "TubeBezierCurveBoxOptions",
	  "TubeBox",
	  "TubeBoxOptions",
	  "TubeBSplineCurveBox",
	  "TubeBSplineCurveBoxOptions",
	  "Tuesday",
	  "TukeyLambdaDistribution",
	  "TukeyWindow",
	  "TunnelData",
	  "Tuples",
	  "TuranGraph",
	  "TuringMachine",
	  "TuttePolynomial",
	  "TwoWayRule",
	  "Typed",
	  "TypeDeclaration",
	  "TypeEvaluate",
	  "TypeHint",
	  "TypeOf",
	  "TypeSpecifier",
	  "UnateQ",
	  "Uncompress",
	  "UnconstrainedParameters",
	  "Undefined",
	  "UnderBar",
	  "Underflow",
	  "Underlined",
	  "Underoverscript",
	  "UnderoverscriptBox",
	  "UnderoverscriptBoxOptions",
	  "Underscript",
	  "UnderscriptBox",
	  "UnderscriptBoxOptions",
	  "UnderseaFeatureData",
	  "UndirectedEdge",
	  "UndirectedGraph",
	  "UndirectedGraphQ",
	  "UndoOptions",
	  "UndoTrackedVariables",
	  "Unequal",
	  "UnequalTo",
	  "Unevaluated",
	  "UniformDistribution",
	  "UniformGraphDistribution",
	  "UniformPolyhedron",
	  "UniformSumDistribution",
	  "Uninstall",
	  "Union",
	  "UnionedEntityClass",
	  "UnionPlus",
	  "Unique",
	  "UniqueElements",
	  "UnitaryMatrixQ",
	  "UnitBox",
	  "UnitConvert",
	  "UnitDimensions",
	  "Unitize",
	  "UnitRootTest",
	  "UnitSimplify",
	  "UnitStep",
	  "UnitSystem",
	  "UnitTriangle",
	  "UnitVector",
	  "UnitVectorLayer",
	  "UnityDimensions",
	  "UniverseModelData",
	  "UniversityData",
	  "UnixTime",
	  "UnlabeledTree",
	  "UnmanageObject",
	  "Unprotect",
	  "UnregisterExternalEvaluator",
	  "UnsameQ",
	  "UnsavedVariables",
	  "Unset",
	  "UnsetShared",
	  "Until",
	  "UntrackedVariables",
	  "Up",
	  "UpArrow",
	  "UpArrowBar",
	  "UpArrowDownArrow",
	  "Update",
	  "UpdateDynamicObjects",
	  "UpdateDynamicObjectsSynchronous",
	  "UpdateInterval",
	  "UpdatePacletSites",
	  "UpdateSearchIndex",
	  "UpDownArrow",
	  "UpEquilibrium",
	  "UpperCaseQ",
	  "UpperLeftArrow",
	  "UpperRightArrow",
	  "UpperTriangularize",
	  "UpperTriangularMatrix",
	  "UpperTriangularMatrixQ",
	  "Upsample",
	  "UpSet",
	  "UpSetDelayed",
	  "UpTee",
	  "UpTeeArrow",
	  "UpTo",
	  "UpValues",
	  "URL",
	  "URLBuild",
	  "URLDecode",
	  "URLDispatcher",
	  "URLDownload",
	  "URLDownloadSubmit",
	  "URLEncode",
	  "URLExecute",
	  "URLExpand",
	  "URLFetch",
	  "URLFetchAsynchronous",
	  "URLParse",
	  "URLQueryDecode",
	  "URLQueryEncode",
	  "URLRead",
	  "URLResponseTime",
	  "URLSave",
	  "URLSaveAsynchronous",
	  "URLShorten",
	  "URLSubmit",
	  "UseEmbeddedLibrary",
	  "UseGraphicsRange",
	  "UserDefinedWavelet",
	  "Using",
	  "UsingFrontEnd",
	  "UtilityFunction",
	  "V2Get",
	  "ValenceErrorHandling",
	  "ValenceFilling",
	  "ValidationLength",
	  "ValidationSet",
	  "ValueBox",
	  "ValueBoxOptions",
	  "ValueDimensions",
	  "ValueForm",
	  "ValuePreprocessingFunction",
	  "ValueQ",
	  "Values",
	  "ValuesData",
	  "VandermondeMatrix",
	  "Variables",
	  "Variance",
	  "VarianceEquivalenceTest",
	  "VarianceEstimatorFunction",
	  "VarianceGammaDistribution",
	  "VarianceGammaPointProcess",
	  "VarianceTest",
	  "VariogramFunction",
	  "VariogramModel",
	  "VectorAngle",
	  "VectorAround",
	  "VectorAspectRatio",
	  "VectorColorFunction",
	  "VectorColorFunctionScaling",
	  "VectorDensityPlot",
	  "VectorDisplacementPlot",
	  "VectorDisplacementPlot3D",
	  "VectorGlyphData",
	  "VectorGreater",
	  "VectorGreaterEqual",
	  "VectorLess",
	  "VectorLessEqual",
	  "VectorMarkers",
	  "VectorPlot",
	  "VectorPlot3D",
	  "VectorPoints",
	  "VectorQ",
	  "VectorRange",
	  "Vectors",
	  "VectorScale",
	  "VectorScaling",
	  "VectorSizes",
	  "VectorStyle",
	  "Vee",
	  "Verbatim",
	  "Verbose",
	  "VerificationTest",
	  "VerifyConvergence",
	  "VerifyDerivedKey",
	  "VerifyDigitalSignature",
	  "VerifyFileSignature",
	  "VerifyInterpretation",
	  "VerifySecurityCertificates",
	  "VerifySolutions",
	  "VerifyTestAssumptions",
	  "VersionedPreferences",
	  "VertexAdd",
	  "VertexCapacity",
	  "VertexChromaticNumber",
	  "VertexColors",
	  "VertexComponent",
	  "VertexConnectivity",
	  "VertexContract",
	  "VertexCoordinateRules",
	  "VertexCoordinates",
	  "VertexCorrelationSimilarity",
	  "VertexCosineSimilarity",
	  "VertexCount",
	  "VertexCoverQ",
	  "VertexDataCoordinates",
	  "VertexDegree",
	  "VertexDelete",
	  "VertexDiceSimilarity",
	  "VertexEccentricity",
	  "VertexInComponent",
	  "VertexInComponentGraph",
	  "VertexInDegree",
	  "VertexIndex",
	  "VertexJaccardSimilarity",
	  "VertexLabeling",
	  "VertexLabels",
	  "VertexLabelStyle",
	  "VertexList",
	  "VertexNormals",
	  "VertexOutComponent",
	  "VertexOutComponentGraph",
	  "VertexOutDegree",
	  "VertexQ",
	  "VertexRenderingFunction",
	  "VertexReplace",
	  "VertexShape",
	  "VertexShapeFunction",
	  "VertexSize",
	  "VertexStyle",
	  "VertexTextureCoordinates",
	  "VertexTransitiveGraphQ",
	  "VertexWeight",
	  "VertexWeightedGraphQ",
	  "Vertical",
	  "VerticalBar",
	  "VerticalForm",
	  "VerticalGauge",
	  "VerticalSeparator",
	  "VerticalSlider",
	  "VerticalTilde",
	  "Video",
	  "VideoCapture",
	  "VideoCombine",
	  "VideoDelete",
	  "VideoEncoding",
	  "VideoExtractFrames",
	  "VideoFrameList",
	  "VideoFrameMap",
	  "VideoGenerator",
	  "VideoInsert",
	  "VideoIntervals",
	  "VideoJoin",
	  "VideoMap",
	  "VideoMapList",
	  "VideoMapTimeSeries",
	  "VideoPadding",
	  "VideoPause",
	  "VideoPlay",
	  "VideoQ",
	  "VideoRecord",
	  "VideoReplace",
	  "VideoScreenCapture",
	  "VideoSplit",
	  "VideoStop",
	  "VideoStream",
	  "VideoStreams",
	  "VideoTimeStretch",
	  "VideoTrackSelection",
	  "VideoTranscode",
	  "VideoTransparency",
	  "VideoTrim",
	  "ViewAngle",
	  "ViewCenter",
	  "ViewMatrix",
	  "ViewPoint",
	  "ViewPointSelectorSettings",
	  "ViewPort",
	  "ViewProjection",
	  "ViewRange",
	  "ViewVector",
	  "ViewVertical",
	  "VirtualGroupData",
	  "Visible",
	  "VisibleCell",
	  "VoiceStyleData",
	  "VoigtDistribution",
	  "VolcanoData",
	  "Volume",
	  "VonMisesDistribution",
	  "VoronoiMesh",
	  "WaitAll",
	  "WaitAsynchronousTask",
	  "WaitNext",
	  "WaitUntil",
	  "WakebyDistribution",
	  "WalleniusHypergeometricDistribution",
	  "WaringYuleDistribution",
	  "WarpingCorrespondence",
	  "WarpingDistance",
	  "WatershedComponents",
	  "WatsonUSquareTest",
	  "WattsStrogatzGraphDistribution",
	  "WaveletBestBasis",
	  "WaveletFilterCoefficients",
	  "WaveletImagePlot",
	  "WaveletListPlot",
	  "WaveletMapIndexed",
	  "WaveletMatrixPlot",
	  "WaveletPhi",
	  "WaveletPsi",
	  "WaveletScale",
	  "WaveletScalogram",
	  "WaveletThreshold",
	  "WavePDEComponent",
	  "WeaklyConnectedComponents",
	  "WeaklyConnectedGraphComponents",
	  "WeaklyConnectedGraphQ",
	  "WeakStationarity",
	  "WeatherData",
	  "WeatherForecastData",
	  "WebAudioSearch",
	  "WebColumn",
	  "WebElementObject",
	  "WeberE",
	  "WebExecute",
	  "WebImage",
	  "WebImageSearch",
	  "WebItem",
	  "WebPageMetaInformation",
	  "WebRow",
	  "WebSearch",
	  "WebSessionObject",
	  "WebSessions",
	  "WebWindowObject",
	  "Wedge",
	  "Wednesday",
	  "WeibullDistribution",
	  "WeierstrassE1",
	  "WeierstrassE2",
	  "WeierstrassE3",
	  "WeierstrassEta1",
	  "WeierstrassEta2",
	  "WeierstrassEta3",
	  "WeierstrassHalfPeriods",
	  "WeierstrassHalfPeriodW1",
	  "WeierstrassHalfPeriodW2",
	  "WeierstrassHalfPeriodW3",
	  "WeierstrassInvariantG2",
	  "WeierstrassInvariantG3",
	  "WeierstrassInvariants",
	  "WeierstrassP",
	  "WeierstrassPPrime",
	  "WeierstrassSigma",
	  "WeierstrassZeta",
	  "WeightedAdjacencyGraph",
	  "WeightedAdjacencyMatrix",
	  "WeightedData",
	  "WeightedGraphQ",
	  "Weights",
	  "WelchWindow",
	  "WheelGraph",
	  "WhenEvent",
	  "Which",
	  "While",
	  "White",
	  "WhiteNoiseProcess",
	  "WhitePoint",
	  "Whitespace",
	  "WhitespaceCharacter",
	  "WhittakerM",
	  "WhittakerW",
	  "WholeCellGroupOpener",
	  "WienerFilter",
	  "WienerProcess",
	  "WignerD",
	  "WignerSemicircleDistribution",
	  "WikidataData",
	  "WikidataSearch",
	  "WikipediaData",
	  "WikipediaSearch",
	  "WilksW",
	  "WilksWTest",
	  "WindDirectionData",
	  "WindingCount",
	  "WindingPolygon",
	  "WindowClickSelect",
	  "WindowElements",
	  "WindowFloating",
	  "WindowFrame",
	  "WindowFrameElements",
	  "WindowMargins",
	  "WindowMovable",
	  "WindowOpacity",
	  "WindowPersistentStyles",
	  "WindowSelected",
	  "WindowSize",
	  "WindowStatusArea",
	  "WindowTitle",
	  "WindowToolbars",
	  "WindowWidth",
	  "WindSpeedData",
	  "WindVectorData",
	  "WinsorizedMean",
	  "WinsorizedVariance",
	  "WishartMatrixDistribution",
	  "With",
	  "WithCleanup",
	  "WithLock",
	  "WolframAlpha",
	  "WolframAlphaDate",
	  "WolframAlphaQuantity",
	  "WolframAlphaResult",
	  "WolframCloudSettings",
	  "WolframLanguageData",
	  "Word",
	  "WordBoundary",
	  "WordCharacter",
	  "WordCloud",
	  "WordCount",
	  "WordCounts",
	  "WordData",
	  "WordDefinition",
	  "WordFrequency",
	  "WordFrequencyData",
	  "WordList",
	  "WordOrientation",
	  "WordSearch",
	  "WordSelectionFunction",
	  "WordSeparators",
	  "WordSpacings",
	  "WordStem",
	  "WordTranslation",
	  "WorkingPrecision",
	  "WrapAround",
	  "Write",
	  "WriteLine",
	  "WriteString",
	  "Wronskian",
	  "XMLElement",
	  "XMLObject",
	  "XMLTemplate",
	  "Xnor",
	  "Xor",
	  "XYZColor",
	  "Yellow",
	  "Yesterday",
	  "YuleDissimilarity",
	  "ZernikeR",
	  "ZeroSymmetric",
	  "ZeroTest",
	  "ZeroWidthTimes",
	  "Zeta",
	  "ZetaZero",
	  "ZIPCodeData",
	  "ZipfDistribution",
	  "ZoomCenter",
	  "ZoomFactor",
	  "ZTest",
	  "ZTransform",
	  "$Aborted",
	  "$ActivationGroupID",
	  "$ActivationKey",
	  "$ActivationUserRegistered",
	  "$AddOnsDirectory",
	  "$AllowDataUpdates",
	  "$AllowExternalChannelFunctions",
	  "$AllowInternet",
	  "$AssertFunction",
	  "$Assumptions",
	  "$AsynchronousTask",
	  "$AudioDecoders",
	  "$AudioEncoders",
	  "$AudioInputDevices",
	  "$AudioOutputDevices",
	  "$BaseDirectory",
	  "$BasePacletsDirectory",
	  "$BatchInput",
	  "$BatchOutput",
	  "$BlockchainBase",
	  "$BoxForms",
	  "$ByteOrdering",
	  "$CacheBaseDirectory",
	  "$Canceled",
	  "$ChannelBase",
	  "$CharacterEncoding",
	  "$CharacterEncodings",
	  "$CloudAccountName",
	  "$CloudBase",
	  "$CloudConnected",
	  "$CloudConnection",
	  "$CloudCreditsAvailable",
	  "$CloudEvaluation",
	  "$CloudExpressionBase",
	  "$CloudObjectNameFormat",
	  "$CloudObjectURLType",
	  "$CloudRootDirectory",
	  "$CloudSymbolBase",
	  "$CloudUserID",
	  "$CloudUserUUID",
	  "$CloudVersion",
	  "$CloudVersionNumber",
	  "$CloudWolframEngineVersionNumber",
	  "$CommandLine",
	  "$CompilationTarget",
	  "$CompilerEnvironment",
	  "$ConditionHold",
	  "$ConfiguredKernels",
	  "$Context",
	  "$ContextAliases",
	  "$ContextPath",
	  "$ControlActiveSetting",
	  "$Cookies",
	  "$CookieStore",
	  "$CreationDate",
	  "$CryptographicEllipticCurveNames",
	  "$CurrentLink",
	  "$CurrentTask",
	  "$CurrentWebSession",
	  "$DataStructures",
	  "$DateStringFormat",
	  "$DefaultAudioInputDevice",
	  "$DefaultAudioOutputDevice",
	  "$DefaultFont",
	  "$DefaultFrontEnd",
	  "$DefaultImagingDevice",
	  "$DefaultKernels",
	  "$DefaultLocalBase",
	  "$DefaultLocalKernel",
	  "$DefaultMailbox",
	  "$DefaultNetworkInterface",
	  "$DefaultPath",
	  "$DefaultProxyRules",
	  "$DefaultRemoteBatchSubmissionEnvironment",
	  "$DefaultRemoteKernel",
	  "$DefaultSystemCredentialStore",
	  "$Display",
	  "$DisplayFunction",
	  "$DistributedContexts",
	  "$DynamicEvaluation",
	  "$Echo",
	  "$EmbedCodeEnvironments",
	  "$EmbeddableServices",
	  "$EntityStores",
	  "$Epilog",
	  "$EvaluationCloudBase",
	  "$EvaluationCloudObject",
	  "$EvaluationEnvironment",
	  "$ExportFormats",
	  "$ExternalIdentifierTypes",
	  "$ExternalStorageBase",
	  "$Failed",
	  "$FinancialDataSource",
	  "$FontFamilies",
	  "$FormatType",
	  "$FrontEnd",
	  "$FrontEndSession",
	  "$GeneratedAssetLocation",
	  "$GeoEntityTypes",
	  "$GeoLocation",
	  "$GeoLocationCity",
	  "$GeoLocationCountry",
	  "$GeoLocationPrecision",
	  "$GeoLocationSource",
	  "$HistoryLength",
	  "$HomeDirectory",
	  "$HTMLExportRules",
	  "$HTTPCookies",
	  "$HTTPRequest",
	  "$IgnoreEOF",
	  "$ImageFormattingWidth",
	  "$ImageResolution",
	  "$ImagingDevice",
	  "$ImagingDevices",
	  "$ImportFormats",
	  "$IncomingMailSettings",
	  "$InitialDirectory",
	  "$Initialization",
	  "$InitializationContexts",
	  "$Input",
	  "$InputFileName",
	  "$InputStreamMethods",
	  "$Inspector",
	  "$InstallationDate",
	  "$InstallationDirectory",
	  "$InterfaceEnvironment",
	  "$InterpreterTypes",
	  "$IterationLimit",
	  "$KernelCount",
	  "$KernelID",
	  "$Language",
	  "$LaunchDirectory",
	  "$LibraryPath",
	  "$LicenseExpirationDate",
	  "$LicenseID",
	  "$LicenseProcesses",
	  "$LicenseServer",
	  "$LicenseSubprocesses",
	  "$LicenseType",
	  "$Line",
	  "$Linked",
	  "$LinkSupported",
	  "$LoadedFiles",
	  "$LocalBase",
	  "$LocalSymbolBase",
	  "$MachineAddresses",
	  "$MachineDomain",
	  "$MachineDomains",
	  "$MachineEpsilon",
	  "$MachineID",
	  "$MachineName",
	  "$MachinePrecision",
	  "$MachineType",
	  "$MaxDisplayedChildren",
	  "$MaxExtraPrecision",
	  "$MaxLicenseProcesses",
	  "$MaxLicenseSubprocesses",
	  "$MaxMachineNumber",
	  "$MaxNumber",
	  "$MaxPiecewiseCases",
	  "$MaxPrecision",
	  "$MaxRootDegree",
	  "$MessageGroups",
	  "$MessageList",
	  "$MessagePrePrint",
	  "$Messages",
	  "$MinMachineNumber",
	  "$MinNumber",
	  "$MinorReleaseNumber",
	  "$MinPrecision",
	  "$MobilePhone",
	  "$ModuleNumber",
	  "$NetworkConnected",
	  "$NetworkInterfaces",
	  "$NetworkLicense",
	  "$NewMessage",
	  "$NewSymbol",
	  "$NotebookInlineStorageLimit",
	  "$Notebooks",
	  "$NoValue",
	  "$NumberMarks",
	  "$Off",
	  "$OperatingSystem",
	  "$Output",
	  "$OutputForms",
	  "$OutputSizeLimit",
	  "$OutputStreamMethods",
	  "$Packages",
	  "$ParentLink",
	  "$ParentProcessID",
	  "$PasswordFile",
	  "$PatchLevelID",
	  "$Path",
	  "$PathnameSeparator",
	  "$PerformanceGoal",
	  "$Permissions",
	  "$PermissionsGroupBase",
	  "$PersistenceBase",
	  "$PersistencePath",
	  "$PipeSupported",
	  "$PlotTheme",
	  "$Post",
	  "$Pre",
	  "$PreferencesDirectory",
	  "$PreInitialization",
	  "$PrePrint",
	  "$PreRead",
	  "$PrintForms",
	  "$PrintLiteral",
	  "$Printout3DPreviewer",
	  "$ProcessID",
	  "$ProcessorCount",
	  "$ProcessorType",
	  "$ProductInformation",
	  "$ProgramName",
	  "$ProgressReporting",
	  "$PublisherID",
	  "$RandomGeneratorState",
	  "$RandomState",
	  "$RecursionLimit",
	  "$RegisteredDeviceClasses",
	  "$RegisteredUserName",
	  "$ReleaseNumber",
	  "$RequesterAddress",
	  "$RequesterCloudUserID",
	  "$RequesterCloudUserUUID",
	  "$RequesterWolframID",
	  "$RequesterWolframUUID",
	  "$ResourceSystemBase",
	  "$ResourceSystemPath",
	  "$RootDirectory",
	  "$ScheduledTask",
	  "$ScriptCommandLine",
	  "$ScriptInputString",
	  "$SecuredAuthenticationKeyTokens",
	  "$ServiceCreditsAvailable",
	  "$Services",
	  "$SessionID",
	  "$SetParentLink",
	  "$SharedFunctions",
	  "$SharedVariables",
	  "$SoundDisplay",
	  "$SoundDisplayFunction",
	  "$SourceLink",
	  "$SSHAuthentication",
	  "$SubtitleDecoders",
	  "$SubtitleEncoders",
	  "$SummaryBoxDataSizeLimit",
	  "$SuppressInputFormHeads",
	  "$SynchronousEvaluation",
	  "$SyntaxHandler",
	  "$System",
	  "$SystemCharacterEncoding",
	  "$SystemCredentialStore",
	  "$SystemID",
	  "$SystemMemory",
	  "$SystemShell",
	  "$SystemTimeZone",
	  "$SystemWordLength",
	  "$TargetSystems",
	  "$TemplatePath",
	  "$TemporaryDirectory",
	  "$TemporaryPrefix",
	  "$TestFileName",
	  "$TextStyle",
	  "$TimedOut",
	  "$TimeUnit",
	  "$TimeZone",
	  "$TimeZoneEntity",
	  "$TopDirectory",
	  "$TraceOff",
	  "$TraceOn",
	  "$TracePattern",
	  "$TracePostAction",
	  "$TracePreAction",
	  "$UnitSystem",
	  "$Urgent",
	  "$UserAddOnsDirectory",
	  "$UserAgentLanguages",
	  "$UserAgentMachine",
	  "$UserAgentName",
	  "$UserAgentOperatingSystem",
	  "$UserAgentString",
	  "$UserAgentVersion",
	  "$UserBaseDirectory",
	  "$UserBasePacletsDirectory",
	  "$UserDocumentsDirectory",
	  "$Username",
	  "$UserName",
	  "$UserURLBase",
	  "$Version",
	  "$VersionNumber",
	  "$VideoDecoders",
	  "$VideoEncoders",
	  "$VoiceStyles",
	  "$WolframDocumentsDirectory",
	  "$WolframID",
	  "$WolframUUID"
	];

	/*
	Language: Wolfram Language
	Description: The Wolfram Language is the programming language used in Wolfram Mathematica, a modern technical computing system spanning most areas of technical computing.
	Authors: Patrick Scheibe <patrick@halirutan.de>, Robert Jacobson <robertjacobson@acm.org>
	Website: https://www.wolfram.com/mathematica/
	Category: scientific
	*/


	/** @type LanguageFn */
	function mathematica(hljs) {
	  const regex = hljs.regex;
	  /*
	  This rather scary looking matching of Mathematica numbers is carefully explained by Robert Jacobson here:
	  https://wltools.github.io/LanguageSpec/Specification/Syntax/Number-representations/
	   */
	  const BASE_RE = /([2-9]|[1-2]\d|[3][0-5])\^\^/;
	  const BASE_DIGITS_RE = /(\w*\.\w+|\w+\.\w*|\w+)/;
	  const NUMBER_RE = /(\d*\.\d+|\d+\.\d*|\d+)/;
	  const BASE_NUMBER_RE = regex.either(regex.concat(BASE_RE, BASE_DIGITS_RE), NUMBER_RE);

	  const ACCURACY_RE = /``[+-]?(\d*\.\d+|\d+\.\d*|\d+)/;
	  const PRECISION_RE = /`([+-]?(\d*\.\d+|\d+\.\d*|\d+))?/;
	  const APPROXIMATE_NUMBER_RE = regex.either(ACCURACY_RE, PRECISION_RE);

	  const SCIENTIFIC_NOTATION_RE = /\*\^[+-]?\d+/;

	  const MATHEMATICA_NUMBER_RE = regex.concat(
	    BASE_NUMBER_RE,
	    regex.optional(APPROXIMATE_NUMBER_RE),
	    regex.optional(SCIENTIFIC_NOTATION_RE)
	  );

	  const NUMBERS = {
	    className: 'number',
	    relevance: 0,
	    begin: MATHEMATICA_NUMBER_RE
	  };

	  const SYMBOL_RE = /[a-zA-Z$][a-zA-Z0-9$]*/;
	  const SYSTEM_SYMBOLS_SET = new Set(SYSTEM_SYMBOLS);
	  /** @type {Mode} */
	  const SYMBOLS = { variants: [
	    {
	      className: 'builtin-symbol',
	      begin: SYMBOL_RE,
	      // for performance out of fear of regex.either(...Mathematica.SYSTEM_SYMBOLS)
	      "on:begin": (match, response) => {
	        if (!SYSTEM_SYMBOLS_SET.has(match[0])) response.ignoreMatch();
	      }
	    },
	    {
	      className: 'symbol',
	      relevance: 0,
	      begin: SYMBOL_RE
	    }
	  ] };

	  const NAMED_CHARACTER = {
	    className: 'named-character',
	    begin: /\\\[[$a-zA-Z][$a-zA-Z0-9]+\]/
	  };

	  const OPERATORS = {
	    className: 'operator',
	    relevance: 0,
	    begin: /[+\-*/,;.:@~=><&|_`'^?!%]+/
	  };
	  const PATTERNS = {
	    className: 'pattern',
	    relevance: 0,
	    begin: /([a-zA-Z$][a-zA-Z0-9$]*)?_+([a-zA-Z$][a-zA-Z0-9$]*)?/
	  };

	  const SLOTS = {
	    className: 'slot',
	    relevance: 0,
	    begin: /#[a-zA-Z$][a-zA-Z0-9$]*|#+[0-9]?/
	  };

	  const BRACES = {
	    className: 'brace',
	    relevance: 0,
	    begin: /[[\](){}]/
	  };

	  const MESSAGES = {
	    className: 'message-name',
	    relevance: 0,
	    begin: regex.concat("::", SYMBOL_RE)
	  };

	  return {
	    name: 'Mathematica',
	    aliases: [
	      'mma',
	      'wl'
	    ],
	    classNameAliases: {
	      brace: 'punctuation',
	      pattern: 'type',
	      slot: 'type',
	      symbol: 'variable',
	      'named-character': 'variable',
	      'builtin-symbol': 'built_in',
	      'message-name': 'string'
	    },
	    contains: [
	      hljs.COMMENT(/\(\*/, /\*\)/, { contains: [ 'self' ] }),
	      PATTERNS,
	      SLOTS,
	      MESSAGES,
	      SYMBOLS,
	      NAMED_CHARACTER,
	      hljs.QUOTE_STRING_MODE,
	      NUMBERS,
	      OPERATORS,
	      BRACES
	    ]
	  };
	}

	mathematica_1 = mathematica;
	return mathematica_1;
}

/*
Language: Matlab
Author: Denis Bardadym <bardadymchik@gmail.com>
Contributors: Eugene Nizhibitsky <nizhibitsky@ya.ru>, Egor Rogov <e.rogov@postgrespro.ru>
Website: https://www.mathworks.com/products/matlab.html
Category: scientific
*/

var matlab_1;
var hasRequiredMatlab;

function requireMatlab () {
	if (hasRequiredMatlab) return matlab_1;
	hasRequiredMatlab = 1;
	/*
	  Formal syntax is not published, helpful link:
	  https://github.com/kornilova-l/matlab-IntelliJ-plugin/blob/master/src/main/grammar/Matlab.bnf
	*/
	function matlab(hljs) {
	  const TRANSPOSE_RE = '(\'|\\.\')+';
	  const TRANSPOSE = {
	    relevance: 0,
	    contains: [ { begin: TRANSPOSE_RE } ]
	  };

	  return {
	    name: 'Matlab',
	    keywords: {
	      keyword:
	        'arguments break case catch classdef continue else elseif end enumeration events for function '
	        + 'global if methods otherwise parfor persistent properties return spmd switch try while',
	      built_in:
	        'sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan '
	        + 'atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot '
	        + 'cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog '
	        + 'realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal '
	        + 'cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli '
	        + 'besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma '
	        + 'gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms '
	        + 'nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones '
	        + 'eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length '
	        + 'ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril '
	        + 'triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute '
	        + 'shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i|0 inf nan '
	        + 'isnan isinf isfinite j|0 why compan gallery hadamard hankel hilb invhilb magic pascal '
	        + 'rosser toeplitz vander wilkinson max min nanmax nanmin mean nanmean type table '
	        + 'readtable writetable sortrows sort figure plot plot3 scatter scatter3 cellfun '
	        + 'legend intersect ismember procrustes hold num2cell '
	    },
	    illegal: '(//|"|#|/\\*|\\s+/\\w+)',
	    contains: [
	      {
	        className: 'function',
	        beginKeywords: 'function',
	        end: '$',
	        contains: [
	          hljs.UNDERSCORE_TITLE_MODE,
	          {
	            className: 'params',
	            variants: [
	              {
	                begin: '\\(',
	                end: '\\)'
	              },
	              {
	                begin: '\\[',
	                end: '\\]'
	              }
	            ]
	          }
	        ]
	      },
	      {
	        className: 'built_in',
	        begin: /true|false/,
	        relevance: 0,
	        starts: TRANSPOSE
	      },
	      {
	        begin: '[a-zA-Z][a-zA-Z_0-9]*' + TRANSPOSE_RE,
	        relevance: 0
	      },
	      {
	        className: 'number',
	        begin: hljs.C_NUMBER_RE,
	        relevance: 0,
	        starts: TRANSPOSE
	      },
	      {
	        className: 'string',
	        begin: '\'',
	        end: '\'',
	        contains: [ { begin: '\'\'' } ]
	      },
	      {
	        begin: /\]|\}|\)/,
	        relevance: 0,
	        starts: TRANSPOSE
	      },
	      {
	        className: 'string',
	        begin: '"',
	        end: '"',
	        contains: [ { begin: '""' } ],
	        starts: TRANSPOSE
	      },
	      hljs.COMMENT('^\\s*%\\{\\s*$', '^\\s*%\\}\\s*$'),
	      hljs.COMMENT('%', '$')
	    ]
	  };
	}

	matlab_1 = matlab;
	return matlab_1;
}

/*
Language: Maxima
Author: Robert Dodier <robert.dodier@gmail.com>
Website: http://maxima.sourceforge.net
Category: scientific
*/

var maxima_1;
var hasRequiredMaxima;

function requireMaxima () {
	if (hasRequiredMaxima) return maxima_1;
	hasRequiredMaxima = 1;
	function maxima(hljs) {
	  const KEYWORDS =
	    'if then else elseif for thru do while unless step in and or not';
	  const LITERALS =
	    'true false unknown inf minf ind und %e %i %pi %phi %gamma';
	  const BUILTIN_FUNCTIONS =
	    ' abasep abs absint absolute_real_time acos acosh acot acoth acsc acsch activate'
	    + ' addcol add_edge add_edges addmatrices addrow add_vertex add_vertices adjacency_matrix'
	    + ' adjoin adjoint af agd airy airy_ai airy_bi airy_dai airy_dbi algsys alg_type'
	    + ' alias allroots alphacharp alphanumericp amortization %and annuity_fv'
	    + ' annuity_pv antid antidiff AntiDifference append appendfile apply apply1 apply2'
	    + ' applyb1 apropos args arit_amortization arithmetic arithsum array arrayapply'
	    + ' arrayinfo arraymake arraysetapply ascii asec asech asin asinh askinteger'
	    + ' asksign assoc assoc_legendre_p assoc_legendre_q assume assume_external_byte_order'
	    + ' asympa at atan atan2 atanh atensimp atom atvalue augcoefmatrix augmented_lagrangian_method'
	    + ' av average_degree backtrace bars barsplot barsplot_description base64 base64_decode'
	    + ' bashindices batch batchload bc2 bdvac belln benefit_cost bern bernpoly bernstein_approx'
	    + ' bernstein_expand bernstein_poly bessel bessel_i bessel_j bessel_k bessel_simplify'
	    + ' bessel_y beta beta_incomplete beta_incomplete_generalized beta_incomplete_regularized'
	    + ' bezout bfallroots bffac bf_find_root bf_fmin_cobyla bfhzeta bfloat bfloatp'
	    + ' bfpsi bfpsi0 bfzeta biconnected_components bimetric binomial bipartition'
	    + ' block blockmatrixp bode_gain bode_phase bothcoef box boxplot boxplot_description'
	    + ' break bug_report build_info|10 buildq build_sample burn cabs canform canten'
	    + ' cardinality carg cartan cartesian_product catch cauchy_matrix cbffac cdf_bernoulli'
	    + ' cdf_beta cdf_binomial cdf_cauchy cdf_chi2 cdf_continuous_uniform cdf_discrete_uniform'
	    + ' cdf_exp cdf_f cdf_gamma cdf_general_finite_discrete cdf_geometric cdf_gumbel'
	    + ' cdf_hypergeometric cdf_laplace cdf_logistic cdf_lognormal cdf_negative_binomial'
	    + ' cdf_noncentral_chi2 cdf_noncentral_student_t cdf_normal cdf_pareto cdf_poisson'
	    + ' cdf_rank_sum cdf_rayleigh cdf_signed_rank cdf_student_t cdf_weibull cdisplay'
	    + ' ceiling central_moment cequal cequalignore cf cfdisrep cfexpand cgeodesic'
	    + ' cgreaterp cgreaterpignore changename changevar chaosgame charat charfun charfun2'
	    + ' charlist charp charpoly chdir chebyshev_t chebyshev_u checkdiv check_overlaps'
	    + ' chinese cholesky christof chromatic_index chromatic_number cint circulant_graph'
	    + ' clear_edge_weight clear_rules clear_vertex_label clebsch_gordan clebsch_graph'
	    + ' clessp clesspignore close closefile cmetric coeff coefmatrix cograd col collapse'
	    + ' collectterms columnop columnspace columnswap columnvector combination combine'
	    + ' comp2pui compare compfile compile compile_file complement_graph complete_bipartite_graph'
	    + ' complete_graph complex_number_p components compose_functions concan concat'
	    + ' conjugate conmetderiv connected_components connect_vertices cons constant'
	    + ' constantp constituent constvalue cont2part content continuous_freq contortion'
	    + ' contour_plot contract contract_edge contragrad contrib_ode convert coord'
	    + ' copy copy_file copy_graph copylist copymatrix cor cos cosh cot coth cov cov1'
	    + ' covdiff covect covers crc24sum create_graph create_list csc csch csetup cspline'
	    + ' ctaylor ct_coordsys ctransform ctranspose cube_graph cuboctahedron_graph'
	    + ' cunlisp cv cycle_digraph cycle_graph cylindrical days360 dblint deactivate'
	    + ' declare declare_constvalue declare_dimensions declare_fundamental_dimensions'
	    + ' declare_fundamental_units declare_qty declare_translated declare_unit_conversion'
	    + ' declare_units declare_weights decsym defcon define define_alt_display define_variable'
	    + ' defint defmatch defrule defstruct deftaylor degree_sequence del delete deleten'
	    + ' delta demo demoivre denom depends derivdegree derivlist describe desolve'
	    + ' determinant dfloat dgauss_a dgauss_b dgeev dgemm dgeqrf dgesv dgesvd diag'
	    + ' diagmatrix diag_matrix diagmatrixp diameter diff digitcharp dimacs_export'
	    + ' dimacs_import dimension dimensionless dimensions dimensions_as_list direct'
	    + ' directory discrete_freq disjoin disjointp disolate disp dispcon dispform'
	    + ' dispfun dispJordan display disprule dispterms distrib divide divisors divsum'
	    + ' dkummer_m dkummer_u dlange dodecahedron_graph dotproduct dotsimp dpart'
	    + ' draw draw2d draw3d drawdf draw_file draw_graph dscalar echelon edge_coloring'
	    + ' edge_connectivity edges eigens_by_jacobi eigenvalues eigenvectors eighth'
	    + ' einstein eivals eivects elapsed_real_time elapsed_run_time ele2comp ele2polynome'
	    + ' ele2pui elem elementp elevation_grid elim elim_allbut eliminate eliminate_using'
	    + ' ellipse elliptic_e elliptic_ec elliptic_eu elliptic_f elliptic_kc elliptic_pi'
	    + ' ematrix empty_graph emptyp endcons entermatrix entertensor entier equal equalp'
	    + ' equiv_classes erf erfc erf_generalized erfi errcatch error errormsg errors'
	    + ' euler ev eval_string evenp every evolution evolution2d evundiff example exp'
	    + ' expand expandwrt expandwrt_factored expint expintegral_chi expintegral_ci'
	    + ' expintegral_e expintegral_e1 expintegral_ei expintegral_e_simplify expintegral_li'
	    + ' expintegral_shi expintegral_si explicit explose exponentialize express expt'
	    + ' exsec extdiff extract_linear_equations extremal_subset ezgcd %f f90 facsum'
	    + ' factcomb factor factorfacsum factorial factorout factorsum facts fast_central_elements'
	    + ' fast_linsolve fasttimes featurep fernfale fft fib fibtophi fifth filename_merge'
	    + ' file_search file_type fillarray findde find_root find_root_abs find_root_error'
	    + ' find_root_rel first fix flatten flength float floatnump floor flower_snark'
	    + ' flush flush1deriv flushd flushnd flush_output fmin_cobyla forget fortran'
	    + ' fourcos fourexpand fourier fourier_elim fourint fourintcos fourintsin foursimp'
	    + ' foursin fourth fposition frame_bracket freeof freshline fresnel_c fresnel_s'
	    + ' from_adjacency_matrix frucht_graph full_listify fullmap fullmapl fullratsimp'
	    + ' fullratsubst fullsetify funcsolve fundamental_dimensions fundamental_units'
	    + ' fundef funmake funp fv g0 g1 gamma gamma_greek gamma_incomplete gamma_incomplete_generalized'
	    + ' gamma_incomplete_regularized gauss gauss_a gauss_b gaussprob gcd gcdex gcdivide'
	    + ' gcfac gcfactor gd generalized_lambert_w genfact gen_laguerre genmatrix gensym'
	    + ' geo_amortization geo_annuity_fv geo_annuity_pv geomap geometric geometric_mean'
	    + ' geosum get getcurrentdirectory get_edge_weight getenv get_lu_factors get_output_stream_string'
	    + ' get_pixel get_plot_option get_tex_environment get_tex_environment_default'
	    + ' get_vertex_label gfactor gfactorsum ggf girth global_variances gn gnuplot_close'
	    + ' gnuplot_replot gnuplot_reset gnuplot_restart gnuplot_start go Gosper GosperSum'
	    + ' gr2d gr3d gradef gramschmidt graph6_decode graph6_encode graph6_export graph6_import'
	    + ' graph_center graph_charpoly graph_eigenvalues graph_flow graph_order graph_periphery'
	    + ' graph_product graph_size graph_union great_rhombicosidodecahedron_graph great_rhombicuboctahedron_graph'
	    + ' grid_graph grind grobner_basis grotzch_graph hamilton_cycle hamilton_path'
	    + ' hankel hankel_1 hankel_2 harmonic harmonic_mean hav heawood_graph hermite'
	    + ' hessian hgfred hilbertmap hilbert_matrix hipow histogram histogram_description'
	    + ' hodge horner hypergeometric i0 i1 %ibes ic1 ic2 ic_convert ichr1 ichr2 icosahedron_graph'
	    + ' icosidodecahedron_graph icurvature ident identfor identity idiff idim idummy'
	    + ' ieqn %if ifactors iframes ifs igcdex igeodesic_coords ilt image imagpart'
	    + ' imetric implicit implicit_derivative implicit_plot indexed_tensor indices'
	    + ' induced_subgraph inferencep inference_result infix info_display init_atensor'
	    + ' init_ctensor in_neighbors innerproduct inpart inprod inrt integerp integer_partitions'
	    + ' integrate intersect intersection intervalp intopois intosum invariant1 invariant2'
	    + ' inverse_fft inverse_jacobi_cd inverse_jacobi_cn inverse_jacobi_cs inverse_jacobi_dc'
	    + ' inverse_jacobi_dn inverse_jacobi_ds inverse_jacobi_nc inverse_jacobi_nd inverse_jacobi_ns'
	    + ' inverse_jacobi_sc inverse_jacobi_sd inverse_jacobi_sn invert invert_by_adjoint'
	    + ' invert_by_lu inv_mod irr is is_biconnected is_bipartite is_connected is_digraph'
	    + ' is_edge_in_graph is_graph is_graph_or_digraph ishow is_isomorphic isolate'
	    + ' isomorphism is_planar isqrt isreal_p is_sconnected is_tree is_vertex_in_graph'
	    + ' items_inference %j j0 j1 jacobi jacobian jacobi_cd jacobi_cn jacobi_cs jacobi_dc'
	    + ' jacobi_dn jacobi_ds jacobi_nc jacobi_nd jacobi_ns jacobi_p jacobi_sc jacobi_sd'
	    + ' jacobi_sn JF jn join jordan julia julia_set julia_sin %k kdels kdelta kill'
	    + ' killcontext kostka kron_delta kronecker_product kummer_m kummer_u kurtosis'
	    + ' kurtosis_bernoulli kurtosis_beta kurtosis_binomial kurtosis_chi2 kurtosis_continuous_uniform'
	    + ' kurtosis_discrete_uniform kurtosis_exp kurtosis_f kurtosis_gamma kurtosis_general_finite_discrete'
	    + ' kurtosis_geometric kurtosis_gumbel kurtosis_hypergeometric kurtosis_laplace'
	    + ' kurtosis_logistic kurtosis_lognormal kurtosis_negative_binomial kurtosis_noncentral_chi2'
	    + ' kurtosis_noncentral_student_t kurtosis_normal kurtosis_pareto kurtosis_poisson'
	    + ' kurtosis_rayleigh kurtosis_student_t kurtosis_weibull label labels lagrange'
	    + ' laguerre lambda lambert_w laplace laplacian_matrix last lbfgs lc2kdt lcharp'
	    + ' lc_l lcm lc_u ldefint ldisp ldisplay legendre_p legendre_q leinstein length'
	    + ' let letrules letsimp levi_civita lfreeof lgtreillis lhs li liediff limit'
	    + ' Lindstedt linear linearinterpol linear_program linear_regression line_graph'
	    + ' linsolve listarray list_correlations listify list_matrix_entries list_nc_monomials'
	    + ' listoftens listofvars listp lmax lmin load loadfile local locate_matrix_entry'
	    + ' log logcontract log_gamma lopow lorentz_gauge lowercasep lpart lratsubst'
	    + ' lreduce lriemann lsquares_estimates lsquares_estimates_approximate lsquares_estimates_exact'
	    + ' lsquares_mse lsquares_residual_mse lsquares_residuals lsum ltreillis lu_backsub'
	    + ' lucas lu_factor %m macroexpand macroexpand1 make_array makebox makefact makegamma'
	    + ' make_graph make_level_picture makelist makeOrders make_poly_continent make_poly_country'
	    + ' make_polygon make_random_state make_rgb_picture makeset make_string_input_stream'
	    + ' make_string_output_stream make_transform mandelbrot mandelbrot_set map mapatom'
	    + ' maplist matchdeclare matchfix mat_cond mat_fullunblocker mat_function mathml_display'
	    + ' mat_norm matrix matrixmap matrixp matrix_size mattrace mat_trace mat_unblocker'
	    + ' max max_clique max_degree max_flow maximize_lp max_independent_set max_matching'
	    + ' maybe md5sum mean mean_bernoulli mean_beta mean_binomial mean_chi2 mean_continuous_uniform'
	    + ' mean_deviation mean_discrete_uniform mean_exp mean_f mean_gamma mean_general_finite_discrete'
	    + ' mean_geometric mean_gumbel mean_hypergeometric mean_laplace mean_logistic'
	    + ' mean_lognormal mean_negative_binomial mean_noncentral_chi2 mean_noncentral_student_t'
	    + ' mean_normal mean_pareto mean_poisson mean_rayleigh mean_student_t mean_weibull'
	    + ' median median_deviation member mesh metricexpandall mgf1_sha1 min min_degree'
	    + ' min_edge_cut minfactorial minimalPoly minimize_lp minimum_spanning_tree minor'
	    + ' minpack_lsquares minpack_solve min_vertex_cover min_vertex_cut mkdir mnewton'
	    + ' mod mode_declare mode_identity ModeMatrix moebius mon2schur mono monomial_dimensions'
	    + ' multibernstein_poly multi_display_for_texinfo multi_elem multinomial multinomial_coeff'
	    + ' multi_orbit multiplot_mode multi_pui multsym multthru mycielski_graph nary'
	    + ' natural_unit nc_degree ncexpt ncharpoly negative_picture neighbors new newcontext'
	    + ' newdet new_graph newline newton new_variable next_prime nicedummies niceindices'
	    + ' ninth nofix nonarray noncentral_moment nonmetricity nonnegintegerp nonscalarp'
	    + ' nonzeroandfreeof notequal nounify nptetrad npv nroots nterms ntermst'
	    + ' nthroot nullity nullspace num numbered_boundaries numberp number_to_octets'
	    + ' num_distinct_partitions numerval numfactor num_partitions nusum nzeta nzetai'
	    + ' nzetar octets_to_number octets_to_oid odd_girth oddp ode2 ode_check odelin'
	    + ' oid_to_octets op opena opena_binary openr openr_binary openw openw_binary'
	    + ' operatorp opsubst optimize %or orbit orbits ordergreat ordergreatp orderless'
	    + ' orderlessp orthogonal_complement orthopoly_recur orthopoly_weight outermap'
	    + ' out_neighbors outofpois pade parabolic_cylinder_d parametric parametric_surface'
	    + ' parg parGosper parse_string parse_timedate part part2cont partfrac partition'
	    + ' partition_set partpol path_digraph path_graph pathname_directory pathname_name'
	    + ' pathname_type pdf_bernoulli pdf_beta pdf_binomial pdf_cauchy pdf_chi2 pdf_continuous_uniform'
	    + ' pdf_discrete_uniform pdf_exp pdf_f pdf_gamma pdf_general_finite_discrete'
	    + ' pdf_geometric pdf_gumbel pdf_hypergeometric pdf_laplace pdf_logistic pdf_lognormal'
	    + ' pdf_negative_binomial pdf_noncentral_chi2 pdf_noncentral_student_t pdf_normal'
	    + ' pdf_pareto pdf_poisson pdf_rank_sum pdf_rayleigh pdf_signed_rank pdf_student_t'
	    + ' pdf_weibull pearson_skewness permanent permut permutation permutations petersen_graph'
	    + ' petrov pickapart picture_equalp picturep piechart piechart_description planar_embedding'
	    + ' playback plog plot2d plot3d plotdf ploteq plsquares pochhammer points poisdiff'
	    + ' poisexpt poisint poismap poisplus poissimp poissubst poistimes poistrim polar'
	    + ' polarform polartorect polar_to_xy poly_add poly_buchberger poly_buchberger_criterion'
	    + ' poly_colon_ideal poly_content polydecomp poly_depends_p poly_elimination_ideal'
	    + ' poly_exact_divide poly_expand poly_expt poly_gcd polygon poly_grobner poly_grobner_equal'
	    + ' poly_grobner_member poly_grobner_subsetp poly_ideal_intersection poly_ideal_polysaturation'
	    + ' poly_ideal_polysaturation1 poly_ideal_saturation poly_ideal_saturation1 poly_lcm'
	    + ' poly_minimization polymod poly_multiply polynome2ele polynomialp poly_normal_form'
	    + ' poly_normalize poly_normalize_list poly_polysaturation_extension poly_primitive_part'
	    + ' poly_pseudo_divide poly_reduced_grobner poly_reduction poly_saturation_extension'
	    + ' poly_s_polynomial poly_subtract polytocompanion pop postfix potential power_mod'
	    + ' powerseries powerset prefix prev_prime primep primes principal_components'
	    + ' print printf printfile print_graph printpois printprops prodrac product properties'
	    + ' propvars psi psubst ptriangularize pui pui2comp pui2ele pui2polynome pui_direct'
	    + ' puireduc push put pv qput qrange qty quad_control quad_qag quad_qagi quad_qagp'
	    + ' quad_qags quad_qawc quad_qawf quad_qawo quad_qaws quadrilateral quantile'
	    + ' quantile_bernoulli quantile_beta quantile_binomial quantile_cauchy quantile_chi2'
	    + ' quantile_continuous_uniform quantile_discrete_uniform quantile_exp quantile_f'
	    + ' quantile_gamma quantile_general_finite_discrete quantile_geometric quantile_gumbel'
	    + ' quantile_hypergeometric quantile_laplace quantile_logistic quantile_lognormal'
	    + ' quantile_negative_binomial quantile_noncentral_chi2 quantile_noncentral_student_t'
	    + ' quantile_normal quantile_pareto quantile_poisson quantile_rayleigh quantile_student_t'
	    + ' quantile_weibull quartile_skewness quit qunit quotient racah_v racah_w radcan'
	    + ' radius random random_bernoulli random_beta random_binomial random_bipartite_graph'
	    + ' random_cauchy random_chi2 random_continuous_uniform random_digraph random_discrete_uniform'
	    + ' random_exp random_f random_gamma random_general_finite_discrete random_geometric'
	    + ' random_graph random_graph1 random_gumbel random_hypergeometric random_laplace'
	    + ' random_logistic random_lognormal random_negative_binomial random_network'
	    + ' random_noncentral_chi2 random_noncentral_student_t random_normal random_pareto'
	    + ' random_permutation random_poisson random_rayleigh random_regular_graph random_student_t'
	    + ' random_tournament random_tree random_weibull range rank rat ratcoef ratdenom'
	    + ' ratdiff ratdisrep ratexpand ratinterpol rational rationalize ratnumer ratnump'
	    + ' ratp ratsimp ratsubst ratvars ratweight read read_array read_binary_array'
	    + ' read_binary_list read_binary_matrix readbyte readchar read_hashed_array readline'
	    + ' read_list read_matrix read_nested_list readonly read_xpm real_imagpart_to_conjugate'
	    + ' realpart realroots rearray rectangle rectform rectform_log_if_constant recttopolar'
	    + ' rediff reduce_consts reduce_order region region_boundaries region_boundaries_plus'
	    + ' rem remainder remarray rembox remcomps remcon remcoord remfun remfunction'
	    + ' remlet remove remove_constvalue remove_dimensions remove_edge remove_fundamental_dimensions'
	    + ' remove_fundamental_units remove_plot_option remove_vertex rempart remrule'
	    + ' remsym remvalue rename rename_file reset reset_displays residue resolvante'
	    + ' resolvante_alternee1 resolvante_bipartite resolvante_diedrale resolvante_klein'
	    + ' resolvante_klein3 resolvante_produit_sym resolvante_unitaire resolvante_vierer'
	    + ' rest resultant return reveal reverse revert revert2 rgb2level rhs ricci riemann'
	    + ' rinvariant risch rk rmdir rncombine romberg room rootscontract round row'
	    + ' rowop rowswap rreduce run_testsuite %s save saving scalarp scaled_bessel_i'
	    + ' scaled_bessel_i0 scaled_bessel_i1 scalefactors scanmap scatterplot scatterplot_description'
	    + ' scene schur2comp sconcat scopy scsimp scurvature sdowncase sec sech second'
	    + ' sequal sequalignore set_alt_display setdifference set_draw_defaults set_edge_weight'
	    + ' setelmx setequalp setify setp set_partitions set_plot_option set_prompt set_random_state'
	    + ' set_tex_environment set_tex_environment_default setunits setup_autoload set_up_dot_simplifications'
	    + ' set_vertex_label seventh sexplode sf sha1sum sha256sum shortest_path shortest_weighted_path'
	    + ' show showcomps showratvars sierpinskiale sierpinskimap sign signum similaritytransform'
	    + ' simp_inequality simplify_sum simplode simpmetderiv simtran sin sinh sinsert'
	    + ' sinvertcase sixth skewness skewness_bernoulli skewness_beta skewness_binomial'
	    + ' skewness_chi2 skewness_continuous_uniform skewness_discrete_uniform skewness_exp'
	    + ' skewness_f skewness_gamma skewness_general_finite_discrete skewness_geometric'
	    + ' skewness_gumbel skewness_hypergeometric skewness_laplace skewness_logistic'
	    + ' skewness_lognormal skewness_negative_binomial skewness_noncentral_chi2 skewness_noncentral_student_t'
	    + ' skewness_normal skewness_pareto skewness_poisson skewness_rayleigh skewness_student_t'
	    + ' skewness_weibull slength smake small_rhombicosidodecahedron_graph small_rhombicuboctahedron_graph'
	    + ' smax smin smismatch snowmap snub_cube_graph snub_dodecahedron_graph solve'
	    + ' solve_rec solve_rec_rat some somrac sort sparse6_decode sparse6_encode sparse6_export'
	    + ' sparse6_import specint spherical spherical_bessel_j spherical_bessel_y spherical_hankel1'
	    + ' spherical_hankel2 spherical_harmonic spherical_to_xyz splice split sposition'
	    + ' sprint sqfr sqrt sqrtdenest sremove sremovefirst sreverse ssearch ssort sstatus'
	    + ' ssubst ssubstfirst staircase standardize standardize_inverse_trig starplot'
	    + ' starplot_description status std std1 std_bernoulli std_beta std_binomial'
	    + ' std_chi2 std_continuous_uniform std_discrete_uniform std_exp std_f std_gamma'
	    + ' std_general_finite_discrete std_geometric std_gumbel std_hypergeometric std_laplace'
	    + ' std_logistic std_lognormal std_negative_binomial std_noncentral_chi2 std_noncentral_student_t'
	    + ' std_normal std_pareto std_poisson std_rayleigh std_student_t std_weibull'
	    + ' stemplot stirling stirling1 stirling2 strim striml strimr string stringout'
	    + ' stringp strong_components struve_h struve_l sublis sublist sublist_indices'
	    + ' submatrix subsample subset subsetp subst substinpart subst_parallel substpart'
	    + ' substring subvar subvarp sum sumcontract summand_to_rec supcase supcontext'
	    + ' symbolp symmdifference symmetricp system take_channel take_inference tan'
	    + ' tanh taylor taylorinfo taylorp taylor_simplifier taytorat tcl_output tcontract'
	    + ' tellrat tellsimp tellsimpafter tentex tenth test_mean test_means_difference'
	    + ' test_normality test_proportion test_proportions_difference test_rank_sum'
	    + ' test_sign test_signed_rank test_variance test_variance_ratio tex tex1 tex_display'
	    + ' texput %th third throw time timedate timer timer_info tldefint tlimit todd_coxeter'
	    + ' toeplitz tokens to_lisp topological_sort to_poly to_poly_solve totaldisrep'
	    + ' totalfourier totient tpartpol trace tracematrix trace_options transform_sample'
	    + ' translate translate_file transpose treefale tree_reduce treillis treinat'
	    + ' triangle triangularize trigexpand trigrat trigreduce trigsimp trunc truncate'
	    + ' truncated_cube_graph truncated_dodecahedron_graph truncated_icosahedron_graph'
	    + ' truncated_tetrahedron_graph tr_warnings_get tube tutte_graph ueivects uforget'
	    + ' ultraspherical underlying_graph undiff union unique uniteigenvectors unitp'
	    + ' units unit_step unitvector unorder unsum untellrat untimer'
	    + ' untrace uppercasep uricci uriemann uvect vandermonde_matrix var var1 var_bernoulli'
	    + ' var_beta var_binomial var_chi2 var_continuous_uniform var_discrete_uniform'
	    + ' var_exp var_f var_gamma var_general_finite_discrete var_geometric var_gumbel'
	    + ' var_hypergeometric var_laplace var_logistic var_lognormal var_negative_binomial'
	    + ' var_noncentral_chi2 var_noncentral_student_t var_normal var_pareto var_poisson'
	    + ' var_rayleigh var_student_t var_weibull vector vectorpotential vectorsimp'
	    + ' verbify vers vertex_coloring vertex_connectivity vertex_degree vertex_distance'
	    + ' vertex_eccentricity vertex_in_degree vertex_out_degree vertices vertices_to_cycle'
	    + ' vertices_to_path %w weyl wheel_graph wiener_index wigner_3j wigner_6j'
	    + ' wigner_9j with_stdout write_binary_data writebyte write_data writefile wronskian'
	    + ' xreduce xthru %y Zeilberger zeroequiv zerofor zeromatrix zeromatrixp zeta'
	    + ' zgeev zheev zlange zn_add_table zn_carmichael_lambda zn_characteristic_factors'
	    + ' zn_determinant zn_factor_generators zn_invert_by_lu zn_log zn_mult_table'
	    + ' absboxchar activecontexts adapt_depth additive adim aform algebraic'
	    + ' algepsilon algexact aliases allbut all_dotsimp_denoms allocation allsym alphabetic'
	    + ' animation antisymmetric arrays askexp assume_pos assume_pos_pred assumescalar'
	    + ' asymbol atomgrad atrig1 axes axis_3d axis_bottom axis_left axis_right axis_top'
	    + ' azimuth background background_color backsubst berlefact bernstein_explicit'
	    + ' besselexpand beta_args_sum_to_integer beta_expand bftorat bftrunc bindtest'
	    + ' border boundaries_array box boxchar breakup %c capping cauchysum cbrange'
	    + ' cbtics center cflength cframe_flag cnonmet_flag color color_bar color_bar_tics'
	    + ' colorbox columns commutative complex cone context contexts contour contour_levels'
	    + ' cosnpiflag ctaypov ctaypt ctayswitch ctayvar ct_coords ctorsion_flag ctrgsimp'
	    + ' cube current_let_rule_package cylinder data_file_name debugmode decreasing'
	    + ' default_let_rule_package delay dependencies derivabbrev derivsubst detout'
	    + ' diagmetric diff dim dimensions dispflag display2d|10 display_format_internal'
	    + ' distribute_over doallmxops domain domxexpt domxmxops domxnctimes dontfactor'
	    + ' doscmxops doscmxplus dot0nscsimp dot0simp dot1simp dotassoc dotconstrules'
	    + ' dotdistrib dotexptsimp dotident dotscrules draw_graph_program draw_realpart'
	    + ' edge_color edge_coloring edge_partition edge_type edge_width %edispflag'
	    + ' elevation %emode endphi endtheta engineering_format_floats enhanced3d %enumer'
	    + ' epsilon_lp erfflag erf_representation errormsg error_size error_syms error_type'
	    + ' %e_to_numlog eval even evenfun evflag evfun ev_point expandwrt_denom expintexpand'
	    + ' expintrep expon expop exptdispflag exptisolate exptsubst facexpand facsum_combine'
	    + ' factlim factorflag factorial_expand factors_only fb feature features'
	    + ' file_name file_output_append file_search_demo file_search_lisp file_search_maxima|10'
	    + ' file_search_tests file_search_usage file_type_lisp file_type_maxima|10 fill_color'
	    + ' fill_density filled_func fixed_vertices flipflag float2bf font font_size'
	    + ' fortindent fortspaces fpprec fpprintprec functions gamma_expand gammalim'
	    + ' gdet genindex gensumnum GGFCFMAX GGFINFINITY globalsolve gnuplot_command'
	    + ' gnuplot_curve_styles gnuplot_curve_titles gnuplot_default_term_command gnuplot_dumb_term_command'
	    + ' gnuplot_file_args gnuplot_file_name gnuplot_out_file gnuplot_pdf_term_command'
	    + ' gnuplot_pm3d gnuplot_png_term_command gnuplot_postamble gnuplot_preamble'
	    + ' gnuplot_ps_term_command gnuplot_svg_term_command gnuplot_term gnuplot_view_args'
	    + ' Gosper_in_Zeilberger gradefs grid grid2d grind halfangles head_angle head_both'
	    + ' head_length head_type height hypergeometric_representation %iargs ibase'
	    + ' icc1 icc2 icounter idummyx ieqnprint ifb ifc1 ifc2 ifg ifgi ifr iframe_bracket_form'
	    + ' ifri igeowedge_flag ikt1 ikt2 imaginary inchar increasing infeval'
	    + ' infinity inflag infolists inm inmc1 inmc2 intanalysis integer integervalued'
	    + ' integrate_use_rootsof integration_constant integration_constant_counter interpolate_color'
	    + ' intfaclim ip_grid ip_grid_in irrational isolate_wrt_times iterations itr'
	    + ' julia_parameter %k1 %k2 keepfloat key key_pos kinvariant kt label label_alignment'
	    + ' label_orientation labels lassociative lbfgs_ncorrections lbfgs_nfeval_max'
	    + ' leftjust legend letrat let_rule_packages lfg lg lhospitallim limsubst linear'
	    + ' linear_solver linechar linel|10 linenum line_type linewidth line_width linsolve_params'
	    + ' linsolvewarn lispdisp listarith listconstvars listdummyvars lmxchar load_pathname'
	    + ' loadprint logabs logarc logcb logconcoeffp logexpand lognegint logsimp logx'
	    + ' logx_secondary logy logy_secondary logz lriem m1pbranch macroexpansion macros'
	    + ' mainvar manual_demo maperror mapprint matrix_element_add matrix_element_mult'
	    + ' matrix_element_transpose maxapplydepth maxapplyheight maxima_tempdir|10 maxima_userdir|10'
	    + ' maxnegex MAX_ORD maxposex maxpsifracdenom maxpsifracnum maxpsinegint maxpsiposint'
	    + ' maxtayorder mesh_lines_color method mod_big_prime mode_check_errorp'
	    + ' mode_checkp mode_check_warnp mod_test mod_threshold modular_linear_solver'
	    + ' modulus multiplicative multiplicities myoptions nary negdistrib negsumdispflag'
	    + ' newline newtonepsilon newtonmaxiter nextlayerfactor niceindicespref nm nmc'
	    + ' noeval nolabels nonegative_lp noninteger nonscalar noun noundisp nouns np'
	    + ' npi nticks ntrig numer numer_pbranch obase odd oddfun opacity opproperties'
	    + ' opsubst optimprefix optionset orientation origin orthopoly_returns_intervals'
	    + ' outative outchar packagefile palette partswitch pdf_file pfeformat phiresolution'
	    + ' %piargs piece pivot_count_sx pivot_max_sx plot_format plot_options plot_realpart'
	    + ' png_file pochhammer_max_index points pointsize point_size points_joined point_type'
	    + ' poislim poisson poly_coefficient_ring poly_elimination_order polyfactor poly_grobner_algorithm'
	    + ' poly_grobner_debug poly_monomial_order poly_primary_elimination_order poly_return_term_list'
	    + ' poly_secondary_elimination_order poly_top_reduction_only posfun position'
	    + ' powerdisp pred prederror primep_number_of_tests product_use_gamma program'
	    + ' programmode promote_float_to_bigfloat prompt proportional_axes props psexpand'
	    + ' ps_file radexpand radius radsubstflag rassociative ratalgdenom ratchristof'
	    + ' ratdenomdivide rateinstein ratepsilon ratfac rational ratmx ratprint ratriemann'
	    + ' ratsimpexpons ratvarswitch ratweights ratweyl ratwtlvl real realonly redraw'
	    + ' refcheck resolution restart resultant ric riem rmxchar %rnum_list rombergabs'
	    + ' rombergit rombergmin rombergtol rootsconmode rootsepsilon run_viewer same_xy'
	    + ' same_xyz savedef savefactors scalar scalarmatrixp scale scale_lp setcheck'
	    + ' setcheckbreak setval show_edge_color show_edges show_edge_type show_edge_width'
	    + ' show_id show_label showtime show_vertex_color show_vertex_size show_vertex_type'
	    + ' show_vertices show_weight simp simplified_output simplify_products simpproduct'
	    + ' simpsum sinnpiflag solvedecomposes solveexplicit solvefactors solvenullwarn'
	    + ' solveradcan solvetrigwarn space sparse sphere spring_embedding_depth sqrtdispflag'
	    + ' stardisp startphi starttheta stats_numer stringdisp structures style sublis_apply_lambda'
	    + ' subnumsimp sumexpand sumsplitfact surface surface_hide svg_file symmetric'
	    + ' tab taylordepth taylor_logexpand taylor_order_coefficients taylor_truncate_polynomials'
	    + ' tensorkill terminal testsuite_files thetaresolution timer_devalue title tlimswitch'
	    + ' tr track transcompile transform transform_xy translate_fast_arrays transparent'
	    + ' transrun tr_array_as_ref tr_bound_function_applyp tr_file_tty_messagesp tr_float_can_branch_complex'
	    + ' tr_function_call_default trigexpandplus trigexpandtimes triginverses trigsign'
	    + ' trivial_solutions tr_numer tr_optimize_max_loop tr_semicompile tr_state_vars'
	    + ' tr_warn_bad_function_calls tr_warn_fexpr tr_warn_meval tr_warn_mode'
	    + ' tr_warn_undeclared tr_warn_undefined_variable tstep ttyoff tube_extremes'
	    + ' ufg ug %unitexpand unit_vectors uric uriem use_fast_arrays user_preamble'
	    + ' usersetunits values vect_cross verbose vertex_color vertex_coloring vertex_partition'
	    + ' vertex_size vertex_type view warnings weyl width windowname windowtitle wired_surface'
	    + ' wireframe xaxis xaxis_color xaxis_secondary xaxis_type xaxis_width xlabel'
	    + ' xlabel_secondary xlength xrange xrange_secondary xtics xtics_axis xtics_rotate'
	    + ' xtics_rotate_secondary xtics_secondary xtics_secondary_axis xu_grid x_voxel'
	    + ' xy_file xyplane xy_scale yaxis yaxis_color yaxis_secondary yaxis_type yaxis_width'
	    + ' ylabel ylabel_secondary ylength yrange yrange_secondary ytics ytics_axis'
	    + ' ytics_rotate ytics_rotate_secondary ytics_secondary ytics_secondary_axis'
	    + ' yv_grid y_voxel yx_ratio zaxis zaxis_color zaxis_type zaxis_width zeroa zerob'
	    + ' zerobern zeta%pi zlabel zlabel_rotate zlength zmin zn_primroot_limit zn_primroot_pretest';
	  const SYMBOLS = '_ __ %|0 %%|0';

	  return {
	    name: 'Maxima',
	    keywords: {
	      $pattern: '[A-Za-z_%][0-9A-Za-z_%]*',
	      keyword: KEYWORDS,
	      literal: LITERALS,
	      built_in: BUILTIN_FUNCTIONS,
	      symbol: SYMBOLS
	    },
	    contains: [
	      {
	        className: 'comment',
	        begin: '/\\*',
	        end: '\\*/',
	        contains: [ 'self' ]
	      },
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'number',
	        relevance: 0,
	        variants: [
	          {
	            // float number w/ exponent
	            // hmm, I wonder if we ought to include other exponent markers?
	            begin: '\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Ee][-+]?\\d+\\b' },
	          {
	            // bigfloat number
	            begin: '\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Bb][-+]?\\d+\\b',
	            relevance: 10
	          },
	          {
	            // float number w/out exponent
	            // Doesn't seem to recognize floats which start with '.'
	            begin: '\\b(\\.\\d+|\\d+\\.\\d+)\\b' },
	          {
	            // integer in base up to 36
	            // Doesn't seem to recognize integers which end with '.'
	            begin: '\\b(\\d+|0[0-9A-Za-z]+)\\.?\\b' }
	        ]
	      }
	    ],
	    illegal: /@/
	  };
	}

	maxima_1 = maxima;
	return maxima_1;
}

/*
Language: MEL
Description: Maya Embedded Language
Author: Shuen-Huei Guan <drake.guan@gmail.com>
Website: http://www.autodesk.com/products/autodesk-maya/overview
Category: graphics
*/

var mel_1;
var hasRequiredMel;

function requireMel () {
	if (hasRequiredMel) return mel_1;
	hasRequiredMel = 1;
	function mel(hljs) {
	  return {
	    name: 'MEL',
	    keywords:
	      'int float string vector matrix if else switch case default while do for in break '
	      + 'continue global proc return about abs addAttr addAttributeEditorNodeHelp addDynamic '
	      + 'addNewShelfTab addPP addPanelCategory addPrefixToName advanceToNextDrivenKey '
	      + 'affectedNet affects aimConstraint air alias aliasAttr align alignCtx alignCurve '
	      + 'alignSurface allViewFit ambientLight angle angleBetween animCone animCurveEditor '
	      + 'animDisplay animView annotate appendStringArray applicationName applyAttrPreset '
	      + 'applyTake arcLenDimContext arcLengthDimension arclen arrayMapper art3dPaintCtx '
	      + 'artAttrCtx artAttrPaintVertexCtx artAttrSkinPaintCtx artAttrTool artBuildPaintMenu '
	      + 'artFluidAttrCtx artPuttyCtx artSelectCtx artSetPaintCtx artUserPaintCtx assignCommand '
	      + 'assignInputDevice assignViewportFactories attachCurve attachDeviceAttr attachSurface '
	      + 'attrColorSliderGrp attrCompatibility attrControlGrp attrEnumOptionMenu '
	      + 'attrEnumOptionMenuGrp attrFieldGrp attrFieldSliderGrp attrNavigationControlGrp '
	      + 'attrPresetEditWin attributeExists attributeInfo attributeMenu attributeQuery '
	      + 'autoKeyframe autoPlace bakeClip bakeFluidShading bakePartialHistory bakeResults '
	      + 'bakeSimulation basename basenameEx batchRender bessel bevel bevelPlus binMembership '
	      + 'bindSkin blend2 blendShape blendShapeEditor blendShapePanel blendTwoAttr blindDataType '
	      + 'boneLattice boundary boxDollyCtx boxZoomCtx bufferCurve buildBookmarkMenu '
	      + 'buildKeyframeMenu button buttonManip CBG cacheFile cacheFileCombine cacheFileMerge '
	      + 'cacheFileTrack camera cameraView canCreateManip canvas capitalizeString catch '
	      + 'catchQuiet ceil changeSubdivComponentDisplayLevel changeSubdivRegion channelBox '
	      + 'character characterMap characterOutlineEditor characterize chdir checkBox checkBoxGrp '
	      + 'checkDefaultRenderGlobals choice circle circularFillet clamp clear clearCache clip '
	      + 'clipEditor clipEditorCurrentTimeCtx clipSchedule clipSchedulerOutliner clipTrimBefore '
	      + 'closeCurve closeSurface cluster cmdFileOutput cmdScrollFieldExecuter '
	      + 'cmdScrollFieldReporter cmdShell coarsenSubdivSelectionList collision color '
	      + 'colorAtPoint colorEditor colorIndex colorIndexSliderGrp colorSliderButtonGrp '
	      + 'colorSliderGrp columnLayout commandEcho commandLine commandPort compactHairSystem '
	      + 'componentEditor compositingInterop computePolysetVolume condition cone confirmDialog '
	      + 'connectAttr connectControl connectDynamic connectJoint connectionInfo constrain '
	      + 'constrainValue constructionHistory container containsMultibyte contextInfo control '
	      + 'convertFromOldLayers convertIffToPsd convertLightmap convertSolidTx convertTessellation '
	      + 'convertUnit copyArray copyFlexor copyKey copySkinWeights cos cpButton cpCache '
	      + 'cpClothSet cpCollision cpConstraint cpConvClothToMesh cpForces cpGetSolverAttr cpPanel '
	      + 'cpProperty cpRigidCollisionFilter cpSeam cpSetEdit cpSetSolverAttr cpSolver '
	      + 'cpSolverTypes cpTool cpUpdateClothUVs createDisplayLayer createDrawCtx createEditor '
	      + 'createLayeredPsdFile createMotionField createNewShelf createNode createRenderLayer '
	      + 'createSubdivRegion cross crossProduct ctxAbort ctxCompletion ctxEditMode ctxTraverse '
	      + 'currentCtx currentTime currentTimeCtx currentUnit curve curveAddPtCtx '
	      + 'curveCVCtx curveEPCtx curveEditorCtx curveIntersect curveMoveEPCtx curveOnSurface '
	      + 'curveSketchCtx cutKey cycleCheck cylinder dagPose date defaultLightListCheckBox '
	      + 'defaultNavigation defineDataServer defineVirtualDevice deformer deg_to_rad delete '
	      + 'deleteAttr deleteShadingGroupsAndMaterials deleteShelfTab deleteUI deleteUnusedBrushes '
	      + 'delrandstr detachCurve detachDeviceAttr detachSurface deviceEditor devicePanel dgInfo '
	      + 'dgdirty dgeval dgtimer dimWhen directKeyCtx directionalLight dirmap dirname disable '
	      + 'disconnectAttr disconnectJoint diskCache displacementToPoly displayAffected '
	      + 'displayColor displayCull displayLevelOfDetail displayPref displayRGBColor '
	      + 'displaySmoothness displayStats displayString displaySurface distanceDimContext '
	      + 'distanceDimension doBlur dolly dollyCtx dopeSheetEditor dot dotProduct '
	      + 'doubleProfileBirailSurface drag dragAttrContext draggerContext dropoffLocator '
	      + 'duplicate duplicateCurve duplicateSurface dynCache dynControl dynExport dynExpression '
	      + 'dynGlobals dynPaintEditor dynParticleCtx dynPref dynRelEdPanel dynRelEditor '
	      + 'dynamicLoad editAttrLimits editDisplayLayerGlobals editDisplayLayerMembers '
	      + 'editRenderLayerAdjustment editRenderLayerGlobals editRenderLayerMembers editor '
	      + 'editorTemplate effector emit emitter enableDevice encodeString endString endsWith env '
	      + 'equivalent equivalentTol erf error eval evalDeferred evalEcho event '
	      + 'exactWorldBoundingBox exclusiveLightCheckBox exec executeForEachObject exists exp '
	      + 'expression expressionEditorListen extendCurve extendSurface extrude fcheck fclose feof '
	      + 'fflush fgetline fgetword file fileBrowserDialog fileDialog fileExtension fileInfo '
	      + 'filetest filletCurve filter filterCurve filterExpand filterStudioImport '
	      + 'findAllIntersections findAnimCurves findKeyframe findMenuItem findRelatedSkinCluster '
	      + 'finder firstParentOf fitBspline flexor floatEq floatField floatFieldGrp floatScrollBar '
	      + 'floatSlider floatSlider2 floatSliderButtonGrp floatSliderGrp floor flow fluidCacheInfo '
	      + 'fluidEmitter fluidVoxelInfo flushUndo fmod fontDialog fopen formLayout format fprint '
	      + 'frameLayout fread freeFormFillet frewind fromNativePath fwrite gamma gauss '
	      + 'geometryConstraint getApplicationVersionAsFloat getAttr getClassification '
	      + 'getDefaultBrush getFileList getFluidAttr getInputDeviceRange getMayaPanelTypes '
	      + 'getModifiers getPanel getParticleAttr getPluginResource getenv getpid glRender '
	      + 'glRenderEditor globalStitch gmatch goal gotoBindPose grabColor gradientControl '
	      + 'gradientControlNoAttr graphDollyCtx graphSelectContext graphTrackCtx gravity grid '
	      + 'gridLayout group groupObjectsByName HfAddAttractorToAS HfAssignAS HfBuildEqualMap '
	      + 'HfBuildFurFiles HfBuildFurImages HfCancelAFR HfConnectASToHF HfCreateAttractor '
	      + 'HfDeleteAS HfEditAS HfPerformCreateAS HfRemoveAttractorFromAS HfSelectAttached '
	      + 'HfSelectAttractors HfUnAssignAS hardenPointCurve hardware hardwareRenderPanel '
	      + 'headsUpDisplay headsUpMessage help helpLine hermite hide hilite hitTest hotBox hotkey '
	      + 'hotkeyCheck hsv_to_rgb hudButton hudSlider hudSliderButton hwReflectionMap hwRender '
	      + 'hwRenderLoad hyperGraph hyperPanel hyperShade hypot iconTextButton iconTextCheckBox '
	      + 'iconTextRadioButton iconTextRadioCollection iconTextScrollList iconTextStaticLabel '
	      + 'ikHandle ikHandleCtx ikHandleDisplayScale ikSolver ikSplineHandleCtx ikSystem '
	      + 'ikSystemInfo ikfkDisplayMethod illustratorCurves image imfPlugins inheritTransform '
	      + 'insertJoint insertJointCtx insertKeyCtx insertKnotCurve insertKnotSurface instance '
	      + 'instanceable instancer intField intFieldGrp intScrollBar intSlider intSliderGrp '
	      + 'interToUI internalVar intersect iprEngine isAnimCurve isConnected isDirty isParentOf '
	      + 'isSameObject isTrue isValidObjectName isValidString isValidUiName isolateSelect '
	      + 'itemFilter itemFilterAttr itemFilterRender itemFilterType joint jointCluster jointCtx '
	      + 'jointDisplayScale jointLattice keyTangent keyframe keyframeOutliner '
	      + 'keyframeRegionCurrentTimeCtx keyframeRegionDirectKeyCtx keyframeRegionDollyCtx '
	      + 'keyframeRegionInsertKeyCtx keyframeRegionMoveKeyCtx keyframeRegionScaleKeyCtx '
	      + 'keyframeRegionSelectKeyCtx keyframeRegionSetKeyCtx keyframeRegionTrackCtx '
	      + 'keyframeStats lassoContext lattice latticeDeformKeyCtx launch launchImageEditor '
	      + 'layerButton layeredShaderPort layeredTexturePort layout layoutDialog lightList '
	      + 'lightListEditor lightListPanel lightlink lineIntersection linearPrecision linstep '
	      + 'listAnimatable listAttr listCameras listConnections listDeviceAttachments listHistory '
	      + 'listInputDeviceAxes listInputDeviceButtons listInputDevices listMenuAnnotation '
	      + 'listNodeTypes listPanelCategories listRelatives listSets listTransforms '
	      + 'listUnselected listerEditor loadFluid loadNewShelf loadPlugin '
	      + 'loadPluginLanguageResources loadPrefObjects localizedPanelLabel lockNode loft log '
	      + 'longNameOf lookThru ls lsThroughFilter lsType lsUI Mayatomr mag makeIdentity makeLive '
	      + 'makePaintable makeRoll makeSingleSurface makeTubeOn makebot manipMoveContext '
	      + 'manipMoveLimitsCtx manipOptions manipRotateContext manipRotateLimitsCtx '
	      + 'manipScaleContext manipScaleLimitsCtx marker match max memory menu menuBarLayout '
	      + 'menuEditor menuItem menuItemToShelf menuSet menuSetPref messageLine min minimizeApp '
	      + 'mirrorJoint modelCurrentTimeCtx modelEditor modelPanel mouse movIn movOut move '
	      + 'moveIKtoFK moveKeyCtx moveVertexAlongDirection multiProfileBirailSurface mute '
	      + 'nParticle nameCommand nameField namespace namespaceInfo newPanelItems newton nodeCast '
	      + 'nodeIconButton nodeOutliner nodePreset nodeType noise nonLinear normalConstraint '
	      + 'normalize nurbsBoolean nurbsCopyUVSet nurbsCube nurbsEditUV nurbsPlane nurbsSelect '
	      + 'nurbsSquare nurbsToPoly nurbsToPolygonsPref nurbsToSubdiv nurbsToSubdivPref '
	      + 'nurbsUVSet nurbsViewDirectionVector objExists objectCenter objectLayer objectType '
	      + 'objectTypeUI obsoleteProc oceanNurbsPreviewPlane offsetCurve offsetCurveOnSurface '
	      + 'offsetSurface openGLExtension openMayaPref optionMenu optionMenuGrp optionVar orbit '
	      + 'orbitCtx orientConstraint outlinerEditor outlinerPanel overrideModifier '
	      + 'paintEffectsDisplay pairBlend palettePort paneLayout panel panelConfiguration '
	      + 'panelHistory paramDimContext paramDimension paramLocator parent parentConstraint '
	      + 'particle particleExists particleInstancer particleRenderInfo partition pasteKey '
	      + 'pathAnimation pause pclose percent performanceOptions pfxstrokes pickWalk picture '
	      + 'pixelMove planarSrf plane play playbackOptions playblast plugAttr plugNode pluginInfo '
	      + 'pluginResourceUtil pointConstraint pointCurveConstraint pointLight pointMatrixMult '
	      + 'pointOnCurve pointOnSurface pointPosition poleVectorConstraint polyAppend '
	      + 'polyAppendFacetCtx polyAppendVertex polyAutoProjection polyAverageNormal '
	      + 'polyAverageVertex polyBevel polyBlendColor polyBlindData polyBoolOp polyBridgeEdge '
	      + 'polyCacheMonitor polyCheck polyChipOff polyClipboard polyCloseBorder polyCollapseEdge '
	      + 'polyCollapseFacet polyColorBlindData polyColorDel polyColorPerVertex polyColorSet '
	      + 'polyCompare polyCone polyCopyUV polyCrease polyCreaseCtx polyCreateFacet '
	      + 'polyCreateFacetCtx polyCube polyCut polyCutCtx polyCylinder polyCylindricalProjection '
	      + 'polyDelEdge polyDelFacet polyDelVertex polyDuplicateAndConnect polyDuplicateEdge '
	      + 'polyEditUV polyEditUVShell polyEvaluate polyExtrudeEdge polyExtrudeFacet '
	      + 'polyExtrudeVertex polyFlipEdge polyFlipUV polyForceUV polyGeoSampler polyHelix '
	      + 'polyInfo polyInstallAction polyLayoutUV polyListComponentConversion polyMapCut '
	      + 'polyMapDel polyMapSew polyMapSewMove polyMergeEdge polyMergeEdgeCtx polyMergeFacet '
	      + 'polyMergeFacetCtx polyMergeUV polyMergeVertex polyMirrorFace polyMoveEdge '
	      + 'polyMoveFacet polyMoveFacetUV polyMoveUV polyMoveVertex polyNormal polyNormalPerVertex '
	      + 'polyNormalizeUV polyOptUvs polyOptions polyOutput polyPipe polyPlanarProjection '
	      + 'polyPlane polyPlatonicSolid polyPoke polyPrimitive polyPrism polyProjection '
	      + 'polyPyramid polyQuad polyQueryBlindData polyReduce polySelect polySelectConstraint '
	      + 'polySelectConstraintMonitor polySelectCtx polySelectEditCtx polySeparate '
	      + 'polySetToFaceNormal polySewEdge polyShortestPathCtx polySmooth polySoftEdge '
	      + 'polySphere polySphericalProjection polySplit polySplitCtx polySplitEdge polySplitRing '
	      + 'polySplitVertex polyStraightenUVBorder polySubdivideEdge polySubdivideFacet '
	      + 'polyToSubdiv polyTorus polyTransfer polyTriangulate polyUVSet polyUnite polyWedgeFace '
	      + 'popen popupMenu pose pow preloadRefEd print progressBar progressWindow projFileViewer '
	      + 'projectCurve projectTangent projectionContext projectionManip promptDialog propModCtx '
	      + 'propMove psdChannelOutliner psdEditTextureFile psdExport psdTextureFile putenv pwd '
	      + 'python querySubdiv quit rad_to_deg radial radioButton radioButtonGrp radioCollection '
	      + 'radioMenuItemCollection rampColorPort rand randomizeFollicles randstate rangeControl '
	      + 'readTake rebuildCurve rebuildSurface recordAttr recordDevice redo reference '
	      + 'referenceEdit referenceQuery refineSubdivSelectionList refresh refreshAE '
	      + 'registerPluginResource rehash reloadImage removeJoint removeMultiInstance '
	      + 'removePanelCategory rename renameAttr renameSelectionList renameUI render '
	      + 'renderGlobalsNode renderInfo renderLayerButton renderLayerParent '
	      + 'renderLayerPostProcess renderLayerUnparent renderManip renderPartition '
	      + 'renderQualityNode renderSettings renderThumbnailUpdate renderWindowEditor '
	      + 'renderWindowSelectContext renderer reorder reorderDeformers requires reroot '
	      + 'resampleFluid resetAE resetPfxToPolyCamera resetTool resolutionNode retarget '
	      + 'reverseCurve reverseSurface revolve rgb_to_hsv rigidBody rigidSolver roll rollCtx '
	      + 'rootOf rot rotate rotationInterpolation roundConstantRadius rowColumnLayout rowLayout '
	      + 'runTimeCommand runup sampleImage saveAllShelves saveAttrPreset saveFluid saveImage '
	      + 'saveInitialState saveMenu savePrefObjects savePrefs saveShelf saveToolSettings scale '
	      + 'scaleBrushBrightness scaleComponents scaleConstraint scaleKey scaleKeyCtx sceneEditor '
	      + 'sceneUIReplacement scmh scriptCtx scriptEditorInfo scriptJob scriptNode scriptTable '
	      + 'scriptToShelf scriptedPanel scriptedPanelType scrollField scrollLayout sculpt '
	      + 'searchPathArray seed selLoadSettings select selectContext selectCurveCV selectKey '
	      + 'selectKeyCtx selectKeyframeRegionCtx selectMode selectPref selectPriority selectType '
	      + 'selectedNodes selectionConnection separator setAttr setAttrEnumResource '
	      + 'setAttrMapping setAttrNiceNameResource setConstraintRestPosition '
	      + 'setDefaultShadingGroup setDrivenKeyframe setDynamic setEditCtx setEditor setFluidAttr '
	      + 'setFocus setInfinity setInputDeviceMapping setKeyCtx setKeyPath setKeyframe '
	      + 'setKeyframeBlendshapeTargetWts setMenuMode setNodeNiceNameResource setNodeTypeFlag '
	      + 'setParent setParticleAttr setPfxToPolyCamera setPluginResource setProject '
	      + 'setStampDensity setStartupMessage setState setToolTo setUITemplate setXformManip sets '
	      + 'shadingConnection shadingGeometryRelCtx shadingLightRelCtx shadingNetworkCompare '
	      + 'shadingNode shapeCompare shelfButton shelfLayout shelfTabLayout shellField '
	      + 'shortNameOf showHelp showHidden showManipCtx showSelectionInTitle '
	      + 'showShadingGroupAttrEditor showWindow sign simplify sin singleProfileBirailSurface '
	      + 'size sizeBytes skinCluster skinPercent smoothCurve smoothTangentSurface smoothstep '
	      + 'snap2to2 snapKey snapMode snapTogetherCtx snapshot soft softMod softModCtx sort sound '
	      + 'soundControl source spaceLocator sphere sphrand spotLight spotLightPreviewPort '
	      + 'spreadSheetEditor spring sqrt squareSurface srtContext stackTrace startString '
	      + 'startsWith stitchAndExplodeShell stitchSurface stitchSurfacePoints strcmp '
	      + 'stringArrayCatenate stringArrayContains stringArrayCount stringArrayInsertAtIndex '
	      + 'stringArrayIntersector stringArrayRemove stringArrayRemoveAtIndex '
	      + 'stringArrayRemoveDuplicates stringArrayRemoveExact stringArrayToString '
	      + 'stringToStringArray strip stripPrefixFromName stroke subdAutoProjection '
	      + 'subdCleanTopology subdCollapse subdDuplicateAndConnect subdEditUV '
	      + 'subdListComponentConversion subdMapCut subdMapSewMove subdMatchTopology subdMirror '
	      + 'subdToBlind subdToPoly subdTransferUVsToCache subdiv subdivCrease '
	      + 'subdivDisplaySmoothness substitute substituteAllString substituteGeometry substring '
	      + 'surface surfaceSampler surfaceShaderList swatchDisplayPort switchTable symbolButton '
	      + 'symbolCheckBox sysFile system tabLayout tan tangentConstraint texLatticeDeformContext '
	      + 'texManipContext texMoveContext texMoveUVShellContext texRotateContext texScaleContext '
	      + 'texSelectContext texSelectShortestPathCtx texSmudgeUVContext texWinToolCtx text '
	      + 'textCurves textField textFieldButtonGrp textFieldGrp textManip textScrollList '
	      + 'textToShelf textureDisplacePlane textureHairColor texturePlacementContext '
	      + 'textureWindow threadCount threePointArcCtx timeControl timePort timerX toNativePath '
	      + 'toggle toggleAxis toggleWindowVisibility tokenize tokenizeList tolerance tolower '
	      + 'toolButton toolCollection toolDropped toolHasOptions toolPropertyWindow torus toupper '
	      + 'trace track trackCtx transferAttributes transformCompare transformLimits translator '
	      + 'trim trunc truncateFluidCache truncateHairCache tumble tumbleCtx turbulence '
	      + 'twoPointArcCtx uiRes uiTemplate unassignInputDevice undo undoInfo ungroup uniform unit '
	      + 'unloadPlugin untangleUV untitledFileName untrim upAxis updateAE userCtx uvLink '
	      + 'uvSnapshot validateShelfName vectorize view2dToolCtx viewCamera viewClipPlane '
	      + 'viewFit viewHeadOn viewLookAt viewManip viewPlace viewSet visor volumeAxis vortex '
	      + 'waitCursor warning webBrowser webBrowserPrefs whatIs window windowPref wire '
	      + 'wireContext workspace wrinkle wrinkleContext writeTake xbmLangPathList xform',
	    illegal: '</',
	    contains: [
	      hljs.C_NUMBER_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'string',
	        begin: '`',
	        end: '`',
	        contains: [ hljs.BACKSLASH_ESCAPE ]
	      },
	      { // eats variables
	        begin: /[$%@](\^\w\b|#\w+|[^\s\w{]|\{\w+\}|\w+)/ },
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE
	    ]
	  };
	}

	mel_1 = mel;
	return mel_1;
}

/*
Language: Mercury
Author: mucaho <mkucko@gmail.com>
Description: Mercury is a logic/functional programming language which combines the clarity and expressiveness of declarative programming with advanced static analysis and error detection features.
Website: https://www.mercurylang.org
*/

var mercury_1;
var hasRequiredMercury;

function requireMercury () {
	if (hasRequiredMercury) return mercury_1;
	hasRequiredMercury = 1;
	function mercury(hljs) {
	  const KEYWORDS = {
	    keyword:
	      'module use_module import_module include_module end_module initialise '
	      + 'mutable initialize finalize finalise interface implementation pred '
	      + 'mode func type inst solver any_pred any_func is semidet det nondet '
	      + 'multi erroneous failure cc_nondet cc_multi typeclass instance where '
	      + 'pragma promise external trace atomic or_else require_complete_switch '
	      + 'require_det require_semidet require_multi require_nondet '
	      + 'require_cc_multi require_cc_nondet require_erroneous require_failure',
	    meta:
	      // pragma
	      'inline no_inline type_spec source_file fact_table obsolete memo '
	      + 'loop_check minimal_model terminates does_not_terminate '
	      + 'check_termination promise_equivalent_clauses '
	      // preprocessor
	      + 'foreign_proc foreign_decl foreign_code foreign_type '
	      + 'foreign_import_module foreign_export_enum foreign_export '
	      + 'foreign_enum may_call_mercury will_not_call_mercury thread_safe '
	      + 'not_thread_safe maybe_thread_safe promise_pure promise_semipure '
	      + 'tabled_for_io local untrailed trailed attach_to_io_state '
	      + 'can_pass_as_mercury_type stable will_not_throw_exception '
	      + 'may_modify_trail will_not_modify_trail may_duplicate '
	      + 'may_not_duplicate affects_liveness does_not_affect_liveness '
	      + 'doesnt_affect_liveness no_sharing unknown_sharing sharing',
	    built_in:
	      'some all not if then else true fail false try catch catch_any '
	      + 'semidet_true semidet_false semidet_fail impure_true impure semipure'
	  };

	  const COMMENT = hljs.COMMENT('%', '$');

	  const NUMCODE = {
	    className: 'number',
	    begin: "0'.\\|0[box][0-9a-fA-F]*"
	  };

	  const ATOM = hljs.inherit(hljs.APOS_STRING_MODE, { relevance: 0 });
	  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { relevance: 0 });
	  const STRING_FMT = {
	    className: 'subst',
	    begin: '\\\\[abfnrtv]\\|\\\\x[0-9a-fA-F]*\\\\\\|%[-+# *.0-9]*[dioxXucsfeEgGp]',
	    relevance: 0
	  };
	  STRING.contains = STRING.contains.slice(); // we need our own copy of contains
	  STRING.contains.push(STRING_FMT);

	  const IMPLICATION = {
	    className: 'built_in',
	    variants: [
	      { begin: '<=>' },
	      {
	        begin: '<=',
	        relevance: 0
	      },
	      {
	        begin: '=>',
	        relevance: 0
	      },
	      { begin: '/\\\\' },
	      { begin: '\\\\/' }
	    ]
	  };

	  const HEAD_BODY_CONJUNCTION = {
	    className: 'built_in',
	    variants: [
	      { begin: ':-\\|-->' },
	      {
	        begin: '=',
	        relevance: 0
	      }
	    ]
	  };

	  return {
	    name: 'Mercury',
	    aliases: [
	      'm',
	      'moo'
	    ],
	    keywords: KEYWORDS,
	    contains: [
	      IMPLICATION,
	      HEAD_BODY_CONJUNCTION,
	      COMMENT,
	      hljs.C_BLOCK_COMMENT_MODE,
	      NUMCODE,
	      hljs.NUMBER_MODE,
	      ATOM,
	      STRING,
	      { // relevance booster
	        begin: /:-/ },
	      { // relevance booster
	        begin: /\.$/ }
	    ]
	  };
	}

	mercury_1 = mercury;
	return mercury_1;
}

/*
Language: MIPS Assembly
Author: Nebuleon Fumika <nebuleon.fumika@gmail.com>
Description: MIPS Assembly (up to MIPS32R2)
Website: https://en.wikipedia.org/wiki/MIPS_architecture
Category: assembler
*/

var mipsasm_1;
var hasRequiredMipsasm;

function requireMipsasm () {
	if (hasRequiredMipsasm) return mipsasm_1;
	hasRequiredMipsasm = 1;
	function mipsasm(hljs) {
	  // local labels: %?[FB]?[AT]?\d{1,2}\w+
	  return {
	    name: 'MIPS Assembly',
	    case_insensitive: true,
	    aliases: [ 'mips' ],
	    keywords: {
	      $pattern: '\\.?' + hljs.IDENT_RE,
	      meta:
	        // GNU preprocs
	        '.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .ltorg ',
	      built_in:
	        '$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 ' // integer registers
	        + '$16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 ' // integer registers
	        + 'zero at v0 v1 a0 a1 a2 a3 a4 a5 a6 a7 ' // integer register aliases
	        + 't0 t1 t2 t3 t4 t5 t6 t7 t8 t9 s0 s1 s2 s3 s4 s5 s6 s7 s8 ' // integer register aliases
	        + 'k0 k1 gp sp fp ra ' // integer register aliases
	        + '$f0 $f1 $f2 $f2 $f4 $f5 $f6 $f7 $f8 $f9 $f10 $f11 $f12 $f13 $f14 $f15 ' // floating-point registers
	        + '$f16 $f17 $f18 $f19 $f20 $f21 $f22 $f23 $f24 $f25 $f26 $f27 $f28 $f29 $f30 $f31 ' // floating-point registers
	        + 'Context Random EntryLo0 EntryLo1 Context PageMask Wired EntryHi ' // Coprocessor 0 registers
	        + 'HWREna BadVAddr Count Compare SR IntCtl SRSCtl SRSMap Cause EPC PRId ' // Coprocessor 0 registers
	        + 'EBase Config Config1 Config2 Config3 LLAddr Debug DEPC DESAVE CacheErr ' // Coprocessor 0 registers
	        + 'ECC ErrorEPC TagLo DataLo TagHi DataHi WatchLo WatchHi PerfCtl PerfCnt ' // Coprocessor 0 registers
	    },
	    contains: [
	      {
	        className: 'keyword',
	        begin: '\\b(' // mnemonics
	            // 32-bit integer instructions
	            + 'addi?u?|andi?|b(al)?|beql?|bgez(al)?l?|bgtzl?|blezl?|bltz(al)?l?|'
	            + 'bnel?|cl[oz]|divu?|ext|ins|j(al)?|jalr(\\.hb)?|jr(\\.hb)?|lbu?|lhu?|'
	            + 'll|lui|lw[lr]?|maddu?|mfhi|mflo|movn|movz|move|msubu?|mthi|mtlo|mul|'
	            + 'multu?|nop|nor|ori?|rotrv?|sb|sc|se[bh]|sh|sllv?|slti?u?|srav?|'
	            + 'srlv?|subu?|sw[lr]?|xori?|wsbh|'
	            // floating-point instructions
	            + 'abs\\.[sd]|add\\.[sd]|alnv.ps|bc1[ft]l?|'
	            + 'c\\.(s?f|un|u?eq|[ou]lt|[ou]le|ngle?|seq|l[et]|ng[et])\\.[sd]|'
	            + '(ceil|floor|round|trunc)\\.[lw]\\.[sd]|cfc1|cvt\\.d\\.[lsw]|'
	            + 'cvt\\.l\\.[dsw]|cvt\\.ps\\.s|cvt\\.s\\.[dlw]|cvt\\.s\\.p[lu]|cvt\\.w\\.[dls]|'
	            + 'div\\.[ds]|ldx?c1|luxc1|lwx?c1|madd\\.[sd]|mfc1|mov[fntz]?\\.[ds]|'
	            + 'msub\\.[sd]|mth?c1|mul\\.[ds]|neg\\.[ds]|nmadd\\.[ds]|nmsub\\.[ds]|'
	            + 'p[lu][lu]\\.ps|recip\\.fmt|r?sqrt\\.[ds]|sdx?c1|sub\\.[ds]|suxc1|'
	            + 'swx?c1|'
	            // system control instructions
	            + 'break|cache|d?eret|[de]i|ehb|mfc0|mtc0|pause|prefx?|rdhwr|'
	            + 'rdpgpr|sdbbp|ssnop|synci?|syscall|teqi?|tgei?u?|tlb(p|r|w[ir])|'
	            + 'tlti?u?|tnei?|wait|wrpgpr'
	        + ')',
	        end: '\\s'
	      },
	      // lines ending with ; or # aren't really comments, probably auto-detect fail
	      hljs.COMMENT('[;#](?!\\s*$)', '$'),
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'string',
	        begin: '\'',
	        end: '[^\\\\]\'',
	        relevance: 0
	      },
	      {
	        className: 'title',
	        begin: '\\|',
	        end: '\\|',
	        illegal: '\\n',
	        relevance: 0
	      },
	      {
	        className: 'number',
	        variants: [
	          { // hex
	            begin: '0x[0-9a-f]+' },
	          { // bare number
	            begin: '\\b-?\\d+' }
	        ],
	        relevance: 0
	      },
	      {
	        className: 'symbol',
	        variants: [
	          { // GNU MIPS syntax
	            begin: '^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:' },
	          { // numbered local labels
	            begin: '^\\s*[0-9]+:' },
	          { // number local label reference (backwards, forwards)
	            begin: '[0-9]+[bf]' }
	        ],
	        relevance: 0
	      }
	    ],
	    // forward slashes are not allowed
	    illegal: /\//
	  };
	}

	mipsasm_1 = mipsasm;
	return mipsasm_1;
}

/*
Language: Mizar
Description: The Mizar Language is a formal language derived from the mathematical vernacular.
Author: Kelley van Evert <kelleyvanevert@gmail.com>
Website: http://mizar.org/language/
Category: scientific
*/

var mizar_1;
var hasRequiredMizar;

function requireMizar () {
	if (hasRequiredMizar) return mizar_1;
	hasRequiredMizar = 1;
	function mizar(hljs) {
	  return {
	    name: 'Mizar',
	    keywords:
	      'environ vocabularies notations constructors definitions '
	      + 'registrations theorems schemes requirements begin end definition '
	      + 'registration cluster existence pred func defpred deffunc theorem '
	      + 'proof let take assume then thus hence ex for st holds consider '
	      + 'reconsider such that and in provided of as from be being by means '
	      + 'equals implies iff redefine define now not or attr is mode '
	      + 'suppose per cases set thesis contradiction scheme reserve struct '
	      + 'correctness compatibility coherence symmetry assymetry '
	      + 'reflexivity irreflexivity connectedness uniqueness commutativity '
	      + 'idempotence involutiveness projectivity',
	    contains: [ hljs.COMMENT('::', '$') ]
	  };
	}

	mizar_1 = mizar;
	return mizar_1;
}

/*
Language: Perl
Author: Peter Leonov <gojpeg@yandex.ru>
Website: https://www.perl.org
Category: common
*/

var perl_1;
var hasRequiredPerl;

function requirePerl () {
	if (hasRequiredPerl) return perl_1;
	hasRequiredPerl = 1;
	/** @type LanguageFn */
	function perl(hljs) {
	  const regex = hljs.regex;
	  const KEYWORDS = [
	    'abs',
	    'accept',
	    'alarm',
	    'and',
	    'atan2',
	    'bind',
	    'binmode',
	    'bless',
	    'break',
	    'caller',
	    'chdir',
	    'chmod',
	    'chomp',
	    'chop',
	    'chown',
	    'chr',
	    'chroot',
	    'close',
	    'closedir',
	    'connect',
	    'continue',
	    'cos',
	    'crypt',
	    'dbmclose',
	    'dbmopen',
	    'defined',
	    'delete',
	    'die',
	    'do',
	    'dump',
	    'each',
	    'else',
	    'elsif',
	    'endgrent',
	    'endhostent',
	    'endnetent',
	    'endprotoent',
	    'endpwent',
	    'endservent',
	    'eof',
	    'eval',
	    'exec',
	    'exists',
	    'exit',
	    'exp',
	    'fcntl',
	    'fileno',
	    'flock',
	    'for',
	    'foreach',
	    'fork',
	    'format',
	    'formline',
	    'getc',
	    'getgrent',
	    'getgrgid',
	    'getgrnam',
	    'gethostbyaddr',
	    'gethostbyname',
	    'gethostent',
	    'getlogin',
	    'getnetbyaddr',
	    'getnetbyname',
	    'getnetent',
	    'getpeername',
	    'getpgrp',
	    'getpriority',
	    'getprotobyname',
	    'getprotobynumber',
	    'getprotoent',
	    'getpwent',
	    'getpwnam',
	    'getpwuid',
	    'getservbyname',
	    'getservbyport',
	    'getservent',
	    'getsockname',
	    'getsockopt',
	    'given',
	    'glob',
	    'gmtime',
	    'goto',
	    'grep',
	    'gt',
	    'hex',
	    'if',
	    'index',
	    'int',
	    'ioctl',
	    'join',
	    'keys',
	    'kill',
	    'last',
	    'lc',
	    'lcfirst',
	    'length',
	    'link',
	    'listen',
	    'local',
	    'localtime',
	    'log',
	    'lstat',
	    'lt',
	    'ma',
	    'map',
	    'mkdir',
	    'msgctl',
	    'msgget',
	    'msgrcv',
	    'msgsnd',
	    'my',
	    'ne',
	    'next',
	    'no',
	    'not',
	    'oct',
	    'open',
	    'opendir',
	    'or',
	    'ord',
	    'our',
	    'pack',
	    'package',
	    'pipe',
	    'pop',
	    'pos',
	    'print',
	    'printf',
	    'prototype',
	    'push',
	    'q|0',
	    'qq',
	    'quotemeta',
	    'qw',
	    'qx',
	    'rand',
	    'read',
	    'readdir',
	    'readline',
	    'readlink',
	    'readpipe',
	    'recv',
	    'redo',
	    'ref',
	    'rename',
	    'require',
	    'reset',
	    'return',
	    'reverse',
	    'rewinddir',
	    'rindex',
	    'rmdir',
	    'say',
	    'scalar',
	    'seek',
	    'seekdir',
	    'select',
	    'semctl',
	    'semget',
	    'semop',
	    'send',
	    'setgrent',
	    'sethostent',
	    'setnetent',
	    'setpgrp',
	    'setpriority',
	    'setprotoent',
	    'setpwent',
	    'setservent',
	    'setsockopt',
	    'shift',
	    'shmctl',
	    'shmget',
	    'shmread',
	    'shmwrite',
	    'shutdown',
	    'sin',
	    'sleep',
	    'socket',
	    'socketpair',
	    'sort',
	    'splice',
	    'split',
	    'sprintf',
	    'sqrt',
	    'srand',
	    'stat',
	    'state',
	    'study',
	    'sub',
	    'substr',
	    'symlink',
	    'syscall',
	    'sysopen',
	    'sysread',
	    'sysseek',
	    'system',
	    'syswrite',
	    'tell',
	    'telldir',
	    'tie',
	    'tied',
	    'time',
	    'times',
	    'tr',
	    'truncate',
	    'uc',
	    'ucfirst',
	    'umask',
	    'undef',
	    'unless',
	    'unlink',
	    'unpack',
	    'unshift',
	    'untie',
	    'until',
	    'use',
	    'utime',
	    'values',
	    'vec',
	    'wait',
	    'waitpid',
	    'wantarray',
	    'warn',
	    'when',
	    'while',
	    'write',
	    'x|0',
	    'xor',
	    'y|0'
	  ];

	  // https://perldoc.perl.org/perlre#Modifiers
	  const REGEX_MODIFIERS = /[dualxmsipngr]{0,12}/; // aa and xx are valid, making max length 12
	  const PERL_KEYWORDS = {
	    $pattern: /[\w.]+/,
	    keyword: KEYWORDS.join(" ")
	  };
	  const SUBST = {
	    className: 'subst',
	    begin: '[$@]\\{',
	    end: '\\}',
	    keywords: PERL_KEYWORDS
	  };
	  const METHOD = {
	    begin: /->\{/,
	    end: /\}/
	    // contains defined later
	  };
	  const VAR = { variants: [
	    { begin: /\$\d/ },
	    { begin: regex.concat(
	      /[$%@](\^\w\b|#\w+(::\w+)*|\{\w+\}|\w+(::\w*)*)/,
	      // negative look-ahead tries to avoid matching patterns that are not
	      // Perl at all like $ident$, @ident@, etc.
	      `(?![A-Za-z])(?![@$%])`
	    ) },
	    {
	      begin: /[$%@][^\s\w{]/,
	      relevance: 0
	    }
	  ] };
	  const STRING_CONTAINS = [
	    hljs.BACKSLASH_ESCAPE,
	    SUBST,
	    VAR
	  ];
	  const REGEX_DELIMS = [
	    /!/,
	    /\//,
	    /\|/,
	    /\?/,
	    /'/,
	    /"/, // valid but infrequent and weird
	    /#/ // valid but infrequent and weird
	  ];
	  /**
	   * @param {string|RegExp} prefix
	   * @param {string|RegExp} open
	   * @param {string|RegExp} close
	   */
	  const PAIRED_DOUBLE_RE = (prefix, open, close = '\\1') => {
	    const middle = (close === '\\1')
	      ? close
	      : regex.concat(close, open);
	    return regex.concat(
	      regex.concat("(?:", prefix, ")"),
	      open,
	      /(?:\\.|[^\\\/])*?/,
	      middle,
	      /(?:\\.|[^\\\/])*?/,
	      close,
	      REGEX_MODIFIERS
	    );
	  };
	  /**
	   * @param {string|RegExp} prefix
	   * @param {string|RegExp} open
	   * @param {string|RegExp} close
	   */
	  const PAIRED_RE = (prefix, open, close) => {
	    return regex.concat(
	      regex.concat("(?:", prefix, ")"),
	      open,
	      /(?:\\.|[^\\\/])*?/,
	      close,
	      REGEX_MODIFIERS
	    );
	  };
	  const PERL_DEFAULT_CONTAINS = [
	    VAR,
	    hljs.HASH_COMMENT_MODE,
	    hljs.COMMENT(
	      /^=\w/,
	      /=cut/,
	      { endsWithParent: true }
	    ),
	    METHOD,
	    {
	      className: 'string',
	      contains: STRING_CONTAINS,
	      variants: [
	        {
	          begin: 'q[qwxr]?\\s*\\(',
	          end: '\\)',
	          relevance: 5
	        },
	        {
	          begin: 'q[qwxr]?\\s*\\[',
	          end: '\\]',
	          relevance: 5
	        },
	        {
	          begin: 'q[qwxr]?\\s*\\{',
	          end: '\\}',
	          relevance: 5
	        },
	        {
	          begin: 'q[qwxr]?\\s*\\|',
	          end: '\\|',
	          relevance: 5
	        },
	        {
	          begin: 'q[qwxr]?\\s*<',
	          end: '>',
	          relevance: 5
	        },
	        {
	          begin: 'qw\\s+q',
	          end: 'q',
	          relevance: 5
	        },
	        {
	          begin: '\'',
	          end: '\'',
	          contains: [ hljs.BACKSLASH_ESCAPE ]
	        },
	        {
	          begin: '"',
	          end: '"'
	        },
	        {
	          begin: '`',
	          end: '`',
	          contains: [ hljs.BACKSLASH_ESCAPE ]
	        },
	        {
	          begin: /\{\w+\}/,
	          relevance: 0
	        },
	        {
	          begin: '-?\\w+\\s*=>',
	          relevance: 0
	        }
	      ]
	    },
	    {
	      className: 'number',
	      begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
	      relevance: 0
	    },
	    { // regexp container
	      begin: '(\\/\\/|' + hljs.RE_STARTERS_RE + '|\\b(split|return|print|reverse|grep)\\b)\\s*',
	      keywords: 'split return print reverse grep',
	      relevance: 0,
	      contains: [
	        hljs.HASH_COMMENT_MODE,
	        {
	          className: 'regexp',
	          variants: [
	            // allow matching common delimiters
	            { begin: PAIRED_DOUBLE_RE("s|tr|y", regex.either(...REGEX_DELIMS, { capture: true })) },
	            // and then paired delmis
	            { begin: PAIRED_DOUBLE_RE("s|tr|y", "\\(", "\\)") },
	            { begin: PAIRED_DOUBLE_RE("s|tr|y", "\\[", "\\]") },
	            { begin: PAIRED_DOUBLE_RE("s|tr|y", "\\{", "\\}") }
	          ],
	          relevance: 2
	        },
	        {
	          className: 'regexp',
	          variants: [
	            {
	              // could be a comment in many languages so do not count
	              // as relevant
	              begin: /(m|qr)\/\//,
	              relevance: 0
	            },
	            // prefix is optional with /regex/
	            { begin: PAIRED_RE("(?:m|qr)?", /\//, /\//) },
	            // allow matching common delimiters
	            { begin: PAIRED_RE("m|qr", regex.either(...REGEX_DELIMS, { capture: true }), /\1/) },
	            // allow common paired delmins
	            { begin: PAIRED_RE("m|qr", /\(/, /\)/) },
	            { begin: PAIRED_RE("m|qr", /\[/, /\]/) },
	            { begin: PAIRED_RE("m|qr", /\{/, /\}/) }
	          ]
	        }
	      ]
	    },
	    {
	      className: 'function',
	      beginKeywords: 'sub',
	      end: '(\\s*\\(.*?\\))?[;{]',
	      excludeEnd: true,
	      relevance: 5,
	      contains: [ hljs.TITLE_MODE ]
	    },
	    {
	      begin: '-\\w\\b',
	      relevance: 0
	    },
	    {
	      begin: "^__DATA__$",
	      end: "^__END__$",
	      subLanguage: 'mojolicious',
	      contains: [
	        {
	          begin: "^@@.*",
	          end: "$",
	          className: "comment"
	        }
	      ]
	    }
	  ];
	  SUBST.contains = PERL_DEFAULT_CONTAINS;
	  METHOD.contains = PERL_DEFAULT_CONTAINS;

	  return {
	    name: 'Perl',
	    aliases: [
	      'pl',
	      'pm'
	    ],
	    keywords: PERL_KEYWORDS,
	    contains: PERL_DEFAULT_CONTAINS
	  };
	}

	perl_1 = perl;
	return perl_1;
}

/*
Language: Mojolicious
Requires: xml.js, perl.js
Author: Dotan Dimet <dotan@corky.net>
Description: Mojolicious .ep (Embedded Perl) templates
Website: https://mojolicious.org
Category: template
*/

var mojolicious_1;
var hasRequiredMojolicious;

function requireMojolicious () {
	if (hasRequiredMojolicious) return mojolicious_1;
	hasRequiredMojolicious = 1;
	function mojolicious(hljs) {
	  return {
	    name: 'Mojolicious',
	    subLanguage: 'xml',
	    contains: [
	      {
	        className: 'meta',
	        begin: '^__(END|DATA)__$'
	      },
	      // mojolicious line
	      {
	        begin: "^\\s*%{1,2}={0,2}",
	        end: '$',
	        subLanguage: 'perl'
	      },
	      // mojolicious block
	      {
	        begin: "<%{1,2}={0,2}",
	        end: "={0,1}%>",
	        subLanguage: 'perl',
	        excludeBegin: true,
	        excludeEnd: true
	      }
	    ]
	  };
	}

	mojolicious_1 = mojolicious;
	return mojolicious_1;
}

/*
Language: Monkey
Description: Monkey2 is an easy to use, cross platform, games oriented programming language from Blitz Research.
Author: Arthur Bikmullin <devolonter@gmail.com>
Website: https://blitzresearch.itch.io/monkey2
*/

var monkey_1;
var hasRequiredMonkey;

function requireMonkey () {
	if (hasRequiredMonkey) return monkey_1;
	hasRequiredMonkey = 1;
	function monkey(hljs) {
	  const NUMBER = {
	    className: 'number',
	    relevance: 0,
	    variants: [
	      { begin: '[$][a-fA-F0-9]+' },
	      hljs.NUMBER_MODE
	    ]
	  };
	  const FUNC_DEFINITION = {
	    variants: [
	      { match: [
	        /(function|method)/,
	        /\s+/,
	        hljs.UNDERSCORE_IDENT_RE,
	      ] },
	    ],
	    scope: {
	      1: "keyword",
	      3: "title.function"
	    }
	  };
	  const CLASS_DEFINITION = {
	    variants: [
	      { match: [
	        /(class|interface|extends|implements)/,
	        /\s+/,
	        hljs.UNDERSCORE_IDENT_RE,
	      ] },
	    ],
	    scope: {
	      1: "keyword",
	      3: "title.class"
	    }
	  };
	  const BUILT_INS = [
	    "DebugLog",
	    "DebugStop",
	    "Error",
	    "Print",
	    "ACos",
	    "ACosr",
	    "ASin",
	    "ASinr",
	    "ATan",
	    "ATan2",
	    "ATan2r",
	    "ATanr",
	    "Abs",
	    "Abs",
	    "Ceil",
	    "Clamp",
	    "Clamp",
	    "Cos",
	    "Cosr",
	    "Exp",
	    "Floor",
	    "Log",
	    "Max",
	    "Max",
	    "Min",
	    "Min",
	    "Pow",
	    "Sgn",
	    "Sgn",
	    "Sin",
	    "Sinr",
	    "Sqrt",
	    "Tan",
	    "Tanr",
	    "Seed",
	    "PI",
	    "HALFPI",
	    "TWOPI"
	  ];
	  const LITERALS = [
	    "true",
	    "false",
	    "null"
	  ];
	  const KEYWORDS = [
	    "public",
	    "private",
	    "property",
	    "continue",
	    "exit",
	    "extern",
	    "new",
	    "try",
	    "catch",
	    "eachin",
	    "not",
	    "abstract",
	    "final",
	    "select",
	    "case",
	    "default",
	    "const",
	    "local",
	    "global",
	    "field",
	    "end",
	    "if",
	    "then",
	    "else",
	    "elseif",
	    "endif",
	    "while",
	    "wend",
	    "repeat",
	    "until",
	    "forever",
	    "for",
	    "to",
	    "step",
	    "next",
	    "return",
	    "module",
	    "inline",
	    "throw",
	    "import",
	    // not positive, but these are not literals
	    "and",
	    "or",
	    "shl",
	    "shr",
	    "mod"
	  ];

	  return {
	    name: 'Monkey',
	    case_insensitive: true,
	    keywords: {
	      keyword: KEYWORDS,
	      built_in: BUILT_INS,
	      literal: LITERALS
	    },
	    illegal: /\/\*/,
	    contains: [
	      hljs.COMMENT('#rem', '#end'),
	      hljs.COMMENT(
	        "'",
	        '$',
	        { relevance: 0 }
	      ),
	      FUNC_DEFINITION,
	      CLASS_DEFINITION,
	      {
	        className: 'variable.language',
	        begin: /\b(self|super)\b/
	      },
	      {
	        className: 'meta',
	        begin: /\s*#/,
	        end: '$',
	        keywords: { keyword: 'if else elseif endif end then' }
	      },
	      {
	        match: [
	          /^\s*/,
	          /strict\b/
	        ],
	        scope: { 2: "meta" }
	      },
	      {
	        beginKeywords: 'alias',
	        end: '=',
	        contains: [ hljs.UNDERSCORE_TITLE_MODE ]
	      },
	      hljs.QUOTE_STRING_MODE,
	      NUMBER
	    ]
	  };
	}

	monkey_1 = monkey;
	return monkey_1;
}

/*
Language: MoonScript
Author: Billy Quith <chinbillybilbo@gmail.com>
Description: MoonScript is a programming language that transcompiles to Lua.
Origin: coffeescript.js
Website: http://moonscript.org/
Category: scripting
*/

var moonscript_1;
var hasRequiredMoonscript;

function requireMoonscript () {
	if (hasRequiredMoonscript) return moonscript_1;
	hasRequiredMoonscript = 1;
	function moonscript(hljs) {
	  const KEYWORDS = {
	    keyword:
	      // Moonscript keywords
	      'if then not for in while do return else elseif break continue switch and or '
	      + 'unless when class extends super local import export from using',
	    literal:
	      'true false nil',
	    built_in:
	      '_G _VERSION assert collectgarbage dofile error getfenv getmetatable ipairs load '
	      + 'loadfile loadstring module next pairs pcall print rawequal rawget rawset require '
	      + 'select setfenv setmetatable tonumber tostring type unpack xpcall coroutine debug '
	      + 'io math os package string table'
	  };
	  const JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
	  const SUBST = {
	    className: 'subst',
	    begin: /#\{/,
	    end: /\}/,
	    keywords: KEYWORDS
	  };
	  const EXPRESSIONS = [
	    hljs.inherit(hljs.C_NUMBER_MODE,
	      { starts: {
	        end: '(\\s*/)?',
	        relevance: 0
	      } }), // a number tries to eat the following slash to prevent treating it as a regexp
	    {
	      className: 'string',
	      variants: [
	        {
	          begin: /'/,
	          end: /'/,
	          contains: [ hljs.BACKSLASH_ESCAPE ]
	        },
	        {
	          begin: /"/,
	          end: /"/,
	          contains: [
	            hljs.BACKSLASH_ESCAPE,
	            SUBST
	          ]
	        }
	      ]
	    },
	    {
	      className: 'built_in',
	      begin: '@__' + hljs.IDENT_RE
	    },
	    { begin: '@' + hljs.IDENT_RE // relevance booster on par with CoffeeScript
	    },
	    { begin: hljs.IDENT_RE + '\\\\' + hljs.IDENT_RE // inst\method
	    }
	  ];
	  SUBST.contains = EXPRESSIONS;

	  const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
	  const POSSIBLE_PARAMS_RE = '(\\(.*\\)\\s*)?\\B[-=]>';
	  const PARAMS = {
	    className: 'params',
	    begin: '\\([^\\(]',
	    returnBegin: true,
	    /* We need another contained nameless mode to not have every nested
	    pair of parens to be called "params" */
	    contains: [
	      {
	        begin: /\(/,
	        end: /\)/,
	        keywords: KEYWORDS,
	        contains: [ 'self' ].concat(EXPRESSIONS)
	      }
	    ]
	  };

	  return {
	    name: 'MoonScript',
	    aliases: [ 'moon' ],
	    keywords: KEYWORDS,
	    illegal: /\/\*/,
	    contains: EXPRESSIONS.concat([
	      hljs.COMMENT('--', '$'),
	      {
	        className: 'function', // function: -> =>
	        begin: '^\\s*' + JS_IDENT_RE + '\\s*=\\s*' + POSSIBLE_PARAMS_RE,
	        end: '[-=]>',
	        returnBegin: true,
	        contains: [
	          TITLE,
	          PARAMS
	        ]
	      },
	      {
	        begin: /[\(,:=]\s*/, // anonymous function start
	        relevance: 0,
	        contains: [
	          {
	            className: 'function',
	            begin: POSSIBLE_PARAMS_RE,
	            end: '[-=]>',
	            returnBegin: true,
	            contains: [ PARAMS ]
	          }
	        ]
	      },
	      {
	        className: 'class',
	        beginKeywords: 'class',
	        end: '$',
	        illegal: /[:="\[\]]/,
	        contains: [
	          {
	            beginKeywords: 'extends',
	            endsWithParent: true,
	            illegal: /[:="\[\]]/,
	            contains: [ TITLE ]
	          },
	          TITLE
	        ]
	      },
	      {
	        className: 'name', // table
	        begin: JS_IDENT_RE + ':',
	        end: ':',
	        returnBegin: true,
	        returnEnd: true,
	        relevance: 0
	      }
	    ])
	  };
	}

	moonscript_1 = moonscript;
	return moonscript_1;
}

/*
 Language: N1QL
 Author: Andres Täht <andres.taht@gmail.com>
 Contributors: Rene Saarsoo <nene@triin.net>
 Description: Couchbase query language
 Website: https://www.couchbase.com/products/n1ql
 */

var n1ql_1;
var hasRequiredN1ql;

function requireN1ql () {
	if (hasRequiredN1ql) return n1ql_1;
	hasRequiredN1ql = 1;
	function n1ql(hljs) {
	  // Taken from http://developer.couchbase.com/documentation/server/current/n1ql/n1ql-language-reference/reservedwords.html
	  const KEYWORDS = [
	    "all",
	    "alter",
	    "analyze",
	    "and",
	    "any",
	    "array",
	    "as",
	    "asc",
	    "begin",
	    "between",
	    "binary",
	    "boolean",
	    "break",
	    "bucket",
	    "build",
	    "by",
	    "call",
	    "case",
	    "cast",
	    "cluster",
	    "collate",
	    "collection",
	    "commit",
	    "connect",
	    "continue",
	    "correlate",
	    "cover",
	    "create",
	    "database",
	    "dataset",
	    "datastore",
	    "declare",
	    "decrement",
	    "delete",
	    "derived",
	    "desc",
	    "describe",
	    "distinct",
	    "do",
	    "drop",
	    "each",
	    "element",
	    "else",
	    "end",
	    "every",
	    "except",
	    "exclude",
	    "execute",
	    "exists",
	    "explain",
	    "fetch",
	    "first",
	    "flatten",
	    "for",
	    "force",
	    "from",
	    "function",
	    "grant",
	    "group",
	    "gsi",
	    "having",
	    "if",
	    "ignore",
	    "ilike",
	    "in",
	    "include",
	    "increment",
	    "index",
	    "infer",
	    "inline",
	    "inner",
	    "insert",
	    "intersect",
	    "into",
	    "is",
	    "join",
	    "key",
	    "keys",
	    "keyspace",
	    "known",
	    "last",
	    "left",
	    "let",
	    "letting",
	    "like",
	    "limit",
	    "lsm",
	    "map",
	    "mapping",
	    "matched",
	    "materialized",
	    "merge",
	    "minus",
	    "namespace",
	    "nest",
	    "not",
	    "number",
	    "object",
	    "offset",
	    "on",
	    "option",
	    "or",
	    "order",
	    "outer",
	    "over",
	    "parse",
	    "partition",
	    "password",
	    "path",
	    "pool",
	    "prepare",
	    "primary",
	    "private",
	    "privilege",
	    "procedure",
	    "public",
	    "raw",
	    "realm",
	    "reduce",
	    "rename",
	    "return",
	    "returning",
	    "revoke",
	    "right",
	    "role",
	    "rollback",
	    "satisfies",
	    "schema",
	    "select",
	    "self",
	    "semi",
	    "set",
	    "show",
	    "some",
	    "start",
	    "statistics",
	    "string",
	    "system",
	    "then",
	    "to",
	    "transaction",
	    "trigger",
	    "truncate",
	    "under",
	    "union",
	    "unique",
	    "unknown",
	    "unnest",
	    "unset",
	    "update",
	    "upsert",
	    "use",
	    "user",
	    "using",
	    "validate",
	    "value",
	    "valued",
	    "values",
	    "via",
	    "view",
	    "when",
	    "where",
	    "while",
	    "with",
	    "within",
	    "work",
	    "xor"
	  ];
	  // Taken from http://developer.couchbase.com/documentation/server/4.5/n1ql/n1ql-language-reference/literals.html
	  const LITERALS = [
	    "true",
	    "false",
	    "null",
	    "missing|5"
	  ];
	  // Taken from http://developer.couchbase.com/documentation/server/4.5/n1ql/n1ql-language-reference/functions.html
	  const BUILT_INS = [
	    "array_agg",
	    "array_append",
	    "array_concat",
	    "array_contains",
	    "array_count",
	    "array_distinct",
	    "array_ifnull",
	    "array_length",
	    "array_max",
	    "array_min",
	    "array_position",
	    "array_prepend",
	    "array_put",
	    "array_range",
	    "array_remove",
	    "array_repeat",
	    "array_replace",
	    "array_reverse",
	    "array_sort",
	    "array_sum",
	    "avg",
	    "count",
	    "max",
	    "min",
	    "sum",
	    "greatest",
	    "least",
	    "ifmissing",
	    "ifmissingornull",
	    "ifnull",
	    "missingif",
	    "nullif",
	    "ifinf",
	    "ifnan",
	    "ifnanorinf",
	    "naninf",
	    "neginfif",
	    "posinfif",
	    "clock_millis",
	    "clock_str",
	    "date_add_millis",
	    "date_add_str",
	    "date_diff_millis",
	    "date_diff_str",
	    "date_part_millis",
	    "date_part_str",
	    "date_trunc_millis",
	    "date_trunc_str",
	    "duration_to_str",
	    "millis",
	    "str_to_millis",
	    "millis_to_str",
	    "millis_to_utc",
	    "millis_to_zone_name",
	    "now_millis",
	    "now_str",
	    "str_to_duration",
	    "str_to_utc",
	    "str_to_zone_name",
	    "decode_json",
	    "encode_json",
	    "encoded_size",
	    "poly_length",
	    "base64",
	    "base64_encode",
	    "base64_decode",
	    "meta",
	    "uuid",
	    "abs",
	    "acos",
	    "asin",
	    "atan",
	    "atan2",
	    "ceil",
	    "cos",
	    "degrees",
	    "e",
	    "exp",
	    "ln",
	    "log",
	    "floor",
	    "pi",
	    "power",
	    "radians",
	    "random",
	    "round",
	    "sign",
	    "sin",
	    "sqrt",
	    "tan",
	    "trunc",
	    "object_length",
	    "object_names",
	    "object_pairs",
	    "object_inner_pairs",
	    "object_values",
	    "object_inner_values",
	    "object_add",
	    "object_put",
	    "object_remove",
	    "object_unwrap",
	    "regexp_contains",
	    "regexp_like",
	    "regexp_position",
	    "regexp_replace",
	    "contains",
	    "initcap",
	    "length",
	    "lower",
	    "ltrim",
	    "position",
	    "repeat",
	    "replace",
	    "rtrim",
	    "split",
	    "substr",
	    "title",
	    "trim",
	    "upper",
	    "isarray",
	    "isatom",
	    "isboolean",
	    "isnumber",
	    "isobject",
	    "isstring",
	    "type",
	    "toarray",
	    "toatom",
	    "toboolean",
	    "tonumber",
	    "toobject",
	    "tostring"
	  ];

	  return {
	    name: 'N1QL',
	    case_insensitive: true,
	    contains: [
	      {
	        beginKeywords:
	          'build create index delete drop explain infer|10 insert merge prepare select update upsert|10',
	        end: /;/,
	        keywords: {
	          keyword: KEYWORDS,
	          literal: LITERALS,
	          built_in: BUILT_INS
	        },
	        contains: [
	          {
	            className: 'string',
	            begin: '\'',
	            end: '\'',
	            contains: [ hljs.BACKSLASH_ESCAPE ]
	          },
	          {
	            className: 'string',
	            begin: '"',
	            end: '"',
	            contains: [ hljs.BACKSLASH_ESCAPE ]
	          },
	          {
	            className: 'symbol',
	            begin: '`',
	            end: '`',
	            contains: [ hljs.BACKSLASH_ESCAPE ]
	          },
	          hljs.C_NUMBER_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      },
	      hljs.C_BLOCK_COMMENT_MODE
	    ]
	  };
	}

	n1ql_1 = n1ql;
	return n1ql_1;
}

/*
Language: NestedText
Description: NestedText is a file format for holding data that is to be entered, edited, or viewed by people.
Website: https://nestedtext.org/
Category: config
*/

var nestedtext_1;
var hasRequiredNestedtext;

function requireNestedtext () {
	if (hasRequiredNestedtext) return nestedtext_1;
	hasRequiredNestedtext = 1;
	/** @type LanguageFn */
	function nestedtext(hljs) {
	  const NESTED = {
	    match: [
	      /^\s*(?=\S)/, // have to look forward here to avoid polynomial backtracking
	      /[^:]+/,
	      /:\s*/,
	      /$/
	    ],
	    className: {
	      2: "attribute",
	      3: "punctuation"
	    }
	  };
	  const DICTIONARY_ITEM = {
	    match: [
	      /^\s*(?=\S)/, // have to look forward here to avoid polynomial backtracking
	      /[^:]*[^: ]/,
	      /[ ]*:/,
	      /[ ]/,
	      /.*$/
	    ],
	    className: {
	      2: "attribute",
	      3: "punctuation",
	      5: "string"
	    }
	  };
	  const STRING = {
	    match: [
	      /^\s*/,
	      />/,
	      /[ ]/,
	      /.*$/
	    ],
	    className: {
	      2: "punctuation",
	      4: "string"
	    }
	  };
	  const LIST_ITEM = {
	    variants: [
	      { match: [
	        /^\s*/,
	        /-/,
	        /[ ]/,
	        /.*$/
	      ] },
	      { match: [
	        /^\s*/,
	        /-$/
	      ] }
	    ],
	    className: {
	      2: "bullet",
	      4: "string"
	    }
	  };

	  return {
	    name: 'Nested Text',
	    aliases: [ 'nt' ],
	    contains: [
	      hljs.inherit(hljs.HASH_COMMENT_MODE, {
	        begin: /^\s*(?=#)/,
	        excludeBegin: true
	      }),
	      LIST_ITEM,
	      STRING,
	      NESTED,
	      DICTIONARY_ITEM
	    ]
	  };
	}

	nestedtext_1 = nestedtext;
	return nestedtext_1;
}

/*
Language: Nginx config
Author: Peter Leonov <gojpeg@yandex.ru>
Contributors: Ivan Sagalaev <maniac@softwaremaniacs.org>
Category: config, web
Website: https://www.nginx.com
*/

var nginx_1;
var hasRequiredNginx;

function requireNginx () {
	if (hasRequiredNginx) return nginx_1;
	hasRequiredNginx = 1;
	/** @type LanguageFn */
	function nginx(hljs) {
	  const regex = hljs.regex;
	  const VAR = {
	    className: 'variable',
	    variants: [
	      { begin: /\$\d+/ },
	      { begin: /\$\{\w+\}/ },
	      { begin: regex.concat(/[$@]/, hljs.UNDERSCORE_IDENT_RE) }
	    ]
	  };
	  const LITERALS = [
	    "on",
	    "off",
	    "yes",
	    "no",
	    "true",
	    "false",
	    "none",
	    "blocked",
	    "debug",
	    "info",
	    "notice",
	    "warn",
	    "error",
	    "crit",
	    "select",
	    "break",
	    "last",
	    "permanent",
	    "redirect",
	    "kqueue",
	    "rtsig",
	    "epoll",
	    "poll",
	    "/dev/poll"
	  ];
	  const DEFAULT = {
	    endsWithParent: true,
	    keywords: {
	      $pattern: /[a-z_]{2,}|\/dev\/poll/,
	      literal: LITERALS
	    },
	    relevance: 0,
	    illegal: '=>',
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      {
	        className: 'string',
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          VAR
	        ],
	        variants: [
	          {
	            begin: /"/,
	            end: /"/
	          },
	          {
	            begin: /'/,
	            end: /'/
	          }
	        ]
	      },
	      // this swallows entire URLs to avoid detecting numbers within
	      {
	        begin: '([a-z]+):/',
	        end: '\\s',
	        endsWithParent: true,
	        excludeEnd: true,
	        contains: [ VAR ]
	      },
	      {
	        className: 'regexp',
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          VAR
	        ],
	        variants: [
	          {
	            begin: "\\s\\^",
	            end: "\\s|\\{|;",
	            returnEnd: true
	          },
	          // regexp locations (~, ~*)
	          {
	            begin: "~\\*?\\s+",
	            end: "\\s|\\{|;",
	            returnEnd: true
	          },
	          // *.example.com
	          { begin: "\\*(\\.[a-z\\-]+)+" },
	          // sub.example.*
	          { begin: "([a-z\\-]+\\.)+\\*" }
	        ]
	      },
	      // IP
	      {
	        className: 'number',
	        begin: '\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b'
	      },
	      // units
	      {
	        className: 'number',
	        begin: '\\b\\d+[kKmMgGdshdwy]?\\b',
	        relevance: 0
	      },
	      VAR
	    ]
	  };

	  return {
	    name: 'Nginx config',
	    aliases: [ 'nginxconf' ],
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      {
	        beginKeywords: "upstream location",
	        end: /;|\{/,
	        contains: DEFAULT.contains,
	        keywords: { section: "upstream location" }
	      },
	      {
	        className: 'section',
	        begin: regex.concat(hljs.UNDERSCORE_IDENT_RE + regex.lookahead(/\s+\{/)),
	        relevance: 0
	      },
	      {
	        begin: regex.lookahead(hljs.UNDERSCORE_IDENT_RE + '\\s'),
	        end: ';|\\{',
	        contains: [
	          {
	            className: 'attribute',
	            begin: hljs.UNDERSCORE_IDENT_RE,
	            starts: DEFAULT
	          }
	        ],
	        relevance: 0
	      }
	    ],
	    illegal: '[^\\s\\}\\{]'
	  };
	}

	nginx_1 = nginx;
	return nginx_1;
}

/*
Language: Nim
Description: Nim is a statically typed compiled systems programming language.
Website: https://nim-lang.org
Category: system
*/

var nim_1;
var hasRequiredNim;

function requireNim () {
	if (hasRequiredNim) return nim_1;
	hasRequiredNim = 1;
	function nim(hljs) {
	  const TYPES = [
	    "int",
	    "int8",
	    "int16",
	    "int32",
	    "int64",
	    "uint",
	    "uint8",
	    "uint16",
	    "uint32",
	    "uint64",
	    "float",
	    "float32",
	    "float64",
	    "bool",
	    "char",
	    "string",
	    "cstring",
	    "pointer",
	    "expr",
	    "stmt",
	    "void",
	    "auto",
	    "any",
	    "range",
	    "array",
	    "openarray",
	    "varargs",
	    "seq",
	    "set",
	    "clong",
	    "culong",
	    "cchar",
	    "cschar",
	    "cshort",
	    "cint",
	    "csize",
	    "clonglong",
	    "cfloat",
	    "cdouble",
	    "clongdouble",
	    "cuchar",
	    "cushort",
	    "cuint",
	    "culonglong",
	    "cstringarray",
	    "semistatic"
	  ];
	  const KEYWORDS = [
	    "addr",
	    "and",
	    "as",
	    "asm",
	    "bind",
	    "block",
	    "break",
	    "case",
	    "cast",
	    "const",
	    "continue",
	    "converter",
	    "discard",
	    "distinct",
	    "div",
	    "do",
	    "elif",
	    "else",
	    "end",
	    "enum",
	    "except",
	    "export",
	    "finally",
	    "for",
	    "from",
	    "func",
	    "generic",
	    "guarded",
	    "if",
	    "import",
	    "in",
	    "include",
	    "interface",
	    "is",
	    "isnot",
	    "iterator",
	    "let",
	    "macro",
	    "method",
	    "mixin",
	    "mod",
	    "nil",
	    "not",
	    "notin",
	    "object",
	    "of",
	    "or",
	    "out",
	    "proc",
	    "ptr",
	    "raise",
	    "ref",
	    "return",
	    "shared",
	    "shl",
	    "shr",
	    "static",
	    "template",
	    "try",
	    "tuple",
	    "type",
	    "using",
	    "var",
	    "when",
	    "while",
	    "with",
	    "without",
	    "xor",
	    "yield"
	  ];
	  const BUILT_INS = [
	    "stdin",
	    "stdout",
	    "stderr",
	    "result"
	  ];
	  const LITERALS = [
	    "true",
	    "false"
	  ];
	  return {
	    name: 'Nim',
	    keywords: {
	      keyword: KEYWORDS,
	      literal: LITERALS,
	      type: TYPES,
	      built_in: BUILT_INS
	    },
	    contains: [
	      {
	        className: 'meta', // Actually pragma
	        begin: /\{\./,
	        end: /\.\}/,
	        relevance: 10
	      },
	      {
	        className: 'string',
	        begin: /[a-zA-Z]\w*"/,
	        end: /"/,
	        contains: [ { begin: /""/ } ]
	      },
	      {
	        className: 'string',
	        begin: /([a-zA-Z]\w*)?"""/,
	        end: /"""/
	      },
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'type',
	        begin: /\b[A-Z]\w+\b/,
	        relevance: 0
	      },
	      {
	        className: 'number',
	        relevance: 0,
	        variants: [
	          { begin: /\b(0[xX][0-9a-fA-F][_0-9a-fA-F]*)('?[iIuU](8|16|32|64))?/ },
	          { begin: /\b(0o[0-7][_0-7]*)('?[iIuUfF](8|16|32|64))?/ },
	          { begin: /\b(0(b|B)[01][_01]*)('?[iIuUfF](8|16|32|64))?/ },
	          { begin: /\b(\d[_\d]*)('?[iIuUfF](8|16|32|64))?/ }
	        ]
	      },
	      hljs.HASH_COMMENT_MODE
	    ]
	  };
	}

	nim_1 = nim;
	return nim_1;
}

/*
Language: Nix
Author: Domen Kožar <domen@dev.si>
Description: Nix functional language
Website: http://nixos.org/nix
*/

var nix_1;
var hasRequiredNix;

function requireNix () {
	if (hasRequiredNix) return nix_1;
	hasRequiredNix = 1;
	function nix(hljs) {
	  const KEYWORDS = {
	    keyword: [
	      "rec",
	      "with",
	      "let",
	      "in",
	      "inherit",
	      "assert",
	      "if",
	      "else",
	      "then"
	    ],
	    literal: [
	      "true",
	      "false",
	      "or",
	      "and",
	      "null"
	    ],
	    built_in: [
	      "import",
	      "abort",
	      "baseNameOf",
	      "dirOf",
	      "isNull",
	      "builtins",
	      "map",
	      "removeAttrs",
	      "throw",
	      "toString",
	      "derivation"
	    ]
	  };
	  const ANTIQUOTE = {
	    className: 'subst',
	    begin: /\$\{/,
	    end: /\}/,
	    keywords: KEYWORDS
	  };
	  const ESCAPED_DOLLAR = {
	    className: 'char.escape',
	    begin: /''\$/,
	  };
	  const ATTRS = {
	    begin: /[a-zA-Z0-9-_]+(\s*=)/,
	    returnBegin: true,
	    relevance: 0,
	    contains: [
	      {
	        className: 'attr',
	        begin: /\S+/,
	        relevance: 0.2
	      }
	    ]
	  };
	  const STRING = {
	    className: 'string',
	    contains: [ ESCAPED_DOLLAR, ANTIQUOTE ],
	    variants: [
	      {
	        begin: "''",
	        end: "''"
	      },
	      {
	        begin: '"',
	        end: '"'
	      }
	    ]
	  };
	  const EXPRESSIONS = [
	    hljs.NUMBER_MODE,
	    hljs.HASH_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE,
	    STRING,
	    ATTRS
	  ];
	  ANTIQUOTE.contains = EXPRESSIONS;
	  return {
	    name: 'Nix',
	    aliases: [ "nixos" ],
	    keywords: KEYWORDS,
	    contains: EXPRESSIONS
	  };
	}

	nix_1 = nix;
	return nix_1;
}

/*
Language: Node REPL
Requires: javascript.js
Author: Marat Nagayev <nagaevmt@yandex.ru>
Category: scripting
*/

var nodeRepl_1;
var hasRequiredNodeRepl;

function requireNodeRepl () {
	if (hasRequiredNodeRepl) return nodeRepl_1;
	hasRequiredNodeRepl = 1;
	/** @type LanguageFn */
	function nodeRepl(hljs) {
	  return {
	    name: 'Node REPL',
	    contains: [
	      {
	        className: 'meta.prompt',
	        starts: {
	          // a space separates the REPL prefix from the actual code
	          // this is purely for cleaner HTML output
	          end: / |$/,
	          starts: {
	            end: '$',
	            subLanguage: 'javascript'
	          }
	        },
	        variants: [
	          { begin: /^>(?=[ ]|$)/ },
	          { begin: /^\.\.\.(?=[ ]|$)/ }
	        ]
	      }
	    ]
	  };
	}

	nodeRepl_1 = nodeRepl;
	return nodeRepl_1;
}

/*
Language: NSIS
Description: Nullsoft Scriptable Install System
Author: Jan T. Sott <jan.sott@gmail.com>
Website: https://nsis.sourceforge.io/Main_Page
*/

var nsis_1;
var hasRequiredNsis;

function requireNsis () {
	if (hasRequiredNsis) return nsis_1;
	hasRequiredNsis = 1;
	function nsis(hljs) {
	  const regex = hljs.regex;
	  const LANGUAGE_CONSTANTS = [
	    "ADMINTOOLS",
	    "APPDATA",
	    "CDBURN_AREA",
	    "CMDLINE",
	    "COMMONFILES32",
	    "COMMONFILES64",
	    "COMMONFILES",
	    "COOKIES",
	    "DESKTOP",
	    "DOCUMENTS",
	    "EXEDIR",
	    "EXEFILE",
	    "EXEPATH",
	    "FAVORITES",
	    "FONTS",
	    "HISTORY",
	    "HWNDPARENT",
	    "INSTDIR",
	    "INTERNET_CACHE",
	    "LANGUAGE",
	    "LOCALAPPDATA",
	    "MUSIC",
	    "NETHOOD",
	    "OUTDIR",
	    "PICTURES",
	    "PLUGINSDIR",
	    "PRINTHOOD",
	    "PROFILE",
	    "PROGRAMFILES32",
	    "PROGRAMFILES64",
	    "PROGRAMFILES",
	    "QUICKLAUNCH",
	    "RECENT",
	    "RESOURCES_LOCALIZED",
	    "RESOURCES",
	    "SENDTO",
	    "SMPROGRAMS",
	    "SMSTARTUP",
	    "STARTMENU",
	    "SYSDIR",
	    "TEMP",
	    "TEMPLATES",
	    "VIDEOS",
	    "WINDIR"
	  ];

	  const PARAM_NAMES = [
	    "ARCHIVE",
	    "FILE_ATTRIBUTE_ARCHIVE",
	    "FILE_ATTRIBUTE_NORMAL",
	    "FILE_ATTRIBUTE_OFFLINE",
	    "FILE_ATTRIBUTE_READONLY",
	    "FILE_ATTRIBUTE_SYSTEM",
	    "FILE_ATTRIBUTE_TEMPORARY",
	    "HKCR",
	    "HKCU",
	    "HKDD",
	    "HKEY_CLASSES_ROOT",
	    "HKEY_CURRENT_CONFIG",
	    "HKEY_CURRENT_USER",
	    "HKEY_DYN_DATA",
	    "HKEY_LOCAL_MACHINE",
	    "HKEY_PERFORMANCE_DATA",
	    "HKEY_USERS",
	    "HKLM",
	    "HKPD",
	    "HKU",
	    "IDABORT",
	    "IDCANCEL",
	    "IDIGNORE",
	    "IDNO",
	    "IDOK",
	    "IDRETRY",
	    "IDYES",
	    "MB_ABORTRETRYIGNORE",
	    "MB_DEFBUTTON1",
	    "MB_DEFBUTTON2",
	    "MB_DEFBUTTON3",
	    "MB_DEFBUTTON4",
	    "MB_ICONEXCLAMATION",
	    "MB_ICONINFORMATION",
	    "MB_ICONQUESTION",
	    "MB_ICONSTOP",
	    "MB_OK",
	    "MB_OKCANCEL",
	    "MB_RETRYCANCEL",
	    "MB_RIGHT",
	    "MB_RTLREADING",
	    "MB_SETFOREGROUND",
	    "MB_TOPMOST",
	    "MB_USERICON",
	    "MB_YESNO",
	    "NORMAL",
	    "OFFLINE",
	    "READONLY",
	    "SHCTX",
	    "SHELL_CONTEXT",
	    "SYSTEM|TEMPORARY",
	  ];

	  const COMPILER_FLAGS = [
	    "addincludedir",
	    "addplugindir",
	    "appendfile",
	    "assert",
	    "cd",
	    "define",
	    "delfile",
	    "echo",
	    "else",
	    "endif",
	    "error",
	    "execute",
	    "finalize",
	    "getdllversion",
	    "gettlbversion",
	    "if",
	    "ifdef",
	    "ifmacrodef",
	    "ifmacrondef",
	    "ifndef",
	    "include",
	    "insertmacro",
	    "macro",
	    "macroend",
	    "makensis",
	    "packhdr",
	    "searchparse",
	    "searchreplace",
	    "system",
	    "tempfile",
	    "undef",
	    "uninstfinalize",
	    "verbose",
	    "warning",
	  ];

	  const CONSTANTS = {
	    className: 'variable.constant',
	    begin: regex.concat(/\$/, regex.either(...LANGUAGE_CONSTANTS))
	  };

	  const DEFINES = {
	    // ${defines}
	    className: 'variable',
	    begin: /\$+\{[\!\w.:-]+\}/
	  };

	  const VARIABLES = {
	    // $variables
	    className: 'variable',
	    begin: /\$+\w[\w\.]*/,
	    illegal: /\(\)\{\}/
	  };

	  const LANGUAGES = {
	    // $(language_strings)
	    className: 'variable',
	    begin: /\$+\([\w^.:!-]+\)/
	  };

	  const PARAMETERS = {
	    // command parameters
	    className: 'params',
	    begin: regex.either(...PARAM_NAMES)
	  };

	  const COMPILER = {
	    // !compiler_flags
	    className: 'keyword',
	    begin: regex.concat(
	      /!/,
	      regex.either(...COMPILER_FLAGS)
	    )
	  };

	  const ESCAPE_CHARS = {
	    // $\n, $\r, $\t, $$
	    className: 'char.escape',
	    begin: /\$(\\[nrt]|\$)/
	  };

	  const PLUGINS = {
	    // plug::ins
	    className: 'title.function',
	    begin: /\w+::\w+/
	  };

	  const STRING = {
	    className: 'string',
	    variants: [
	      {
	        begin: '"',
	        end: '"'
	      },
	      {
	        begin: '\'',
	        end: '\''
	      },
	      {
	        begin: '`',
	        end: '`'
	      }
	    ],
	    illegal: /\n/,
	    contains: [
	      ESCAPE_CHARS,
	      CONSTANTS,
	      DEFINES,
	      VARIABLES,
	      LANGUAGES
	    ]
	  };

	  const KEYWORDS = [
	    "Abort",
	    "AddBrandingImage",
	    "AddSize",
	    "AllowRootDirInstall",
	    "AllowSkipFiles",
	    "AutoCloseWindow",
	    "BGFont",
	    "BGGradient",
	    "BrandingText",
	    "BringToFront",
	    "Call",
	    "CallInstDLL",
	    "Caption",
	    "ChangeUI",
	    "CheckBitmap",
	    "ClearErrors",
	    "CompletedText",
	    "ComponentText",
	    "CopyFiles",
	    "CRCCheck",
	    "CreateDirectory",
	    "CreateFont",
	    "CreateShortCut",
	    "Delete",
	    "DeleteINISec",
	    "DeleteINIStr",
	    "DeleteRegKey",
	    "DeleteRegValue",
	    "DetailPrint",
	    "DetailsButtonText",
	    "DirText",
	    "DirVar",
	    "DirVerify",
	    "EnableWindow",
	    "EnumRegKey",
	    "EnumRegValue",
	    "Exch",
	    "Exec",
	    "ExecShell",
	    "ExecShellWait",
	    "ExecWait",
	    "ExpandEnvStrings",
	    "File",
	    "FileBufSize",
	    "FileClose",
	    "FileErrorText",
	    "FileOpen",
	    "FileRead",
	    "FileReadByte",
	    "FileReadUTF16LE",
	    "FileReadWord",
	    "FileWriteUTF16LE",
	    "FileSeek",
	    "FileWrite",
	    "FileWriteByte",
	    "FileWriteWord",
	    "FindClose",
	    "FindFirst",
	    "FindNext",
	    "FindWindow",
	    "FlushINI",
	    "GetCurInstType",
	    "GetCurrentAddress",
	    "GetDlgItem",
	    "GetDLLVersion",
	    "GetDLLVersionLocal",
	    "GetErrorLevel",
	    "GetFileTime",
	    "GetFileTimeLocal",
	    "GetFullPathName",
	    "GetFunctionAddress",
	    "GetInstDirError",
	    "GetKnownFolderPath",
	    "GetLabelAddress",
	    "GetTempFileName",
	    "GetWinVer",
	    "Goto",
	    "HideWindow",
	    "Icon",
	    "IfAbort",
	    "IfErrors",
	    "IfFileExists",
	    "IfRebootFlag",
	    "IfRtlLanguage",
	    "IfShellVarContextAll",
	    "IfSilent",
	    "InitPluginsDir",
	    "InstallButtonText",
	    "InstallColors",
	    "InstallDir",
	    "InstallDirRegKey",
	    "InstProgressFlags",
	    "InstType",
	    "InstTypeGetText",
	    "InstTypeSetText",
	    "Int64Cmp",
	    "Int64CmpU",
	    "Int64Fmt",
	    "IntCmp",
	    "IntCmpU",
	    "IntFmt",
	    "IntOp",
	    "IntPtrCmp",
	    "IntPtrCmpU",
	    "IntPtrOp",
	    "IsWindow",
	    "LangString",
	    "LicenseBkColor",
	    "LicenseData",
	    "LicenseForceSelection",
	    "LicenseLangString",
	    "LicenseText",
	    "LoadAndSetImage",
	    "LoadLanguageFile",
	    "LockWindow",
	    "LogSet",
	    "LogText",
	    "ManifestDPIAware",
	    "ManifestLongPathAware",
	    "ManifestMaxVersionTested",
	    "ManifestSupportedOS",
	    "MessageBox",
	    "MiscButtonText",
	    "Name|0",
	    "Nop",
	    "OutFile",
	    "Page",
	    "PageCallbacks",
	    "PEAddResource",
	    "PEDllCharacteristics",
	    "PERemoveResource",
	    "PESubsysVer",
	    "Pop",
	    "Push",
	    "Quit",
	    "ReadEnvStr",
	    "ReadINIStr",
	    "ReadRegDWORD",
	    "ReadRegStr",
	    "Reboot",
	    "RegDLL",
	    "Rename",
	    "RequestExecutionLevel",
	    "ReserveFile",
	    "Return",
	    "RMDir",
	    "SearchPath",
	    "SectionGetFlags",
	    "SectionGetInstTypes",
	    "SectionGetSize",
	    "SectionGetText",
	    "SectionIn",
	    "SectionSetFlags",
	    "SectionSetInstTypes",
	    "SectionSetSize",
	    "SectionSetText",
	    "SendMessage",
	    "SetAutoClose",
	    "SetBrandingImage",
	    "SetCompress",
	    "SetCompressor",
	    "SetCompressorDictSize",
	    "SetCtlColors",
	    "SetCurInstType",
	    "SetDatablockOptimize",
	    "SetDateSave",
	    "SetDetailsPrint",
	    "SetDetailsView",
	    "SetErrorLevel",
	    "SetErrors",
	    "SetFileAttributes",
	    "SetFont",
	    "SetOutPath",
	    "SetOverwrite",
	    "SetRebootFlag",
	    "SetRegView",
	    "SetShellVarContext",
	    "SetSilent",
	    "ShowInstDetails",
	    "ShowUninstDetails",
	    "ShowWindow",
	    "SilentInstall",
	    "SilentUnInstall",
	    "Sleep",
	    "SpaceTexts",
	    "StrCmp",
	    "StrCmpS",
	    "StrCpy",
	    "StrLen",
	    "SubCaption",
	    "Unicode",
	    "UninstallButtonText",
	    "UninstallCaption",
	    "UninstallIcon",
	    "UninstallSubCaption",
	    "UninstallText",
	    "UninstPage",
	    "UnRegDLL",
	    "Var",
	    "VIAddVersionKey",
	    "VIFileVersion",
	    "VIProductVersion",
	    "WindowIcon",
	    "WriteINIStr",
	    "WriteRegBin",
	    "WriteRegDWORD",
	    "WriteRegExpandStr",
	    "WriteRegMultiStr",
	    "WriteRegNone",
	    "WriteRegStr",
	    "WriteUninstaller",
	    "XPStyle"
	  ];

	  const LITERALS = [
	    "admin",
	    "all",
	    "auto",
	    "both",
	    "bottom",
	    "bzip2",
	    "colored",
	    "components",
	    "current",
	    "custom",
	    "directory",
	    "false",
	    "force",
	    "hide",
	    "highest",
	    "ifdiff",
	    "ifnewer",
	    "instfiles",
	    "lastused",
	    "leave",
	    "left",
	    "license",
	    "listonly",
	    "lzma",
	    "nevershow",
	    "none",
	    "normal",
	    "notset",
	    "off",
	    "on",
	    "open",
	    "print",
	    "right",
	    "show",
	    "silent",
	    "silentlog",
	    "smooth",
	    "textonly",
	    "top",
	    "true",
	    "try",
	    "un.components",
	    "un.custom",
	    "un.directory",
	    "un.instfiles",
	    "un.license",
	    "uninstConfirm",
	    "user",
	    "Win10",
	    "Win7",
	    "Win8",
	    "WinVista",
	    "zlib"
	  ];

	  const FUNCTION_DEFINITION = {
	    match: [
	      /Function/,
	      /\s+/,
	      regex.concat(/(\.)?/, hljs.IDENT_RE)
	    ],
	    scope: {
	      1: "keyword",
	      3: "title.function"
	    }
	  };

	  // Var Custom.Variable.Name.Item
	  // Var /GLOBAL Custom.Variable.Name.Item
	  const VARIABLE_NAME_RE = /[A-Za-z][\w.]*/;
	  const VARIABLE_DEFINITION = {
	    match: [
	      /Var/,
	      /\s+/,
	      /(?:\/GLOBAL\s+)?/,
	      VARIABLE_NAME_RE
	    ],
	    scope: {
	      1: "keyword",
	      3: "params",
	      4: "variable"
	    }
	  };

	  return {
	    name: 'NSIS',
	    case_insensitive: true,
	    keywords: {
	      keyword: KEYWORDS,
	      literal: LITERALS
	    },
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.COMMENT(
	        ';',
	        '$',
	        { relevance: 0 }
	      ),
	      VARIABLE_DEFINITION,
	      FUNCTION_DEFINITION,
	      { beginKeywords: 'Function PageEx Section SectionGroup FunctionEnd SectionEnd', },
	      STRING,
	      COMPILER,
	      DEFINES,
	      VARIABLES,
	      LANGUAGES,
	      PARAMETERS,
	      PLUGINS,
	      hljs.NUMBER_MODE
	    ]
	  };
	}

	nsis_1 = nsis;
	return nsis_1;
}

/*
Language: Objective-C
Author: Valerii Hiora <valerii.hiora@gmail.com>
Contributors: Angel G. Olloqui <angelgarcia.mail@gmail.com>, Matt Diephouse <matt@diephouse.com>, Andrew Farmer <ahfarmer@gmail.com>, Minh Nguyễn <mxn@1ec5.org>
Website: https://developer.apple.com/documentation/objectivec
Category: common
*/

var objectivec_1;
var hasRequiredObjectivec;

function requireObjectivec () {
	if (hasRequiredObjectivec) return objectivec_1;
	hasRequiredObjectivec = 1;
	function objectivec(hljs) {
	  const API_CLASS = {
	    className: 'built_in',
	    begin: '\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+'
	  };
	  const IDENTIFIER_RE = /[a-zA-Z@][a-zA-Z0-9_]*/;
	  const TYPES = [
	    "int",
	    "float",
	    "char",
	    "unsigned",
	    "signed",
	    "short",
	    "long",
	    "double",
	    "wchar_t",
	    "unichar",
	    "void",
	    "bool",
	    "BOOL",
	    "id|0",
	    "_Bool"
	  ];
	  const KWS = [
	    "while",
	    "export",
	    "sizeof",
	    "typedef",
	    "const",
	    "struct",
	    "for",
	    "union",
	    "volatile",
	    "static",
	    "mutable",
	    "if",
	    "do",
	    "return",
	    "goto",
	    "enum",
	    "else",
	    "break",
	    "extern",
	    "asm",
	    "case",
	    "default",
	    "register",
	    "explicit",
	    "typename",
	    "switch",
	    "continue",
	    "inline",
	    "readonly",
	    "assign",
	    "readwrite",
	    "self",
	    "@synchronized",
	    "id",
	    "typeof",
	    "nonatomic",
	    "IBOutlet",
	    "IBAction",
	    "strong",
	    "weak",
	    "copy",
	    "in",
	    "out",
	    "inout",
	    "bycopy",
	    "byref",
	    "oneway",
	    "__strong",
	    "__weak",
	    "__block",
	    "__autoreleasing",
	    "@private",
	    "@protected",
	    "@public",
	    "@try",
	    "@property",
	    "@end",
	    "@throw",
	    "@catch",
	    "@finally",
	    "@autoreleasepool",
	    "@synthesize",
	    "@dynamic",
	    "@selector",
	    "@optional",
	    "@required",
	    "@encode",
	    "@package",
	    "@import",
	    "@defs",
	    "@compatibility_alias",
	    "__bridge",
	    "__bridge_transfer",
	    "__bridge_retained",
	    "__bridge_retain",
	    "__covariant",
	    "__contravariant",
	    "__kindof",
	    "_Nonnull",
	    "_Nullable",
	    "_Null_unspecified",
	    "__FUNCTION__",
	    "__PRETTY_FUNCTION__",
	    "__attribute__",
	    "getter",
	    "setter",
	    "retain",
	    "unsafe_unretained",
	    "nonnull",
	    "nullable",
	    "null_unspecified",
	    "null_resettable",
	    "class",
	    "instancetype",
	    "NS_DESIGNATED_INITIALIZER",
	    "NS_UNAVAILABLE",
	    "NS_REQUIRES_SUPER",
	    "NS_RETURNS_INNER_POINTER",
	    "NS_INLINE",
	    "NS_AVAILABLE",
	    "NS_DEPRECATED",
	    "NS_ENUM",
	    "NS_OPTIONS",
	    "NS_SWIFT_UNAVAILABLE",
	    "NS_ASSUME_NONNULL_BEGIN",
	    "NS_ASSUME_NONNULL_END",
	    "NS_REFINED_FOR_SWIFT",
	    "NS_SWIFT_NAME",
	    "NS_SWIFT_NOTHROW",
	    "NS_DURING",
	    "NS_HANDLER",
	    "NS_ENDHANDLER",
	    "NS_VALUERETURN",
	    "NS_VOIDRETURN"
	  ];
	  const LITERALS = [
	    "false",
	    "true",
	    "FALSE",
	    "TRUE",
	    "nil",
	    "YES",
	    "NO",
	    "NULL"
	  ];
	  const BUILT_INS = [
	    "dispatch_once_t",
	    "dispatch_queue_t",
	    "dispatch_sync",
	    "dispatch_async",
	    "dispatch_once"
	  ];
	  const KEYWORDS = {
	    "variable.language": [
	      "this",
	      "super"
	    ],
	    $pattern: IDENTIFIER_RE,
	    keyword: KWS,
	    literal: LITERALS,
	    built_in: BUILT_INS,
	    type: TYPES
	  };
	  const CLASS_KEYWORDS = {
	    $pattern: IDENTIFIER_RE,
	    keyword: [
	      "@interface",
	      "@class",
	      "@protocol",
	      "@implementation"
	    ]
	  };
	  return {
	    name: 'Objective-C',
	    aliases: [
	      'mm',
	      'objc',
	      'obj-c',
	      'obj-c++',
	      'objective-c++'
	    ],
	    keywords: KEYWORDS,
	    illegal: '</',
	    contains: [
	      API_CLASS,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.C_NUMBER_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.APOS_STRING_MODE,
	      {
	        className: 'string',
	        variants: [
	          {
	            begin: '@"',
	            end: '"',
	            illegal: '\\n',
	            contains: [ hljs.BACKSLASH_ESCAPE ]
	          }
	        ]
	      },
	      {
	        className: 'meta',
	        begin: /#\s*[a-z]+\b/,
	        end: /$/,
	        keywords: { keyword:
	            'if else elif endif define undef warning error line '
	            + 'pragma ifdef ifndef include' },
	        contains: [
	          {
	            begin: /\\\n/,
	            relevance: 0
	          },
	          hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'string' }),
	          {
	            className: 'string',
	            begin: /<.*?>/,
	            end: /$/,
	            illegal: '\\n'
	          },
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      },
	      {
	        className: 'class',
	        begin: '(' + CLASS_KEYWORDS.keyword.join('|') + ')\\b',
	        end: /(\{|$)/,
	        excludeEnd: true,
	        keywords: CLASS_KEYWORDS,
	        contains: [ hljs.UNDERSCORE_TITLE_MODE ]
	      },
	      {
	        begin: '\\.' + hljs.UNDERSCORE_IDENT_RE,
	        relevance: 0
	      }
	    ]
	  };
	}

	objectivec_1 = objectivec;
	return objectivec_1;
}

/*
Language: OCaml
Author: Mehdi Dogguy <mehdi@dogguy.org>
Contributors: Nicolas Braud-Santoni <nicolas.braud-santoni@ens-cachan.fr>, Mickael Delahaye <mickael.delahaye@gmail.com>
Description: OCaml language definition.
Website: https://ocaml.org
Category: functional
*/

var ocaml_1;
var hasRequiredOcaml;

function requireOcaml () {
	if (hasRequiredOcaml) return ocaml_1;
	hasRequiredOcaml = 1;
	function ocaml(hljs) {
	  /* missing support for heredoc-like string (OCaml 4.0.2+) */
	  return {
	    name: 'OCaml',
	    aliases: [ 'ml' ],
	    keywords: {
	      $pattern: '[a-z_]\\w*!?',
	      keyword:
	        'and as assert asr begin class constraint do done downto else end '
	        + 'exception external for fun function functor if in include '
	        + 'inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method '
	        + 'mod module mutable new object of open! open or private rec sig struct '
	        + 'then to try type val! val virtual when while with '
	        /* camlp4 */
	        + 'parser value',
	      built_in:
	        /* built-in types */
	        'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit '
	        /* (some) types in Pervasives */
	        + 'in_channel out_channel ref',
	      literal:
	        'true false'
	    },
	    illegal: /\/\/|>>/,
	    contains: [
	      {
	        className: 'literal',
	        begin: '\\[(\\|\\|)?\\]|\\(\\)',
	        relevance: 0
	      },
	      hljs.COMMENT(
	        '\\(\\*',
	        '\\*\\)',
	        { contains: [ 'self' ] }
	      ),
	      { /* type variable */
	        className: 'symbol',
	        begin: '\'[A-Za-z_](?!\')[\\w\']*'
	        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
	      },
	      { /* polymorphic variant */
	        className: 'type',
	        begin: '`[A-Z][\\w\']*'
	      },
	      { /* module or constructor */
	        className: 'type',
	        begin: '\\b[A-Z][\\w\']*',
	        relevance: 0
	      },
	      { /* don't color identifiers, but safely catch all identifiers with ' */
	        begin: '[a-z_]\\w*\'[\\w\']*',
	        relevance: 0
	      },
	      hljs.inherit(hljs.APOS_STRING_MODE, {
	        className: 'string',
	        relevance: 0
	      }),
	      hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
	      {
	        className: 'number',
	        begin:
	          '\\b(0[xX][a-fA-F0-9_]+[Lln]?|'
	          + '0[oO][0-7_]+[Lln]?|'
	          + '0[bB][01_]+[Lln]?|'
	          + '[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',
	        relevance: 0
	      },
	      { begin: /->/ // relevance booster
	      }
	    ]
	  };
	}

	ocaml_1 = ocaml;
	return ocaml_1;
}

/*
Language: OpenSCAD
Author: Dan Panzarella <alsoelp@gmail.com>
Description: OpenSCAD is a language for the 3D CAD modeling software of the same name.
Website: https://www.openscad.org
Category: scientific
*/

var openscad_1;
var hasRequiredOpenscad;

function requireOpenscad () {
	if (hasRequiredOpenscad) return openscad_1;
	hasRequiredOpenscad = 1;
	function openscad(hljs) {
	  const SPECIAL_VARS = {
	    className: 'keyword',
	    begin: '\\$(f[asn]|t|vp[rtd]|children)'
	  };
	  const LITERALS = {
	    className: 'literal',
	    begin: 'false|true|PI|undef'
	  };
	  const NUMBERS = {
	    className: 'number',
	    begin: '\\b\\d+(\\.\\d+)?(e-?\\d+)?', // adds 1e5, 1e-10
	    relevance: 0
	  };
	  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
	  const PREPRO = {
	    className: 'meta',
	    keywords: { keyword: 'include use' },
	    begin: 'include|use <',
	    end: '>'
	  };
	  const PARAMS = {
	    className: 'params',
	    begin: '\\(',
	    end: '\\)',
	    contains: [
	      'self',
	      NUMBERS,
	      STRING,
	      SPECIAL_VARS,
	      LITERALS
	    ]
	  };
	  const MODIFIERS = {
	    begin: '[*!#%]',
	    relevance: 0
	  };
	  const FUNCTIONS = {
	    className: 'function',
	    beginKeywords: 'module function',
	    end: /=|\{/,
	    contains: [
	      PARAMS,
	      hljs.UNDERSCORE_TITLE_MODE
	    ]
	  };

	  return {
	    name: 'OpenSCAD',
	    aliases: [ 'scad' ],
	    keywords: {
	      keyword: 'function module include use for intersection_for if else \\%',
	      literal: 'false true PI undef',
	      built_in: 'circle square polygon text sphere cube cylinder polyhedron translate rotate scale resize mirror multmatrix color offset hull minkowski union difference intersection abs sign sin cos tan acos asin atan atan2 floor round ceil ln log pow sqrt exp rands min max concat lookup str chr search version version_num norm cross parent_module echo import import_dxf dxf_linear_extrude linear_extrude rotate_extrude surface projection render children dxf_cross dxf_dim let assign'
	    },
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      NUMBERS,
	      PREPRO,
	      STRING,
	      SPECIAL_VARS,
	      MODIFIERS,
	      FUNCTIONS
	    ]
	  };
	}

	openscad_1 = openscad;
	return openscad_1;
}

/*
Language: Oxygene
Author: Carlo Kok <ck@remobjects.com>
Description: Oxygene is built on the foundation of Object Pascal, revamped and extended to be a modern language for the twenty-first century.
Website: https://www.elementscompiler.com/elements/default.aspx
*/

var oxygene_1;
var hasRequiredOxygene;

function requireOxygene () {
	if (hasRequiredOxygene) return oxygene_1;
	hasRequiredOxygene = 1;
	function oxygene(hljs) {
	  const OXYGENE_KEYWORDS = {
	    $pattern: /\.?\w+/,
	    keyword:
	      'abstract add and array as asc aspect assembly async begin break block by case class concat const copy constructor continue '
	      + 'create default delegate desc distinct div do downto dynamic each else empty end ensure enum equals event except exit extension external false '
	      + 'final finalize finalizer finally flags for forward from function future global group has if implementation implements implies in index inherited '
	      + 'inline interface into invariants is iterator join locked locking loop matching method mod module namespace nested new nil not notify nullable of '
	      + 'old on operator or order out override parallel params partial pinned private procedure property protected public queryable raise read readonly '
	      + 'record reintroduce remove repeat require result reverse sealed select self sequence set shl shr skip static step soft take then to true try tuple '
	      + 'type union unit unsafe until uses using var virtual raises volatile where while with write xor yield await mapped deprecated stdcall cdecl pascal '
	      + 'register safecall overload library platform reference packed strict published autoreleasepool selector strong weak unretained'
	  };
	  const CURLY_COMMENT = hljs.COMMENT(
	    /\{/,
	    /\}/,
	    { relevance: 0 }
	  );
	  const PAREN_COMMENT = hljs.COMMENT(
	    '\\(\\*',
	    '\\*\\)',
	    { relevance: 10 }
	  );
	  const STRING = {
	    className: 'string',
	    begin: '\'',
	    end: '\'',
	    contains: [ { begin: '\'\'' } ]
	  };
	  const CHAR_STRING = {
	    className: 'string',
	    begin: '(#\\d+)+'
	  };
	  const FUNCTION = {
	    beginKeywords: 'function constructor destructor procedure method',
	    end: '[:;]',
	    keywords: 'function constructor|10 destructor|10 procedure|10 method|10',
	    contains: [
	      hljs.inherit(hljs.TITLE_MODE, { scope: "title.function" }),
	      {
	        className: 'params',
	        begin: '\\(',
	        end: '\\)',
	        keywords: OXYGENE_KEYWORDS,
	        contains: [
	          STRING,
	          CHAR_STRING
	        ]
	      },
	      CURLY_COMMENT,
	      PAREN_COMMENT
	    ]
	  };

	  const SEMICOLON = {
	    scope: "punctuation",
	    match: /;/,
	    relevance: 0
	  };

	  return {
	    name: 'Oxygene',
	    case_insensitive: true,
	    keywords: OXYGENE_KEYWORDS,
	    illegal: '("|\\$[G-Zg-z]|\\/\\*|</|=>|->)',
	    contains: [
	      CURLY_COMMENT,
	      PAREN_COMMENT,
	      hljs.C_LINE_COMMENT_MODE,
	      STRING,
	      CHAR_STRING,
	      hljs.NUMBER_MODE,
	      FUNCTION,
	      SEMICOLON
	    ]
	  };
	}

	oxygene_1 = oxygene;
	return oxygene_1;
}

/*
Language: Parser3
Requires: xml.js
Author: Oleg Volchkov <oleg@volchkov.net>
Website: https://www.parser.ru/en/
Category: template
*/

var parser3_1;
var hasRequiredParser3;

function requireParser3 () {
	if (hasRequiredParser3) return parser3_1;
	hasRequiredParser3 = 1;
	function parser3(hljs) {
	  const CURLY_SUBCOMMENT = hljs.COMMENT(
	    /\{/,
	    /\}/,
	    { contains: [ 'self' ] }
	  );
	  return {
	    name: 'Parser3',
	    subLanguage: 'xml',
	    relevance: 0,
	    contains: [
	      hljs.COMMENT('^#', '$'),
	      hljs.COMMENT(
	        /\^rem\{/,
	        /\}/,
	        {
	          relevance: 10,
	          contains: [ CURLY_SUBCOMMENT ]
	        }
	      ),
	      {
	        className: 'meta',
	        begin: '^@(?:BASE|USE|CLASS|OPTIONS)$',
	        relevance: 10
	      },
	      {
	        className: 'title',
	        begin: '@[\\w\\-]+\\[[\\w^;\\-]*\\](?:\\[[\\w^;\\-]*\\])?(?:.*)$'
	      },
	      {
	        className: 'variable',
	        begin: /\$\{?[\w\-.:]+\}?/
	      },
	      {
	        className: 'keyword',
	        begin: /\^[\w\-.:]+/
	      },
	      {
	        className: 'number',
	        begin: '\\^#[0-9a-fA-F]+'
	      },
	      hljs.C_NUMBER_MODE
	    ]
	  };
	}

	parser3_1 = parser3;
	return parser3_1;
}

/*
Language: Packet Filter config
Description: pf.conf — packet filter configuration file (OpenBSD)
Author: Peter Piwowarski <oldlaptop654@aol.com>
Website: http://man.openbsd.org/pf.conf
Category: config
*/

var pf_1;
var hasRequiredPf;

function requirePf () {
	if (hasRequiredPf) return pf_1;
	hasRequiredPf = 1;
	function pf(hljs) {
	  const MACRO = {
	    className: 'variable',
	    begin: /\$[\w\d#@][\w\d_]*/,
	    relevance: 0
	  };
	  const TABLE = {
	    className: 'variable',
	    begin: /<(?!\/)/,
	    end: />/
	  };

	  return {
	    name: 'Packet Filter config',
	    aliases: [ 'pf.conf' ],
	    keywords: {
	      $pattern: /[a-z0-9_<>-]+/,
	      built_in: /* block match pass are "actions" in pf.conf(5), the rest are
	                 * lexically similar top-level commands.
	                 */
	        'block match pass load anchor|5 antispoof|10 set table',
	      keyword:
	        'in out log quick on rdomain inet inet6 proto from port os to route '
	        + 'allow-opts divert-packet divert-reply divert-to flags group icmp-type '
	        + 'icmp6-type label once probability recieved-on rtable prio queue '
	        + 'tos tag tagged user keep fragment for os drop '
	        + 'af-to|10 binat-to|10 nat-to|10 rdr-to|10 bitmask least-stats random round-robin '
	        + 'source-hash static-port '
	        + 'dup-to reply-to route-to '
	        + 'parent bandwidth default min max qlimit '
	        + 'block-policy debug fingerprints hostid limit loginterface optimization '
	        + 'reassemble ruleset-optimization basic none profile skip state-defaults '
	        + 'state-policy timeout '
	        + 'const counters persist '
	        + 'no modulate synproxy state|5 floating if-bound no-sync pflow|10 sloppy '
	        + 'source-track global rule max-src-nodes max-src-states max-src-conn '
	        + 'max-src-conn-rate overload flush '
	        + 'scrub|5 max-mss min-ttl no-df|10 random-id',
	      literal:
	        'all any no-route self urpf-failed egress|5 unknown'
	    },
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      hljs.NUMBER_MODE,
	      hljs.QUOTE_STRING_MODE,
	      MACRO,
	      TABLE
	    ]
	  };
	}

	pf_1 = pf;
	return pf_1;
}

/*
Language: PostgreSQL and PL/pgSQL
Author: Egor Rogov (e.rogov@postgrespro.ru)
Website: https://www.postgresql.org/docs/11/sql.html
Description:
    This language incorporates both PostgreSQL SQL dialect and PL/pgSQL language.
    It is based on PostgreSQL version 11. Some notes:
    - Text in double-dollar-strings is _always_ interpreted as some programming code. Text
      in ordinary quotes is _never_ interpreted that way and highlighted just as a string.
    - There are quite a bit "special cases". That's because many keywords are not strictly
      they are keywords in some contexts and ordinary identifiers in others. Only some
      of such cases are handled; you still can get some of your identifiers highlighted
      wrong way.
    - Function names deliberately are not highlighted. There is no way to tell function
      call from other constructs, hence we can't highlight _all_ function names. And
      some names highlighted while others not looks ugly.
*/

var pgsql_1;
var hasRequiredPgsql;

function requirePgsql () {
	if (hasRequiredPgsql) return pgsql_1;
	hasRequiredPgsql = 1;
	function pgsql(hljs) {
	  const COMMENT_MODE = hljs.COMMENT('--', '$');
	  const UNQUOTED_IDENT = '[a-zA-Z_][a-zA-Z_0-9$]*';
	  const DOLLAR_STRING = '\\$([a-zA-Z_]?|[a-zA-Z_][a-zA-Z_0-9]*)\\$';
	  const LABEL = '<<\\s*' + UNQUOTED_IDENT + '\\s*>>';

	  const SQL_KW =
	    // https://www.postgresql.org/docs/11/static/sql-keywords-appendix.html
	    // https://www.postgresql.org/docs/11/static/sql-commands.html
	    // SQL commands (starting words)
	    'ABORT ALTER ANALYZE BEGIN CALL CHECKPOINT|10 CLOSE CLUSTER COMMENT COMMIT COPY CREATE DEALLOCATE DECLARE '
	    + 'DELETE DISCARD DO DROP END EXECUTE EXPLAIN FETCH GRANT IMPORT INSERT LISTEN LOAD LOCK MOVE NOTIFY '
	    + 'PREPARE REASSIGN|10 REFRESH REINDEX RELEASE RESET REVOKE ROLLBACK SAVEPOINT SECURITY SELECT SET SHOW '
	    + 'START TRUNCATE UNLISTEN|10 UPDATE VACUUM|10 VALUES '
	    // SQL commands (others)
	    + 'AGGREGATE COLLATION CONVERSION|10 DATABASE DEFAULT PRIVILEGES DOMAIN TRIGGER EXTENSION FOREIGN '
	    + 'WRAPPER|10 TABLE FUNCTION GROUP LANGUAGE LARGE OBJECT MATERIALIZED VIEW OPERATOR CLASS '
	    + 'FAMILY POLICY PUBLICATION|10 ROLE RULE SCHEMA SEQUENCE SERVER STATISTICS SUBSCRIPTION SYSTEM '
	    + 'TABLESPACE CONFIGURATION DICTIONARY PARSER TEMPLATE TYPE USER MAPPING PREPARED ACCESS '
	    + 'METHOD CAST AS TRANSFORM TRANSACTION OWNED TO INTO SESSION AUTHORIZATION '
	    + 'INDEX PROCEDURE ASSERTION '
	    // additional reserved key words
	    + 'ALL ANALYSE AND ANY ARRAY ASC ASYMMETRIC|10 BOTH CASE CHECK '
	    + 'COLLATE COLUMN CONCURRENTLY|10 CONSTRAINT CROSS '
	    + 'DEFERRABLE RANGE '
	    + 'DESC DISTINCT ELSE EXCEPT FOR FREEZE|10 FROM FULL HAVING '
	    + 'ILIKE IN INITIALLY INNER INTERSECT IS ISNULL JOIN LATERAL LEADING LIKE LIMIT '
	    + 'NATURAL NOT NOTNULL NULL OFFSET ON ONLY OR ORDER OUTER OVERLAPS PLACING PRIMARY '
	    + 'REFERENCES RETURNING SIMILAR SOME SYMMETRIC TABLESAMPLE THEN '
	    + 'TRAILING UNION UNIQUE USING VARIADIC|10 VERBOSE WHEN WHERE WINDOW WITH '
	    // some of non-reserved (which are used in clauses or as PL/pgSQL keyword)
	    + 'BY RETURNS INOUT OUT SETOF|10 IF STRICT CURRENT CONTINUE OWNER LOCATION OVER PARTITION WITHIN '
	    + 'BETWEEN ESCAPE EXTERNAL INVOKER DEFINER WORK RENAME VERSION CONNECTION CONNECT '
	    + 'TABLES TEMP TEMPORARY FUNCTIONS SEQUENCES TYPES SCHEMAS OPTION CASCADE RESTRICT ADD ADMIN '
	    + 'EXISTS VALID VALIDATE ENABLE DISABLE REPLICA|10 ALWAYS PASSING COLUMNS PATH '
	    + 'REF VALUE OVERRIDING IMMUTABLE STABLE VOLATILE BEFORE AFTER EACH ROW PROCEDURAL '
	    + 'ROUTINE NO HANDLER VALIDATOR OPTIONS STORAGE OIDS|10 WITHOUT INHERIT DEPENDS CALLED '
	    + 'INPUT LEAKPROOF|10 COST ROWS NOWAIT SEARCH UNTIL ENCRYPTED|10 PASSWORD CONFLICT|10 '
	    + 'INSTEAD INHERITS CHARACTERISTICS WRITE CURSOR ALSO STATEMENT SHARE EXCLUSIVE INLINE '
	    + 'ISOLATION REPEATABLE READ COMMITTED SERIALIZABLE UNCOMMITTED LOCAL GLOBAL SQL PROCEDURES '
	    + 'RECURSIVE SNAPSHOT ROLLUP CUBE TRUSTED|10 INCLUDE FOLLOWING PRECEDING UNBOUNDED RANGE GROUPS '
	    + 'UNENCRYPTED|10 SYSID FORMAT DELIMITER HEADER QUOTE ENCODING FILTER OFF '
	    // some parameters of VACUUM/ANALYZE/EXPLAIN
	    + 'FORCE_QUOTE FORCE_NOT_NULL FORCE_NULL COSTS BUFFERS TIMING SUMMARY DISABLE_PAGE_SKIPPING '
	    //
	    + 'RESTART CYCLE GENERATED IDENTITY DEFERRED IMMEDIATE LEVEL LOGGED UNLOGGED '
	    + 'OF NOTHING NONE EXCLUDE ATTRIBUTE '
	    // from GRANT (not keywords actually)
	    + 'USAGE ROUTINES '
	    // actually literals, but look better this way (due to IS TRUE, IS FALSE, ISNULL etc)
	    + 'TRUE FALSE NAN INFINITY ';

	  const ROLE_ATTRS = // only those not in keywrods already
	    'SUPERUSER NOSUPERUSER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE INHERIT NOINHERIT '
	    + 'LOGIN NOLOGIN REPLICATION NOREPLICATION BYPASSRLS NOBYPASSRLS ';

	  const PLPGSQL_KW =
	    'ALIAS BEGIN CONSTANT DECLARE END EXCEPTION RETURN PERFORM|10 RAISE GET DIAGNOSTICS '
	    + 'STACKED|10 FOREACH LOOP ELSIF EXIT WHILE REVERSE SLICE DEBUG LOG INFO NOTICE WARNING ASSERT '
	    + 'OPEN ';

	  const TYPES =
	    // https://www.postgresql.org/docs/11/static/datatype.html
	    'BIGINT INT8 BIGSERIAL SERIAL8 BIT VARYING VARBIT BOOLEAN BOOL BOX BYTEA CHARACTER CHAR VARCHAR '
	    + 'CIDR CIRCLE DATE DOUBLE PRECISION FLOAT8 FLOAT INET INTEGER INT INT4 INTERVAL JSON JSONB LINE LSEG|10 '
	    + 'MACADDR MACADDR8 MONEY NUMERIC DEC DECIMAL PATH POINT POLYGON REAL FLOAT4 SMALLINT INT2 '
	    + 'SMALLSERIAL|10 SERIAL2|10 SERIAL|10 SERIAL4|10 TEXT TIME ZONE TIMETZ|10 TIMESTAMP TIMESTAMPTZ|10 TSQUERY|10 TSVECTOR|10 '
	    + 'TXID_SNAPSHOT|10 UUID XML NATIONAL NCHAR '
	    + 'INT4RANGE|10 INT8RANGE|10 NUMRANGE|10 TSRANGE|10 TSTZRANGE|10 DATERANGE|10 '
	    // pseudotypes
	    + 'ANYELEMENT ANYARRAY ANYNONARRAY ANYENUM ANYRANGE CSTRING INTERNAL '
	    + 'RECORD PG_DDL_COMMAND VOID UNKNOWN OPAQUE REFCURSOR '
	    // spec. type
	    + 'NAME '
	    // OID-types
	    + 'OID REGPROC|10 REGPROCEDURE|10 REGOPER|10 REGOPERATOR|10 REGCLASS|10 REGTYPE|10 REGROLE|10 '
	    + 'REGNAMESPACE|10 REGCONFIG|10 REGDICTIONARY|10 ';// +

	  const TYPES_RE =
	    TYPES.trim()
	      .split(' ')
	      .map(function(val) { return val.split('|')[0]; })
	      .join('|');

	  const SQL_BI =
	    'CURRENT_TIME CURRENT_TIMESTAMP CURRENT_USER CURRENT_CATALOG|10 CURRENT_DATE LOCALTIME LOCALTIMESTAMP '
	    + 'CURRENT_ROLE|10 CURRENT_SCHEMA|10 SESSION_USER PUBLIC ';

	  const PLPGSQL_BI =
	    'FOUND NEW OLD TG_NAME|10 TG_WHEN|10 TG_LEVEL|10 TG_OP|10 TG_RELID|10 TG_RELNAME|10 '
	    + 'TG_TABLE_NAME|10 TG_TABLE_SCHEMA|10 TG_NARGS|10 TG_ARGV|10 TG_EVENT|10 TG_TAG|10 '
	    // get diagnostics
	    + 'ROW_COUNT RESULT_OID|10 PG_CONTEXT|10 RETURNED_SQLSTATE COLUMN_NAME CONSTRAINT_NAME '
	    + 'PG_DATATYPE_NAME|10 MESSAGE_TEXT TABLE_NAME SCHEMA_NAME PG_EXCEPTION_DETAIL|10 '
	    + 'PG_EXCEPTION_HINT|10 PG_EXCEPTION_CONTEXT|10 ';

	  const PLPGSQL_EXCEPTIONS =
	    // exceptions https://www.postgresql.org/docs/current/static/errcodes-appendix.html
	    'SQLSTATE SQLERRM|10 '
	    + 'SUCCESSFUL_COMPLETION WARNING DYNAMIC_RESULT_SETS_RETURNED IMPLICIT_ZERO_BIT_PADDING '
	    + 'NULL_VALUE_ELIMINATED_IN_SET_FUNCTION PRIVILEGE_NOT_GRANTED PRIVILEGE_NOT_REVOKED '
	    + 'STRING_DATA_RIGHT_TRUNCATION DEPRECATED_FEATURE NO_DATA NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED '
	    + 'SQL_STATEMENT_NOT_YET_COMPLETE CONNECTION_EXCEPTION CONNECTION_DOES_NOT_EXIST CONNECTION_FAILURE '
	    + 'SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION '
	    + 'TRANSACTION_RESOLUTION_UNKNOWN PROTOCOL_VIOLATION TRIGGERED_ACTION_EXCEPTION FEATURE_NOT_SUPPORTED '
	    + 'INVALID_TRANSACTION_INITIATION LOCATOR_EXCEPTION INVALID_LOCATOR_SPECIFICATION INVALID_GRANTOR '
	    + 'INVALID_GRANT_OPERATION INVALID_ROLE_SPECIFICATION DIAGNOSTICS_EXCEPTION '
	    + 'STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER CASE_NOT_FOUND CARDINALITY_VIOLATION '
	    + 'DATA_EXCEPTION ARRAY_SUBSCRIPT_ERROR CHARACTER_NOT_IN_REPERTOIRE DATETIME_FIELD_OVERFLOW '
	    + 'DIVISION_BY_ZERO ERROR_IN_ASSIGNMENT ESCAPE_CHARACTER_CONFLICT INDICATOR_OVERFLOW '
	    + 'INTERVAL_FIELD_OVERFLOW INVALID_ARGUMENT_FOR_LOGARITHM INVALID_ARGUMENT_FOR_NTILE_FUNCTION '
	    + 'INVALID_ARGUMENT_FOR_NTH_VALUE_FUNCTION INVALID_ARGUMENT_FOR_POWER_FUNCTION '
	    + 'INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION INVALID_CHARACTER_VALUE_FOR_CAST '
	    + 'INVALID_DATETIME_FORMAT INVALID_ESCAPE_CHARACTER INVALID_ESCAPE_OCTET INVALID_ESCAPE_SEQUENCE '
	    + 'NONSTANDARD_USE_OF_ESCAPE_CHARACTER INVALID_INDICATOR_PARAMETER_VALUE INVALID_PARAMETER_VALUE '
	    + 'INVALID_REGULAR_EXPRESSION INVALID_ROW_COUNT_IN_LIMIT_CLAUSE '
	    + 'INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE INVALID_TABLESAMPLE_ARGUMENT INVALID_TABLESAMPLE_REPEAT '
	    + 'INVALID_TIME_ZONE_DISPLACEMENT_VALUE INVALID_USE_OF_ESCAPE_CHARACTER MOST_SPECIFIC_TYPE_MISMATCH '
	    + 'NULL_VALUE_NOT_ALLOWED NULL_VALUE_NO_INDICATOR_PARAMETER NUMERIC_VALUE_OUT_OF_RANGE '
	    + 'SEQUENCE_GENERATOR_LIMIT_EXCEEDED STRING_DATA_LENGTH_MISMATCH STRING_DATA_RIGHT_TRUNCATION '
	    + 'SUBSTRING_ERROR TRIM_ERROR UNTERMINATED_C_STRING ZERO_LENGTH_CHARACTER_STRING '
	    + 'FLOATING_POINT_EXCEPTION INVALID_TEXT_REPRESENTATION INVALID_BINARY_REPRESENTATION '
	    + 'BAD_COPY_FILE_FORMAT UNTRANSLATABLE_CHARACTER NOT_AN_XML_DOCUMENT INVALID_XML_DOCUMENT '
	    + 'INVALID_XML_CONTENT INVALID_XML_COMMENT INVALID_XML_PROCESSING_INSTRUCTION '
	    + 'INTEGRITY_CONSTRAINT_VIOLATION RESTRICT_VIOLATION NOT_NULL_VIOLATION FOREIGN_KEY_VIOLATION '
	    + 'UNIQUE_VIOLATION CHECK_VIOLATION EXCLUSION_VIOLATION INVALID_CURSOR_STATE '
	    + 'INVALID_TRANSACTION_STATE ACTIVE_SQL_TRANSACTION BRANCH_TRANSACTION_ALREADY_ACTIVE '
	    + 'HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION '
	    + 'INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION '
	    + 'NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION READ_ONLY_SQL_TRANSACTION '
	    + 'SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED NO_ACTIVE_SQL_TRANSACTION '
	    + 'IN_FAILED_SQL_TRANSACTION IDLE_IN_TRANSACTION_SESSION_TIMEOUT INVALID_SQL_STATEMENT_NAME '
	    + 'TRIGGERED_DATA_CHANGE_VIOLATION INVALID_AUTHORIZATION_SPECIFICATION INVALID_PASSWORD '
	    + 'DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST DEPENDENT_OBJECTS_STILL_EXIST '
	    + 'INVALID_TRANSACTION_TERMINATION SQL_ROUTINE_EXCEPTION FUNCTION_EXECUTED_NO_RETURN_STATEMENT '
	    + 'MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED '
	    + 'READING_SQL_DATA_NOT_PERMITTED INVALID_CURSOR_NAME EXTERNAL_ROUTINE_EXCEPTION '
	    + 'CONTAINING_SQL_NOT_PERMITTED MODIFYING_SQL_DATA_NOT_PERMITTED '
	    + 'PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED '
	    + 'EXTERNAL_ROUTINE_INVOCATION_EXCEPTION INVALID_SQLSTATE_RETURNED NULL_VALUE_NOT_ALLOWED '
	    + 'TRIGGER_PROTOCOL_VIOLATED SRF_PROTOCOL_VIOLATED EVENT_TRIGGER_PROTOCOL_VIOLATED '
	    + 'SAVEPOINT_EXCEPTION INVALID_SAVEPOINT_SPECIFICATION INVALID_CATALOG_NAME '
	    + 'INVALID_SCHEMA_NAME TRANSACTION_ROLLBACK TRANSACTION_INTEGRITY_CONSTRAINT_VIOLATION '
	    + 'SERIALIZATION_FAILURE STATEMENT_COMPLETION_UNKNOWN DEADLOCK_DETECTED '
	    + 'SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION SYNTAX_ERROR INSUFFICIENT_PRIVILEGE CANNOT_COERCE '
	    + 'GROUPING_ERROR WINDOWING_ERROR INVALID_RECURSION INVALID_FOREIGN_KEY INVALID_NAME '
	    + 'NAME_TOO_LONG RESERVED_NAME DATATYPE_MISMATCH INDETERMINATE_DATATYPE COLLATION_MISMATCH '
	    + 'INDETERMINATE_COLLATION WRONG_OBJECT_TYPE GENERATED_ALWAYS UNDEFINED_COLUMN '
	    + 'UNDEFINED_FUNCTION UNDEFINED_TABLE UNDEFINED_PARAMETER UNDEFINED_OBJECT '
	    + 'DUPLICATE_COLUMN DUPLICATE_CURSOR DUPLICATE_DATABASE DUPLICATE_FUNCTION '
	    + 'DUPLICATE_PREPARED_STATEMENT DUPLICATE_SCHEMA DUPLICATE_TABLE DUPLICATE_ALIAS '
	    + 'DUPLICATE_OBJECT AMBIGUOUS_COLUMN AMBIGUOUS_FUNCTION AMBIGUOUS_PARAMETER AMBIGUOUS_ALIAS '
	    + 'INVALID_COLUMN_REFERENCE INVALID_COLUMN_DEFINITION INVALID_CURSOR_DEFINITION '
	    + 'INVALID_DATABASE_DEFINITION INVALID_FUNCTION_DEFINITION '
	    + 'INVALID_PREPARED_STATEMENT_DEFINITION INVALID_SCHEMA_DEFINITION INVALID_TABLE_DEFINITION '
	    + 'INVALID_OBJECT_DEFINITION WITH_CHECK_OPTION_VIOLATION INSUFFICIENT_RESOURCES DISK_FULL '
	    + 'OUT_OF_MEMORY TOO_MANY_CONNECTIONS CONFIGURATION_LIMIT_EXCEEDED PROGRAM_LIMIT_EXCEEDED '
	    + 'STATEMENT_TOO_COMPLEX TOO_MANY_COLUMNS TOO_MANY_ARGUMENTS OBJECT_NOT_IN_PREREQUISITE_STATE '
	    + 'OBJECT_IN_USE CANT_CHANGE_RUNTIME_PARAM LOCK_NOT_AVAILABLE OPERATOR_INTERVENTION '
	    + 'QUERY_CANCELED ADMIN_SHUTDOWN CRASH_SHUTDOWN CANNOT_CONNECT_NOW DATABASE_DROPPED '
	    + 'SYSTEM_ERROR IO_ERROR UNDEFINED_FILE DUPLICATE_FILE SNAPSHOT_TOO_OLD CONFIG_FILE_ERROR '
	    + 'LOCK_FILE_EXISTS FDW_ERROR FDW_COLUMN_NAME_NOT_FOUND FDW_DYNAMIC_PARAMETER_VALUE_NEEDED '
	    + 'FDW_FUNCTION_SEQUENCE_ERROR FDW_INCONSISTENT_DESCRIPTOR_INFORMATION '
	    + 'FDW_INVALID_ATTRIBUTE_VALUE FDW_INVALID_COLUMN_NAME FDW_INVALID_COLUMN_NUMBER '
	    + 'FDW_INVALID_DATA_TYPE FDW_INVALID_DATA_TYPE_DESCRIPTORS '
	    + 'FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER FDW_INVALID_HANDLE FDW_INVALID_OPTION_INDEX '
	    + 'FDW_INVALID_OPTION_NAME FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH '
	    + 'FDW_INVALID_STRING_FORMAT FDW_INVALID_USE_OF_NULL_POINTER FDW_TOO_MANY_HANDLES '
	    + 'FDW_OUT_OF_MEMORY FDW_NO_SCHEMAS FDW_OPTION_NAME_NOT_FOUND FDW_REPLY_HANDLE '
	    + 'FDW_SCHEMA_NOT_FOUND FDW_TABLE_NOT_FOUND FDW_UNABLE_TO_CREATE_EXECUTION '
	    + 'FDW_UNABLE_TO_CREATE_REPLY FDW_UNABLE_TO_ESTABLISH_CONNECTION PLPGSQL_ERROR '
	    + 'RAISE_EXCEPTION NO_DATA_FOUND TOO_MANY_ROWS ASSERT_FAILURE INTERNAL_ERROR DATA_CORRUPTED '
	    + 'INDEX_CORRUPTED ';

	  const FUNCTIONS =
	    // https://www.postgresql.org/docs/11/static/functions-aggregate.html
	    'ARRAY_AGG AVG BIT_AND BIT_OR BOOL_AND BOOL_OR COUNT EVERY JSON_AGG JSONB_AGG JSON_OBJECT_AGG '
	    + 'JSONB_OBJECT_AGG MAX MIN MODE STRING_AGG SUM XMLAGG '
	    + 'CORR COVAR_POP COVAR_SAMP REGR_AVGX REGR_AVGY REGR_COUNT REGR_INTERCEPT REGR_R2 REGR_SLOPE '
	    + 'REGR_SXX REGR_SXY REGR_SYY STDDEV STDDEV_POP STDDEV_SAMP VARIANCE VAR_POP VAR_SAMP '
	    + 'PERCENTILE_CONT PERCENTILE_DISC '
	    // https://www.postgresql.org/docs/11/static/functions-window.html
	    + 'ROW_NUMBER RANK DENSE_RANK PERCENT_RANK CUME_DIST NTILE LAG LEAD FIRST_VALUE LAST_VALUE NTH_VALUE '
	    // https://www.postgresql.org/docs/11/static/functions-comparison.html
	    + 'NUM_NONNULLS NUM_NULLS '
	    // https://www.postgresql.org/docs/11/static/functions-math.html
	    + 'ABS CBRT CEIL CEILING DEGREES DIV EXP FLOOR LN LOG MOD PI POWER RADIANS ROUND SCALE SIGN SQRT '
	    + 'TRUNC WIDTH_BUCKET '
	    + 'RANDOM SETSEED '
	    + 'ACOS ACOSD ASIN ASIND ATAN ATAND ATAN2 ATAN2D COS COSD COT COTD SIN SIND TAN TAND '
	    // https://www.postgresql.org/docs/11/static/functions-string.html
	    + 'BIT_LENGTH CHAR_LENGTH CHARACTER_LENGTH LOWER OCTET_LENGTH OVERLAY POSITION SUBSTRING TREAT TRIM UPPER '
	    + 'ASCII BTRIM CHR CONCAT CONCAT_WS CONVERT CONVERT_FROM CONVERT_TO DECODE ENCODE INITCAP '
	    + 'LEFT LENGTH LPAD LTRIM MD5 PARSE_IDENT PG_CLIENT_ENCODING QUOTE_IDENT|10 QUOTE_LITERAL|10 '
	    + 'QUOTE_NULLABLE|10 REGEXP_MATCH REGEXP_MATCHES REGEXP_REPLACE REGEXP_SPLIT_TO_ARRAY '
	    + 'REGEXP_SPLIT_TO_TABLE REPEAT REPLACE REVERSE RIGHT RPAD RTRIM SPLIT_PART STRPOS SUBSTR '
	    + 'TO_ASCII TO_HEX TRANSLATE '
	    // https://www.postgresql.org/docs/11/static/functions-binarystring.html
	    + 'OCTET_LENGTH GET_BIT GET_BYTE SET_BIT SET_BYTE '
	    // https://www.postgresql.org/docs/11/static/functions-formatting.html
	    + 'TO_CHAR TO_DATE TO_NUMBER TO_TIMESTAMP '
	    // https://www.postgresql.org/docs/11/static/functions-datetime.html
	    + 'AGE CLOCK_TIMESTAMP|10 DATE_PART DATE_TRUNC ISFINITE JUSTIFY_DAYS JUSTIFY_HOURS JUSTIFY_INTERVAL '
	    + 'MAKE_DATE MAKE_INTERVAL|10 MAKE_TIME MAKE_TIMESTAMP|10 MAKE_TIMESTAMPTZ|10 NOW STATEMENT_TIMESTAMP|10 '
	    + 'TIMEOFDAY TRANSACTION_TIMESTAMP|10 '
	    // https://www.postgresql.org/docs/11/static/functions-enum.html
	    + 'ENUM_FIRST ENUM_LAST ENUM_RANGE '
	    // https://www.postgresql.org/docs/11/static/functions-geometry.html
	    + 'AREA CENTER DIAMETER HEIGHT ISCLOSED ISOPEN NPOINTS PCLOSE POPEN RADIUS WIDTH '
	    + 'BOX BOUND_BOX CIRCLE LINE LSEG PATH POLYGON '
	    // https://www.postgresql.org/docs/11/static/functions-net.html
	    + 'ABBREV BROADCAST HOST HOSTMASK MASKLEN NETMASK NETWORK SET_MASKLEN TEXT INET_SAME_FAMILY '
	    + 'INET_MERGE MACADDR8_SET7BIT '
	    // https://www.postgresql.org/docs/11/static/functions-textsearch.html
	    + 'ARRAY_TO_TSVECTOR GET_CURRENT_TS_CONFIG NUMNODE PLAINTO_TSQUERY PHRASETO_TSQUERY WEBSEARCH_TO_TSQUERY '
	    + 'QUERYTREE SETWEIGHT STRIP TO_TSQUERY TO_TSVECTOR JSON_TO_TSVECTOR JSONB_TO_TSVECTOR TS_DELETE '
	    + 'TS_FILTER TS_HEADLINE TS_RANK TS_RANK_CD TS_REWRITE TSQUERY_PHRASE TSVECTOR_TO_ARRAY '
	    + 'TSVECTOR_UPDATE_TRIGGER TSVECTOR_UPDATE_TRIGGER_COLUMN '
	    // https://www.postgresql.org/docs/11/static/functions-xml.html
	    + 'XMLCOMMENT XMLCONCAT XMLELEMENT XMLFOREST XMLPI XMLROOT '
	    + 'XMLEXISTS XML_IS_WELL_FORMED XML_IS_WELL_FORMED_DOCUMENT XML_IS_WELL_FORMED_CONTENT '
	    + 'XPATH XPATH_EXISTS XMLTABLE XMLNAMESPACES '
	    + 'TABLE_TO_XML TABLE_TO_XMLSCHEMA TABLE_TO_XML_AND_XMLSCHEMA '
	    + 'QUERY_TO_XML QUERY_TO_XMLSCHEMA QUERY_TO_XML_AND_XMLSCHEMA '
	    + 'CURSOR_TO_XML CURSOR_TO_XMLSCHEMA '
	    + 'SCHEMA_TO_XML SCHEMA_TO_XMLSCHEMA SCHEMA_TO_XML_AND_XMLSCHEMA '
	    + 'DATABASE_TO_XML DATABASE_TO_XMLSCHEMA DATABASE_TO_XML_AND_XMLSCHEMA '
	    + 'XMLATTRIBUTES '
	    // https://www.postgresql.org/docs/11/static/functions-json.html
	    + 'TO_JSON TO_JSONB ARRAY_TO_JSON ROW_TO_JSON JSON_BUILD_ARRAY JSONB_BUILD_ARRAY JSON_BUILD_OBJECT '
	    + 'JSONB_BUILD_OBJECT JSON_OBJECT JSONB_OBJECT JSON_ARRAY_LENGTH JSONB_ARRAY_LENGTH JSON_EACH '
	    + 'JSONB_EACH JSON_EACH_TEXT JSONB_EACH_TEXT JSON_EXTRACT_PATH JSONB_EXTRACT_PATH '
	    + 'JSON_OBJECT_KEYS JSONB_OBJECT_KEYS JSON_POPULATE_RECORD JSONB_POPULATE_RECORD JSON_POPULATE_RECORDSET '
	    + 'JSONB_POPULATE_RECORDSET JSON_ARRAY_ELEMENTS JSONB_ARRAY_ELEMENTS JSON_ARRAY_ELEMENTS_TEXT '
	    + 'JSONB_ARRAY_ELEMENTS_TEXT JSON_TYPEOF JSONB_TYPEOF JSON_TO_RECORD JSONB_TO_RECORD JSON_TO_RECORDSET '
	    + 'JSONB_TO_RECORDSET JSON_STRIP_NULLS JSONB_STRIP_NULLS JSONB_SET JSONB_INSERT JSONB_PRETTY '
	    // https://www.postgresql.org/docs/11/static/functions-sequence.html
	    + 'CURRVAL LASTVAL NEXTVAL SETVAL '
	    // https://www.postgresql.org/docs/11/static/functions-conditional.html
	    + 'COALESCE NULLIF GREATEST LEAST '
	    // https://www.postgresql.org/docs/11/static/functions-array.html
	    + 'ARRAY_APPEND ARRAY_CAT ARRAY_NDIMS ARRAY_DIMS ARRAY_FILL ARRAY_LENGTH ARRAY_LOWER ARRAY_POSITION '
	    + 'ARRAY_POSITIONS ARRAY_PREPEND ARRAY_REMOVE ARRAY_REPLACE ARRAY_TO_STRING ARRAY_UPPER CARDINALITY '
	    + 'STRING_TO_ARRAY UNNEST '
	    // https://www.postgresql.org/docs/11/static/functions-range.html
	    + 'ISEMPTY LOWER_INC UPPER_INC LOWER_INF UPPER_INF RANGE_MERGE '
	    // https://www.postgresql.org/docs/11/static/functions-srf.html
	    + 'GENERATE_SERIES GENERATE_SUBSCRIPTS '
	    // https://www.postgresql.org/docs/11/static/functions-info.html
	    + 'CURRENT_DATABASE CURRENT_QUERY CURRENT_SCHEMA|10 CURRENT_SCHEMAS|10 INET_CLIENT_ADDR INET_CLIENT_PORT '
	    + 'INET_SERVER_ADDR INET_SERVER_PORT ROW_SECURITY_ACTIVE FORMAT_TYPE '
	    + 'TO_REGCLASS TO_REGPROC TO_REGPROCEDURE TO_REGOPER TO_REGOPERATOR TO_REGTYPE TO_REGNAMESPACE TO_REGROLE '
	    + 'COL_DESCRIPTION OBJ_DESCRIPTION SHOBJ_DESCRIPTION '
	    + 'TXID_CURRENT TXID_CURRENT_IF_ASSIGNED TXID_CURRENT_SNAPSHOT TXID_SNAPSHOT_XIP TXID_SNAPSHOT_XMAX '
	    + 'TXID_SNAPSHOT_XMIN TXID_VISIBLE_IN_SNAPSHOT TXID_STATUS '
	    // https://www.postgresql.org/docs/11/static/functions-admin.html
	    + 'CURRENT_SETTING SET_CONFIG BRIN_SUMMARIZE_NEW_VALUES BRIN_SUMMARIZE_RANGE BRIN_DESUMMARIZE_RANGE '
	    + 'GIN_CLEAN_PENDING_LIST '
	    // https://www.postgresql.org/docs/11/static/functions-trigger.html
	    + 'SUPPRESS_REDUNDANT_UPDATES_TRIGGER '
	    // ihttps://www.postgresql.org/docs/devel/static/lo-funcs.html
	    + 'LO_FROM_BYTEA LO_PUT LO_GET LO_CREAT LO_CREATE LO_UNLINK LO_IMPORT LO_EXPORT LOREAD LOWRITE '
	    //
	    + 'GROUPING CAST ';

	  const FUNCTIONS_RE =
	      FUNCTIONS.trim()
	        .split(' ')
	        .map(function(val) { return val.split('|')[0]; })
	        .join('|');

	  return {
	    name: 'PostgreSQL',
	    aliases: [
	      'postgres',
	      'postgresql'
	    ],
	    supersetOf: "sql",
	    case_insensitive: true,
	    keywords: {
	      keyword:
	            SQL_KW + PLPGSQL_KW + ROLE_ATTRS,
	      built_in:
	            SQL_BI + PLPGSQL_BI + PLPGSQL_EXCEPTIONS
	    },
	    // Forbid some cunstructs from other languages to improve autodetect. In fact
	    // "[a-z]:" is legal (as part of array slice), but improbabal.
	    illegal: /:==|\W\s*\(\*|(^|\s)\$[a-z]|\{\{|[a-z]:\s*$|\.\.\.|TO:|DO:/,
	    contains: [
	      // special handling of some words, which are reserved only in some contexts
	      {
	        className: 'keyword',
	        variants: [
	          { begin: /\bTEXT\s*SEARCH\b/ },
	          { begin: /\b(PRIMARY|FOREIGN|FOR(\s+NO)?)\s+KEY\b/ },
	          { begin: /\bPARALLEL\s+(UNSAFE|RESTRICTED|SAFE)\b/ },
	          { begin: /\bSTORAGE\s+(PLAIN|EXTERNAL|EXTENDED|MAIN)\b/ },
	          { begin: /\bMATCH\s+(FULL|PARTIAL|SIMPLE)\b/ },
	          { begin: /\bNULLS\s+(FIRST|LAST)\b/ },
	          { begin: /\bEVENT\s+TRIGGER\b/ },
	          { begin: /\b(MAPPING|OR)\s+REPLACE\b/ },
	          { begin: /\b(FROM|TO)\s+(PROGRAM|STDIN|STDOUT)\b/ },
	          { begin: /\b(SHARE|EXCLUSIVE)\s+MODE\b/ },
	          { begin: /\b(LEFT|RIGHT)\s+(OUTER\s+)?JOIN\b/ },
	          { begin: /\b(FETCH|MOVE)\s+(NEXT|PRIOR|FIRST|LAST|ABSOLUTE|RELATIVE|FORWARD|BACKWARD)\b/ },
	          { begin: /\bPRESERVE\s+ROWS\b/ },
	          { begin: /\bDISCARD\s+PLANS\b/ },
	          { begin: /\bREFERENCING\s+(OLD|NEW)\b/ },
	          { begin: /\bSKIP\s+LOCKED\b/ },
	          { begin: /\bGROUPING\s+SETS\b/ },
	          { begin: /\b(BINARY|INSENSITIVE|SCROLL|NO\s+SCROLL)\s+(CURSOR|FOR)\b/ },
	          { begin: /\b(WITH|WITHOUT)\s+HOLD\b/ },
	          { begin: /\bWITH\s+(CASCADED|LOCAL)\s+CHECK\s+OPTION\b/ },
	          { begin: /\bEXCLUDE\s+(TIES|NO\s+OTHERS)\b/ },
	          { begin: /\bFORMAT\s+(TEXT|XML|JSON|YAML)\b/ },
	          { begin: /\bSET\s+((SESSION|LOCAL)\s+)?NAMES\b/ },
	          { begin: /\bIS\s+(NOT\s+)?UNKNOWN\b/ },
	          { begin: /\bSECURITY\s+LABEL\b/ },
	          { begin: /\bSTANDALONE\s+(YES|NO|NO\s+VALUE)\b/ },
	          { begin: /\bWITH\s+(NO\s+)?DATA\b/ },
	          { begin: /\b(FOREIGN|SET)\s+DATA\b/ },
	          { begin: /\bSET\s+(CATALOG|CONSTRAINTS)\b/ },
	          { begin: /\b(WITH|FOR)\s+ORDINALITY\b/ },
	          { begin: /\bIS\s+(NOT\s+)?DOCUMENT\b/ },
	          { begin: /\bXML\s+OPTION\s+(DOCUMENT|CONTENT)\b/ },
	          { begin: /\b(STRIP|PRESERVE)\s+WHITESPACE\b/ },
	          { begin: /\bNO\s+(ACTION|MAXVALUE|MINVALUE)\b/ },
	          { begin: /\bPARTITION\s+BY\s+(RANGE|LIST|HASH)\b/ },
	          { begin: /\bAT\s+TIME\s+ZONE\b/ },
	          { begin: /\bGRANTED\s+BY\b/ },
	          { begin: /\bRETURN\s+(QUERY|NEXT)\b/ },
	          { begin: /\b(ATTACH|DETACH)\s+PARTITION\b/ },
	          { begin: /\bFORCE\s+ROW\s+LEVEL\s+SECURITY\b/ },
	          { begin: /\b(INCLUDING|EXCLUDING)\s+(COMMENTS|CONSTRAINTS|DEFAULTS|IDENTITY|INDEXES|STATISTICS|STORAGE|ALL)\b/ },
	          { begin: /\bAS\s+(ASSIGNMENT|IMPLICIT|PERMISSIVE|RESTRICTIVE|ENUM|RANGE)\b/ }
	        ]
	      },
	      // functions named as keywords, followed by '('
	      { begin: /\b(FORMAT|FAMILY|VERSION)\s*\(/
	        // keywords: { built_in: 'FORMAT FAMILY VERSION' }
	      },
	      // INCLUDE ( ... ) in index_parameters in CREATE TABLE
	      {
	        begin: /\bINCLUDE\s*\(/,
	        keywords: 'INCLUDE'
	      },
	      // not highlight RANGE if not in frame_clause (not 100% correct, but seems satisfactory)
	      { begin: /\bRANGE(?!\s*(BETWEEN|UNBOUNDED|CURRENT|[-0-9]+))/ },
	      // disable highlighting in commands CREATE AGGREGATE/COLLATION/DATABASE/OPERTOR/TEXT SEARCH .../TYPE
	      // and in PL/pgSQL RAISE ... USING
	      { begin: /\b(VERSION|OWNER|TEMPLATE|TABLESPACE|CONNECTION\s+LIMIT|PROCEDURE|RESTRICT|JOIN|PARSER|COPY|START|END|COLLATION|INPUT|ANALYZE|STORAGE|LIKE|DEFAULT|DELIMITER|ENCODING|COLUMN|CONSTRAINT|TABLE|SCHEMA)\s*=/ },
	      // PG_smth; HAS_some_PRIVILEGE
	      {
	        // className: 'built_in',
	        begin: /\b(PG_\w+?|HAS_[A-Z_]+_PRIVILEGE)\b/,
	        relevance: 10
	      },
	      // extract
	      {
	        begin: /\bEXTRACT\s*\(/,
	        end: /\bFROM\b/,
	        returnEnd: true,
	        keywords: {
	          // built_in: 'EXTRACT',
	          type: 'CENTURY DAY DECADE DOW DOY EPOCH HOUR ISODOW ISOYEAR MICROSECONDS '
	                        + 'MILLENNIUM MILLISECONDS MINUTE MONTH QUARTER SECOND TIMEZONE TIMEZONE_HOUR '
	                        + 'TIMEZONE_MINUTE WEEK YEAR' }
	      },
	      // xmlelement, xmlpi - special NAME
	      {
	        begin: /\b(XMLELEMENT|XMLPI)\s*\(\s*NAME/,
	        keywords: {
	          // built_in: 'XMLELEMENT XMLPI',
	          keyword: 'NAME' }
	      },
	      // xmlparse, xmlserialize
	      {
	        begin: /\b(XMLPARSE|XMLSERIALIZE)\s*\(\s*(DOCUMENT|CONTENT)/,
	        keywords: {
	          // built_in: 'XMLPARSE XMLSERIALIZE',
	          keyword: 'DOCUMENT CONTENT' }
	      },
	      // Sequences. We actually skip everything between CACHE|INCREMENT|MAXVALUE|MINVALUE and
	      // nearest following numeric constant. Without with trick we find a lot of "keywords"
	      // in 'avrasm' autodetection test...
	      {
	        beginKeywords: 'CACHE INCREMENT MAXVALUE MINVALUE',
	        end: hljs.C_NUMBER_RE,
	        returnEnd: true,
	        keywords: 'BY CACHE INCREMENT MAXVALUE MINVALUE'
	      },
	      // WITH|WITHOUT TIME ZONE as part of datatype
	      {
	        className: 'type',
	        begin: /\b(WITH|WITHOUT)\s+TIME\s+ZONE\b/
	      },
	      // INTERVAL optional fields
	      {
	        className: 'type',
	        begin: /\bINTERVAL\s+(YEAR|MONTH|DAY|HOUR|MINUTE|SECOND)(\s+TO\s+(MONTH|HOUR|MINUTE|SECOND))?\b/
	      },
	      // Pseudo-types which allowed only as return type
	      {
	        begin: /\bRETURNS\s+(LANGUAGE_HANDLER|TRIGGER|EVENT_TRIGGER|FDW_HANDLER|INDEX_AM_HANDLER|TSM_HANDLER)\b/,
	        keywords: {
	          keyword: 'RETURNS',
	          type: 'LANGUAGE_HANDLER TRIGGER EVENT_TRIGGER FDW_HANDLER INDEX_AM_HANDLER TSM_HANDLER'
	        }
	      },
	      // Known functions - only when followed by '('
	      { begin: '\\b(' + FUNCTIONS_RE + ')\\s*\\('
	        // keywords: { built_in: FUNCTIONS }
	      },
	      // Types
	      { begin: '\\.(' + TYPES_RE + ')\\b' // prevent highlight as type, say, 'oid' in 'pgclass.oid'
	      },
	      {
	        begin: '\\b(' + TYPES_RE + ')\\s+PATH\\b', // in XMLTABLE
	        keywords: {
	          keyword: 'PATH', // hopefully no one would use PATH type in XMLTABLE...
	          type: TYPES.replace('PATH ', '')
	        }
	      },
	      {
	        className: 'type',
	        begin: '\\b(' + TYPES_RE + ')\\b'
	      },
	      // Strings, see https://www.postgresql.org/docs/11/static/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS
	      {
	        className: 'string',
	        begin: '\'',
	        end: '\'',
	        contains: [ { begin: '\'\'' } ]
	      },
	      {
	        className: 'string',
	        begin: '(e|E|u&|U&)\'',
	        end: '\'',
	        contains: [ { begin: '\\\\.' } ],
	        relevance: 10
	      },
	      hljs.END_SAME_AS_BEGIN({
	        begin: DOLLAR_STRING,
	        end: DOLLAR_STRING,
	        contains: [
	          {
	            // actually we want them all except SQL; listed are those with known implementations
	            // and XML + JSON just in case
	            subLanguage: [
	              'pgsql',
	              'perl',
	              'python',
	              'tcl',
	              'r',
	              'lua',
	              'java',
	              'php',
	              'ruby',
	              'bash',
	              'scheme',
	              'xml',
	              'json'
	            ],
	            endsWithParent: true
	          }
	        ]
	      }),
	      // identifiers in quotes
	      {
	        begin: '"',
	        end: '"',
	        contains: [ { begin: '""' } ]
	      },
	      // numbers
	      hljs.C_NUMBER_MODE,
	      // comments
	      hljs.C_BLOCK_COMMENT_MODE,
	      COMMENT_MODE,
	      // PL/pgSQL staff
	      // %ROWTYPE, %TYPE, $n
	      {
	        className: 'meta',
	        variants: [
	          { // %TYPE, %ROWTYPE
	            begin: '%(ROW)?TYPE',
	            relevance: 10
	          },
	          { // $n
	            begin: '\\$\\d+' },
	          { // #compiler option
	            begin: '^#\\w',
	            end: '$'
	          }
	        ]
	      },
	      // <<labeles>>
	      {
	        className: 'symbol',
	        begin: LABEL,
	        relevance: 10
	      }
	    ]
	  };
	}

	pgsql_1 = pgsql;
	return pgsql_1;
}

/*
Language: PHP
Author: Victor Karamzin <Victor.Karamzin@enterra-inc.com>
Contributors: Evgeny Stepanischev <imbolk@gmail.com>, Ivan Sagalaev <maniac@softwaremaniacs.org>
Website: https://www.php.net
Category: common
*/

var php_1;
var hasRequiredPhp;

function requirePhp () {
	if (hasRequiredPhp) return php_1;
	hasRequiredPhp = 1;
	/**
	 * @param {HLJSApi} hljs
	 * @returns {LanguageDetail}
	 * */
	function php(hljs) {
	  const regex = hljs.regex;
	  // negative look-ahead tries to avoid matching patterns that are not
	  // Perl at all like $ident$, @ident@, etc.
	  const NOT_PERL_ETC = /(?![A-Za-z0-9])(?![$])/;
	  const IDENT_RE = regex.concat(
	    /[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/,
	    NOT_PERL_ETC);
	  // Will not detect camelCase classes
	  const PASCAL_CASE_CLASS_NAME_RE = regex.concat(
	    /(\\?[A-Z][a-z0-9_\x7f-\xff]+|\\?[A-Z]+(?=[A-Z][a-z0-9_\x7f-\xff])){1,}/,
	    NOT_PERL_ETC);
	  const VARIABLE = {
	    scope: 'variable',
	    match: '\\$+' + IDENT_RE,
	  };
	  const PREPROCESSOR = {
	    scope: 'meta',
	    variants: [
	      { begin: /<\?php/, relevance: 10 }, // boost for obvious PHP
	      { begin: /<\?=/ },
	      // less relevant per PSR-1 which says not to use short-tags
	      { begin: /<\?/, relevance: 0.1 },
	      { begin: /\?>/ } // end php tag
	    ]
	  };
	  const SUBST = {
	    scope: 'subst',
	    variants: [
	      { begin: /\$\w+/ },
	      {
	        begin: /\{\$/,
	        end: /\}/
	      }
	    ]
	  };
	  const SINGLE_QUOTED = hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null, });
	  const DOUBLE_QUOTED = hljs.inherit(hljs.QUOTE_STRING_MODE, {
	    illegal: null,
	    contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),
	  });

	  const HEREDOC = {
	    begin: /<<<[ \t]*(?:(\w+)|"(\w+)")\n/,
	    end: /[ \t]*(\w+)\b/,
	    contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),
	    'on:begin': (m, resp) => { resp.data._beginMatch = m[1] || m[2]; },
	    'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); },
	  };

	  const NOWDOC = hljs.END_SAME_AS_BEGIN({
	    begin: /<<<[ \t]*'(\w+)'\n/,
	    end: /[ \t]*(\w+)\b/,
	  });
	  // list of valid whitespaces because non-breaking space might be part of a IDENT_RE
	  const WHITESPACE = '[ \t\n]';
	  const STRING = {
	    scope: 'string',
	    variants: [
	      DOUBLE_QUOTED,
	      SINGLE_QUOTED,
	      HEREDOC,
	      NOWDOC
	    ]
	  };
	  const NUMBER = {
	    scope: 'number',
	    variants: [
	      { begin: `\\b0[bB][01]+(?:_[01]+)*\\b` }, // Binary w/ underscore support
	      { begin: `\\b0[oO][0-7]+(?:_[0-7]+)*\\b` }, // Octals w/ underscore support
	      { begin: `\\b0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*\\b` }, // Hex w/ underscore support
	      // Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.
	      { begin: `(?:\\b\\d+(?:_\\d+)*(\\.(?:\\d+(?:_\\d+)*))?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?` }
	    ],
	    relevance: 0
	  };
	  const LITERALS = [
	    "false",
	    "null",
	    "true"
	  ];
	  const KWS = [
	    // Magic constants:
	    // <https://www.php.net/manual/en/language.constants.predefined.php>
	    "__CLASS__",
	    "__DIR__",
	    "__FILE__",
	    "__FUNCTION__",
	    "__COMPILER_HALT_OFFSET__",
	    "__LINE__",
	    "__METHOD__",
	    "__NAMESPACE__",
	    "__TRAIT__",
	    // Function that look like language construct or language construct that look like function:
	    // List of keywords that may not require parenthesis
	    "die",
	    "echo",
	    "exit",
	    "include",
	    "include_once",
	    "print",
	    "require",
	    "require_once",
	    // These are not language construct (function) but operate on the currently-executing function and can access the current symbol table
	    // 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +
	    // Other keywords:
	    // <https://www.php.net/manual/en/reserved.php>
	    // <https://www.php.net/manual/en/language.types.type-juggling.php>
	    "array",
	    "abstract",
	    "and",
	    "as",
	    "binary",
	    "bool",
	    "boolean",
	    "break",
	    "callable",
	    "case",
	    "catch",
	    "class",
	    "clone",
	    "const",
	    "continue",
	    "declare",
	    "default",
	    "do",
	    "double",
	    "else",
	    "elseif",
	    "empty",
	    "enddeclare",
	    "endfor",
	    "endforeach",
	    "endif",
	    "endswitch",
	    "endwhile",
	    "enum",
	    "eval",
	    "extends",
	    "final",
	    "finally",
	    "float",
	    "for",
	    "foreach",
	    "from",
	    "global",
	    "goto",
	    "if",
	    "implements",
	    "instanceof",
	    "insteadof",
	    "int",
	    "integer",
	    "interface",
	    "isset",
	    "iterable",
	    "list",
	    "match|0",
	    "mixed",
	    "new",
	    "never",
	    "object",
	    "or",
	    "private",
	    "protected",
	    "public",
	    "readonly",
	    "real",
	    "return",
	    "string",
	    "switch",
	    "throw",
	    "trait",
	    "try",
	    "unset",
	    "use",
	    "var",
	    "void",
	    "while",
	    "xor",
	    "yield"
	  ];

	  const BUILT_INS = [
	    // Standard PHP library:
	    // <https://www.php.net/manual/en/book.spl.php>
	    "Error|0",
	    "AppendIterator",
	    "ArgumentCountError",
	    "ArithmeticError",
	    "ArrayIterator",
	    "ArrayObject",
	    "AssertionError",
	    "BadFunctionCallException",
	    "BadMethodCallException",
	    "CachingIterator",
	    "CallbackFilterIterator",
	    "CompileError",
	    "Countable",
	    "DirectoryIterator",
	    "DivisionByZeroError",
	    "DomainException",
	    "EmptyIterator",
	    "ErrorException",
	    "Exception",
	    "FilesystemIterator",
	    "FilterIterator",
	    "GlobIterator",
	    "InfiniteIterator",
	    "InvalidArgumentException",
	    "IteratorIterator",
	    "LengthException",
	    "LimitIterator",
	    "LogicException",
	    "MultipleIterator",
	    "NoRewindIterator",
	    "OutOfBoundsException",
	    "OutOfRangeException",
	    "OuterIterator",
	    "OverflowException",
	    "ParentIterator",
	    "ParseError",
	    "RangeException",
	    "RecursiveArrayIterator",
	    "RecursiveCachingIterator",
	    "RecursiveCallbackFilterIterator",
	    "RecursiveDirectoryIterator",
	    "RecursiveFilterIterator",
	    "RecursiveIterator",
	    "RecursiveIteratorIterator",
	    "RecursiveRegexIterator",
	    "RecursiveTreeIterator",
	    "RegexIterator",
	    "RuntimeException",
	    "SeekableIterator",
	    "SplDoublyLinkedList",
	    "SplFileInfo",
	    "SplFileObject",
	    "SplFixedArray",
	    "SplHeap",
	    "SplMaxHeap",
	    "SplMinHeap",
	    "SplObjectStorage",
	    "SplObserver",
	    "SplPriorityQueue",
	    "SplQueue",
	    "SplStack",
	    "SplSubject",
	    "SplTempFileObject",
	    "TypeError",
	    "UnderflowException",
	    "UnexpectedValueException",
	    "UnhandledMatchError",
	    // Reserved interfaces:
	    // <https://www.php.net/manual/en/reserved.interfaces.php>
	    "ArrayAccess",
	    "BackedEnum",
	    "Closure",
	    "Fiber",
	    "Generator",
	    "Iterator",
	    "IteratorAggregate",
	    "Serializable",
	    "Stringable",
	    "Throwable",
	    "Traversable",
	    "UnitEnum",
	    "WeakReference",
	    "WeakMap",
	    // Reserved classes:
	    // <https://www.php.net/manual/en/reserved.classes.php>
	    "Directory",
	    "__PHP_Incomplete_Class",
	    "parent",
	    "php_user_filter",
	    "self",
	    "static",
	    "stdClass"
	  ];

	  /** Dual-case keywords
	   *
	   * ["then","FILE"] =>
	   *     ["then", "THEN", "FILE", "file"]
	   *
	   * @param {string[]} items */
	  const dualCase = (items) => {
	    /** @type string[] */
	    const result = [];
	    items.forEach(item => {
	      result.push(item);
	      if (item.toLowerCase() === item) {
	        result.push(item.toUpperCase());
	      } else {
	        result.push(item.toLowerCase());
	      }
	    });
	    return result;
	  };

	  const KEYWORDS = {
	    keyword: KWS,
	    literal: dualCase(LITERALS),
	    built_in: BUILT_INS,
	  };

	  /**
	   * @param {string[]} items */
	  const normalizeKeywords = (items) => {
	    return items.map(item => {
	      return item.replace(/\|\d+$/, "");
	    });
	  };

	  const CONSTRUCTOR_CALL = { variants: [
	    {
	      match: [
	        /new/,
	        regex.concat(WHITESPACE, "+"),
	        // to prevent built ins from being confused as the class constructor call
	        regex.concat("(?!", normalizeKeywords(BUILT_INS).join("\\b|"), "\\b)"),
	        PASCAL_CASE_CLASS_NAME_RE,
	      ],
	      scope: {
	        1: "keyword",
	        4: "title.class",
	      },
	    }
	  ] };

	  const CONSTANT_REFERENCE = regex.concat(IDENT_RE, "\\b(?!\\()");

	  const LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON = { variants: [
	    {
	      match: [
	        regex.concat(
	          /::/,
	          regex.lookahead(/(?!class\b)/)
	        ),
	        CONSTANT_REFERENCE,
	      ],
	      scope: { 2: "variable.constant", },
	    },
	    {
	      match: [
	        /::/,
	        /class/,
	      ],
	      scope: { 2: "variable.language", },
	    },
	    {
	      match: [
	        PASCAL_CASE_CLASS_NAME_RE,
	        regex.concat(
	          /::/,
	          regex.lookahead(/(?!class\b)/)
	        ),
	        CONSTANT_REFERENCE,
	      ],
	      scope: {
	        1: "title.class",
	        3: "variable.constant",
	      },
	    },
	    {
	      match: [
	        PASCAL_CASE_CLASS_NAME_RE,
	        regex.concat(
	          "::",
	          regex.lookahead(/(?!class\b)/)
	        ),
	      ],
	      scope: { 1: "title.class", },
	    },
	    {
	      match: [
	        PASCAL_CASE_CLASS_NAME_RE,
	        /::/,
	        /class/,
	      ],
	      scope: {
	        1: "title.class",
	        3: "variable.language",
	      },
	    }
	  ] };

	  const NAMED_ARGUMENT = {
	    scope: 'attr',
	    match: regex.concat(IDENT_RE, regex.lookahead(':'), regex.lookahead(/(?!::)/)),
	  };
	  const PARAMS_MODE = {
	    relevance: 0,
	    begin: /\(/,
	    end: /\)/,
	    keywords: KEYWORDS,
	    contains: [
	      NAMED_ARGUMENT,
	      VARIABLE,
	      LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
	      hljs.C_BLOCK_COMMENT_MODE,
	      STRING,
	      NUMBER,
	      CONSTRUCTOR_CALL,
	    ],
	  };
	  const FUNCTION_INVOKE = {
	    relevance: 0,
	    match: [
	      /\b/,
	      // to prevent keywords from being confused as the function title
	      regex.concat("(?!fn\\b|function\\b|", normalizeKeywords(KWS).join("\\b|"), "|", normalizeKeywords(BUILT_INS).join("\\b|"), "\\b)"),
	      IDENT_RE,
	      regex.concat(WHITESPACE, "*"),
	      regex.lookahead(/(?=\()/)
	    ],
	    scope: { 3: "title.function.invoke", },
	    contains: [ PARAMS_MODE ]
	  };
	  PARAMS_MODE.contains.push(FUNCTION_INVOKE);

	  const ATTRIBUTE_CONTAINS = [
	    NAMED_ARGUMENT,
	    LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
	    hljs.C_BLOCK_COMMENT_MODE,
	    STRING,
	    NUMBER,
	    CONSTRUCTOR_CALL,
	  ];

	  const ATTRIBUTES = {
	    begin: regex.concat(/#\[\s*/, PASCAL_CASE_CLASS_NAME_RE),
	    beginScope: "meta",
	    end: /]/,
	    endScope: "meta",
	    keywords: {
	      literal: LITERALS,
	      keyword: [
	        'new',
	        'array',
	      ]
	    },
	    contains: [
	      {
	        begin: /\[/,
	        end: /]/,
	        keywords: {
	          literal: LITERALS,
	          keyword: [
	            'new',
	            'array',
	          ]
	        },
	        contains: [
	          'self',
	          ...ATTRIBUTE_CONTAINS,
	        ]
	      },
	      ...ATTRIBUTE_CONTAINS,
	      {
	        scope: 'meta',
	        match: PASCAL_CASE_CLASS_NAME_RE
	      }
	    ]
	  };

	  return {
	    case_insensitive: false,
	    keywords: KEYWORDS,
	    contains: [
	      ATTRIBUTES,
	      hljs.HASH_COMMENT_MODE,
	      hljs.COMMENT('//', '$'),
	      hljs.COMMENT(
	        '/\\*',
	        '\\*/',
	        { contains: [
	          {
	            scope: 'doctag',
	            match: '@[A-Za-z]+'
	          }
	        ] }
	      ),
	      {
	        match: /__halt_compiler\(\);/,
	        keywords: '__halt_compiler',
	        starts: {
	          scope: "comment",
	          end: hljs.MATCH_NOTHING_RE,
	          contains: [
	            {
	              match: /\?>/,
	              scope: "meta",
	              endsParent: true
	            }
	          ]
	        }
	      },
	      PREPROCESSOR,
	      {
	        scope: 'variable.language',
	        match: /\$this\b/
	      },
	      VARIABLE,
	      FUNCTION_INVOKE,
	      LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
	      {
	        match: [
	          /const/,
	          /\s/,
	          IDENT_RE,
	        ],
	        scope: {
	          1: "keyword",
	          3: "variable.constant",
	        },
	      },
	      CONSTRUCTOR_CALL,
	      {
	        scope: 'function',
	        relevance: 0,
	        beginKeywords: 'fn function',
	        end: /[;{]/,
	        excludeEnd: true,
	        illegal: '[$%\\[]',
	        contains: [
	          { beginKeywords: 'use', },
	          hljs.UNDERSCORE_TITLE_MODE,
	          {
	            begin: '=>', // No markup, just a relevance booster
	            endsParent: true
	          },
	          {
	            scope: 'params',
	            begin: '\\(',
	            end: '\\)',
	            excludeBegin: true,
	            excludeEnd: true,
	            keywords: KEYWORDS,
	            contains: [
	              'self',
	              VARIABLE,
	              LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
	              hljs.C_BLOCK_COMMENT_MODE,
	              STRING,
	              NUMBER
	            ]
	          },
	        ]
	      },
	      {
	        scope: 'class',
	        variants: [
	          {
	            beginKeywords: "enum",
	            illegal: /[($"]/
	          },
	          {
	            beginKeywords: "class interface trait",
	            illegal: /[:($"]/
	          }
	        ],
	        relevance: 0,
	        end: /\{/,
	        excludeEnd: true,
	        contains: [
	          { beginKeywords: 'extends implements' },
	          hljs.UNDERSCORE_TITLE_MODE
	        ]
	      },
	      // both use and namespace still use "old style" rules (vs multi-match)
	      // because the namespace name can include `\` and we still want each
	      // element to be treated as its own *individual* title
	      {
	        beginKeywords: 'namespace',
	        relevance: 0,
	        end: ';',
	        illegal: /[.']/,
	        contains: [ hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, { scope: "title.class" }) ]
	      },
	      {
	        beginKeywords: 'use',
	        relevance: 0,
	        end: ';',
	        contains: [
	          // TODO: title.function vs title.class
	          {
	            match: /\b(as|const|function)\b/,
	            scope: "keyword"
	          },
	          // TODO: could be title.class or title.function
	          hljs.UNDERSCORE_TITLE_MODE
	        ]
	      },
	      STRING,
	      NUMBER,
	    ]
	  };
	}

	php_1 = php;
	return php_1;
}

/*
Language: PHP Template
Requires: xml.js, php.js
Author: Josh Goebel <hello@joshgoebel.com>
Website: https://www.php.net
Category: common
*/

var phpTemplate_1;
var hasRequiredPhpTemplate;

function requirePhpTemplate () {
	if (hasRequiredPhpTemplate) return phpTemplate_1;
	hasRequiredPhpTemplate = 1;
	function phpTemplate(hljs) {
	  return {
	    name: "PHP template",
	    subLanguage: 'xml',
	    contains: [
	      {
	        begin: /<\?(php|=)?/,
	        end: /\?>/,
	        subLanguage: 'php',
	        contains: [
	          // We don't want the php closing tag ?> to close the PHP block when
	          // inside any of the following blocks:
	          {
	            begin: '/\\*',
	            end: '\\*/',
	            skip: true
	          },
	          {
	            begin: 'b"',
	            end: '"',
	            skip: true
	          },
	          {
	            begin: 'b\'',
	            end: '\'',
	            skip: true
	          },
	          hljs.inherit(hljs.APOS_STRING_MODE, {
	            illegal: null,
	            className: null,
	            contains: null,
	            skip: true
	          }),
	          hljs.inherit(hljs.QUOTE_STRING_MODE, {
	            illegal: null,
	            className: null,
	            contains: null,
	            skip: true
	          })
	        ]
	      }
	    ]
	  };
	}

	phpTemplate_1 = phpTemplate;
	return phpTemplate_1;
}

/*
Language: Plain text
Author: Egor Rogov (e.rogov@postgrespro.ru)
Description: Plain text without any highlighting.
Category: common
*/

var plaintext_1;
var hasRequiredPlaintext;

function requirePlaintext () {
	if (hasRequiredPlaintext) return plaintext_1;
	hasRequiredPlaintext = 1;
	function plaintext(hljs) {
	  return {
	    name: 'Plain text',
	    aliases: [
	      'text',
	      'txt'
	    ],
	    disableAutodetect: true
	  };
	}

	plaintext_1 = plaintext;
	return plaintext_1;
}

/*
Language: Pony
Author: Joe Eli McIlvain <joe.eli.mac@gmail.com>
Description: Pony is an open-source, object-oriented, actor-model,
             capabilities-secure, high performance programming language.
Website: https://www.ponylang.io
*/

var pony_1;
var hasRequiredPony;

function requirePony () {
	if (hasRequiredPony) return pony_1;
	hasRequiredPony = 1;
	function pony(hljs) {
	  const KEYWORDS = {
	    keyword:
	      'actor addressof and as be break class compile_error compile_intrinsic '
	      + 'consume continue delegate digestof do else elseif embed end error '
	      + 'for fun if ifdef in interface is isnt lambda let match new not object '
	      + 'or primitive recover repeat return struct then trait try type until '
	      + 'use var where while with xor',
	    meta:
	      'iso val tag trn box ref',
	    literal:
	      'this false true'
	  };

	  const TRIPLE_QUOTE_STRING_MODE = {
	    className: 'string',
	    begin: '"""',
	    end: '"""',
	    relevance: 10
	  };

	  const QUOTE_STRING_MODE = {
	    className: 'string',
	    begin: '"',
	    end: '"',
	    contains: [ hljs.BACKSLASH_ESCAPE ]
	  };

	  const SINGLE_QUOTE_CHAR_MODE = {
	    className: 'string',
	    begin: '\'',
	    end: '\'',
	    contains: [ hljs.BACKSLASH_ESCAPE ],
	    relevance: 0
	  };

	  const TYPE_NAME = {
	    className: 'type',
	    begin: '\\b_?[A-Z][\\w]*',
	    relevance: 0
	  };

	  const PRIMED_NAME = {
	    begin: hljs.IDENT_RE + '\'',
	    relevance: 0
	  };

	  const NUMBER_MODE = {
	    className: 'number',
	    begin: '(-?)(\\b0[xX][a-fA-F0-9]+|\\b0[bB][01]+|(\\b\\d+(_\\d+)?(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)',
	    relevance: 0
	  };

	  /**
	   * The `FUNCTION` and `CLASS` modes were intentionally removed to simplify
	   * highlighting and fix cases like
	   * ```
	   * interface Iterator[A: A]
	   *   fun has_next(): Bool
	   *   fun next(): A?
	   * ```
	   * where it is valid to have a function head without a body
	   */

	  return {
	    name: 'Pony',
	    keywords: KEYWORDS,
	    contains: [
	      TYPE_NAME,
	      TRIPLE_QUOTE_STRING_MODE,
	      QUOTE_STRING_MODE,
	      SINGLE_QUOTE_CHAR_MODE,
	      PRIMED_NAME,
	      NUMBER_MODE,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE
	    ]
	  };
	}

	pony_1 = pony;
	return pony_1;
}

/*
Language: PowerShell
Description: PowerShell is a task-based command-line shell and scripting language built on .NET.
Author: David Mohundro <david@mohundro.com>
Contributors: Nicholas Blumhardt <nblumhardt@nblumhardt.com>, Victor Zhou <OiCMudkips@users.noreply.github.com>, Nicolas Le Gall <contact@nlegall.fr>
Website: https://docs.microsoft.com/en-us/powershell/
*/

var powershell_1;
var hasRequiredPowershell;

function requirePowershell () {
	if (hasRequiredPowershell) return powershell_1;
	hasRequiredPowershell = 1;
	function powershell(hljs) {
	  const TYPES = [
	    "string",
	    "char",
	    "byte",
	    "int",
	    "long",
	    "bool",
	    "decimal",
	    "single",
	    "double",
	    "DateTime",
	    "xml",
	    "array",
	    "hashtable",
	    "void"
	  ];

	  // https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands
	  const VALID_VERBS =
	    'Add|Clear|Close|Copy|Enter|Exit|Find|Format|Get|Hide|Join|Lock|'
	    + 'Move|New|Open|Optimize|Pop|Push|Redo|Remove|Rename|Reset|Resize|'
	    + 'Search|Select|Set|Show|Skip|Split|Step|Switch|Undo|Unlock|'
	    + 'Watch|Backup|Checkpoint|Compare|Compress|Convert|ConvertFrom|'
	    + 'ConvertTo|Dismount|Edit|Expand|Export|Group|Import|Initialize|'
	    + 'Limit|Merge|Mount|Out|Publish|Restore|Save|Sync|Unpublish|Update|'
	    + 'Approve|Assert|Build|Complete|Confirm|Deny|Deploy|Disable|Enable|Install|Invoke|'
	    + 'Register|Request|Restart|Resume|Start|Stop|Submit|Suspend|Uninstall|'
	    + 'Unregister|Wait|Debug|Measure|Ping|Repair|Resolve|Test|Trace|Connect|'
	    + 'Disconnect|Read|Receive|Send|Write|Block|Grant|Protect|Revoke|Unblock|'
	    + 'Unprotect|Use|ForEach|Sort|Tee|Where';

	  const COMPARISON_OPERATORS =
	    '-and|-as|-band|-bnot|-bor|-bxor|-casesensitive|-ccontains|-ceq|-cge|-cgt|'
	    + '-cle|-clike|-clt|-cmatch|-cne|-cnotcontains|-cnotlike|-cnotmatch|-contains|'
	    + '-creplace|-csplit|-eq|-exact|-f|-file|-ge|-gt|-icontains|-ieq|-ige|-igt|'
	    + '-ile|-ilike|-ilt|-imatch|-in|-ine|-inotcontains|-inotlike|-inotmatch|'
	    + '-ireplace|-is|-isnot|-isplit|-join|-le|-like|-lt|-match|-ne|-not|'
	    + '-notcontains|-notin|-notlike|-notmatch|-or|-regex|-replace|-shl|-shr|'
	    + '-split|-wildcard|-xor';

	  const KEYWORDS = {
	    $pattern: /-?[A-z\.\-]+\b/,
	    keyword:
	      'if else foreach return do while until elseif begin for trap data dynamicparam '
	      + 'end break throw param continue finally in switch exit filter try process catch '
	      + 'hidden static parameter',
	    // "echo" relevance has been set to 0 to avoid auto-detect conflicts with shell transcripts
	    built_in:
	      'ac asnp cat cd CFS chdir clc clear clhy cli clp cls clv cnsn compare copy cp '
	      + 'cpi cpp curl cvpa dbp del diff dir dnsn ebp echo|0 epal epcsv epsn erase etsn exsn fc fhx '
	      + 'fl ft fw gal gbp gc gcb gci gcm gcs gdr gerr ghy gi gin gjb gl gm gmo gp gps gpv group '
	      + 'gsn gsnp gsv gtz gu gv gwmi h history icm iex ihy ii ipal ipcsv ipmo ipsn irm ise iwmi '
	      + 'iwr kill lp ls man md measure mi mount move mp mv nal ndr ni nmo npssc nsn nv ogv oh '
	      + 'popd ps pushd pwd r rbp rcjb rcsn rd rdr ren ri rjb rm rmdir rmo rni rnp rp rsn rsnp '
	      + 'rujb rv rvpa rwmi sajb sal saps sasv sbp sc scb select set shcm si sl sleep sls sort sp '
	      + 'spjb spps spsv start stz sujb sv swmi tee trcm type wget where wjb write'
	    // TODO: 'validate[A-Z]+' can't work in keywords
	  };

	  const TITLE_NAME_RE = /\w[\w\d]*((-)[\w\d]+)*/;

	  const BACKTICK_ESCAPE = {
	    begin: '`[\\s\\S]',
	    relevance: 0
	  };

	  const VAR = {
	    className: 'variable',
	    variants: [
	      { begin: /\$\B/ },
	      {
	        className: 'keyword',
	        begin: /\$this/
	      },
	      { begin: /\$[\w\d][\w\d_:]*/ }
	    ]
	  };

	  const LITERAL = {
	    className: 'literal',
	    begin: /\$(null|true|false)\b/
	  };

	  const QUOTE_STRING = {
	    className: "string",
	    variants: [
	      {
	        begin: /"/,
	        end: /"/
	      },
	      {
	        begin: /@"/,
	        end: /^"@/
	      }
	    ],
	    contains: [
	      BACKTICK_ESCAPE,
	      VAR,
	      {
	        className: 'variable',
	        begin: /\$[A-z]/,
	        end: /[^A-z]/
	      }
	    ]
	  };

	  const APOS_STRING = {
	    className: 'string',
	    variants: [
	      {
	        begin: /'/,
	        end: /'/
	      },
	      {
	        begin: /@'/,
	        end: /^'@/
	      }
	    ]
	  };

	  const PS_HELPTAGS = {
	    className: "doctag",
	    variants: [
	      /* no paramater help tags */
	      { begin: /\.(synopsis|description|example|inputs|outputs|notes|link|component|role|functionality)/ },
	      /* one parameter help tags */
	      { begin: /\.(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\s+\S+/ }
	    ]
	  };

	  const PS_COMMENT = hljs.inherit(
	    hljs.COMMENT(null, null),
	    {
	      variants: [
	        /* single-line comment */
	        {
	          begin: /#/,
	          end: /$/
	        },
	        /* multi-line comment */
	        {
	          begin: /<#/,
	          end: /#>/
	        }
	      ],
	      contains: [ PS_HELPTAGS ]
	    }
	  );

	  const CMDLETS = {
	    className: 'built_in',
	    variants: [ { begin: '('.concat(VALID_VERBS, ')+(-)[\\w\\d]+') } ]
	  };

	  const PS_CLASS = {
	    className: 'class',
	    beginKeywords: 'class enum',
	    end: /\s*[{]/,
	    excludeEnd: true,
	    relevance: 0,
	    contains: [ hljs.TITLE_MODE ]
	  };

	  const PS_FUNCTION = {
	    className: 'function',
	    begin: /function\s+/,
	    end: /\s*\{|$/,
	    excludeEnd: true,
	    returnBegin: true,
	    relevance: 0,
	    contains: [
	      {
	        begin: "function",
	        relevance: 0,
	        className: "keyword"
	      },
	      {
	        className: "title",
	        begin: TITLE_NAME_RE,
	        relevance: 0
	      },
	      {
	        begin: /\(/,
	        end: /\)/,
	        className: "params",
	        relevance: 0,
	        contains: [ VAR ]
	      }
	      // CMDLETS
	    ]
	  };

	  // Using statment, plus type, plus assembly name.
	  const PS_USING = {
	    begin: /using\s/,
	    end: /$/,
	    returnBegin: true,
	    contains: [
	      QUOTE_STRING,
	      APOS_STRING,
	      {
	        className: 'keyword',
	        begin: /(using|assembly|command|module|namespace|type)/
	      }
	    ]
	  };

	  // Comperison operators & function named parameters.
	  const PS_ARGUMENTS = { variants: [
	    // PS literals are pretty verbose so it's a good idea to accent them a bit.
	    {
	      className: 'operator',
	      begin: '('.concat(COMPARISON_OPERATORS, ')\\b')
	    },
	    {
	      className: 'literal',
	      begin: /(-){1,2}[\w\d-]+/,
	      relevance: 0
	    }
	  ] };

	  const HASH_SIGNS = {
	    className: 'selector-tag',
	    begin: /@\B/,
	    relevance: 0
	  };

	  // It's a very general rule so I'll narrow it a bit with some strict boundaries
	  // to avoid any possible false-positive collisions!
	  const PS_METHODS = {
	    className: 'function',
	    begin: /\[.*\]\s*[\w]+[ ]??\(/,
	    end: /$/,
	    returnBegin: true,
	    relevance: 0,
	    contains: [
	      {
	        className: 'keyword',
	        begin: '('.concat(
	          KEYWORDS.keyword.toString().replace(/\s/g, '|'
	          ), ')\\b'),
	        endsParent: true,
	        relevance: 0
	      },
	      hljs.inherit(hljs.TITLE_MODE, { endsParent: true })
	    ]
	  };

	  const GENTLEMANS_SET = [
	    // STATIC_MEMBER,
	    PS_METHODS,
	    PS_COMMENT,
	    BACKTICK_ESCAPE,
	    hljs.NUMBER_MODE,
	    QUOTE_STRING,
	    APOS_STRING,
	    // PS_NEW_OBJECT_TYPE,
	    CMDLETS,
	    VAR,
	    LITERAL,
	    HASH_SIGNS
	  ];

	  const PS_TYPE = {
	    begin: /\[/,
	    end: /\]/,
	    excludeBegin: true,
	    excludeEnd: true,
	    relevance: 0,
	    contains: [].concat(
	      'self',
	      GENTLEMANS_SET,
	      {
	        begin: "(" + TYPES.join("|") + ")",
	        className: "built_in",
	        relevance: 0
	      },
	      {
	        className: 'type',
	        begin: /[\.\w\d]+/,
	        relevance: 0
	      }
	    )
	  };

	  PS_METHODS.contains.unshift(PS_TYPE);

	  return {
	    name: 'PowerShell',
	    aliases: [
	      "pwsh",
	      "ps",
	      "ps1"
	    ],
	    case_insensitive: true,
	    keywords: KEYWORDS,
	    contains: GENTLEMANS_SET.concat(
	      PS_CLASS,
	      PS_FUNCTION,
	      PS_USING,
	      PS_ARGUMENTS,
	      PS_TYPE
	    )
	  };
	}

	powershell_1 = powershell;
	return powershell_1;
}

/*
Language: Processing
Description: Processing is a flexible software sketchbook and a language for learning how to code within the context of the visual arts.
Author: Erik Paluka <erik.paluka@gmail.com>
Website: https://processing.org
Category: graphics
*/

var processing_1;
var hasRequiredProcessing;

function requireProcessing () {
	if (hasRequiredProcessing) return processing_1;
	hasRequiredProcessing = 1;
	function processing(hljs) {
	  const regex = hljs.regex;
	  const BUILT_INS = [
	    "displayHeight",
	    "displayWidth",
	    "mouseY",
	    "mouseX",
	    "mousePressed",
	    "pmouseX",
	    "pmouseY",
	    "key",
	    "keyCode",
	    "pixels",
	    "focused",
	    "frameCount",
	    "frameRate",
	    "height",
	    "width",
	    "size",
	    "createGraphics",
	    "beginDraw",
	    "createShape",
	    "loadShape",
	    "PShape",
	    "arc",
	    "ellipse",
	    "line",
	    "point",
	    "quad",
	    "rect",
	    "triangle",
	    "bezier",
	    "bezierDetail",
	    "bezierPoint",
	    "bezierTangent",
	    "curve",
	    "curveDetail",
	    "curvePoint",
	    "curveTangent",
	    "curveTightness",
	    "shape",
	    "shapeMode",
	    "beginContour",
	    "beginShape",
	    "bezierVertex",
	    "curveVertex",
	    "endContour",
	    "endShape",
	    "quadraticVertex",
	    "vertex",
	    "ellipseMode",
	    "noSmooth",
	    "rectMode",
	    "smooth",
	    "strokeCap",
	    "strokeJoin",
	    "strokeWeight",
	    "mouseClicked",
	    "mouseDragged",
	    "mouseMoved",
	    "mousePressed",
	    "mouseReleased",
	    "mouseWheel",
	    "keyPressed",
	    "keyPressedkeyReleased",
	    "keyTyped",
	    "print",
	    "println",
	    "save",
	    "saveFrame",
	    "day",
	    "hour",
	    "millis",
	    "minute",
	    "month",
	    "second",
	    "year",
	    "background",
	    "clear",
	    "colorMode",
	    "fill",
	    "noFill",
	    "noStroke",
	    "stroke",
	    "alpha",
	    "blue",
	    "brightness",
	    "color",
	    "green",
	    "hue",
	    "lerpColor",
	    "red",
	    "saturation",
	    "modelX",
	    "modelY",
	    "modelZ",
	    "screenX",
	    "screenY",
	    "screenZ",
	    "ambient",
	    "emissive",
	    "shininess",
	    "specular",
	    "add",
	    "createImage",
	    "beginCamera",
	    "camera",
	    "endCamera",
	    "frustum",
	    "ortho",
	    "perspective",
	    "printCamera",
	    "printProjection",
	    "cursor",
	    "frameRate",
	    "noCursor",
	    "exit",
	    "loop",
	    "noLoop",
	    "popStyle",
	    "pushStyle",
	    "redraw",
	    "binary",
	    "boolean",
	    "byte",
	    "char",
	    "float",
	    "hex",
	    "int",
	    "str",
	    "unbinary",
	    "unhex",
	    "join",
	    "match",
	    "matchAll",
	    "nf",
	    "nfc",
	    "nfp",
	    "nfs",
	    "split",
	    "splitTokens",
	    "trim",
	    "append",
	    "arrayCopy",
	    "concat",
	    "expand",
	    "reverse",
	    "shorten",
	    "sort",
	    "splice",
	    "subset",
	    "box",
	    "sphere",
	    "sphereDetail",
	    "createInput",
	    "createReader",
	    "loadBytes",
	    "loadJSONArray",
	    "loadJSONObject",
	    "loadStrings",
	    "loadTable",
	    "loadXML",
	    "open",
	    "parseXML",
	    "saveTable",
	    "selectFolder",
	    "selectInput",
	    "beginRaw",
	    "beginRecord",
	    "createOutput",
	    "createWriter",
	    "endRaw",
	    "endRecord",
	    "PrintWritersaveBytes",
	    "saveJSONArray",
	    "saveJSONObject",
	    "saveStream",
	    "saveStrings",
	    "saveXML",
	    "selectOutput",
	    "popMatrix",
	    "printMatrix",
	    "pushMatrix",
	    "resetMatrix",
	    "rotate",
	    "rotateX",
	    "rotateY",
	    "rotateZ",
	    "scale",
	    "shearX",
	    "shearY",
	    "translate",
	    "ambientLight",
	    "directionalLight",
	    "lightFalloff",
	    "lights",
	    "lightSpecular",
	    "noLights",
	    "normal",
	    "pointLight",
	    "spotLight",
	    "image",
	    "imageMode",
	    "loadImage",
	    "noTint",
	    "requestImage",
	    "tint",
	    "texture",
	    "textureMode",
	    "textureWrap",
	    "blend",
	    "copy",
	    "filter",
	    "get",
	    "loadPixels",
	    "set",
	    "updatePixels",
	    "blendMode",
	    "loadShader",
	    "PShaderresetShader",
	    "shader",
	    "createFont",
	    "loadFont",
	    "text",
	    "textFont",
	    "textAlign",
	    "textLeading",
	    "textMode",
	    "textSize",
	    "textWidth",
	    "textAscent",
	    "textDescent",
	    "abs",
	    "ceil",
	    "constrain",
	    "dist",
	    "exp",
	    "floor",
	    "lerp",
	    "log",
	    "mag",
	    "map",
	    "max",
	    "min",
	    "norm",
	    "pow",
	    "round",
	    "sq",
	    "sqrt",
	    "acos",
	    "asin",
	    "atan",
	    "atan2",
	    "cos",
	    "degrees",
	    "radians",
	    "sin",
	    "tan",
	    "noise",
	    "noiseDetail",
	    "noiseSeed",
	    "random",
	    "randomGaussian",
	    "randomSeed"
	  ];
	  const IDENT = hljs.IDENT_RE;
	  const FUNC_NAME = { variants: [
	    {
	      match: regex.concat(regex.either(...BUILT_INS), regex.lookahead(/\s*\(/)),
	      className: "built_in"
	    },
	    {
	      relevance: 0,
	      match: regex.concat(
	        /\b(?!for|if|while)/,
	        IDENT, regex.lookahead(/\s*\(/)),
	      className: "title.function"
	    }
	  ] };
	  const NEW_CLASS = {
	    match: [
	      /new\s+/,
	      IDENT
	    ],
	    className: {
	      1: "keyword",
	      2: "class.title"
	    }
	  };
	  const PROPERTY = {
	    relevance: 0,
	    match: [
	      /\./,
	      IDENT
	    ],
	    className: { 2: "property" }
	  };
	  const CLASS = {
	    variants: [
	      { match: [
	        /class/,
	        /\s+/,
	        IDENT,
	        /\s+/,
	        /extends/,
	        /\s+/,
	        IDENT
	      ] },
	      { match: [
	        /class/,
	        /\s+/,
	        IDENT
	      ] }
	    ],
	    className: {
	      1: "keyword",
	      3: "title.class",
	      5: "keyword",
	      7: "title.class.inherited"
	    }
	  };

	  const TYPES = [
	    "boolean",
	    "byte",
	    "char",
	    "color",
	    "double",
	    "float",
	    "int",
	    "long",
	    "short",
	  ];
	  const CLASSES = [
	    "BufferedReader",
	    "PVector",
	    "PFont",
	    "PImage",
	    "PGraphics",
	    "HashMap",
	    "String",
	    "Array",
	    "FloatDict",
	    "ArrayList",
	    "FloatList",
	    "IntDict",
	    "IntList",
	    "JSONArray",
	    "JSONObject",
	    "Object",
	    "StringDict",
	    "StringList",
	    "Table",
	    "TableRow",
	    "XML"
	  ];
	  const JAVA_KEYWORDS = [
	    "abstract",
	    "assert",
	    "break",
	    "case",
	    "catch",
	    "const",
	    "continue",
	    "default",
	    "else",
	    "enum",
	    "final",
	    "finally",
	    "for",
	    "if",
	    "import",
	    "instanceof",
	    "long",
	    "native",
	    "new",
	    "package",
	    "private",
	    "private",
	    "protected",
	    "protected",
	    "public",
	    "public",
	    "return",
	    "static",
	    "strictfp",
	    "switch",
	    "synchronized",
	    "throw",
	    "throws",
	    "transient",
	    "try",
	    "void",
	    "volatile",
	    "while"
	  ];

	  return {
	    name: 'Processing',
	    aliases: [ 'pde' ],
	    keywords: {
	      keyword: [ ...JAVA_KEYWORDS ],
	      literal: 'P2D P3D HALF_PI PI QUARTER_PI TAU TWO_PI null true false',
	      title: 'setup draw',
	      variable: "super this",
	      built_in: [
	        ...BUILT_INS,
	        ...CLASSES
	      ],
	      type: TYPES
	    },
	    contains: [
	      CLASS,
	      NEW_CLASS,
	      FUNC_NAME,
	      PROPERTY,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_NUMBER_MODE
	    ]
	  };
	}

	processing_1 = processing;
	return processing_1;
}

/*
Language: Python profiler
Description: Python profiler results
Author: Brian Beck <exogen@gmail.com>
*/

var profile_1;
var hasRequiredProfile;

function requireProfile () {
	if (hasRequiredProfile) return profile_1;
	hasRequiredProfile = 1;
	function profile(hljs) {
	  return {
	    name: 'Python profiler',
	    contains: [
	      hljs.C_NUMBER_MODE,
	      {
	        begin: '[a-zA-Z_][\\da-zA-Z_]+\\.[\\da-zA-Z_]{1,3}',
	        end: ':',
	        excludeEnd: true
	      },
	      {
	        begin: '(ncalls|tottime|cumtime)',
	        end: '$',
	        keywords: 'ncalls tottime|10 cumtime|10 filename',
	        relevance: 10
	      },
	      {
	        begin: 'function calls',
	        end: '$',
	        contains: [ hljs.C_NUMBER_MODE ],
	        relevance: 10
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'string',
	        begin: '\\(',
	        end: '\\)$',
	        excludeBegin: true,
	        excludeEnd: true,
	        relevance: 0
	      }
	    ]
	  };
	}

	profile_1 = profile;
	return profile_1;
}

/*
Language: Prolog
Description: Prolog is a general purpose logic programming language associated with artificial intelligence and computational linguistics.
Author: Raivo Laanemets <raivo@infdot.com>
Website: https://en.wikipedia.org/wiki/Prolog
*/

var prolog_1;
var hasRequiredProlog;

function requireProlog () {
	if (hasRequiredProlog) return prolog_1;
	hasRequiredProlog = 1;
	function prolog(hljs) {
	  const ATOM = {

	    begin: /[a-z][A-Za-z0-9_]*/,
	    relevance: 0
	  };

	  const VAR = {

	    className: 'symbol',
	    variants: [
	      { begin: /[A-Z][a-zA-Z0-9_]*/ },
	      { begin: /_[A-Za-z0-9_]*/ }
	    ],
	    relevance: 0
	  };

	  const PARENTED = {

	    begin: /\(/,
	    end: /\)/,
	    relevance: 0
	  };

	  const LIST = {

	    begin: /\[/,
	    end: /\]/
	  };

	  const LINE_COMMENT = {

	    className: 'comment',
	    begin: /%/,
	    end: /$/,
	    contains: [ hljs.PHRASAL_WORDS_MODE ]
	  };

	  const BACKTICK_STRING = {

	    className: 'string',
	    begin: /`/,
	    end: /`/,
	    contains: [ hljs.BACKSLASH_ESCAPE ]
	  };

	  const CHAR_CODE = {
	    className: 'string', // 0'a etc.
	    begin: /0'(\\'|.)/
	  };

	  const SPACE_CODE = {
	    className: 'string',
	    begin: /0'\\s/ // 0'\s
	  };

	  const PRED_OP = { // relevance booster
	    begin: /:-/ };

	  const inner = [

	    ATOM,
	    VAR,
	    PARENTED,
	    PRED_OP,
	    LIST,
	    LINE_COMMENT,
	    hljs.C_BLOCK_COMMENT_MODE,
	    hljs.QUOTE_STRING_MODE,
	    hljs.APOS_STRING_MODE,
	    BACKTICK_STRING,
	    CHAR_CODE,
	    SPACE_CODE,
	    hljs.C_NUMBER_MODE
	  ];

	  PARENTED.contains = inner;
	  LIST.contains = inner;

	  return {
	    name: 'Prolog',
	    contains: inner.concat([
	      { // relevance booster
	        begin: /\.$/ }
	    ])
	  };
	}

	prolog_1 = prolog;
	return prolog_1;
}

/*
Language: .properties
Contributors: Valentin Aitken <valentin@nalisbg.com>, Egor Rogov <e.rogov@postgrespro.ru>
Website: https://en.wikipedia.org/wiki/.properties
Category: config
*/

var properties_1;
var hasRequiredProperties;

function requireProperties () {
	if (hasRequiredProperties) return properties_1;
	hasRequiredProperties = 1;
	/** @type LanguageFn */
	function properties(hljs) {
	  // whitespaces: space, tab, formfeed
	  const WS0 = '[ \\t\\f]*';
	  const WS1 = '[ \\t\\f]+';
	  // delimiter
	  const EQUAL_DELIM = WS0 + '[:=]' + WS0;
	  const WS_DELIM = WS1;
	  const DELIM = '(' + EQUAL_DELIM + '|' + WS_DELIM + ')';
	  const KEY = '([^\\\\:= \\t\\f\\n]|\\\\.)+';

	  const DELIM_AND_VALUE = {
	    // skip DELIM
	    end: DELIM,
	    relevance: 0,
	    starts: {
	      // value: everything until end of line (again, taking into account backslashes)
	      className: 'string',
	      end: /$/,
	      relevance: 0,
	      contains: [
	        { begin: '\\\\\\\\' },
	        { begin: '\\\\\\n' }
	      ]
	    }
	  };

	  return {
	    name: '.properties',
	    disableAutodetect: true,
	    case_insensitive: true,
	    illegal: /\S/,
	    contains: [
	      hljs.COMMENT('^\\s*[!#]', '$'),
	      // key: everything until whitespace or = or : (taking into account backslashes)
	      // case of a key-value pair
	      {
	        returnBegin: true,
	        variants: [
	          { begin: KEY + EQUAL_DELIM },
	          { begin: KEY + WS_DELIM }
	        ],
	        contains: [
	          {
	            className: 'attr',
	            begin: KEY,
	            endsParent: true
	          }
	        ],
	        starts: DELIM_AND_VALUE
	      },
	      // case of an empty key
	      {
	        className: 'attr',
	        begin: KEY + WS0 + '$'
	      }
	    ]
	  };
	}

	properties_1 = properties;
	return properties_1;
}

/*
Language: Protocol Buffers
Author: Dan Tao <daniel.tao@gmail.com>
Description: Protocol buffer message definition format
Website: https://developers.google.com/protocol-buffers/docs/proto3
Category: protocols
*/

var protobuf_1;
var hasRequiredProtobuf;

function requireProtobuf () {
	if (hasRequiredProtobuf) return protobuf_1;
	hasRequiredProtobuf = 1;
	function protobuf(hljs) {
	  const KEYWORDS = [
	    "package",
	    "import",
	    "option",
	    "optional",
	    "required",
	    "repeated",
	    "group",
	    "oneof"
	  ];
	  const TYPES = [
	    "double",
	    "float",
	    "int32",
	    "int64",
	    "uint32",
	    "uint64",
	    "sint32",
	    "sint64",
	    "fixed32",
	    "fixed64",
	    "sfixed32",
	    "sfixed64",
	    "bool",
	    "string",
	    "bytes"
	  ];
	  const CLASS_DEFINITION = {
	    match: [
	      /(message|enum|service)\s+/,
	      hljs.IDENT_RE
	    ],
	    scope: {
	      1: "keyword",
	      2: "title.class"
	    }
	  };

	  return {
	    name: 'Protocol Buffers',
	    aliases: ['proto'],
	    keywords: {
	      keyword: KEYWORDS,
	      type: TYPES,
	      literal: [
	        'true',
	        'false'
	      ]
	    },
	    contains: [
	      hljs.QUOTE_STRING_MODE,
	      hljs.NUMBER_MODE,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      CLASS_DEFINITION,
	      {
	        className: 'function',
	        beginKeywords: 'rpc',
	        end: /[{;]/,
	        excludeEnd: true,
	        keywords: 'rpc returns'
	      },
	      { // match enum items (relevance)
	        // BLAH = ...;
	        begin: /^\s*[A-Z_]+(?=\s*=[^\n]+;$)/ }
	    ]
	  };
	}

	protobuf_1 = protobuf;
	return protobuf_1;
}

/*
Language: Puppet
Author: Jose Molina Colmenero <gaudy41@gmail.com>
Website: https://puppet.com/docs
Category: config
*/

var puppet_1;
var hasRequiredPuppet;

function requirePuppet () {
	if (hasRequiredPuppet) return puppet_1;
	hasRequiredPuppet = 1;
	function puppet(hljs) {
	  const PUPPET_KEYWORDS = {
	    keyword:
	    /* language keywords */
	      'and case default else elsif false if in import enherits node or true undef unless main settings $string ',
	    literal:
	    /* metaparameters */
	      'alias audit before loglevel noop require subscribe tag '
	      /* normal attributes */
	      + 'owner ensure group mode name|0 changes context force incl lens load_path onlyif provider returns root show_diff type_check '
	      + 'en_address ip_address realname command environment hour monute month monthday special target weekday '
	      + 'creates cwd ogoutput refresh refreshonly tries try_sleep umask backup checksum content ctime force ignore '
	      + 'links mtime purge recurse recurselimit replace selinux_ignore_defaults selrange selrole seltype seluser source '
	      + 'souirce_permissions sourceselect validate_cmd validate_replacement allowdupe attribute_membership auth_membership forcelocal gid '
	      + 'ia_load_module members system host_aliases ip allowed_trunk_vlans description device_url duplex encapsulation etherchannel '
	      + 'native_vlan speed principals allow_root auth_class auth_type authenticate_user k_of_n mechanisms rule session_owner shared options '
	      + 'device fstype enable hasrestart directory present absent link atboot blockdevice device dump pass remounts poller_tag use '
	      + 'message withpath adminfile allow_virtual allowcdrom category configfiles flavor install_options instance package_settings platform '
	      + 'responsefile status uninstall_options vendor unless_system_user unless_uid binary control flags hasstatus manifest pattern restart running '
	      + 'start stop allowdupe auths expiry gid groups home iterations key_membership keys managehome membership password password_max_age '
	      + 'password_min_age profile_membership profiles project purge_ssh_keys role_membership roles salt shell uid baseurl cost descr enabled '
	      + 'enablegroups exclude failovermethod gpgcheck gpgkey http_caching include includepkgs keepalive metadata_expire metalink mirrorlist '
	      + 'priority protect proxy proxy_password proxy_username repo_gpgcheck s3_enabled skip_if_unavailable sslcacert sslclientcert sslclientkey '
	      + 'sslverify mounted',
	    built_in:
	    /* core facts */
	      'architecture augeasversion blockdevices boardmanufacturer boardproductname boardserialnumber cfkey dhcp_servers '
	      + 'domain ec2_ ec2_userdata facterversion filesystems ldom fqdn gid hardwareisa hardwaremodel hostname id|0 interfaces '
	      + 'ipaddress ipaddress_ ipaddress6 ipaddress6_ iphostnumber is_virtual kernel kernelmajversion kernelrelease kernelversion '
	      + 'kernelrelease kernelversion lsbdistcodename lsbdistdescription lsbdistid lsbdistrelease lsbmajdistrelease lsbminordistrelease '
	      + 'lsbrelease macaddress macaddress_ macosx_buildversion macosx_productname macosx_productversion macosx_productverson_major '
	      + 'macosx_productversion_minor manufacturer memoryfree memorysize netmask metmask_ network_ operatingsystem operatingsystemmajrelease '
	      + 'operatingsystemrelease osfamily partitions path physicalprocessorcount processor processorcount productname ps puppetversion '
	      + 'rubysitedir rubyversion selinux selinux_config_mode selinux_config_policy selinux_current_mode selinux_current_mode selinux_enforced '
	      + 'selinux_policyversion serialnumber sp_ sshdsakey sshecdsakey sshrsakey swapencrypted swapfree swapsize timezone type uniqueid uptime '
	      + 'uptime_days uptime_hours uptime_seconds uuid virtual vlans xendomains zfs_version zonenae zones zpool_version'
	  };

	  const COMMENT = hljs.COMMENT('#', '$');

	  const IDENT_RE = '([A-Za-z_]|::)(\\w|::)*';

	  const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE });

	  const VARIABLE = {
	    className: 'variable',
	    begin: '\\$' + IDENT_RE
	  };

	  const STRING = {
	    className: 'string',
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      VARIABLE
	    ],
	    variants: [
	      {
	        begin: /'/,
	        end: /'/
	      },
	      {
	        begin: /"/,
	        end: /"/
	      }
	    ]
	  };

	  return {
	    name: 'Puppet',
	    aliases: [ 'pp' ],
	    contains: [
	      COMMENT,
	      VARIABLE,
	      STRING,
	      {
	        beginKeywords: 'class',
	        end: '\\{|;',
	        illegal: /=/,
	        contains: [
	          TITLE,
	          COMMENT
	        ]
	      },
	      {
	        beginKeywords: 'define',
	        end: /\{/,
	        contains: [
	          {
	            className: 'section',
	            begin: hljs.IDENT_RE,
	            endsParent: true
	          }
	        ]
	      },
	      {
	        begin: hljs.IDENT_RE + '\\s+\\{',
	        returnBegin: true,
	        end: /\S/,
	        contains: [
	          {
	            className: 'keyword',
	            begin: hljs.IDENT_RE,
	            relevance: 0.2
	          },
	          {
	            begin: /\{/,
	            end: /\}/,
	            keywords: PUPPET_KEYWORDS,
	            relevance: 0,
	            contains: [
	              STRING,
	              COMMENT,
	              {
	                begin: '[a-zA-Z_]+\\s*=>',
	                returnBegin: true,
	                end: '=>',
	                contains: [
	                  {
	                    className: 'attr',
	                    begin: hljs.IDENT_RE
	                  }
	                ]
	              },
	              {
	                className: 'number',
	                begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
	                relevance: 0
	              },
	              VARIABLE
	            ]
	          }
	        ],
	        relevance: 0
	      }
	    ]
	  };
	}

	puppet_1 = puppet;
	return puppet_1;
}

/*
Language: PureBASIC
Author: Tristano Ajmone <tajmone@gmail.com>
Description: Syntax highlighting for PureBASIC (v.5.00-5.60). No inline ASM highlighting. (v.1.2, May 2017)
Credits: I've taken inspiration from the PureBasic language file for GeSHi, created by Gustavo Julio Fiorenza (GuShH).
Website: https://www.purebasic.com
*/

var purebasic_1;
var hasRequiredPurebasic;

function requirePurebasic () {
	if (hasRequiredPurebasic) return purebasic_1;
	hasRequiredPurebasic = 1;
	// Base deafult colors in PB IDE: background: #FFFFDF; foreground: #000000;

	function purebasic(hljs) {
	  const STRINGS = { // PB IDE color: #0080FF (Azure Radiance)
	    className: 'string',
	    begin: '(~)?"',
	    end: '"',
	    illegal: '\\n'
	  };
	  const CONSTANTS = { // PB IDE color: #924B72 (Cannon Pink)
	    //  "#" + a letter or underscore + letters, digits or underscores + (optional) "$"
	    className: 'symbol',
	    begin: '#[a-zA-Z_]\\w*\\$?'
	  };

	  return {
	    name: 'PureBASIC',
	    aliases: [
	      'pb',
	      'pbi'
	    ],
	    keywords: // PB IDE color: #006666 (Blue Stone) + Bold
	      // Keywords from all version of PureBASIC 5.00 upward ...
	      'Align And Array As Break CallDebugger Case CompilerCase CompilerDefault '
	      + 'CompilerElse CompilerElseIf CompilerEndIf CompilerEndSelect CompilerError '
	      + 'CompilerIf CompilerSelect CompilerWarning Continue Data DataSection Debug '
	      + 'DebugLevel Declare DeclareC DeclareCDLL DeclareDLL DeclareModule Default '
	      + 'Define Dim DisableASM DisableDebugger DisableExplicit Else ElseIf EnableASM '
	      + 'EnableDebugger EnableExplicit End EndDataSection EndDeclareModule EndEnumeration '
	      + 'EndIf EndImport EndInterface EndMacro EndModule EndProcedure EndSelect '
	      + 'EndStructure EndStructureUnion EndWith Enumeration EnumerationBinary Extends '
	      + 'FakeReturn For ForEach ForEver Global Gosub Goto If Import ImportC '
	      + 'IncludeBinary IncludeFile IncludePath Interface List Macro MacroExpandedCount '
	      + 'Map Module NewList NewMap Next Not Or Procedure ProcedureC '
	      + 'ProcedureCDLL ProcedureDLL ProcedureReturn Protected Prototype PrototypeC ReDim '
	      + 'Read Repeat Restore Return Runtime Select Shared Static Step Structure '
	      + 'StructureUnion Swap Threaded To UndefineMacro Until Until  UnuseModule '
	      + 'UseModule Wend While With XIncludeFile XOr',
	    contains: [
	      // COMMENTS | PB IDE color: #00AAAA (Persian Green)
	      hljs.COMMENT(';', '$', { relevance: 0 }),

	      { // PROCEDURES DEFINITIONS
	        className: 'function',
	        begin: '\\b(Procedure|Declare)(C|CDLL|DLL)?\\b',
	        end: '\\(',
	        excludeEnd: true,
	        returnBegin: true,
	        contains: [
	          { // PROCEDURE KEYWORDS | PB IDE color: #006666 (Blue Stone) + Bold
	            className: 'keyword',
	            begin: '(Procedure|Declare)(C|CDLL|DLL)?',
	            excludeEnd: true
	          },
	          { // PROCEDURE RETURN TYPE SETTING | PB IDE color: #000000 (Black)
	            className: 'type',
	            begin: '\\.\\w*'
	            // end: ' ',
	          },
	          hljs.UNDERSCORE_TITLE_MODE // PROCEDURE NAME | PB IDE color: #006666 (Blue Stone)
	        ]
	      },
	      STRINGS,
	      CONSTANTS
	    ]
	  };
	}

	/*  ==============================================================================
	                                      CHANGELOG
	    ==============================================================================
	    - v.1.2 (2017-05-12)
	        -- BUG-FIX: Some keywords were accidentally joyned together. Now fixed.
	    - v.1.1 (2017-04-30)
	        -- Updated to PureBASIC 5.60.
	        -- Keywords list now built by extracting them from the PureBASIC SDK's
	           "SyntaxHilighting.dll" (from each PureBASIC version). Tokens from each
	           version are added to the list, and renamed or removed tokens are kept
	           for the sake of covering all versions of the language from PureBASIC
	           v5.00 upward. (NOTE: currently, there are no renamed or deprecated
	           tokens in the keywords list). For more info, see:
	           -- http://www.purebasic.fr/english/viewtopic.php?&p=506269
	           -- https://github.com/tajmone/purebasic-archives/tree/master/syntax-highlighting/guidelines
	    - v.1.0 (April 2016)
	        -- First release
	        -- Keywords list taken and adapted from GuShH's (Gustavo Julio Fiorenza)
	           PureBasic language file for GeSHi:
	           -- https://github.com/easybook/geshi/blob/master/geshi/purebasic.php
	*/

	purebasic_1 = purebasic;
	return purebasic_1;
}

/*
Language: Python
Description: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.
Website: https://www.python.org
Category: common
*/

var python_1;
var hasRequiredPython;

function requirePython () {
	if (hasRequiredPython) return python_1;
	hasRequiredPython = 1;
	function python(hljs) {
	  const regex = hljs.regex;
	  const IDENT_RE = /[\p{XID_Start}_]\p{XID_Continue}*/u;
	  const RESERVED_WORDS = [
	    'and',
	    'as',
	    'assert',
	    'async',
	    'await',
	    'break',
	    'case',
	    'class',
	    'continue',
	    'def',
	    'del',
	    'elif',
	    'else',
	    'except',
	    'finally',
	    'for',
	    'from',
	    'global',
	    'if',
	    'import',
	    'in',
	    'is',
	    'lambda',
	    'match',
	    'nonlocal|10',
	    'not',
	    'or',
	    'pass',
	    'raise',
	    'return',
	    'try',
	    'while',
	    'with',
	    'yield'
	  ];

	  const BUILT_INS = [
	    '__import__',
	    'abs',
	    'all',
	    'any',
	    'ascii',
	    'bin',
	    'bool',
	    'breakpoint',
	    'bytearray',
	    'bytes',
	    'callable',
	    'chr',
	    'classmethod',
	    'compile',
	    'complex',
	    'delattr',
	    'dict',
	    'dir',
	    'divmod',
	    'enumerate',
	    'eval',
	    'exec',
	    'filter',
	    'float',
	    'format',
	    'frozenset',
	    'getattr',
	    'globals',
	    'hasattr',
	    'hash',
	    'help',
	    'hex',
	    'id',
	    'input',
	    'int',
	    'isinstance',
	    'issubclass',
	    'iter',
	    'len',
	    'list',
	    'locals',
	    'map',
	    'max',
	    'memoryview',
	    'min',
	    'next',
	    'object',
	    'oct',
	    'open',
	    'ord',
	    'pow',
	    'print',
	    'property',
	    'range',
	    'repr',
	    'reversed',
	    'round',
	    'set',
	    'setattr',
	    'slice',
	    'sorted',
	    'staticmethod',
	    'str',
	    'sum',
	    'super',
	    'tuple',
	    'type',
	    'vars',
	    'zip'
	  ];

	  const LITERALS = [
	    '__debug__',
	    'Ellipsis',
	    'False',
	    'None',
	    'NotImplemented',
	    'True'
	  ];

	  // https://docs.python.org/3/library/typing.html
	  // TODO: Could these be supplemented by a CamelCase matcher in certain
	  // contexts, leaving these remaining only for relevance hinting?
	  const TYPES = [
	    "Any",
	    "Callable",
	    "Coroutine",
	    "Dict",
	    "List",
	    "Literal",
	    "Generic",
	    "Optional",
	    "Sequence",
	    "Set",
	    "Tuple",
	    "Type",
	    "Union"
	  ];

	  const KEYWORDS = {
	    $pattern: /[A-Za-z]\w+|__\w+__/,
	    keyword: RESERVED_WORDS,
	    built_in: BUILT_INS,
	    literal: LITERALS,
	    type: TYPES
	  };

	  const PROMPT = {
	    className: 'meta',
	    begin: /^(>>>|\.\.\.) /
	  };

	  const SUBST = {
	    className: 'subst',
	    begin: /\{/,
	    end: /\}/,
	    keywords: KEYWORDS,
	    illegal: /#/
	  };

	  const LITERAL_BRACKET = {
	    begin: /\{\{/,
	    relevance: 0
	  };

	  const STRING = {
	    className: 'string',
	    contains: [ hljs.BACKSLASH_ESCAPE ],
	    variants: [
	      {
	        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,
	        end: /'''/,
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          PROMPT
	        ],
	        relevance: 10
	      },
	      {
	        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,
	        end: /"""/,
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          PROMPT
	        ],
	        relevance: 10
	      },
	      {
	        begin: /([fF][rR]|[rR][fF]|[fF])'''/,
	        end: /'''/,
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          PROMPT,
	          LITERAL_BRACKET,
	          SUBST
	        ]
	      },
	      {
	        begin: /([fF][rR]|[rR][fF]|[fF])"""/,
	        end: /"""/,
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          PROMPT,
	          LITERAL_BRACKET,
	          SUBST
	        ]
	      },
	      {
	        begin: /([uU]|[rR])'/,
	        end: /'/,
	        relevance: 10
	      },
	      {
	        begin: /([uU]|[rR])"/,
	        end: /"/,
	        relevance: 10
	      },
	      {
	        begin: /([bB]|[bB][rR]|[rR][bB])'/,
	        end: /'/
	      },
	      {
	        begin: /([bB]|[bB][rR]|[rR][bB])"/,
	        end: /"/
	      },
	      {
	        begin: /([fF][rR]|[rR][fF]|[fF])'/,
	        end: /'/,
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          LITERAL_BRACKET,
	          SUBST
	        ]
	      },
	      {
	        begin: /([fF][rR]|[rR][fF]|[fF])"/,
	        end: /"/,
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          LITERAL_BRACKET,
	          SUBST
	        ]
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE
	    ]
	  };

	  // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals
	  const digitpart = '[0-9](_?[0-9])*';
	  const pointfloat = `(\\b(${digitpart}))?\\.(${digitpart})|\\b(${digitpart})\\.`;
	  // Whitespace after a number (or any lexical token) is needed only if its absence
	  // would change the tokenization
	  // https://docs.python.org/3.9/reference/lexical_analysis.html#whitespace-between-tokens
	  // We deviate slightly, requiring a word boundary or a keyword
	  // to avoid accidentally recognizing *prefixes* (e.g., `0` in `0x41` or `08` or `0__1`)
	  const lookahead = `\\b|${RESERVED_WORDS.join('|')}`;
	  const NUMBER = {
	    className: 'number',
	    relevance: 0,
	    variants: [
	      // exponentfloat, pointfloat
	      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals
	      // optionally imaginary
	      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
	      // Note: no leading \b because floats can start with a decimal point
	      // and we don't want to mishandle e.g. `fn(.5)`,
	      // no trailing \b for pointfloat because it can end with a decimal point
	      // and we don't want to mishandle e.g. `0..hex()`; this should be safe
	      // because both MUST contain a decimal point and so cannot be confused with
	      // the interior part of an identifier
	      {
	        begin: `(\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?(?=${lookahead})`
	      },
	      {
	        begin: `(${pointfloat})[jJ]?`
	      },

	      // decinteger, bininteger, octinteger, hexinteger
	      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals
	      // optionally "long" in Python 2
	      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals
	      // decinteger is optionally imaginary
	      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
	      {
	        begin: `\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${lookahead})`
	      },
	      {
	        begin: `\\b0[bB](_?[01])+[lL]?(?=${lookahead})`
	      },
	      {
	        begin: `\\b0[oO](_?[0-7])+[lL]?(?=${lookahead})`
	      },
	      {
	        begin: `\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${lookahead})`
	      },

	      // imagnumber (digitpart-based)
	      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
	      {
	        begin: `\\b(${digitpart})[jJ](?=${lookahead})`
	      }
	    ]
	  };
	  const COMMENT_TYPE = {
	    className: "comment",
	    begin: regex.lookahead(/# type:/),
	    end: /$/,
	    keywords: KEYWORDS,
	    contains: [
	      { // prevent keywords from coloring `type`
	        begin: /# type:/
	      },
	      // comment within a datatype comment includes no keywords
	      {
	        begin: /#/,
	        end: /\b\B/,
	        endsWithParent: true
	      }
	    ]
	  };
	  const PARAMS = {
	    className: 'params',
	    variants: [
	      // Exclude params in functions without params
	      {
	        className: "",
	        begin: /\(\s*\)/,
	        skip: true
	      },
	      {
	        begin: /\(/,
	        end: /\)/,
	        excludeBegin: true,
	        excludeEnd: true,
	        keywords: KEYWORDS,
	        contains: [
	          'self',
	          PROMPT,
	          NUMBER,
	          STRING,
	          hljs.HASH_COMMENT_MODE
	        ]
	      }
	    ]
	  };
	  SUBST.contains = [
	    STRING,
	    NUMBER,
	    PROMPT
	  ];

	  return {
	    name: 'Python',
	    aliases: [
	      'py',
	      'gyp',
	      'ipython'
	    ],
	    unicodeRegex: true,
	    keywords: KEYWORDS,
	    illegal: /(<\/|\?)|=>/,
	    contains: [
	      PROMPT,
	      NUMBER,
	      {
	        // very common convention
	        begin: /\bself\b/
	      },
	      {
	        // eat "if" prior to string so that it won't accidentally be
	        // labeled as an f-string
	        beginKeywords: "if",
	        relevance: 0
	      },
	      STRING,
	      COMMENT_TYPE,
	      hljs.HASH_COMMENT_MODE,
	      {
	        match: [
	          /\bdef/, /\s+/,
	          IDENT_RE,
	        ],
	        scope: {
	          1: "keyword",
	          3: "title.function"
	        },
	        contains: [ PARAMS ]
	      },
	      {
	        variants: [
	          {
	            match: [
	              /\bclass/, /\s+/,
	              IDENT_RE, /\s*/,
	              /\(\s*/, IDENT_RE,/\s*\)/
	            ],
	          },
	          {
	            match: [
	              /\bclass/, /\s+/,
	              IDENT_RE
	            ],
	          }
	        ],
	        scope: {
	          1: "keyword",
	          3: "title.class",
	          6: "title.class.inherited",
	        }
	      },
	      {
	        className: 'meta',
	        begin: /^[\t ]*@/,
	        end: /(?=#)|$/,
	        contains: [
	          NUMBER,
	          PARAMS,
	          STRING
	        ]
	      }
	    ]
	  };
	}

	python_1 = python;
	return python_1;
}

/*
Language: Python REPL
Requires: python.js
Author: Josh Goebel <hello@joshgoebel.com>
Category: common
*/

var pythonRepl_1;
var hasRequiredPythonRepl;

function requirePythonRepl () {
	if (hasRequiredPythonRepl) return pythonRepl_1;
	hasRequiredPythonRepl = 1;
	function pythonRepl(hljs) {
	  return {
	    aliases: [ 'pycon' ],
	    contains: [
	      {
	        className: 'meta.prompt',
	        starts: {
	          // a space separates the REPL prefix from the actual code
	          // this is purely for cleaner HTML output
	          end: / |$/,
	          starts: {
	            end: '$',
	            subLanguage: 'python'
	          }
	        },
	        variants: [
	          { begin: /^>>>(?=[ ]|$)/ },
	          { begin: /^\.\.\.(?=[ ]|$)/ }
	        ]
	      }
	    ]
	  };
	}

	pythonRepl_1 = pythonRepl;
	return pythonRepl_1;
}

/*
Language: Q
Description: Q is a vector-based functional paradigm programming language built into the kdb+ database.
             (K/Q/Kdb+ from Kx Systems)
Author: Sergey Vidyuk <svidyuk@gmail.com>
Website: https://kx.com/connect-with-us/developers/
*/

var q_1;
var hasRequiredQ;

function requireQ () {
	if (hasRequiredQ) return q_1;
	hasRequiredQ = 1;
	function q(hljs) {
	  const KEYWORDS = {
	    $pattern: /(`?)[A-Za-z0-9_]+\b/,
	    keyword:
	      'do while select delete by update from',
	    literal:
	      '0b 1b',
	    built_in:
	      'neg not null string reciprocal floor ceiling signum mod xbar xlog and or each scan over prior mmu lsq inv md5 ltime gtime count first var dev med cov cor all any rand sums prds mins maxs fills deltas ratios avgs differ prev next rank reverse iasc idesc asc desc msum mcount mavg mdev xrank mmin mmax xprev rotate distinct group where flip type key til get value attr cut set upsert raze union inter except cross sv vs sublist enlist read0 read1 hopen hclose hdel hsym hcount peach system ltrim rtrim trim lower upper ssr view tables views cols xcols keys xkey xcol xasc xdesc fkeys meta lj aj aj0 ij pj asof uj ww wj wj1 fby xgroup ungroup ej save load rsave rload show csv parse eval min max avg wavg wsum sin cos tan sum',
	    type:
	      '`float `double int `timestamp `timespan `datetime `time `boolean `symbol `char `byte `short `long `real `month `date `minute `second `guid'
	  };

	  return {
	    name: 'Q',
	    aliases: [
	      'k',
	      'kdb'
	    ],
	    keywords: KEYWORDS,
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_NUMBER_MODE
	    ]
	  };
	}

	q_1 = q;
	return q_1;
}

/*
Language: QML
Requires: javascript.js, xml.js
Author: John Foster <jfoster@esri.com>
Description: Syntax highlighting for the Qt Quick QML scripting language, based mostly off
             the JavaScript parser.
Website: https://doc.qt.io/qt-5/qmlapplications.html
Category: scripting
*/

var qml_1;
var hasRequiredQml;

function requireQml () {
	if (hasRequiredQml) return qml_1;
	hasRequiredQml = 1;
	function qml(hljs) {
	  const regex = hljs.regex;
	  const KEYWORDS = {
	    keyword:
	      'in of on if for while finally var new function do return void else break catch '
	      + 'instanceof with throw case default try this switch continue typeof delete '
	      + 'let yield const export super debugger as async await import',
	    literal:
	      'true false null undefined NaN Infinity',
	    built_in:
	      'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent '
	      + 'encodeURI encodeURIComponent escape unescape Object Function Boolean Error '
	      + 'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError '
	      + 'TypeError URIError Number Math Date String RegExp Array Float32Array '
	      + 'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array '
	      + 'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require '
	      + 'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect '
	      + 'Behavior bool color coordinate date double enumeration font geocircle georectangle '
	      + 'geoshape int list matrix4x4 parent point quaternion real rect '
	      + 'size string url variant vector2d vector3d vector4d '
	      + 'Promise'
	  };

	  const QML_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9\\._]*';

	  // Isolate property statements. Ends at a :, =, ;, ,, a comment or end of line.
	  // Use property class.
	  const PROPERTY = {
	    className: 'keyword',
	    begin: '\\bproperty\\b',
	    starts: {
	      className: 'string',
	      end: '(:|=|;|,|//|/\\*|$)',
	      returnEnd: true
	    }
	  };

	  // Isolate signal statements. Ends at a ) a comment or end of line.
	  // Use property class.
	  const SIGNAL = {
	    className: 'keyword',
	    begin: '\\bsignal\\b',
	    starts: {
	      className: 'string',
	      end: '(\\(|:|=|;|,|//|/\\*|$)',
	      returnEnd: true
	    }
	  };

	  // id: is special in QML. When we see id: we want to mark the id: as attribute and
	  // emphasize the token following.
	  const ID_ID = {
	    className: 'attribute',
	    begin: '\\bid\\s*:',
	    starts: {
	      className: 'string',
	      end: QML_IDENT_RE,
	      returnEnd: false
	    }
	  };

	  // Find QML object attribute. An attribute is a QML identifier followed by :.
	  // Unfortunately it's hard to know where it ends, as it may contain scalars,
	  // objects, object definitions, or javascript. The true end is either when the parent
	  // ends or the next attribute is detected.
	  const QML_ATTRIBUTE = {
	    begin: QML_IDENT_RE + '\\s*:',
	    returnBegin: true,
	    contains: [
	      {
	        className: 'attribute',
	        begin: QML_IDENT_RE,
	        end: '\\s*:',
	        excludeEnd: true,
	        relevance: 0
	      }
	    ],
	    relevance: 0
	  };

	  // Find QML object. A QML object is a QML identifier followed by { and ends at the matching }.
	  // All we really care about is finding IDENT followed by { and just mark up the IDENT and ignore the {.
	  const QML_OBJECT = {
	    begin: regex.concat(QML_IDENT_RE, /\s*\{/),
	    end: /\{/,
	    returnBegin: true,
	    relevance: 0,
	    contains: [ hljs.inherit(hljs.TITLE_MODE, { begin: QML_IDENT_RE }) ]
	  };

	  return {
	    name: 'QML',
	    aliases: [ 'qt' ],
	    case_insensitive: false,
	    keywords: KEYWORDS,
	    contains: [
	      {
	        className: 'meta',
	        begin: /^\s*['"]use (strict|asm)['"]/
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      { // template string
	        className: 'string',
	        begin: '`',
	        end: '`',
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          {
	            className: 'subst',
	            begin: '\\$\\{',
	            end: '\\}'
	          }
	        ]
	      },
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'number',
	        variants: [
	          { begin: '\\b(0[bB][01]+)' },
	          { begin: '\\b(0[oO][0-7]+)' },
	          { begin: hljs.C_NUMBER_RE }
	        ],
	        relevance: 0
	      },
	      { // "value" container
	        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
	        keywords: 'return throw case',
	        contains: [
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE,
	          hljs.REGEXP_MODE,
	          { // E4X / JSX
	            begin: /</,
	            end: />\s*[);\]]/,
	            relevance: 0,
	            subLanguage: 'xml'
	          }
	        ],
	        relevance: 0
	      },
	      SIGNAL,
	      PROPERTY,
	      {
	        className: 'function',
	        beginKeywords: 'function',
	        end: /\{/,
	        excludeEnd: true,
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, { begin: /[A-Za-z$_][0-9A-Za-z$_]*/ }),
	          {
	            className: 'params',
	            begin: /\(/,
	            end: /\)/,
	            excludeBegin: true,
	            excludeEnd: true,
	            contains: [
	              hljs.C_LINE_COMMENT_MODE,
	              hljs.C_BLOCK_COMMENT_MODE
	            ]
	          }
	        ],
	        illegal: /\[|%/
	      },
	      {
	        // hack: prevents detection of keywords after dots
	        begin: '\\.' + hljs.IDENT_RE,
	        relevance: 0
	      },
	      ID_ID,
	      QML_ATTRIBUTE,
	      QML_OBJECT
	    ],
	    illegal: /#/
	  };
	}

	qml_1 = qml;
	return qml_1;
}

/*
Language: R
Description: R is a free software environment for statistical computing and graphics.
Author: Joe Cheng <joe@rstudio.org>
Contributors: Konrad Rudolph <konrad.rudolph@gmail.com>
Website: https://www.r-project.org
Category: common,scientific
*/

var r_1;
var hasRequiredR;

function requireR () {
	if (hasRequiredR) return r_1;
	hasRequiredR = 1;
	/** @type LanguageFn */
	function r(hljs) {
	  const regex = hljs.regex;
	  // Identifiers in R cannot start with `_`, but they can start with `.` if it
	  // is not immediately followed by a digit.
	  // R also supports quoted identifiers, which are near-arbitrary sequences
	  // delimited by backticks (`…`), which may contain escape sequences. These are
	  // handled in a separate mode. See `test/markup/r/names.txt` for examples.
	  // FIXME: Support Unicode identifiers.
	  const IDENT_RE = /(?:(?:[a-zA-Z]|\.[._a-zA-Z])[._a-zA-Z0-9]*)|\.(?!\d)/;
	  const NUMBER_TYPES_RE = regex.either(
	    // Special case: only hexadecimal binary powers can contain fractions
	    /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/,
	    // Hexadecimal numbers without fraction and optional binary power
	    /0[xX][0-9a-fA-F]+(?:[pP][+-]?\d+)?[Li]?/,
	    // Decimal numbers
	    /(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?[Li]?/
	  );
	  const OPERATORS_RE = /[=!<>:]=|\|\||&&|:::?|<-|<<-|->>|->|\|>|[-+*\/?!$&|:<=>@^~]|\*\*/;
	  const PUNCTUATION_RE = regex.either(
	    /[()]/,
	    /[{}]/,
	    /\[\[/,
	    /[[\]]/,
	    /\\/,
	    /,/
	  );

	  return {
	    name: 'R',

	    keywords: {
	      $pattern: IDENT_RE,
	      keyword:
	        'function if in break next repeat else for while',
	      literal:
	        'NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 '
	        + 'NA_character_|10 NA_complex_|10',
	      built_in:
	        // Builtin constants
	        'LETTERS letters month.abb month.name pi T F '
	        // Primitive functions
	        // These are all the functions in `base` that are implemented as a
	        // `.Primitive`, minus those functions that are also keywords.
	        + 'abs acos acosh all any anyNA Arg as.call as.character '
	        + 'as.complex as.double as.environment as.integer as.logical '
	        + 'as.null.default as.numeric as.raw asin asinh atan atanh attr '
	        + 'attributes baseenv browser c call ceiling class Conj cos cosh '
	        + 'cospi cummax cummin cumprod cumsum digamma dim dimnames '
	        + 'emptyenv exp expression floor forceAndCall gamma gc.time '
	        + 'globalenv Im interactive invisible is.array is.atomic is.call '
	        + 'is.character is.complex is.double is.environment is.expression '
	        + 'is.finite is.function is.infinite is.integer is.language '
	        + 'is.list is.logical is.matrix is.na is.name is.nan is.null '
	        + 'is.numeric is.object is.pairlist is.raw is.recursive is.single '
	        + 'is.symbol lazyLoadDBfetch length lgamma list log max min '
	        + 'missing Mod names nargs nzchar oldClass on.exit pos.to.env '
	        + 'proc.time prod quote range Re rep retracemem return round '
	        + 'seq_along seq_len seq.int sign signif sin sinh sinpi sqrt '
	        + 'standardGeneric substitute sum switch tan tanh tanpi tracemem '
	        + 'trigamma trunc unclass untracemem UseMethod xtfrm',
	    },

	    contains: [
	      // Roxygen comments
	      hljs.COMMENT(
	        /#'/,
	        /$/,
	        { contains: [
	          {
	            // Handle `@examples` separately to cause all subsequent code
	            // until the next `@`-tag on its own line to be kept as-is,
	            // preventing highlighting. This code is example R code, so nested
	            // doctags shouldn’t be treated as such. See
	            // `test/markup/r/roxygen.txt` for an example.
	            scope: 'doctag',
	            match: /@examples/,
	            starts: {
	              end: regex.lookahead(regex.either(
	                // end if another doc comment
	                /\n^#'\s*(?=@[a-zA-Z]+)/,
	                // or a line with no comment
	                /\n^(?!#')/
	              )),
	              endsParent: true
	            }
	          },
	          {
	            // Handle `@param` to highlight the parameter name following
	            // after.
	            scope: 'doctag',
	            begin: '@param',
	            end: /$/,
	            contains: [
	              {
	                scope: 'variable',
	                variants: [
	                  { match: IDENT_RE },
	                  { match: /`(?:\\.|[^`\\])+`/ }
	                ],
	                endsParent: true
	              }
	            ]
	          },
	          {
	            scope: 'doctag',
	            match: /@[a-zA-Z]+/
	          },
	          {
	            scope: 'keyword',
	            match: /\\[a-zA-Z]+/
	          }
	        ] }
	      ),

	      hljs.HASH_COMMENT_MODE,

	      {
	        scope: 'string',
	        contains: [ hljs.BACKSLASH_ESCAPE ],
	        variants: [
	          hljs.END_SAME_AS_BEGIN({
	            begin: /[rR]"(-*)\(/,
	            end: /\)(-*)"/
	          }),
	          hljs.END_SAME_AS_BEGIN({
	            begin: /[rR]"(-*)\{/,
	            end: /\}(-*)"/
	          }),
	          hljs.END_SAME_AS_BEGIN({
	            begin: /[rR]"(-*)\[/,
	            end: /\](-*)"/
	          }),
	          hljs.END_SAME_AS_BEGIN({
	            begin: /[rR]'(-*)\(/,
	            end: /\)(-*)'/
	          }),
	          hljs.END_SAME_AS_BEGIN({
	            begin: /[rR]'(-*)\{/,
	            end: /\}(-*)'/
	          }),
	          hljs.END_SAME_AS_BEGIN({
	            begin: /[rR]'(-*)\[/,
	            end: /\](-*)'/
	          }),
	          {
	            begin: '"',
	            end: '"',
	            relevance: 0
	          },
	          {
	            begin: "'",
	            end: "'",
	            relevance: 0
	          }
	        ],
	      },

	      // Matching numbers immediately following punctuation and operators is
	      // tricky since we need to look at the character ahead of a number to
	      // ensure the number is not part of an identifier, and we cannot use
	      // negative look-behind assertions. So instead we explicitly handle all
	      // possible combinations of (operator|punctuation), number.
	      // TODO: replace with negative look-behind when available
	      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/ },
	      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\d+)?[Li]?/ },
	      // { begin: /(?<![a-zA-Z0-9._])(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?[Li]?/ }
	      {
	        relevance: 0,
	        variants: [
	          {
	            scope: {
	              1: 'operator',
	              2: 'number'
	            },
	            match: [
	              OPERATORS_RE,
	              NUMBER_TYPES_RE
	            ]
	          },
	          {
	            scope: {
	              1: 'operator',
	              2: 'number'
	            },
	            match: [
	              /%[^%]*%/,
	              NUMBER_TYPES_RE
	            ]
	          },
	          {
	            scope: {
	              1: 'punctuation',
	              2: 'number'
	            },
	            match: [
	              PUNCTUATION_RE,
	              NUMBER_TYPES_RE
	            ]
	          },
	          {
	            scope: { 2: 'number' },
	            match: [
	              /[^a-zA-Z0-9._]|^/, // not part of an identifier, or start of document
	              NUMBER_TYPES_RE
	            ]
	          }
	        ]
	      },

	      // Operators/punctuation when they're not directly followed by numbers
	      {
	        // Relevance boost for the most common assignment form.
	        scope: { 3: 'operator' },
	        match: [
	          IDENT_RE,
	          /\s+/,
	          /<-/,
	          /\s+/
	        ]
	      },

	      {
	        scope: 'operator',
	        relevance: 0,
	        variants: [
	          { match: OPERATORS_RE },
	          { match: /%[^%]*%/ }
	        ]
	      },

	      {
	        scope: 'punctuation',
	        relevance: 0,
	        match: PUNCTUATION_RE
	      },

	      {
	        // Escaped identifier
	        begin: '`',
	        end: '`',
	        contains: [ { begin: /\\./ } ]
	      }
	    ]
	  };
	}

	r_1 = r;
	return r_1;
}

/*
Language: ReasonML
Description: Reason lets you write simple, fast and quality type safe code while leveraging both the JavaScript & OCaml ecosystems.
Website: https://reasonml.github.io
Author: Gidi Meir Morris <oss@gidi.io>
Category: functional
*/

var reasonml_1;
var hasRequiredReasonml;

function requireReasonml () {
	if (hasRequiredReasonml) return reasonml_1;
	hasRequiredReasonml = 1;
	function reasonml(hljs) {
	  const BUILT_IN_TYPES = [
	    "array",
	    "bool",
	    "bytes",
	    "char",
	    "exn|5",
	    "float",
	    "int",
	    "int32",
	    "int64",
	    "list",
	    "lazy_t|5",
	    "nativeint|5",
	    "ref",
	    "string",
	    "unit",
	  ];
	  return {
	    name: 'ReasonML',
	    aliases: [ 're' ],
	    keywords: {
	      $pattern:  /[a-z_]\w*!?/,
	      keyword: [
	        "and",
	        "as",
	        "asr",
	        "assert",
	        "begin",
	        "class",
	        "constraint",
	        "do",
	        "done",
	        "downto",
	        "else",
	        "end",
	        "esfun",
	        "exception",
	        "external",
	        "for",
	        "fun",
	        "function",
	        "functor",
	        "if",
	        "in",
	        "include",
	        "inherit",
	        "initializer",
	        "land",
	        "lazy",
	        "let",
	        "lor",
	        "lsl",
	        "lsr",
	        "lxor",
	        "mod",
	        "module",
	        "mutable",
	        "new",
	        "nonrec",
	        "object",
	        "of",
	        "open",
	        "or",
	        "pri",
	        "pub",
	        "rec",
	        "sig",
	        "struct",
	        "switch",
	        "then",
	        "to",
	        "try",
	        "type",
	        "val",
	        "virtual",
	        "when",
	        "while",
	        "with",
	      ],
	      built_in: BUILT_IN_TYPES,
	      literal: ["true", "false"],
	    },
	    illegal: /(:-|:=|\$\{|\+=)/,
	    contains: [
	      {
	        scope: 'literal',
	        match: /\[(\|\|)?\]|\(\)/,
	        relevance: 0
	      },
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.COMMENT(/\/\*/, /\*\//, { illegal: /^(#,\/\/)/ }),
	      { /* type variable */
	        scope: 'symbol',
	        match: /\'[A-Za-z_](?!\')[\w\']*/
	        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
	      },
	      { /* polymorphic variant */
	        scope: 'type',
	        match: /`[A-Z][\w\']*/
	      },
	      { /* module or constructor */
	        scope: 'type',
	        match: /\b[A-Z][\w\']*/,
	        relevance: 0
	      },
	      { /* don't color identifiers, but safely catch all identifiers with ' */
	      match: /[a-z_]\w*\'[\w\']*/,
	        relevance: 0
	      },
	      {
	        scope: 'operator',
	        match: /\s+(\|\||\+[\+\.]?|\*[\*\/\.]?|\/[\.]?|\.\.\.|\|>|&&|===?)\s+/,
	        relevance: 0
	      },      
	      hljs.inherit(hljs.APOS_STRING_MODE, {
	        scope: 'string',
	        relevance: 0
	      }),
	      hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
	      {
	        scope: 'number',
	        variants: [
	          { match: /\b0[xX][a-fA-F0-9_]+[Lln]?/ },
	          { match: /\b0[oO][0-7_]+[Lln]?/ },
	          { match: /\b0[bB][01_]+[Lln]?/ },
	          { match: /\b[0-9][0-9_]*([Lln]|(\.[0-9_]*)?([eE][-+]?[0-9_]+)?)/ },
	        ],
	        relevance: 0
	      },
	    ]
	  };
	}

	reasonml_1 = reasonml;
	return reasonml_1;
}

/*
Language: RenderMan RIB
Author: Konstantin Evdokimenko <qewerty@gmail.com>
Contributors: Shuen-Huei Guan <drake.guan@gmail.com>
Website: https://renderman.pixar.com/resources/RenderMan_20/ribBinding.html
Category: graphics
*/

var rib_1;
var hasRequiredRib;

function requireRib () {
	if (hasRequiredRib) return rib_1;
	hasRequiredRib = 1;
	function rib(hljs) {
	  return {
	    name: 'RenderMan RIB',
	    keywords:
	      'ArchiveRecord AreaLightSource Atmosphere Attribute AttributeBegin AttributeEnd Basis '
	      + 'Begin Blobby Bound Clipping ClippingPlane Color ColorSamples ConcatTransform Cone '
	      + 'CoordinateSystem CoordSysTransform CropWindow Curves Cylinder DepthOfField Detail '
	      + 'DetailRange Disk Displacement Display End ErrorHandler Exposure Exterior Format '
	      + 'FrameAspectRatio FrameBegin FrameEnd GeneralPolygon GeometricApproximation Geometry '
	      + 'Hider Hyperboloid Identity Illuminate Imager Interior LightSource '
	      + 'MakeCubeFaceEnvironment MakeLatLongEnvironment MakeShadow MakeTexture Matte '
	      + 'MotionBegin MotionEnd NuPatch ObjectBegin ObjectEnd ObjectInstance Opacity Option '
	      + 'Orientation Paraboloid Patch PatchMesh Perspective PixelFilter PixelSamples '
	      + 'PixelVariance Points PointsGeneralPolygons PointsPolygons Polygon Procedural Projection '
	      + 'Quantize ReadArchive RelativeDetail ReverseOrientation Rotate Scale ScreenWindow '
	      + 'ShadingInterpolation ShadingRate Shutter Sides Skew SolidBegin SolidEnd Sphere '
	      + 'SubdivisionMesh Surface TextureCoordinates Torus Transform TransformBegin TransformEnd '
	      + 'TransformPoints Translate TrimCurve WorldBegin WorldEnd',
	    illegal: '</',
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      hljs.C_NUMBER_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE
	    ]
	  };
	}

	rib_1 = rib;
	return rib_1;
}

/*
Language: Roboconf
Author: Vincent Zurczak <vzurczak@linagora.com>
Description: Syntax highlighting for Roboconf's DSL
Website: http://roboconf.net
Category: config
*/

var roboconf_1;
var hasRequiredRoboconf;

function requireRoboconf () {
	if (hasRequiredRoboconf) return roboconf_1;
	hasRequiredRoboconf = 1;
	function roboconf(hljs) {
	  const IDENTIFIER = '[a-zA-Z-_][^\\n{]+\\{';

	  const PROPERTY = {
	    className: 'attribute',
	    begin: /[a-zA-Z-_]+/,
	    end: /\s*:/,
	    excludeEnd: true,
	    starts: {
	      end: ';',
	      relevance: 0,
	      contains: [
	        {
	          className: 'variable',
	          begin: /\.[a-zA-Z-_]+/
	        },
	        {
	          className: 'keyword',
	          begin: /\(optional\)/
	        }
	      ]
	    }
	  };

	  return {
	    name: 'Roboconf',
	    aliases: [
	      'graph',
	      'instances'
	    ],
	    case_insensitive: true,
	    keywords: 'import',
	    contains: [
	      // Facet sections
	      {
	        begin: '^facet ' + IDENTIFIER,
	        end: /\}/,
	        keywords: 'facet',
	        contains: [
	          PROPERTY,
	          hljs.HASH_COMMENT_MODE
	        ]
	      },

	      // Instance sections
	      {
	        begin: '^\\s*instance of ' + IDENTIFIER,
	        end: /\}/,
	        keywords: 'name count channels instance-data instance-state instance of',
	        illegal: /\S/,
	        contains: [
	          'self',
	          PROPERTY,
	          hljs.HASH_COMMENT_MODE
	        ]
	      },

	      // Component sections
	      {
	        begin: '^' + IDENTIFIER,
	        end: /\}/,
	        contains: [
	          PROPERTY,
	          hljs.HASH_COMMENT_MODE
	        ]
	      },

	      // Comments
	      hljs.HASH_COMMENT_MODE
	    ]
	  };
	}

	roboconf_1 = roboconf;
	return roboconf_1;
}

/*
Language: MikroTik RouterOS script
Author: Ivan Dementev <ivan_div@mail.ru>
Description: Scripting host provides a way to automate some router maintenance tasks by means of executing user-defined scripts bounded to some event occurrence
Website: https://wiki.mikrotik.com/wiki/Manual:Scripting
*/

var routeros_1;
var hasRequiredRouteros;

function requireRouteros () {
	if (hasRequiredRouteros) return routeros_1;
	hasRequiredRouteros = 1;
	// Colors from RouterOS terminal:
	//   green        - #0E9A00
	//   teal         - #0C9A9A
	//   purple       - #99069A
	//   light-brown  - #9A9900

	function routeros(hljs) {
	  const STATEMENTS = 'foreach do while for if from to step else on-error and or not in';

	  // Global commands: Every global command should start with ":" token, otherwise it will be treated as variable.
	  const GLOBAL_COMMANDS = 'global local beep delay put len typeof pick log time set find environment terminal error execute parse resolve toarray tobool toid toip toip6 tonum tostr totime';

	  // Common commands: Following commands available from most sub-menus:
	  const COMMON_COMMANDS = 'add remove enable disable set get print export edit find run debug error info warning';

	  const LITERALS = 'true false yes no nothing nil null';

	  const OBJECTS = 'traffic-flow traffic-generator firewall scheduler aaa accounting address-list address align area bandwidth-server bfd bgp bridge client clock community config connection console customer default dhcp-client dhcp-server discovery dns e-mail ethernet filter firmware gps graphing group hardware health hotspot identity igmp-proxy incoming instance interface ip ipsec ipv6 irq l2tp-server lcd ldp logging mac-server mac-winbox mangle manual mirror mme mpls nat nd neighbor network note ntp ospf ospf-v3 ovpn-server page peer pim ping policy pool port ppp pppoe-client pptp-server prefix profile proposal proxy queue radius resource rip ripng route routing screen script security-profiles server service service-port settings shares smb sms sniffer snmp snooper socks sstp-server system tool tracking type upgrade upnp user-manager users user vlan secret vrrp watchdog web-access wireless pptp pppoe lan wan layer7-protocol lease simple raw';

	  const VAR = {
	    className: 'variable',
	    variants: [
	      { begin: /\$[\w\d#@][\w\d_]*/ },
	      { begin: /\$\{(.*?)\}/ }
	    ]
	  };

	  const QUOTE_STRING = {
	    className: 'string',
	    begin: /"/,
	    end: /"/,
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      VAR,
	      {
	        className: 'variable',
	        begin: /\$\(/,
	        end: /\)/,
	        contains: [ hljs.BACKSLASH_ESCAPE ]
	      }
	    ]
	  };

	  const APOS_STRING = {
	    className: 'string',
	    begin: /'/,
	    end: /'/
	  };

	  return {
	    name: 'MikroTik RouterOS script',
	    aliases: [ 'mikrotik' ],
	    case_insensitive: true,
	    keywords: {
	      $pattern: /:?[\w-]+/,
	      literal: LITERALS,
	      keyword: STATEMENTS + ' :' + STATEMENTS.split(' ').join(' :') + ' :' + GLOBAL_COMMANDS.split(' ').join(' :')
	    },
	    contains: [
	      { // illegal syntax
	        variants: [
	          { // -- comment
	            begin: /\/\*/,
	            end: /\*\//
	          },
	          { // Stan comment
	            begin: /\/\//,
	            end: /$/
	          },
	          { // HTML tags
	            begin: /<\//,
	            end: />/
	          }
	        ],
	        illegal: /./
	      },
	      hljs.COMMENT('^#', '$'),
	      QUOTE_STRING,
	      APOS_STRING,
	      VAR,
	      // attribute=value
	      {
	        // > is to avoid matches with => in other grammars
	        begin: /[\w-]+=([^\s{}[\]()>]+)/,
	        relevance: 0,
	        returnBegin: true,
	        contains: [
	          {
	            className: 'attribute',
	            begin: /[^=]+/
	          },
	          {
	            begin: /=/,
	            endsWithParent: true,
	            relevance: 0,
	            contains: [
	              QUOTE_STRING,
	              APOS_STRING,
	              VAR,
	              {
	                className: 'literal',
	                begin: '\\b(' + LITERALS.split(' ').join('|') + ')\\b'
	              },
	              {
	                // Do not format unclassified values. Needed to exclude highlighting of values as built_in.
	                begin: /("[^"]*"|[^\s{}[\]]+)/ }
	              /*
	              {
	                // IPv4 addresses and subnets
	                className: 'number',
	                variants: [
	                  {begin: IPADDR_wBITMASK+'(,'+IPADDR_wBITMASK+')*'}, //192.168.0.0/24,1.2.3.0/24
	                  {begin: IPADDR+'-'+IPADDR},       // 192.168.0.1-192.168.0.3
	                  {begin: IPADDR+'(,'+IPADDR+')*'}, // 192.168.0.1,192.168.0.34,192.168.24.1,192.168.0.1
	                ]
	              },
	              {
	                // MAC addresses and DHCP Client IDs
	                className: 'number',
	                begin: /\b(1:)?([0-9A-Fa-f]{1,2}[:-]){5}([0-9A-Fa-f]){1,2}\b/,
	              },
	              */
	            ]
	          }
	        ]
	      },
	      {
	        // HEX values
	        className: 'number',
	        begin: /\*[0-9a-fA-F]+/
	      },
	      {
	        begin: '\\b(' + COMMON_COMMANDS.split(' ').join('|') + ')([\\s[(\\]|])',
	        returnBegin: true,
	        contains: [
	          {
	            className: 'built_in', // 'function',
	            begin: /\w+/
	          }
	        ]
	      },
	      {
	        className: 'built_in',
	        variants: [
	          { begin: '(\\.\\./|/|\\s)((' + OBJECTS.split(' ').join('|') + ');?\\s)+' },
	          {
	            begin: /\.\./,
	            relevance: 0
	          }
	        ]
	      }
	    ]
	  };
	}

	routeros_1 = routeros;
	return routeros_1;
}

/*
Language: RenderMan RSL
Author: Konstantin Evdokimenko <qewerty@gmail.com>
Contributors: Shuen-Huei Guan <drake.guan@gmail.com>
Website: https://renderman.pixar.com/resources/RenderMan_20/shadingLanguage.html
Category: graphics
*/

var rsl_1;
var hasRequiredRsl;

function requireRsl () {
	if (hasRequiredRsl) return rsl_1;
	hasRequiredRsl = 1;
	function rsl(hljs) {
	  const BUILT_INS = [
	    "abs",
	    "acos",
	    "ambient",
	    "area",
	    "asin",
	    "atan",
	    "atmosphere",
	    "attribute",
	    "calculatenormal",
	    "ceil",
	    "cellnoise",
	    "clamp",
	    "comp",
	    "concat",
	    "cos",
	    "degrees",
	    "depth",
	    "Deriv",
	    "diffuse",
	    "distance",
	    "Du",
	    "Dv",
	    "environment",
	    "exp",
	    "faceforward",
	    "filterstep",
	    "floor",
	    "format",
	    "fresnel",
	    "incident",
	    "length",
	    "lightsource",
	    "log",
	    "match",
	    "max",
	    "min",
	    "mod",
	    "noise",
	    "normalize",
	    "ntransform",
	    "opposite",
	    "option",
	    "phong",
	    "pnoise",
	    "pow",
	    "printf",
	    "ptlined",
	    "radians",
	    "random",
	    "reflect",
	    "refract",
	    "renderinfo",
	    "round",
	    "setcomp",
	    "setxcomp",
	    "setycomp",
	    "setzcomp",
	    "shadow",
	    "sign",
	    "sin",
	    "smoothstep",
	    "specular",
	    "specularbrdf",
	    "spline",
	    "sqrt",
	    "step",
	    "tan",
	    "texture",
	    "textureinfo",
	    "trace",
	    "transform",
	    "vtransform",
	    "xcomp",
	    "ycomp",
	    "zcomp"
	  ];

	  const TYPES = [
	    "matrix",
	    "float",
	    "color",
	    "point",
	    "normal",
	    "vector"
	  ];

	  const KEYWORDS = [
	    "while",
	    "for",
	    "if",
	    "do",
	    "return",
	    "else",
	    "break",
	    "extern",
	    "continue"
	  ];

	  const CLASS_DEFINITION = {
	    match: [
	      /(surface|displacement|light|volume|imager)/,
	      /\s+/,
	      hljs.IDENT_RE,
	    ],
	    scope: {
	      1: "keyword",
	      3: "title.class",
	    }
	  };

	  return {
	    name: 'RenderMan RSL',
	    keywords: {
	      keyword: KEYWORDS,
	      built_in: BUILT_INS,
	      type: TYPES
	    },
	    illegal: '</',
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'meta',
	        begin: '#',
	        end: '$'
	      },
	      CLASS_DEFINITION,
	      {
	        beginKeywords: 'illuminate illuminance gather',
	        end: '\\('
	      }
	    ]
	  };
	}

	rsl_1 = rsl;
	return rsl_1;
}

/*
Language: Oracle Rules Language
Author: Jason Jacobson <jason.a.jacobson@gmail.com>
Description: The Oracle Utilities Rules Language is used to program the Oracle Utilities Applications acquired from LODESTAR Corporation.  The products include Billing Component, LPSS, Pricing Component etc. through version 1.6.1.
Website: https://docs.oracle.com/cd/E17904_01/dev.1111/e10227/rlref.htm
Category: enterprise
*/

var ruleslanguage_1;
var hasRequiredRuleslanguage;

function requireRuleslanguage () {
	if (hasRequiredRuleslanguage) return ruleslanguage_1;
	hasRequiredRuleslanguage = 1;
	function ruleslanguage(hljs) {
	  return {
	    name: 'Oracle Rules Language',
	    keywords: {
	      keyword:
	        'BILL_PERIOD BILL_START BILL_STOP RS_EFFECTIVE_START RS_EFFECTIVE_STOP RS_JURIS_CODE RS_OPCO_CODE '
	        + 'INTDADDATTRIBUTE|5 INTDADDVMSG|5 INTDBLOCKOP|5 INTDBLOCKOPNA|5 INTDCLOSE|5 INTDCOUNT|5 '
	        + 'INTDCOUNTSTATUSCODE|5 INTDCREATEMASK|5 INTDCREATEDAYMASK|5 INTDCREATEFACTORMASK|5 '
	        + 'INTDCREATEHANDLE|5 INTDCREATEOVERRIDEDAYMASK|5 INTDCREATEOVERRIDEMASK|5 '
	        + 'INTDCREATESTATUSCODEMASK|5 INTDCREATETOUPERIOD|5 INTDDELETE|5 INTDDIPTEST|5 INTDEXPORT|5 '
	        + 'INTDGETERRORCODE|5 INTDGETERRORMESSAGE|5 INTDISEQUAL|5 INTDJOIN|5 INTDLOAD|5 INTDLOADACTUALCUT|5 '
	        + 'INTDLOADDATES|5 INTDLOADHIST|5 INTDLOADLIST|5 INTDLOADLISTDATES|5 INTDLOADLISTENERGY|5 '
	        + 'INTDLOADLISTHIST|5 INTDLOADRELATEDCHANNEL|5 INTDLOADSP|5 INTDLOADSTAGING|5 INTDLOADUOM|5 '
	        + 'INTDLOADUOMDATES|5 INTDLOADUOMHIST|5 INTDLOADVERSION|5 INTDOPEN|5 INTDREADFIRST|5 INTDREADNEXT|5 '
	        + 'INTDRECCOUNT|5 INTDRELEASE|5 INTDREPLACE|5 INTDROLLAVG|5 INTDROLLPEAK|5 INTDSCALAROP|5 INTDSCALE|5 '
	        + 'INTDSETATTRIBUTE|5 INTDSETDSTPARTICIPANT|5 INTDSETSTRING|5 INTDSETVALUE|5 INTDSETVALUESTATUS|5 '
	        + 'INTDSHIFTSTARTTIME|5 INTDSMOOTH|5 INTDSORT|5 INTDSPIKETEST|5 INTDSUBSET|5 INTDTOU|5 '
	        + 'INTDTOURELEASE|5 INTDTOUVALUE|5 INTDUPDATESTATS|5 INTDVALUE|5 STDEV INTDDELETEEX|5 '
	        + 'INTDLOADEXACTUAL|5 INTDLOADEXCUT|5 INTDLOADEXDATES|5 INTDLOADEX|5 INTDLOADEXRELATEDCHANNEL|5 '
	        + 'INTDSAVEEX|5 MVLOAD|5 MVLOADACCT|5 MVLOADACCTDATES|5 MVLOADACCTHIST|5 MVLOADDATES|5 MVLOADHIST|5 '
	        + 'MVLOADLIST|5 MVLOADLISTDATES|5 MVLOADLISTHIST|5 IF FOR NEXT DONE SELECT END CALL ABORT CLEAR CHANNEL FACTOR LIST NUMBER '
	        + 'OVERRIDE SET WEEK DISTRIBUTIONNODE ELSE WHEN THEN OTHERWISE IENUM CSV INCLUDE LEAVE RIDER SAVE DELETE '
	        + 'NOVALUE SECTION WARN SAVE_UPDATE DETERMINANT LABEL REPORT REVENUE EACH '
	        + 'IN FROM TOTAL CHARGE BLOCK AND OR CSV_FILE RATE_CODE AUXILIARY_DEMAND '
	        + 'UIDACCOUNT RS BILL_PERIOD_SELECT HOURS_PER_MONTH INTD_ERROR_STOP SEASON_SCHEDULE_NAME '
	        + 'ACCOUNTFACTOR ARRAYUPPERBOUND CALLSTOREDPROC GETADOCONNECTION GETCONNECT GETDATASOURCE '
	        + 'GETQUALIFIER GETUSERID HASVALUE LISTCOUNT LISTOP LISTUPDATE LISTVALUE PRORATEFACTOR RSPRORATE '
	        + 'SETBINPATH SETDBMONITOR WQ_OPEN BILLINGHOURS DATE DATEFROMFLOAT DATETIMEFROMSTRING '
	        + 'DATETIMETOSTRING DATETOFLOAT DAY DAYDIFF DAYNAME DBDATETIME HOUR MINUTE MONTH MONTHDIFF '
	        + 'MONTHHOURS MONTHNAME ROUNDDATE SAMEWEEKDAYLASTYEAR SECOND WEEKDAY WEEKDIFF YEAR YEARDAY '
	        + 'YEARSTR COMPSUM HISTCOUNT HISTMAX HISTMIN HISTMINNZ HISTVALUE MAXNRANGE MAXRANGE MINRANGE '
	        + 'COMPIKVA COMPKVA COMPKVARFROMKQKW COMPLF IDATTR FLAG LF2KW LF2KWH MAXKW POWERFACTOR '
	        + 'READING2USAGE AVGSEASON MAXSEASON MONTHLYMERGE SEASONVALUE SUMSEASON ACCTREADDATES '
	        + 'ACCTTABLELOAD CONFIGADD CONFIGGET CREATEOBJECT CREATEREPORT EMAILCLIENT EXPBLKMDMUSAGE '
	        + 'EXPMDMUSAGE EXPORT_USAGE FACTORINEFFECT GETUSERSPECIFIEDSTOP INEFFECT ISHOLIDAY RUNRATE '
	        + 'SAVE_PROFILE SETREPORTTITLE USEREXIT WATFORRUNRATE TO TABLE ACOS ASIN ATAN ATAN2 BITAND CEIL '
	        + 'COS COSECANT COSH COTANGENT DIVQUOT DIVREM EXP FABS FLOOR FMOD FREPM FREXPN LOG LOG10 MAX MAXN '
	        + 'MIN MINNZ MODF POW ROUND ROUND2VALUE ROUNDINT SECANT SIN SINH SQROOT TAN TANH FLOAT2STRING '
	        + 'FLOAT2STRINGNC INSTR LEFT LEN LTRIM MID RIGHT RTRIM STRING STRINGNC TOLOWER TOUPPER TRIM '
	        + 'NUMDAYS READ_DATE STAGING',
	      built_in:
	        'IDENTIFIER OPTIONS XML_ELEMENT XML_OP XML_ELEMENT_OF DOMDOCCREATE DOMDOCLOADFILE DOMDOCLOADXML '
	        + 'DOMDOCSAVEFILE DOMDOCGETROOT DOMDOCADDPI DOMNODEGETNAME DOMNODEGETTYPE DOMNODEGETVALUE DOMNODEGETCHILDCT '
	        + 'DOMNODEGETFIRSTCHILD DOMNODEGETSIBLING DOMNODECREATECHILDELEMENT DOMNODESETATTRIBUTE '
	        + 'DOMNODEGETCHILDELEMENTCT DOMNODEGETFIRSTCHILDELEMENT DOMNODEGETSIBLINGELEMENT DOMNODEGETATTRIBUTECT '
	        + 'DOMNODEGETATTRIBUTEI DOMNODEGETATTRIBUTEBYNAME DOMNODEGETBYNAME'
	    },
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'literal',
	        variants: [
	          { // looks like #-comment
	            begin: '#\\s+',
	            relevance: 0
	          },
	          { begin: '#[a-zA-Z .]+' }
	        ]
	      }
	    ]
	  };
	}

	ruleslanguage_1 = ruleslanguage;
	return ruleslanguage_1;
}

/*
Language: Rust
Author: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>
Contributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>
Website: https://www.rust-lang.org
Category: common, system
*/

var rust_1;
var hasRequiredRust;

function requireRust () {
	if (hasRequiredRust) return rust_1;
	hasRequiredRust = 1;
	/** @type LanguageFn */
	function rust(hljs) {
	  const regex = hljs.regex;
	  const FUNCTION_INVOKE = {
	    className: "title.function.invoke",
	    relevance: 0,
	    begin: regex.concat(
	      /\b/,
	      /(?!let|for|while|if|else|match\b)/,
	      hljs.IDENT_RE,
	      regex.lookahead(/\s*\(/))
	  };
	  const NUMBER_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\?';
	  const KEYWORDS = [
	    "abstract",
	    "as",
	    "async",
	    "await",
	    "become",
	    "box",
	    "break",
	    "const",
	    "continue",
	    "crate",
	    "do",
	    "dyn",
	    "else",
	    "enum",
	    "extern",
	    "false",
	    "final",
	    "fn",
	    "for",
	    "if",
	    "impl",
	    "in",
	    "let",
	    "loop",
	    "macro",
	    "match",
	    "mod",
	    "move",
	    "mut",
	    "override",
	    "priv",
	    "pub",
	    "ref",
	    "return",
	    "self",
	    "Self",
	    "static",
	    "struct",
	    "super",
	    "trait",
	    "true",
	    "try",
	    "type",
	    "typeof",
	    "unsafe",
	    "unsized",
	    "use",
	    "virtual",
	    "where",
	    "while",
	    "yield"
	  ];
	  const LITERALS = [
	    "true",
	    "false",
	    "Some",
	    "None",
	    "Ok",
	    "Err"
	  ];
	  const BUILTINS = [
	    // functions
	    'drop ',
	    // traits
	    "Copy",
	    "Send",
	    "Sized",
	    "Sync",
	    "Drop",
	    "Fn",
	    "FnMut",
	    "FnOnce",
	    "ToOwned",
	    "Clone",
	    "Debug",
	    "PartialEq",
	    "PartialOrd",
	    "Eq",
	    "Ord",
	    "AsRef",
	    "AsMut",
	    "Into",
	    "From",
	    "Default",
	    "Iterator",
	    "Extend",
	    "IntoIterator",
	    "DoubleEndedIterator",
	    "ExactSizeIterator",
	    "SliceConcatExt",
	    "ToString",
	    // macros
	    "assert!",
	    "assert_eq!",
	    "bitflags!",
	    "bytes!",
	    "cfg!",
	    "col!",
	    "concat!",
	    "concat_idents!",
	    "debug_assert!",
	    "debug_assert_eq!",
	    "env!",
	    "eprintln!",
	    "panic!",
	    "file!",
	    "format!",
	    "format_args!",
	    "include_bytes!",
	    "include_str!",
	    "line!",
	    "local_data_key!",
	    "module_path!",
	    "option_env!",
	    "print!",
	    "println!",
	    "select!",
	    "stringify!",
	    "try!",
	    "unimplemented!",
	    "unreachable!",
	    "vec!",
	    "write!",
	    "writeln!",
	    "macro_rules!",
	    "assert_ne!",
	    "debug_assert_ne!"
	  ];
	  const TYPES = [
	    "i8",
	    "i16",
	    "i32",
	    "i64",
	    "i128",
	    "isize",
	    "u8",
	    "u16",
	    "u32",
	    "u64",
	    "u128",
	    "usize",
	    "f32",
	    "f64",
	    "str",
	    "char",
	    "bool",
	    "Box",
	    "Option",
	    "Result",
	    "String",
	    "Vec"
	  ];
	  return {
	    name: 'Rust',
	    aliases: [ 'rs' ],
	    keywords: {
	      $pattern: hljs.IDENT_RE + '!?',
	      type: TYPES,
	      keyword: KEYWORDS,
	      literal: LITERALS,
	      built_in: BUILTINS
	    },
	    illegal: '</',
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.COMMENT('/\\*', '\\*/', { contains: [ 'self' ] }),
	      hljs.inherit(hljs.QUOTE_STRING_MODE, {
	        begin: /b?"/,
	        illegal: null
	      }),
	      {
	        className: 'string',
	        variants: [
	          { begin: /b?r(#*)"(.|\n)*?"\1(?!#)/ },
	          { begin: /b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/ }
	        ]
	      },
	      {
	        className: 'symbol',
	        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/
	      },
	      {
	        className: 'number',
	        variants: [
	          { begin: '\\b0b([01_]+)' + NUMBER_SUFFIX },
	          { begin: '\\b0o([0-7_]+)' + NUMBER_SUFFIX },
	          { begin: '\\b0x([A-Fa-f0-9_]+)' + NUMBER_SUFFIX },
	          { begin: '\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)'
	                   + NUMBER_SUFFIX }
	        ],
	        relevance: 0
	      },
	      {
	        begin: [
	          /fn/,
	          /\s+/,
	          hljs.UNDERSCORE_IDENT_RE
	        ],
	        className: {
	          1: "keyword",
	          3: "title.function"
	        }
	      },
	      {
	        className: 'meta',
	        begin: '#!?\\[',
	        end: '\\]',
	        contains: [
	          {
	            className: 'string',
	            begin: /"/,
	            end: /"/
	          }
	        ]
	      },
	      {
	        begin: [
	          /let/,
	          /\s+/,
	          /(?:mut\s+)?/,
	          hljs.UNDERSCORE_IDENT_RE
	        ],
	        className: {
	          1: "keyword",
	          3: "keyword",
	          4: "variable"
	        }
	      },
	      // must come before impl/for rule later
	      {
	        begin: [
	          /for/,
	          /\s+/,
	          hljs.UNDERSCORE_IDENT_RE,
	          /\s+/,
	          /in/
	        ],
	        className: {
	          1: "keyword",
	          3: "variable",
	          5: "keyword"
	        }
	      },
	      {
	        begin: [
	          /type/,
	          /\s+/,
	          hljs.UNDERSCORE_IDENT_RE
	        ],
	        className: {
	          1: "keyword",
	          3: "title.class"
	        }
	      },
	      {
	        begin: [
	          /(?:trait|enum|struct|union|impl|for)/,
	          /\s+/,
	          hljs.UNDERSCORE_IDENT_RE
	        ],
	        className: {
	          1: "keyword",
	          3: "title.class"
	        }
	      },
	      {
	        begin: hljs.IDENT_RE + '::',
	        keywords: {
	          keyword: "Self",
	          built_in: BUILTINS,
	          type: TYPES
	        }
	      },
	      {
	        className: "punctuation",
	        begin: '->'
	      },
	      FUNCTION_INVOKE
	    ]
	  };
	}

	rust_1 = rust;
	return rust_1;
}

/*
Language: SAS
Author: Mauricio Caceres <mauricio.caceres.bravo@gmail.com>
Description: Syntax Highlighting for SAS
*/

var sas_1;
var hasRequiredSas;

function requireSas () {
	if (hasRequiredSas) return sas_1;
	hasRequiredSas = 1;
	/** @type LanguageFn */
	function sas(hljs) {
	  const regex = hljs.regex;
	  // Data step and PROC SQL statements
	  const SAS_KEYWORDS = [
	    "do",
	    "if",
	    "then",
	    "else",
	    "end",
	    "until",
	    "while",
	    "abort",
	    "array",
	    "attrib",
	    "by",
	    "call",
	    "cards",
	    "cards4",
	    "catname",
	    "continue",
	    "datalines",
	    "datalines4",
	    "delete",
	    "delim",
	    "delimiter",
	    "display",
	    "dm",
	    "drop",
	    "endsas",
	    "error",
	    "file",
	    "filename",
	    "footnote",
	    "format",
	    "goto",
	    "in",
	    "infile",
	    "informat",
	    "input",
	    "keep",
	    "label",
	    "leave",
	    "length",
	    "libname",
	    "link",
	    "list",
	    "lostcard",
	    "merge",
	    "missing",
	    "modify",
	    "options",
	    "output",
	    "out",
	    "page",
	    "put",
	    "redirect",
	    "remove",
	    "rename",
	    "replace",
	    "retain",
	    "return",
	    "select",
	    "set",
	    "skip",
	    "startsas",
	    "stop",
	    "title",
	    "update",
	    "waitsas",
	    "where",
	    "window",
	    "x|0",
	    "systask",
	    "add",
	    "and",
	    "alter",
	    "as",
	    "cascade",
	    "check",
	    "create",
	    "delete",
	    "describe",
	    "distinct",
	    "drop",
	    "foreign",
	    "from",
	    "group",
	    "having",
	    "index",
	    "insert",
	    "into",
	    "in",
	    "key",
	    "like",
	    "message",
	    "modify",
	    "msgtype",
	    "not",
	    "null",
	    "on",
	    "or",
	    "order",
	    "primary",
	    "references",
	    "reset",
	    "restrict",
	    "select",
	    "set",
	    "table",
	    "unique",
	    "update",
	    "validate",
	    "view",
	    "where"
	  ];

	  // Built-in SAS functions
	  const FUNCTIONS = [
	    "abs",
	    "addr",
	    "airy",
	    "arcos",
	    "arsin",
	    "atan",
	    "attrc",
	    "attrn",
	    "band",
	    "betainv",
	    "blshift",
	    "bnot",
	    "bor",
	    "brshift",
	    "bxor",
	    "byte",
	    "cdf",
	    "ceil",
	    "cexist",
	    "cinv",
	    "close",
	    "cnonct",
	    "collate",
	    "compbl",
	    "compound",
	    "compress",
	    "cos",
	    "cosh",
	    "css",
	    "curobs",
	    "cv",
	    "daccdb",
	    "daccdbsl",
	    "daccsl",
	    "daccsyd",
	    "dacctab",
	    "dairy",
	    "date",
	    "datejul",
	    "datepart",
	    "datetime",
	    "day",
	    "dclose",
	    "depdb",
	    "depdbsl",
	    "depdbsl",
	    "depsl",
	    "depsl",
	    "depsyd",
	    "depsyd",
	    "deptab",
	    "deptab",
	    "dequote",
	    "dhms",
	    "dif",
	    "digamma",
	    "dim",
	    "dinfo",
	    "dnum",
	    "dopen",
	    "doptname",
	    "doptnum",
	    "dread",
	    "dropnote",
	    "dsname",
	    "erf",
	    "erfc",
	    "exist",
	    "exp",
	    "fappend",
	    "fclose",
	    "fcol",
	    "fdelete",
	    "fetch",
	    "fetchobs",
	    "fexist",
	    "fget",
	    "fileexist",
	    "filename",
	    "fileref",
	    "finfo",
	    "finv",
	    "fipname",
	    "fipnamel",
	    "fipstate",
	    "floor",
	    "fnonct",
	    "fnote",
	    "fopen",
	    "foptname",
	    "foptnum",
	    "fpoint",
	    "fpos",
	    "fput",
	    "fread",
	    "frewind",
	    "frlen",
	    "fsep",
	    "fuzz",
	    "fwrite",
	    "gaminv",
	    "gamma",
	    "getoption",
	    "getvarc",
	    "getvarn",
	    "hbound",
	    "hms",
	    "hosthelp",
	    "hour",
	    "ibessel",
	    "index",
	    "indexc",
	    "indexw",
	    "input",
	    "inputc",
	    "inputn",
	    "int",
	    "intck",
	    "intnx",
	    "intrr",
	    "irr",
	    "jbessel",
	    "juldate",
	    "kurtosis",
	    "lag",
	    "lbound",
	    "left",
	    "length",
	    "lgamma",
	    "libname",
	    "libref",
	    "log",
	    "log10",
	    "log2",
	    "logpdf",
	    "logpmf",
	    "logsdf",
	    "lowcase",
	    "max",
	    "mdy",
	    "mean",
	    "min",
	    "minute",
	    "mod",
	    "month",
	    "mopen",
	    "mort",
	    "n",
	    "netpv",
	    "nmiss",
	    "normal",
	    "note",
	    "npv",
	    "open",
	    "ordinal",
	    "pathname",
	    "pdf",
	    "peek",
	    "peekc",
	    "pmf",
	    "point",
	    "poisson",
	    "poke",
	    "probbeta",
	    "probbnml",
	    "probchi",
	    "probf",
	    "probgam",
	    "probhypr",
	    "probit",
	    "probnegb",
	    "probnorm",
	    "probt",
	    "put",
	    "putc",
	    "putn",
	    "qtr",
	    "quote",
	    "ranbin",
	    "rancau",
	    "ranexp",
	    "rangam",
	    "range",
	    "rank",
	    "rannor",
	    "ranpoi",
	    "rantbl",
	    "rantri",
	    "ranuni",
	    "repeat",
	    "resolve",
	    "reverse",
	    "rewind",
	    "right",
	    "round",
	    "saving",
	    "scan",
	    "sdf",
	    "second",
	    "sign",
	    "sin",
	    "sinh",
	    "skewness",
	    "soundex",
	    "spedis",
	    "sqrt",
	    "std",
	    "stderr",
	    "stfips",
	    "stname",
	    "stnamel",
	    "substr",
	    "sum",
	    "symget",
	    "sysget",
	    "sysmsg",
	    "sysprod",
	    "sysrc",
	    "system",
	    "tan",
	    "tanh",
	    "time",
	    "timepart",
	    "tinv",
	    "tnonct",
	    "today",
	    "translate",
	    "tranwrd",
	    "trigamma",
	    "trim",
	    "trimn",
	    "trunc",
	    "uniform",
	    "upcase",
	    "uss",
	    "var",
	    "varfmt",
	    "varinfmt",
	    "varlabel",
	    "varlen",
	    "varname",
	    "varnum",
	    "varray",
	    "varrayx",
	    "vartype",
	    "verify",
	    "vformat",
	    "vformatd",
	    "vformatdx",
	    "vformatn",
	    "vformatnx",
	    "vformatw",
	    "vformatwx",
	    "vformatx",
	    "vinarray",
	    "vinarrayx",
	    "vinformat",
	    "vinformatd",
	    "vinformatdx",
	    "vinformatn",
	    "vinformatnx",
	    "vinformatw",
	    "vinformatwx",
	    "vinformatx",
	    "vlabel",
	    "vlabelx",
	    "vlength",
	    "vlengthx",
	    "vname",
	    "vnamex",
	    "vtype",
	    "vtypex",
	    "weekday",
	    "year",
	    "yyq",
	    "zipfips",
	    "zipname",
	    "zipnamel",
	    "zipstate"
	  ];

	  // Built-in macro functions
	  const MACRO_FUNCTIONS = [
	    "bquote",
	    "nrbquote",
	    "cmpres",
	    "qcmpres",
	    "compstor",
	    "datatyp",
	    "display",
	    "do",
	    "else",
	    "end",
	    "eval",
	    "global",
	    "goto",
	    "if",
	    "index",
	    "input",
	    "keydef",
	    "label",
	    "left",
	    "length",
	    "let",
	    "local",
	    "lowcase",
	    "macro",
	    "mend",
	    "nrbquote",
	    "nrquote",
	    "nrstr",
	    "put",
	    "qcmpres",
	    "qleft",
	    "qlowcase",
	    "qscan",
	    "qsubstr",
	    "qsysfunc",
	    "qtrim",
	    "quote",
	    "qupcase",
	    "scan",
	    "str",
	    "substr",
	    "superq",
	    "syscall",
	    "sysevalf",
	    "sysexec",
	    "sysfunc",
	    "sysget",
	    "syslput",
	    "sysprod",
	    "sysrc",
	    "sysrput",
	    "then",
	    "to",
	    "trim",
	    "unquote",
	    "until",
	    "upcase",
	    "verify",
	    "while",
	    "window"
	  ];

	  const LITERALS = [
	    "null",
	    "missing",
	    "_all_",
	    "_automatic_",
	    "_character_",
	    "_infile_",
	    "_n_",
	    "_name_",
	    "_null_",
	    "_numeric_",
	    "_user_",
	    "_webout_"
	  ];

	  return {
	    name: 'SAS',
	    case_insensitive: true,
	    keywords: {
	      literal: LITERALS,
	      keyword: SAS_KEYWORDS
	    },
	    contains: [
	      {
	        // Distinct highlight for proc <proc>, data, run, quit
	        className: 'keyword',
	        begin: /^\s*(proc [\w\d_]+|data|run|quit)[\s;]/
	      },
	      {
	        // Macro variables
	        className: 'variable',
	        begin: /&[a-zA-Z_&][a-zA-Z0-9_]*\.?/
	      },
	      {
	        begin: [
	          /^\s*/,
	          /datalines;|cards;/,
	          /(?:.*\n)+/,
	          /^\s*;\s*$/
	        ],
	        className: {
	          2: "keyword",
	          3: "string"
	        }
	      },
	      {
	        begin: [
	          /%mend|%macro/,
	          /\s+/,
	          /[a-zA-Z_&][a-zA-Z0-9_]*/
	        ],
	        className: {
	          1: "built_in",
	          3: "title.function"
	        }
	      },
	      { // Built-in macro variables
	        className: 'built_in',
	        begin: '%' + regex.either(...MACRO_FUNCTIONS)
	      },
	      {
	        // User-defined macro functions
	        className: 'title.function',
	        begin: /%[a-zA-Z_][a-zA-Z_0-9]*/
	      },
	      {
	        // TODO: this is most likely an incorrect classification
	        // built_in may need more nuance
	        // https://github.com/highlightjs/highlight.js/issues/2521
	        className: 'meta',
	        begin: regex.either(...FUNCTIONS) + '(?=\\()'
	      },
	      {
	        className: 'string',
	        variants: [
	          hljs.APOS_STRING_MODE,
	          hljs.QUOTE_STRING_MODE
	        ]
	      },
	      hljs.COMMENT('\\*', ';'),
	      hljs.C_BLOCK_COMMENT_MODE
	    ]
	  };
	}

	sas_1 = sas;
	return sas_1;
}

/*
Language: Scala
Category: functional
Author: Jan Berkel <jan.berkel@gmail.com>
Contributors: Erik Osheim <d_m@plastic-idolatry.com>
Website: https://www.scala-lang.org
*/

var scala_1;
var hasRequiredScala;

function requireScala () {
	if (hasRequiredScala) return scala_1;
	hasRequiredScala = 1;
	function scala(hljs) {
	  const regex = hljs.regex;
	  const ANNOTATION = {
	    className: 'meta',
	    begin: '@[A-Za-z]+'
	  };

	  // used in strings for escaping/interpolation/substitution
	  const SUBST = {
	    className: 'subst',
	    variants: [
	      { begin: '\\$[A-Za-z0-9_]+' },
	      {
	        begin: /\$\{/,
	        end: /\}/
	      }
	    ]
	  };

	  const STRING = {
	    className: 'string',
	    variants: [
	      {
	        begin: '"""',
	        end: '"""'
	      },
	      {
	        begin: '"',
	        end: '"',
	        illegal: '\\n',
	        contains: [ hljs.BACKSLASH_ESCAPE ]
	      },
	      {
	        begin: '[a-z]+"',
	        end: '"',
	        illegal: '\\n',
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          SUBST
	        ]
	      },
	      {
	        className: 'string',
	        begin: '[a-z]+"""',
	        end: '"""',
	        contains: [ SUBST ],
	        relevance: 10
	      }
	    ]

	  };

	  const TYPE = {
	    className: 'type',
	    begin: '\\b[A-Z][A-Za-z0-9_]*',
	    relevance: 0
	  };

	  const NAME = {
	    className: 'title',
	    begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,
	    relevance: 0
	  };

	  const CLASS = {
	    className: 'class',
	    beginKeywords: 'class object trait type',
	    end: /[:={\[\n;]/,
	    excludeEnd: true,
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        beginKeywords: 'extends with',
	        relevance: 10
	      },
	      {
	        begin: /\[/,
	        end: /\]/,
	        excludeBegin: true,
	        excludeEnd: true,
	        relevance: 0,
	        contains: [ 
	          TYPE, 
	          hljs.C_LINE_COMMENT_MODE, 
	          hljs.C_BLOCK_COMMENT_MODE, 
	        ]
	      },
	      {
	        className: 'params',
	        begin: /\(/,
	        end: /\)/,
	        excludeBegin: true,
	        excludeEnd: true,
	        relevance: 0,
	        contains: [ 
	          TYPE, 
	          hljs.C_LINE_COMMENT_MODE, 
	          hljs.C_BLOCK_COMMENT_MODE, 
	        ]
	      },
	      NAME
	    ]
	  };

	  const METHOD = {
	    className: 'function',
	    beginKeywords: 'def',
	    end: regex.lookahead(/[:={\[(\n;]/),
	    contains: [ NAME ]
	  };

	  const EXTENSION = {
	    begin: [
	      /^\s*/, // Is first token on the line
	      'extension',
	      /\s+(?=[[(])/, // followed by at least one space and `[` or `(`
	    ],
	    beginScope: { 2: "keyword", }
	  };

	  const END = {
	    begin: [
	      /^\s*/, // Is first token on the line
	      /end/,
	      /\s+/,
	      /(extension\b)?/, // `extension` is the only marker that follows an `end` that cannot be captured by another rule.
	    ],
	    beginScope: {
	      2: "keyword",
	      4: "keyword",
	    }
	  };

	  // TODO: use negative look-behind in future
	  //       /(?<!\.)\binline(?=\s)/
	  const INLINE_MODES = [
	    { match: /\.inline\b/ },
	    {
	      begin: /\binline(?=\s)/,
	      keywords: 'inline'
	    }
	  ];

	  const USING_PARAM_CLAUSE = {
	    begin: [
	      /\(\s*/, // Opening `(` of a parameter or argument list
	      /using/,
	      /\s+(?!\))/, // Spaces not followed by `)`
	    ],
	    beginScope: { 2: "keyword", }
	  };

	  // glob all non-whitespace characters as a "string"
	  // sourced from https://github.com/scala/docs.scala-lang/pull/2845
	  const DIRECTIVE_VALUE = {
	    className: 'string',
	    begin: /\S+/,
	  };

	  // directives
	  // sourced from https://github.com/scala/docs.scala-lang/pull/2845
	  const USING_DIRECTIVE = {
	    begin: [
	      '//>',
	      /\s+/,
	      /using/,
	      /\s+/,
	      /\S+/
	    ],
	    beginScope: {
	      1: "comment",
	      3: "keyword",
	      5: "type"
	    },
	    end: /$/,
	    contains: [
	      DIRECTIVE_VALUE,
	    ]
	  };

	  return {
	    name: 'Scala',
	    keywords: {
	      literal: 'true false null',
	      keyword: 'type yield lazy override def with val var sealed abstract private trait object if then forSome for while do throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit export enum given transparent'
	    },
	    contains: [
	      USING_DIRECTIVE,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      STRING,
	      TYPE,
	      METHOD,
	      CLASS,
	      hljs.C_NUMBER_MODE,
	      EXTENSION,
	      END,
	      ...INLINE_MODES,
	      USING_PARAM_CLAUSE,
	      ANNOTATION
	    ]
	  };
	}

	scala_1 = scala;
	return scala_1;
}

/*
Language: Scheme
Description: Scheme is a programming language in the Lisp family.
             (keywords based on http://community.schemewiki.org/?scheme-keywords)
Author: JP Verkamp <me@jverkamp.com>
Contributors: Ivan Sagalaev <maniac@softwaremaniacs.org>
Origin: clojure.js
Website: http://community.schemewiki.org/?what-is-scheme
Category: lisp
*/

var scheme_1;
var hasRequiredScheme;

function requireScheme () {
	if (hasRequiredScheme) return scheme_1;
	hasRequiredScheme = 1;
	function scheme(hljs) {
	  const SCHEME_IDENT_RE = '[^\\(\\)\\[\\]\\{\\}",\'`;#|\\\\\\s]+';
	  const SCHEME_SIMPLE_NUMBER_RE = '(-|\\+)?\\d+([./]\\d+)?';
	  const SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';
	  const KEYWORDS = {
	    $pattern: SCHEME_IDENT_RE,
	    built_in:
	      'case-lambda call/cc class define-class exit-handler field import '
	      + 'inherit init-field interface let*-values let-values let/ec mixin '
	      + 'opt-lambda override protect provide public rename require '
	      + 'require-for-syntax syntax syntax-case syntax-error unit/sig unless '
	      + 'when with-syntax and begin call-with-current-continuation '
	      + 'call-with-input-file call-with-output-file case cond define '
	      + 'define-syntax delay do dynamic-wind else for-each if lambda let let* '
	      + 'let-syntax letrec letrec-syntax map or syntax-rules \' * + , ,@ - ... / '
	      + '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan '
	      + 'boolean? caar cadr call-with-input-file call-with-output-file '
	      + 'call-with-values car cdddar cddddr cdr ceiling char->integer '
	      + 'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? '
	      + 'char-downcase char-lower-case? char-numeric? char-ready? char-upcase '
	      + 'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? '
	      + 'char? close-input-port close-output-port complex? cons cos '
	      + 'current-input-port current-output-port denominator display eof-object? '
	      + 'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor '
	      + 'force gcd imag-part inexact->exact inexact? input-port? integer->char '
	      + 'integer? interaction-environment lcm length list list->string '
	      + 'list->vector list-ref list-tail list? load log magnitude make-polar '
	      + 'make-rectangular make-string make-vector max member memq memv min '
	      + 'modulo negative? newline not null-environment null? number->string '
	      + 'number? numerator odd? open-input-file open-output-file output-port? '
	      + 'pair? peek-char port? positive? procedure? quasiquote quote quotient '
	      + 'rational? rationalize read read-char real-part real? remainder reverse '
	      + 'round scheme-report-environment set! set-car! set-cdr! sin sqrt string '
	      + 'string->list string->number string->symbol string-append string-ci<=? '
	      + 'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy '
	      + 'string-fill! string-length string-ref string-set! string<=? string<? '
	      + 'string=? string>=? string>? string? substring symbol->string symbol? '
	      + 'tan transcript-off transcript-on truncate values vector '
	      + 'vector->list vector-fill! vector-length vector-ref vector-set! '
	      + 'with-input-from-file with-output-to-file write write-char zero?'
	  };

	  const LITERAL = {
	    className: 'literal',
	    begin: '(#t|#f|#\\\\' + SCHEME_IDENT_RE + '|#\\\\.)'
	  };

	  const NUMBER = {
	    className: 'number',
	    variants: [
	      {
	        begin: SCHEME_SIMPLE_NUMBER_RE,
	        relevance: 0
	      },
	      {
	        begin: SCHEME_COMPLEX_NUMBER_RE,
	        relevance: 0
	      },
	      { begin: '#b[0-1]+(/[0-1]+)?' },
	      { begin: '#o[0-7]+(/[0-7]+)?' },
	      { begin: '#x[0-9a-f]+(/[0-9a-f]+)?' }
	    ]
	  };

	  const STRING = hljs.QUOTE_STRING_MODE;

	  const COMMENT_MODES = [
	    hljs.COMMENT(
	      ';',
	      '$',
	      { relevance: 0 }
	    ),
	    hljs.COMMENT('#\\|', '\\|#')
	  ];

	  const IDENT = {
	    begin: SCHEME_IDENT_RE,
	    relevance: 0
	  };

	  const QUOTED_IDENT = {
	    className: 'symbol',
	    begin: '\'' + SCHEME_IDENT_RE
	  };

	  const BODY = {
	    endsWithParent: true,
	    relevance: 0
	  };

	  const QUOTED_LIST = {
	    variants: [
	      { begin: /'/ },
	      { begin: '`' }
	    ],
	    contains: [
	      {
	        begin: '\\(',
	        end: '\\)',
	        contains: [
	          'self',
	          LITERAL,
	          STRING,
	          NUMBER,
	          IDENT,
	          QUOTED_IDENT
	        ]
	      }
	    ]
	  };

	  const NAME = {
	    className: 'name',
	    relevance: 0,
	    begin: SCHEME_IDENT_RE,
	    keywords: KEYWORDS
	  };

	  const LAMBDA = {
	    begin: /lambda/,
	    endsWithParent: true,
	    returnBegin: true,
	    contains: [
	      NAME,
	      {
	        endsParent: true,
	        variants: [
	          {
	            begin: /\(/,
	            end: /\)/
	          },
	          {
	            begin: /\[/,
	            end: /\]/
	          }
	        ],
	        contains: [ IDENT ]
	      }
	    ]
	  };

	  const LIST = {
	    variants: [
	      {
	        begin: '\\(',
	        end: '\\)'
	      },
	      {
	        begin: '\\[',
	        end: '\\]'
	      }
	    ],
	    contains: [
	      LAMBDA,
	      NAME,
	      BODY
	    ]
	  };

	  BODY.contains = [
	    LITERAL,
	    NUMBER,
	    STRING,
	    IDENT,
	    QUOTED_IDENT,
	    QUOTED_LIST,
	    LIST
	  ].concat(COMMENT_MODES);

	  return {
	    name: 'Scheme',
	    aliases: ['scm'],
	    illegal: /\S/,
	    contains: [
	      hljs.SHEBANG(),
	      NUMBER,
	      STRING,
	      QUOTED_IDENT,
	      QUOTED_LIST,
	      LIST
	    ].concat(COMMENT_MODES)
	  };
	}

	scheme_1 = scheme;
	return scheme_1;
}

/*
Language: Scilab
Author: Sylvestre Ledru <sylvestre.ledru@scilab-enterprises.com>
Origin: matlab.js
Description: Scilab is a port from Matlab
Website: https://www.scilab.org
Category: scientific
*/

var scilab_1;
var hasRequiredScilab;

function requireScilab () {
	if (hasRequiredScilab) return scilab_1;
	hasRequiredScilab = 1;
	function scilab(hljs) {
	  const COMMON_CONTAINS = [
	    hljs.C_NUMBER_MODE,
	    {
	      className: 'string',
	      begin: '\'|\"',
	      end: '\'|\"',
	      contains: [
	        hljs.BACKSLASH_ESCAPE,
	        { begin: '\'\'' }
	      ]
	    }
	  ];

	  return {
	    name: 'Scilab',
	    aliases: [ 'sci' ],
	    keywords: {
	      $pattern: /%?\w+/,
	      keyword: 'abort break case clear catch continue do elseif else endfunction end for function '
	        + 'global if pause return resume select try then while',
	      literal:
	        '%f %F %t %T %pi %eps %inf %nan %e %i %z %s',
	      built_in: // Scilab has more than 2000 functions. Just list the most commons
	       'abs and acos asin atan ceil cd chdir clearglobal cosh cos cumprod deff disp error '
	       + 'exec execstr exists exp eye gettext floor fprintf fread fsolve imag isdef isempty '
	       + 'isinfisnan isvector lasterror length load linspace list listfiles log10 log2 log '
	       + 'max min msprintf mclose mopen ones or pathconvert poly printf prod pwd rand real '
	       + 'round sinh sin size gsort sprintf sqrt strcat strcmps tring sum system tanh tan '
	       + 'type typename warning zeros matrix'
	    },
	    illegal: '("|#|/\\*|\\s+/\\w+)',
	    contains: [
	      {
	        className: 'function',
	        beginKeywords: 'function',
	        end: '$',
	        contains: [
	          hljs.UNDERSCORE_TITLE_MODE,
	          {
	            className: 'params',
	            begin: '\\(',
	            end: '\\)'
	          }
	        ]
	      },
	      // seems to be a guard against [ident]' or [ident].
	      // perhaps to prevent attributes from flagging as keywords?
	      {
	        begin: '[a-zA-Z_][a-zA-Z_0-9]*[\\.\']+',
	        relevance: 0
	      },
	      {
	        begin: '\\[',
	        end: '\\][\\.\']*',
	        relevance: 0,
	        contains: COMMON_CONTAINS
	      },
	      hljs.COMMENT('//', '$')
	    ].concat(COMMON_CONTAINS)
	  };
	}

	scilab_1 = scilab;
	return scilab_1;
}

var scss_1;
var hasRequiredScss;

function requireScss () {
	if (hasRequiredScss) return scss_1;
	hasRequiredScss = 1;
	const MODES = (hljs) => {
	  return {
	    IMPORTANT: {
	      scope: 'meta',
	      begin: '!important'
	    },
	    BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
	    HEXCOLOR: {
	      scope: 'number',
	      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
	    },
	    FUNCTION_DISPATCH: {
	      className: "built_in",
	      begin: /[\w-]+(?=\()/
	    },
	    ATTRIBUTE_SELECTOR_MODE: {
	      scope: 'selector-attr',
	      begin: /\[/,
	      end: /\]/,
	      illegal: '$',
	      contains: [
	        hljs.APOS_STRING_MODE,
	        hljs.QUOTE_STRING_MODE
	      ]
	    },
	    CSS_NUMBER_MODE: {
	      scope: 'number',
	      begin: hljs.NUMBER_RE + '(' +
	        '%|em|ex|ch|rem' +
	        '|vw|vh|vmin|vmax' +
	        '|cm|mm|in|pt|pc|px' +
	        '|deg|grad|rad|turn' +
	        '|s|ms' +
	        '|Hz|kHz' +
	        '|dpi|dpcm|dppx' +
	        ')?',
	      relevance: 0
	    },
	    CSS_VARIABLE: {
	      className: "attr",
	      begin: /--[A-Za-z_][A-Za-z0-9_-]*/
	    }
	  };
	};

	const TAGS = [
	  'a',
	  'abbr',
	  'address',
	  'article',
	  'aside',
	  'audio',
	  'b',
	  'blockquote',
	  'body',
	  'button',
	  'canvas',
	  'caption',
	  'cite',
	  'code',
	  'dd',
	  'del',
	  'details',
	  'dfn',
	  'div',
	  'dl',
	  'dt',
	  'em',
	  'fieldset',
	  'figcaption',
	  'figure',
	  'footer',
	  'form',
	  'h1',
	  'h2',
	  'h3',
	  'h4',
	  'h5',
	  'h6',
	  'header',
	  'hgroup',
	  'html',
	  'i',
	  'iframe',
	  'img',
	  'input',
	  'ins',
	  'kbd',
	  'label',
	  'legend',
	  'li',
	  'main',
	  'mark',
	  'menu',
	  'nav',
	  'object',
	  'ol',
	  'p',
	  'q',
	  'quote',
	  'samp',
	  'section',
	  'span',
	  'strong',
	  'summary',
	  'sup',
	  'table',
	  'tbody',
	  'td',
	  'textarea',
	  'tfoot',
	  'th',
	  'thead',
	  'time',
	  'tr',
	  'ul',
	  'var',
	  'video'
	];

	const MEDIA_FEATURES = [
	  'any-hover',
	  'any-pointer',
	  'aspect-ratio',
	  'color',
	  'color-gamut',
	  'color-index',
	  'device-aspect-ratio',
	  'device-height',
	  'device-width',
	  'display-mode',
	  'forced-colors',
	  'grid',
	  'height',
	  'hover',
	  'inverted-colors',
	  'monochrome',
	  'orientation',
	  'overflow-block',
	  'overflow-inline',
	  'pointer',
	  'prefers-color-scheme',
	  'prefers-contrast',
	  'prefers-reduced-motion',
	  'prefers-reduced-transparency',
	  'resolution',
	  'scan',
	  'scripting',
	  'update',
	  'width',
	  // TODO: find a better solution?
	  'min-width',
	  'max-width',
	  'min-height',
	  'max-height'
	];

	// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
	const PSEUDO_CLASSES = [
	  'active',
	  'any-link',
	  'blank',
	  'checked',
	  'current',
	  'default',
	  'defined',
	  'dir', // dir()
	  'disabled',
	  'drop',
	  'empty',
	  'enabled',
	  'first',
	  'first-child',
	  'first-of-type',
	  'fullscreen',
	  'future',
	  'focus',
	  'focus-visible',
	  'focus-within',
	  'has', // has()
	  'host', // host or host()
	  'host-context', // host-context()
	  'hover',
	  'indeterminate',
	  'in-range',
	  'invalid',
	  'is', // is()
	  'lang', // lang()
	  'last-child',
	  'last-of-type',
	  'left',
	  'link',
	  'local-link',
	  'not', // not()
	  'nth-child', // nth-child()
	  'nth-col', // nth-col()
	  'nth-last-child', // nth-last-child()
	  'nth-last-col', // nth-last-col()
	  'nth-last-of-type', //nth-last-of-type()
	  'nth-of-type', //nth-of-type()
	  'only-child',
	  'only-of-type',
	  'optional',
	  'out-of-range',
	  'past',
	  'placeholder-shown',
	  'read-only',
	  'read-write',
	  'required',
	  'right',
	  'root',
	  'scope',
	  'target',
	  'target-within',
	  'user-invalid',
	  'valid',
	  'visited',
	  'where' // where()
	];

	// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
	const PSEUDO_ELEMENTS = [
	  'after',
	  'backdrop',
	  'before',
	  'cue',
	  'cue-region',
	  'first-letter',
	  'first-line',
	  'grammar-error',
	  'marker',
	  'part',
	  'placeholder',
	  'selection',
	  'slotted',
	  'spelling-error'
	];

	const ATTRIBUTES = [
	  'align-content',
	  'align-items',
	  'align-self',
	  'all',
	  'animation',
	  'animation-delay',
	  'animation-direction',
	  'animation-duration',
	  'animation-fill-mode',
	  'animation-iteration-count',
	  'animation-name',
	  'animation-play-state',
	  'animation-timing-function',
	  'backface-visibility',
	  'background',
	  'background-attachment',
	  'background-blend-mode',
	  'background-clip',
	  'background-color',
	  'background-image',
	  'background-origin',
	  'background-position',
	  'background-repeat',
	  'background-size',
	  'block-size',
	  'border',
	  'border-block',
	  'border-block-color',
	  'border-block-end',
	  'border-block-end-color',
	  'border-block-end-style',
	  'border-block-end-width',
	  'border-block-start',
	  'border-block-start-color',
	  'border-block-start-style',
	  'border-block-start-width',
	  'border-block-style',
	  'border-block-width',
	  'border-bottom',
	  'border-bottom-color',
	  'border-bottom-left-radius',
	  'border-bottom-right-radius',
	  'border-bottom-style',
	  'border-bottom-width',
	  'border-collapse',
	  'border-color',
	  'border-image',
	  'border-image-outset',
	  'border-image-repeat',
	  'border-image-slice',
	  'border-image-source',
	  'border-image-width',
	  'border-inline',
	  'border-inline-color',
	  'border-inline-end',
	  'border-inline-end-color',
	  'border-inline-end-style',
	  'border-inline-end-width',
	  'border-inline-start',
	  'border-inline-start-color',
	  'border-inline-start-style',
	  'border-inline-start-width',
	  'border-inline-style',
	  'border-inline-width',
	  'border-left',
	  'border-left-color',
	  'border-left-style',
	  'border-left-width',
	  'border-radius',
	  'border-right',
	  'border-right-color',
	  'border-right-style',
	  'border-right-width',
	  'border-spacing',
	  'border-style',
	  'border-top',
	  'border-top-color',
	  'border-top-left-radius',
	  'border-top-right-radius',
	  'border-top-style',
	  'border-top-width',
	  'border-width',
	  'bottom',
	  'box-decoration-break',
	  'box-shadow',
	  'box-sizing',
	  'break-after',
	  'break-before',
	  'break-inside',
	  'caption-side',
	  'caret-color',
	  'clear',
	  'clip',
	  'clip-path',
	  'clip-rule',
	  'color',
	  'column-count',
	  'column-fill',
	  'column-gap',
	  'column-rule',
	  'column-rule-color',
	  'column-rule-style',
	  'column-rule-width',
	  'column-span',
	  'column-width',
	  'columns',
	  'contain',
	  'content',
	  'content-visibility',
	  'counter-increment',
	  'counter-reset',
	  'cue',
	  'cue-after',
	  'cue-before',
	  'cursor',
	  'direction',
	  'display',
	  'empty-cells',
	  'filter',
	  'flex',
	  'flex-basis',
	  'flex-direction',
	  'flex-flow',
	  'flex-grow',
	  'flex-shrink',
	  'flex-wrap',
	  'float',
	  'flow',
	  'font',
	  'font-display',
	  'font-family',
	  'font-feature-settings',
	  'font-kerning',
	  'font-language-override',
	  'font-size',
	  'font-size-adjust',
	  'font-smoothing',
	  'font-stretch',
	  'font-style',
	  'font-synthesis',
	  'font-variant',
	  'font-variant-caps',
	  'font-variant-east-asian',
	  'font-variant-ligatures',
	  'font-variant-numeric',
	  'font-variant-position',
	  'font-variation-settings',
	  'font-weight',
	  'gap',
	  'glyph-orientation-vertical',
	  'grid',
	  'grid-area',
	  'grid-auto-columns',
	  'grid-auto-flow',
	  'grid-auto-rows',
	  'grid-column',
	  'grid-column-end',
	  'grid-column-start',
	  'grid-gap',
	  'grid-row',
	  'grid-row-end',
	  'grid-row-start',
	  'grid-template',
	  'grid-template-areas',
	  'grid-template-columns',
	  'grid-template-rows',
	  'hanging-punctuation',
	  'height',
	  'hyphens',
	  'icon',
	  'image-orientation',
	  'image-rendering',
	  'image-resolution',
	  'ime-mode',
	  'inline-size',
	  'isolation',
	  'justify-content',
	  'left',
	  'letter-spacing',
	  'line-break',
	  'line-height',
	  'list-style',
	  'list-style-image',
	  'list-style-position',
	  'list-style-type',
	  'margin',
	  'margin-block',
	  'margin-block-end',
	  'margin-block-start',
	  'margin-bottom',
	  'margin-inline',
	  'margin-inline-end',
	  'margin-inline-start',
	  'margin-left',
	  'margin-right',
	  'margin-top',
	  'marks',
	  'mask',
	  'mask-border',
	  'mask-border-mode',
	  'mask-border-outset',
	  'mask-border-repeat',
	  'mask-border-slice',
	  'mask-border-source',
	  'mask-border-width',
	  'mask-clip',
	  'mask-composite',
	  'mask-image',
	  'mask-mode',
	  'mask-origin',
	  'mask-position',
	  'mask-repeat',
	  'mask-size',
	  'mask-type',
	  'max-block-size',
	  'max-height',
	  'max-inline-size',
	  'max-width',
	  'min-block-size',
	  'min-height',
	  'min-inline-size',
	  'min-width',
	  'mix-blend-mode',
	  'nav-down',
	  'nav-index',
	  'nav-left',
	  'nav-right',
	  'nav-up',
	  'none',
	  'normal',
	  'object-fit',
	  'object-position',
	  'opacity',
	  'order',
	  'orphans',
	  'outline',
	  'outline-color',
	  'outline-offset',
	  'outline-style',
	  'outline-width',
	  'overflow',
	  'overflow-wrap',
	  'overflow-x',
	  'overflow-y',
	  'padding',
	  'padding-block',
	  'padding-block-end',
	  'padding-block-start',
	  'padding-bottom',
	  'padding-inline',
	  'padding-inline-end',
	  'padding-inline-start',
	  'padding-left',
	  'padding-right',
	  'padding-top',
	  'page-break-after',
	  'page-break-before',
	  'page-break-inside',
	  'pause',
	  'pause-after',
	  'pause-before',
	  'perspective',
	  'perspective-origin',
	  'pointer-events',
	  'position',
	  'quotes',
	  'resize',
	  'rest',
	  'rest-after',
	  'rest-before',
	  'right',
	  'row-gap',
	  'scroll-margin',
	  'scroll-margin-block',
	  'scroll-margin-block-end',
	  'scroll-margin-block-start',
	  'scroll-margin-bottom',
	  'scroll-margin-inline',
	  'scroll-margin-inline-end',
	  'scroll-margin-inline-start',
	  'scroll-margin-left',
	  'scroll-margin-right',
	  'scroll-margin-top',
	  'scroll-padding',
	  'scroll-padding-block',
	  'scroll-padding-block-end',
	  'scroll-padding-block-start',
	  'scroll-padding-bottom',
	  'scroll-padding-inline',
	  'scroll-padding-inline-end',
	  'scroll-padding-inline-start',
	  'scroll-padding-left',
	  'scroll-padding-right',
	  'scroll-padding-top',
	  'scroll-snap-align',
	  'scroll-snap-stop',
	  'scroll-snap-type',
	  'scrollbar-color',
	  'scrollbar-gutter',
	  'scrollbar-width',
	  'shape-image-threshold',
	  'shape-margin',
	  'shape-outside',
	  'speak',
	  'speak-as',
	  'src', // @font-face
	  'tab-size',
	  'table-layout',
	  'text-align',
	  'text-align-all',
	  'text-align-last',
	  'text-combine-upright',
	  'text-decoration',
	  'text-decoration-color',
	  'text-decoration-line',
	  'text-decoration-style',
	  'text-emphasis',
	  'text-emphasis-color',
	  'text-emphasis-position',
	  'text-emphasis-style',
	  'text-indent',
	  'text-justify',
	  'text-orientation',
	  'text-overflow',
	  'text-rendering',
	  'text-shadow',
	  'text-transform',
	  'text-underline-position',
	  'top',
	  'transform',
	  'transform-box',
	  'transform-origin',
	  'transform-style',
	  'transition',
	  'transition-delay',
	  'transition-duration',
	  'transition-property',
	  'transition-timing-function',
	  'unicode-bidi',
	  'vertical-align',
	  'visibility',
	  'voice-balance',
	  'voice-duration',
	  'voice-family',
	  'voice-pitch',
	  'voice-range',
	  'voice-rate',
	  'voice-stress',
	  'voice-volume',
	  'white-space',
	  'widows',
	  'width',
	  'will-change',
	  'word-break',
	  'word-spacing',
	  'word-wrap',
	  'writing-mode',
	  'z-index'
	  // reverse makes sure longer attributes `font-weight` are matched fully
	  // instead of getting false positives on say `font`
	].reverse();

	/*
	Language: SCSS
	Description: Scss is an extension of the syntax of CSS.
	Author: Kurt Emch <kurt@kurtemch.com>
	Website: https://sass-lang.com
	Category: common, css, web
	*/


	/** @type LanguageFn */
	function scss(hljs) {
	  const modes = MODES(hljs);
	  const PSEUDO_ELEMENTS$1 = PSEUDO_ELEMENTS;
	  const PSEUDO_CLASSES$1 = PSEUDO_CLASSES;

	  const AT_IDENTIFIER = '@[a-z-]+'; // @font-face
	  const AT_MODIFIERS = "and or not only";
	  const IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
	  const VARIABLE = {
	    className: 'variable',
	    begin: '(\\$' + IDENT_RE + ')\\b',
	    relevance: 0
	  };

	  return {
	    name: 'SCSS',
	    case_insensitive: true,
	    illegal: '[=/|\']',
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      // to recognize keyframe 40% etc which are outside the scope of our
	      // attribute value mode
	      modes.CSS_NUMBER_MODE,
	      {
	        className: 'selector-id',
	        begin: '#[A-Za-z0-9_-]+',
	        relevance: 0
	      },
	      {
	        className: 'selector-class',
	        begin: '\\.[A-Za-z0-9_-]+',
	        relevance: 0
	      },
	      modes.ATTRIBUTE_SELECTOR_MODE,
	      {
	        className: 'selector-tag',
	        begin: '\\b(' + TAGS.join('|') + ')\\b',
	        // was there, before, but why?
	        relevance: 0
	      },
	      {
	        className: 'selector-pseudo',
	        begin: ':(' + PSEUDO_CLASSES$1.join('|') + ')'
	      },
	      {
	        className: 'selector-pseudo',
	        begin: ':(:)?(' + PSEUDO_ELEMENTS$1.join('|') + ')'
	      },
	      VARIABLE,
	      { // pseudo-selector params
	        begin: /\(/,
	        end: /\)/,
	        contains: [ modes.CSS_NUMBER_MODE ]
	      },
	      modes.CSS_VARIABLE,
	      {
	        className: 'attribute',
	        begin: '\\b(' + ATTRIBUTES.join('|') + ')\\b'
	      },
	      { begin: '\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b' },
	      {
	        begin: /:/,
	        end: /[;}{]/,
	        relevance: 0,
	        contains: [
	          modes.BLOCK_COMMENT,
	          VARIABLE,
	          modes.HEXCOLOR,
	          modes.CSS_NUMBER_MODE,
	          hljs.QUOTE_STRING_MODE,
	          hljs.APOS_STRING_MODE,
	          modes.IMPORTANT,
	          modes.FUNCTION_DISPATCH
	        ]
	      },
	      // matching these here allows us to treat them more like regular CSS
	      // rules so everything between the {} gets regular rule highlighting,
	      // which is what we want for page and font-face
	      {
	        begin: '@(page|font-face)',
	        keywords: {
	          $pattern: AT_IDENTIFIER,
	          keyword: '@page @font-face'
	        }
	      },
	      {
	        begin: '@',
	        end: '[{;]',
	        returnBegin: true,
	        keywords: {
	          $pattern: /[a-z-]+/,
	          keyword: AT_MODIFIERS,
	          attribute: MEDIA_FEATURES.join(" ")
	        },
	        contains: [
	          {
	            begin: AT_IDENTIFIER,
	            className: "keyword"
	          },
	          {
	            begin: /[a-z-]+(?=:)/,
	            className: "attribute"
	          },
	          VARIABLE,
	          hljs.QUOTE_STRING_MODE,
	          hljs.APOS_STRING_MODE,
	          modes.HEXCOLOR,
	          modes.CSS_NUMBER_MODE
	        ]
	      },
	      modes.FUNCTION_DISPATCH
	    ]
	  };
	}

	scss_1 = scss;
	return scss_1;
}

/*
Language: Shell Session
Requires: bash.js
Author: TSUYUSATO Kitsune <make.just.on@gmail.com>
Category: common
Audit: 2020
*/

var shell_1;
var hasRequiredShell;

function requireShell () {
	if (hasRequiredShell) return shell_1;
	hasRequiredShell = 1;
	/** @type LanguageFn */
	function shell(hljs) {
	  return {
	    name: 'Shell Session',
	    aliases: [
	      'console',
	      'shellsession'
	    ],
	    contains: [
	      {
	        className: 'meta.prompt',
	        // We cannot add \s (spaces) in the regular expression otherwise it will be too broad and produce unexpected result.
	        // For instance, in the following example, it would match "echo /path/to/home >" as a prompt:
	        // echo /path/to/home > t.exe
	        begin: /^\s{0,3}[/~\w\d[\]()@-]*[>%$#][ ]?/,
	        starts: {
	          end: /[^\\](?=\s*$)/,
	          subLanguage: 'bash'
	        }
	      }
	    ]
	  };
	}

	shell_1 = shell;
	return shell_1;
}

/*
Language: Smali
Author: Dennis Titze <dennis.titze@gmail.com>
Description: Basic Smali highlighting
Website: https://github.com/JesusFreke/smali
*/

var smali_1;
var hasRequiredSmali;

function requireSmali () {
	if (hasRequiredSmali) return smali_1;
	hasRequiredSmali = 1;
	function smali(hljs) {
	  const smali_instr_low_prio = [
	    'add',
	    'and',
	    'cmp',
	    'cmpg',
	    'cmpl',
	    'const',
	    'div',
	    'double',
	    'float',
	    'goto',
	    'if',
	    'int',
	    'long',
	    'move',
	    'mul',
	    'neg',
	    'new',
	    'nop',
	    'not',
	    'or',
	    'rem',
	    'return',
	    'shl',
	    'shr',
	    'sput',
	    'sub',
	    'throw',
	    'ushr',
	    'xor'
	  ];
	  const smali_instr_high_prio = [
	    'aget',
	    'aput',
	    'array',
	    'check',
	    'execute',
	    'fill',
	    'filled',
	    'goto/16',
	    'goto/32',
	    'iget',
	    'instance',
	    'invoke',
	    'iput',
	    'monitor',
	    'packed',
	    'sget',
	    'sparse'
	  ];
	  const smali_keywords = [
	    'transient',
	    'constructor',
	    'abstract',
	    'final',
	    'synthetic',
	    'public',
	    'private',
	    'protected',
	    'static',
	    'bridge',
	    'system'
	  ];
	  return {
	    name: 'Smali',
	    contains: [
	      {
	        className: 'string',
	        begin: '"',
	        end: '"',
	        relevance: 0
	      },
	      hljs.COMMENT(
	        '#',
	        '$',
	        { relevance: 0 }
	      ),
	      {
	        className: 'keyword',
	        variants: [
	          { begin: '\\s*\\.end\\s[a-zA-Z0-9]*' },
	          {
	            begin: '^[ ]*\\.[a-zA-Z]*',
	            relevance: 0
	          },
	          {
	            begin: '\\s:[a-zA-Z_0-9]*',
	            relevance: 0
	          },
	          { begin: '\\s(' + smali_keywords.join('|') + ')' }
	        ]
	      },
	      {
	        className: 'built_in',
	        variants: [
	          { begin: '\\s(' + smali_instr_low_prio.join('|') + ')\\s' },
	          {
	            begin: '\\s(' + smali_instr_low_prio.join('|') + ')((-|/)[a-zA-Z0-9]+)+\\s',
	            relevance: 10
	          },
	          {
	            begin: '\\s(' + smali_instr_high_prio.join('|') + ')((-|/)[a-zA-Z0-9]+)*\\s',
	            relevance: 10
	          }
	        ]
	      },
	      {
	        className: 'class',
	        begin: 'L[^\(;:\n]*;',
	        relevance: 0
	      },
	      { begin: '[vp][0-9]+' }
	    ]
	  };
	}

	smali_1 = smali;
	return smali_1;
}

/*
Language: Smalltalk
Description: Smalltalk is an object-oriented, dynamically typed reflective programming language.
Author: Vladimir Gubarkov <xonixx@gmail.com>
Website: https://en.wikipedia.org/wiki/Smalltalk
*/

var smalltalk_1;
var hasRequiredSmalltalk;

function requireSmalltalk () {
	if (hasRequiredSmalltalk) return smalltalk_1;
	hasRequiredSmalltalk = 1;
	function smalltalk(hljs) {
	  const VAR_IDENT_RE = '[a-z][a-zA-Z0-9_]*';
	  const CHAR = {
	    className: 'string',
	    begin: '\\$.{1}'
	  };
	  const SYMBOL = {
	    className: 'symbol',
	    begin: '#' + hljs.UNDERSCORE_IDENT_RE
	  };
	  return {
	    name: 'Smalltalk',
	    aliases: [ 'st' ],
	    keywords: [
	      "self",
	      "super",
	      "nil",
	      "true",
	      "false",
	      "thisContext"
	    ],
	    contains: [
	      hljs.COMMENT('"', '"'),
	      hljs.APOS_STRING_MODE,
	      {
	        className: 'type',
	        begin: '\\b[A-Z][A-Za-z0-9_]*',
	        relevance: 0
	      },
	      {
	        begin: VAR_IDENT_RE + ':',
	        relevance: 0
	      },
	      hljs.C_NUMBER_MODE,
	      SYMBOL,
	      CHAR,
	      {
	        // This looks more complicated than needed to avoid combinatorial
	        // explosion under V8. It effectively means `| var1 var2 ... |` with
	        // whitespace adjacent to `|` being optional.
	        begin: '\\|[ ]*' + VAR_IDENT_RE + '([ ]+' + VAR_IDENT_RE + ')*[ ]*\\|',
	        returnBegin: true,
	        end: /\|/,
	        illegal: /\S/,
	        contains: [ { begin: '(\\|[ ]*)?' + VAR_IDENT_RE } ]
	      },
	      {
	        begin: '#\\(',
	        end: '\\)',
	        contains: [
	          hljs.APOS_STRING_MODE,
	          CHAR,
	          hljs.C_NUMBER_MODE,
	          SYMBOL
	        ]
	      }
	    ]
	  };
	}

	smalltalk_1 = smalltalk;
	return smalltalk_1;
}

/*
Language: SML (Standard ML)
Author: Edwin Dalorzo <edwin@dalorzo.org>
Description: SML language definition.
Website: https://www.smlnj.org
Origin: ocaml.js
Category: functional
*/

var sml_1;
var hasRequiredSml;

function requireSml () {
	if (hasRequiredSml) return sml_1;
	hasRequiredSml = 1;
	function sml(hljs) {
	  return {
	    name: 'SML (Standard ML)',
	    aliases: [ 'ml' ],
	    keywords: {
	      $pattern: '[a-z_]\\w*!?',
	      keyword:
	        /* according to Definition of Standard ML 97  */
	        'abstype and andalso as case datatype do else end eqtype '
	        + 'exception fn fun functor handle if in include infix infixr '
	        + 'let local nonfix of op open orelse raise rec sharing sig '
	        + 'signature struct structure then type val with withtype where while',
	      built_in:
	        /* built-in types according to basis library */
	        'array bool char exn int list option order real ref string substring vector unit word',
	      literal:
	        'true false NONE SOME LESS EQUAL GREATER nil'
	    },
	    illegal: /\/\/|>>/,
	    contains: [
	      {
	        className: 'literal',
	        begin: /\[(\|\|)?\]|\(\)/,
	        relevance: 0
	      },
	      hljs.COMMENT(
	        '\\(\\*',
	        '\\*\\)',
	        { contains: [ 'self' ] }
	      ),
	      { /* type variable */
	        className: 'symbol',
	        begin: '\'[A-Za-z_](?!\')[\\w\']*'
	        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
	      },
	      { /* polymorphic variant */
	        className: 'type',
	        begin: '`[A-Z][\\w\']*'
	      },
	      { /* module or constructor */
	        className: 'type',
	        begin: '\\b[A-Z][\\w\']*',
	        relevance: 0
	      },
	      { /* don't color identifiers, but safely catch all identifiers with ' */
	        begin: '[a-z_]\\w*\'[\\w\']*' },
	      hljs.inherit(hljs.APOS_STRING_MODE, {
	        className: 'string',
	        relevance: 0
	      }),
	      hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
	      {
	        className: 'number',
	        begin:
	          '\\b(0[xX][a-fA-F0-9_]+[Lln]?|'
	          + '0[oO][0-7_]+[Lln]?|'
	          + '0[bB][01_]+[Lln]?|'
	          + '[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',
	        relevance: 0
	      },
	      { begin: /[-=]>/ // relevance booster
	      }
	    ]
	  };
	}

	sml_1 = sml;
	return sml_1;
}

/*
Language: SQF
Author: Søren Enevoldsen <senevoldsen90@gmail.com>
Contributors: Marvin Saignat <contact@zgmrvn.com>, Dedmen Miller <dedmen@dedmen.de>, Leopard20
Description: Scripting language for the Arma game series
Website: https://community.bistudio.com/wiki/SQF_syntax
Category: scripting
Last update: 07.01.2023, Arma 3 v2.11
*/

var sqf_1;
var hasRequiredSqf;

function requireSqf () {
	if (hasRequiredSqf) return sqf_1;
	hasRequiredSqf = 1;
	/*
	////////////////////////////////////////////////////////////////////////////////////////////
	  * Author: Leopard20
	  
	  * Description:
	  This script can be used to dump all commands to the clipboard.
	  Make sure you're using the Diag EXE to dump all of the commands.
	  
	  * How to use:
	  Simply replace the _KEYWORDS and _LITERAL arrays with the one from this sqf.js file.
	  Execute the script from the debug console.
	  All commands will be copied to the clipboard.
	////////////////////////////////////////////////////////////////////////////////////////////
	_KEYWORDS = ['if'];                                                //Array of all KEYWORDS
	_LITERALS = ['west'];                                              //Array of all LITERALS
	_allCommands = createHashMap;
	{
	  _type = _x select [0,1];
	  if (_type != "t") then {
	    _command_lowercase = ((_x select [2]) splitString " ")#(((["n", "u", "b"] find _type) - 1) max 0);
	    _command_uppercase = supportInfo ("i:" + _command_lowercase) # 0 # 2;
	    _allCommands set [_command_lowercase, _command_uppercase];
	  };
	} forEach supportInfo "";
	_allCommands = _allCommands toArray false;
	_allCommands sort true;                                            //sort by lowercase
	_allCommands = ((_allCommands apply {_x#1}) -_KEYWORDS)-_LITERALS; //remove KEYWORDS and LITERALS
	copyToClipboard (str (_allCommands select {_x regexMatch "\w+"}) regexReplace ["""", "'"] regexReplace [",", ",\n"]);
	*/

	function sqf(hljs) {
	  // In SQF, a local variable starts with _
	  const VARIABLE = {
	    className: 'variable',
	    begin: /\b_+[a-zA-Z]\w*/
	  };

	  // In SQF, a function should fit myTag_fnc_myFunction pattern
	  // https://community.bistudio.com/wiki/Functions_Library_(Arma_3)#Adding_a_Function
	  const FUNCTION = {
	    className: 'title',
	    begin: /[a-zA-Z][a-zA-Z_0-9]*_fnc_[a-zA-Z_0-9]+/
	  };

	  // In SQF strings, quotes matching the start are escaped by adding a consecutive.
	  // Example of single escaped quotes: " "" " and  ' '' '.
	  const STRINGS = {
	    className: 'string',
	    variants: [
	      {
	        begin: '"',
	        end: '"',
	        contains: [
	          {
	            begin: '""',
	            relevance: 0
	          }
	        ]
	      },
	      {
	        begin: '\'',
	        end: '\'',
	        contains: [
	          {
	            begin: '\'\'',
	            relevance: 0
	          }
	        ]
	      }
	    ]
	  };

	  const KEYWORDS = [
	    'break',
	    'breakWith',
	    'breakOut',
	    'breakTo',
	    'case',
	    'catch',
	    'continue',
	    'continueWith',
	    'default',
	    'do',
	    'else',
	    'exit',
	    'exitWith',
	    'for',
	    'forEach',
	    'from',
	    'if',
	    'local',
	    'private',
	    'switch',
	    'step',
	    'then',
	    'throw',
	    'to',
	    'try',
	    'waitUntil',
	    'while',
	    'with'
	  ];

	  const LITERAL = [
	    'blufor',
	    'civilian',
	    'configNull',
	    'controlNull',
	    'displayNull',
	    'diaryRecordNull',
	    'east',
	    'endl',
	    'false',
	    'grpNull',
	    'independent',
	    'lineBreak',
	    'locationNull',
	    'nil',
	    'objNull',
	    'opfor',
	    'pi',
	    'resistance',
	    'scriptNull',
	    'sideAmbientLife',
	    'sideEmpty',
	    'sideEnemy',
	    'sideFriendly',
	    'sideLogic',
	    'sideUnknown',
	    'taskNull',
	    'teamMemberNull',
	    'true',
	    'west'
	  ];

	  const BUILT_IN = [
	    'abs',
	    'accTime',
	    'acos',
	    'action',
	    'actionIDs',
	    'actionKeys',
	    'actionKeysEx',
	    'actionKeysImages',
	    'actionKeysNames',
	    'actionKeysNamesArray',
	    'actionName',
	    'actionParams',
	    'activateAddons',
	    'activatedAddons',
	    'activateKey',
	    'activeTitleEffectParams',
	    'add3DENConnection',
	    'add3DENEventHandler',
	    'add3DENLayer',
	    'addAction',
	    'addBackpack',
	    'addBackpackCargo',
	    'addBackpackCargoGlobal',
	    'addBackpackGlobal',
	    'addBinocularItem',
	    'addCamShake',
	    'addCuratorAddons',
	    'addCuratorCameraArea',
	    'addCuratorEditableObjects',
	    'addCuratorEditingArea',
	    'addCuratorPoints',
	    'addEditorObject',
	    'addEventHandler',
	    'addForce',
	    'addForceGeneratorRTD',
	    'addGoggles',
	    'addGroupIcon',
	    'addHandgunItem',
	    'addHeadgear',
	    'addItem',
	    'addItemCargo',
	    'addItemCargoGlobal',
	    'addItemPool',
	    'addItemToBackpack',
	    'addItemToUniform',
	    'addItemToVest',
	    'addLiveStats',
	    'addMagazine',
	    'addMagazineAmmoCargo',
	    'addMagazineCargo',
	    'addMagazineCargoGlobal',
	    'addMagazineGlobal',
	    'addMagazinePool',
	    'addMagazines',
	    'addMagazineTurret',
	    'addMenu',
	    'addMenuItem',
	    'addMissionEventHandler',
	    'addMPEventHandler',
	    'addMusicEventHandler',
	    'addonFiles',
	    'addOwnedMine',
	    'addPlayerScores',
	    'addPrimaryWeaponItem',
	    'addPublicVariableEventHandler',
	    'addRating',
	    'addResources',
	    'addScore',
	    'addScoreSide',
	    'addSecondaryWeaponItem',
	    'addSwitchableUnit',
	    'addTeamMember',
	    'addToRemainsCollector',
	    'addTorque',
	    'addUniform',
	    'addUserActionEventHandler',
	    'addVehicle',
	    'addVest',
	    'addWaypoint',
	    'addWeapon',
	    'addWeaponCargo',
	    'addWeaponCargoGlobal',
	    'addWeaponGlobal',
	    'addWeaponItem',
	    'addWeaponPool',
	    'addWeaponTurret',
	    'addWeaponWithAttachmentsCargo',
	    'addWeaponWithAttachmentsCargoGlobal',
	    'admin',
	    'agent',
	    'agents',
	    'AGLToASL',
	    'aimedAtTarget',
	    'aimPos',
	    'airDensityCurveRTD',
	    'airDensityRTD',
	    'airplaneThrottle',
	    'airportSide',
	    'AISFinishHeal',
	    'alive',
	    'all3DENEntities',
	    'allActiveTitleEffects',
	    'allAddonsInfo',
	    'allAirports',
	    'allControls',
	    'allCurators',
	    'allCutLayers',
	    'allDead',
	    'allDeadMen',
	    'allDiaryRecords',
	    'allDiarySubjects',
	    'allDisplays',
	    'allEnv3DSoundSources',
	    'allGroups',
	    'allLODs',
	    'allMapMarkers',
	    'allMines',
	    'allMissionObjects',
	    'allObjects',
	    'allow3DMode',
	    'allowCrewInImmobile',
	    'allowCuratorLogicIgnoreAreas',
	    'allowDamage',
	    'allowDammage',
	    'allowedService',
	    'allowFileOperations',
	    'allowFleeing',
	    'allowGetIn',
	    'allowService',
	    'allowSprint',
	    'allPlayers',
	    'allSimpleObjects',
	    'allSites',
	    'allTurrets',
	    'allUnits',
	    'allUnitsUAV',
	    'allUsers',
	    'allVariables',
	    'ambientTemperature',
	    'ammo',
	    'ammoOnPylon',
	    'and',
	    'animate',
	    'animateBay',
	    'animateDoor',
	    'animatePylon',
	    'animateSource',
	    'animationNames',
	    'animationPhase',
	    'animationSourcePhase',
	    'animationState',
	    'apertureParams',
	    'append',
	    'apply',
	    'armoryPoints',
	    'arrayIntersect',
	    'asin',
	    'ASLToAGL',
	    'ASLToATL',
	    'assert',
	    'assignAsCargo',
	    'assignAsCargoIndex',
	    'assignAsCommander',
	    'assignAsDriver',
	    'assignAsGunner',
	    'assignAsTurret',
	    'assignCurator',
	    'assignedCargo',
	    'assignedCommander',
	    'assignedDriver',
	    'assignedGroup',
	    'assignedGunner',
	    'assignedItems',
	    'assignedTarget',
	    'assignedTeam',
	    'assignedVehicle',
	    'assignedVehicleRole',
	    'assignedVehicles',
	    'assignItem',
	    'assignTeam',
	    'assignToAirport',
	    'atan',
	    'atan2',
	    'atg',
	    'ATLToASL',
	    'attachedObject',
	    'attachedObjects',
	    'attachedTo',
	    'attachObject',
	    'attachTo',
	    'attackEnabled',
	    'awake',
	    'backpack',
	    'backpackCargo',
	    'backpackContainer',
	    'backpackItems',
	    'backpackMagazines',
	    'backpackSpaceFor',
	    'behaviour',
	    'benchmark',
	    'bezierInterpolation',
	    'binocular',
	    'binocularItems',
	    'binocularMagazine',
	    'boundingBox',
	    'boundingBoxReal',
	    'boundingCenter',
	    'brakesDisabled',
	    'briefingName',
	    'buildingExit',
	    'buildingPos',
	    'buldozer_EnableRoadDiag',
	    'buldozer_IsEnabledRoadDiag',
	    'buldozer_LoadNewRoads',
	    'buldozer_reloadOperMap',
	    'buttonAction',
	    'buttonSetAction',
	    'cadetMode',
	    'calculatePath',
	    'calculatePlayerVisibilityByFriendly',
	    'call',
	    'callExtension',
	    'camCommand',
	    'camCommit',
	    'camCommitPrepared',
	    'camCommitted',
	    'camConstuctionSetParams',
	    'camCreate',
	    'camDestroy',
	    'cameraEffect',
	    'cameraEffectEnableHUD',
	    'cameraInterest',
	    'cameraOn',
	    'cameraView',
	    'campaignConfigFile',
	    'camPreload',
	    'camPreloaded',
	    'camPrepareBank',
	    'camPrepareDir',
	    'camPrepareDive',
	    'camPrepareFocus',
	    'camPrepareFov',
	    'camPrepareFovRange',
	    'camPreparePos',
	    'camPrepareRelPos',
	    'camPrepareTarget',
	    'camSetBank',
	    'camSetDir',
	    'camSetDive',
	    'camSetFocus',
	    'camSetFov',
	    'camSetFovRange',
	    'camSetPos',
	    'camSetRelPos',
	    'camSetTarget',
	    'camTarget',
	    'camUseNVG',
	    'canAdd',
	    'canAddItemToBackpack',
	    'canAddItemToUniform',
	    'canAddItemToVest',
	    'cancelSimpleTaskDestination',
	    'canDeployWeapon',
	    'canFire',
	    'canMove',
	    'canSlingLoad',
	    'canStand',
	    'canSuspend',
	    'canTriggerDynamicSimulation',
	    'canUnloadInCombat',
	    'canVehicleCargo',
	    'captive',
	    'captiveNum',
	    'cbChecked',
	    'cbSetChecked',
	    'ceil',
	    'channelEnabled',
	    'cheatsEnabled',
	    'checkAIFeature',
	    'checkVisibility',
	    'className',
	    'clear3DENAttribute',
	    'clear3DENInventory',
	    'clearAllItemsFromBackpack',
	    'clearBackpackCargo',
	    'clearBackpackCargoGlobal',
	    'clearForcesRTD',
	    'clearGroupIcons',
	    'clearItemCargo',
	    'clearItemCargoGlobal',
	    'clearItemPool',
	    'clearMagazineCargo',
	    'clearMagazineCargoGlobal',
	    'clearMagazinePool',
	    'clearOverlay',
	    'clearRadio',
	    'clearWeaponCargo',
	    'clearWeaponCargoGlobal',
	    'clearWeaponPool',
	    'clientOwner',
	    'closeDialog',
	    'closeDisplay',
	    'closeOverlay',
	    'collapseObjectTree',
	    'collect3DENHistory',
	    'collectiveRTD',
	    'collisionDisabledWith',
	    'combatBehaviour',
	    'combatMode',
	    'commandArtilleryFire',
	    'commandChat',
	    'commander',
	    'commandFire',
	    'commandFollow',
	    'commandFSM',
	    'commandGetOut',
	    'commandingMenu',
	    'commandMove',
	    'commandRadio',
	    'commandStop',
	    'commandSuppressiveFire',
	    'commandTarget',
	    'commandWatch',
	    'comment',
	    'commitOverlay',
	    'compatibleItems',
	    'compatibleMagazines',
	    'compile',
	    'compileFinal',
	    'compileScript',
	    'completedFSM',
	    'composeText',
	    'configClasses',
	    'configFile',
	    'configHierarchy',
	    'configName',
	    'configOf',
	    'configProperties',
	    'configSourceAddonList',
	    'configSourceMod',
	    'configSourceModList',
	    'confirmSensorTarget',
	    'connectTerminalToUAV',
	    'connectToServer',
	    'controlsGroupCtrl',
	    'conversationDisabled',
	    'copyFromClipboard',
	    'copyToClipboard',
	    'copyWaypoints',
	    'cos',
	    'count',
	    'countEnemy',
	    'countFriendly',
	    'countSide',
	    'countType',
	    'countUnknown',
	    'create3DENComposition',
	    'create3DENEntity',
	    'createAgent',
	    'createCenter',
	    'createDialog',
	    'createDiaryLink',
	    'createDiaryRecord',
	    'createDiarySubject',
	    'createDisplay',
	    'createGearDialog',
	    'createGroup',
	    'createGuardedPoint',
	    'createHashMap',
	    'createHashMapFromArray',
	    'createLocation',
	    'createMarker',
	    'createMarkerLocal',
	    'createMenu',
	    'createMine',
	    'createMissionDisplay',
	    'createMPCampaignDisplay',
	    'createSimpleObject',
	    'createSimpleTask',
	    'createSite',
	    'createSoundSource',
	    'createTask',
	    'createTeam',
	    'createTrigger',
	    'createUnit',
	    'createVehicle',
	    'createVehicleCrew',
	    'createVehicleLocal',
	    'crew',
	    'ctAddHeader',
	    'ctAddRow',
	    'ctClear',
	    'ctCurSel',
	    'ctData',
	    'ctFindHeaderRows',
	    'ctFindRowHeader',
	    'ctHeaderControls',
	    'ctHeaderCount',
	    'ctRemoveHeaders',
	    'ctRemoveRows',
	    'ctrlActivate',
	    'ctrlAddEventHandler',
	    'ctrlAngle',
	    'ctrlAnimateModel',
	    'ctrlAnimationPhaseModel',
	    'ctrlAt',
	    'ctrlAutoScrollDelay',
	    'ctrlAutoScrollRewind',
	    'ctrlAutoScrollSpeed',
	    'ctrlBackgroundColor',
	    'ctrlChecked',
	    'ctrlClassName',
	    'ctrlCommit',
	    'ctrlCommitted',
	    'ctrlCreate',
	    'ctrlDelete',
	    'ctrlEnable',
	    'ctrlEnabled',
	    'ctrlFade',
	    'ctrlFontHeight',
	    'ctrlForegroundColor',
	    'ctrlHTMLLoaded',
	    'ctrlIDC',
	    'ctrlIDD',
	    'ctrlMapAnimAdd',
	    'ctrlMapAnimClear',
	    'ctrlMapAnimCommit',
	    'ctrlMapAnimDone',
	    'ctrlMapCursor',
	    'ctrlMapMouseOver',
	    'ctrlMapPosition',
	    'ctrlMapScale',
	    'ctrlMapScreenToWorld',
	    'ctrlMapSetPosition',
	    'ctrlMapWorldToScreen',
	    'ctrlModel',
	    'ctrlModelDirAndUp',
	    'ctrlModelScale',
	    'ctrlMousePosition',
	    'ctrlParent',
	    'ctrlParentControlsGroup',
	    'ctrlPosition',
	    'ctrlRemoveAllEventHandlers',
	    'ctrlRemoveEventHandler',
	    'ctrlScale',
	    'ctrlScrollValues',
	    'ctrlSetActiveColor',
	    'ctrlSetAngle',
	    'ctrlSetAutoScrollDelay',
	    'ctrlSetAutoScrollRewind',
	    'ctrlSetAutoScrollSpeed',
	    'ctrlSetBackgroundColor',
	    'ctrlSetChecked',
	    'ctrlSetDisabledColor',
	    'ctrlSetEventHandler',
	    'ctrlSetFade',
	    'ctrlSetFocus',
	    'ctrlSetFont',
	    'ctrlSetFontH1',
	    'ctrlSetFontH1B',
	    'ctrlSetFontH2',
	    'ctrlSetFontH2B',
	    'ctrlSetFontH3',
	    'ctrlSetFontH3B',
	    'ctrlSetFontH4',
	    'ctrlSetFontH4B',
	    'ctrlSetFontH5',
	    'ctrlSetFontH5B',
	    'ctrlSetFontH6',
	    'ctrlSetFontH6B',
	    'ctrlSetFontHeight',
	    'ctrlSetFontHeightH1',
	    'ctrlSetFontHeightH2',
	    'ctrlSetFontHeightH3',
	    'ctrlSetFontHeightH4',
	    'ctrlSetFontHeightH5',
	    'ctrlSetFontHeightH6',
	    'ctrlSetFontHeightSecondary',
	    'ctrlSetFontP',
	    'ctrlSetFontPB',
	    'ctrlSetFontSecondary',
	    'ctrlSetForegroundColor',
	    'ctrlSetModel',
	    'ctrlSetModelDirAndUp',
	    'ctrlSetModelScale',
	    'ctrlSetMousePosition',
	    'ctrlSetPixelPrecision',
	    'ctrlSetPosition',
	    'ctrlSetPositionH',
	    'ctrlSetPositionW',
	    'ctrlSetPositionX',
	    'ctrlSetPositionY',
	    'ctrlSetScale',
	    'ctrlSetScrollValues',
	    'ctrlSetShadow',
	    'ctrlSetStructuredText',
	    'ctrlSetText',
	    'ctrlSetTextColor',
	    'ctrlSetTextColorSecondary',
	    'ctrlSetTextSecondary',
	    'ctrlSetTextSelection',
	    'ctrlSetTooltip',
	    'ctrlSetTooltipColorBox',
	    'ctrlSetTooltipColorShade',
	    'ctrlSetTooltipColorText',
	    'ctrlSetTooltipMaxWidth',
	    'ctrlSetURL',
	    'ctrlSetURLOverlayMode',
	    'ctrlShadow',
	    'ctrlShow',
	    'ctrlShown',
	    'ctrlStyle',
	    'ctrlText',
	    'ctrlTextColor',
	    'ctrlTextHeight',
	    'ctrlTextSecondary',
	    'ctrlTextSelection',
	    'ctrlTextWidth',
	    'ctrlTooltip',
	    'ctrlType',
	    'ctrlURL',
	    'ctrlURLOverlayMode',
	    'ctrlVisible',
	    'ctRowControls',
	    'ctRowCount',
	    'ctSetCurSel',
	    'ctSetData',
	    'ctSetHeaderTemplate',
	    'ctSetRowTemplate',
	    'ctSetValue',
	    'ctValue',
	    'curatorAddons',
	    'curatorCamera',
	    'curatorCameraArea',
	    'curatorCameraAreaCeiling',
	    'curatorCoef',
	    'curatorEditableObjects',
	    'curatorEditingArea',
	    'curatorEditingAreaType',
	    'curatorMouseOver',
	    'curatorPoints',
	    'curatorRegisteredObjects',
	    'curatorSelected',
	    'curatorWaypointCost',
	    'current3DENOperation',
	    'currentChannel',
	    'currentCommand',
	    'currentMagazine',
	    'currentMagazineDetail',
	    'currentMagazineDetailTurret',
	    'currentMagazineTurret',
	    'currentMuzzle',
	    'currentNamespace',
	    'currentPilot',
	    'currentTask',
	    'currentTasks',
	    'currentThrowable',
	    'currentVisionMode',
	    'currentWaypoint',
	    'currentWeapon',
	    'currentWeaponMode',
	    'currentWeaponTurret',
	    'currentZeroing',
	    'cursorObject',
	    'cursorTarget',
	    'customChat',
	    'customRadio',
	    'customWaypointPosition',
	    'cutFadeOut',
	    'cutObj',
	    'cutRsc',
	    'cutText',
	    'damage',
	    'date',
	    'dateToNumber',
	    'dayTime',
	    'deActivateKey',
	    'debriefingText',
	    'debugFSM',
	    'debugLog',
	    'decayGraphValues',
	    'deg',
	    'delete3DENEntities',
	    'deleteAt',
	    'deleteCenter',
	    'deleteCollection',
	    'deleteEditorObject',
	    'deleteGroup',
	    'deleteGroupWhenEmpty',
	    'deleteIdentity',
	    'deleteLocation',
	    'deleteMarker',
	    'deleteMarkerLocal',
	    'deleteRange',
	    'deleteResources',
	    'deleteSite',
	    'deleteStatus',
	    'deleteTeam',
	    'deleteVehicle',
	    'deleteVehicleCrew',
	    'deleteWaypoint',
	    'detach',
	    'detectedMines',
	    'diag_activeMissionFSMs',
	    'diag_activeScripts',
	    'diag_activeSQFScripts',
	    'diag_activeSQSScripts',
	    'diag_allMissionEventHandlers',
	    'diag_captureFrame',
	    'diag_captureFrameToFile',
	    'diag_captureSlowFrame',
	    'diag_codePerformance',
	    'diag_deltaTime',
	    'diag_drawmode',
	    'diag_dumpCalltraceToLog',
	    'diag_dumpScriptAssembly',
	    'diag_dumpTerrainSynth',
	    'diag_dynamicSimulationEnd',
	    'diag_enable',
	    'diag_enabled',
	    'diag_exportConfig',
	    'diag_exportTerrainSVG',
	    'diag_fps',
	    'diag_fpsmin',
	    'diag_frameno',
	    'diag_getTerrainSegmentOffset',
	    'diag_lightNewLoad',
	    'diag_list',
	    'diag_localized',
	    'diag_log',
	    'diag_logSlowFrame',
	    'diag_mergeConfigFile',
	    'diag_recordTurretLimits',
	    'diag_resetFSM',
	    'diag_resetshapes',
	    'diag_scope',
	    'diag_setLightNew',
	    'diag_stacktrace',
	    'diag_tickTime',
	    'diag_toggle',
	    'dialog',
	    'diarySubjectExists',
	    'didJIP',
	    'didJIPOwner',
	    'difficulty',
	    'difficultyEnabled',
	    'difficultyEnabledRTD',
	    'difficultyOption',
	    'direction',
	    'directionStabilizationEnabled',
	    'directSay',
	    'disableAI',
	    'disableBrakes',
	    'disableCollisionWith',
	    'disableConversation',
	    'disableDebriefingStats',
	    'disableMapIndicators',
	    'disableNVGEquipment',
	    'disableRemoteSensors',
	    'disableSerialization',
	    'disableTIEquipment',
	    'disableUAVConnectability',
	    'disableUserInput',
	    'displayAddEventHandler',
	    'displayChild',
	    'displayCtrl',
	    'displayParent',
	    'displayRemoveAllEventHandlers',
	    'displayRemoveEventHandler',
	    'displaySetEventHandler',
	    'displayUniqueName',
	    'displayUpdate',
	    'dissolveTeam',
	    'distance',
	    'distance2D',
	    'distanceSqr',
	    'distributionRegion',
	    'do3DENAction',
	    'doArtilleryFire',
	    'doFire',
	    'doFollow',
	    'doFSM',
	    'doGetOut',
	    'doMove',
	    'doorPhase',
	    'doStop',
	    'doSuppressiveFire',
	    'doTarget',
	    'doWatch',
	    'drawArrow',
	    'drawEllipse',
	    'drawIcon',
	    'drawIcon3D',
	    'drawLaser',
	    'drawLine',
	    'drawLine3D',
	    'drawLink',
	    'drawLocation',
	    'drawPolygon',
	    'drawRectangle',
	    'drawTriangle',
	    'driver',
	    'drop',
	    'dynamicSimulationDistance',
	    'dynamicSimulationDistanceCoef',
	    'dynamicSimulationEnabled',
	    'dynamicSimulationSystemEnabled',
	    'echo',
	    'edit3DENMissionAttributes',
	    'editObject',
	    'editorSetEventHandler',
	    'effectiveCommander',
	    'elevatePeriscope',
	    'emptyPositions',
	    'enableAI',
	    'enableAIFeature',
	    'enableAimPrecision',
	    'enableAttack',
	    'enableAudioFeature',
	    'enableAutoStartUpRTD',
	    'enableAutoTrimRTD',
	    'enableCamShake',
	    'enableCaustics',
	    'enableChannel',
	    'enableCollisionWith',
	    'enableCopilot',
	    'enableDebriefingStats',
	    'enableDiagLegend',
	    'enableDirectionStabilization',
	    'enableDynamicSimulation',
	    'enableDynamicSimulationSystem',
	    'enableEndDialog',
	    'enableEngineArtillery',
	    'enableEnvironment',
	    'enableFatigue',
	    'enableGunLights',
	    'enableInfoPanelComponent',
	    'enableIRLasers',
	    'enableMimics',
	    'enablePersonTurret',
	    'enableRadio',
	    'enableReload',
	    'enableRopeAttach',
	    'enableSatNormalOnDetail',
	    'enableSaving',
	    'enableSentences',
	    'enableSimulation',
	    'enableSimulationGlobal',
	    'enableStamina',
	    'enableStressDamage',
	    'enableTeamSwitch',
	    'enableTraffic',
	    'enableUAVConnectability',
	    'enableUAVWaypoints',
	    'enableVehicleCargo',
	    'enableVehicleSensor',
	    'enableWeaponDisassembly',
	    'endLoadingScreen',
	    'endMission',
	    'engineOn',
	    'enginesIsOnRTD',
	    'enginesPowerRTD',
	    'enginesRpmRTD',
	    'enginesTorqueRTD',
	    'entities',
	    'environmentEnabled',
	    'environmentVolume',
	    'equipmentDisabled',
	    'estimatedEndServerTime',
	    'estimatedTimeLeft',
	    'evalObjectArgument',
	    'everyBackpack',
	    'everyContainer',
	    'exec',
	    'execEditorScript',
	    'execFSM',
	    'execVM',
	    'exp',
	    'expectedDestination',
	    'exportJIPMessages',
	    'eyeDirection',
	    'eyePos',
	    'face',
	    'faction',
	    'fadeEnvironment',
	    'fadeMusic',
	    'fadeRadio',
	    'fadeSound',
	    'fadeSpeech',
	    'failMission',
	    'fileExists',
	    'fillWeaponsFromPool',
	    'find',
	    'findAny',
	    'findCover',
	    'findDisplay',
	    'findEditorObject',
	    'findEmptyPosition',
	    'findEmptyPositionReady',
	    'findIf',
	    'findNearestEnemy',
	    'finishMissionInit',
	    'finite',
	    'fire',
	    'fireAtTarget',
	    'firstBackpack',
	    'flag',
	    'flagAnimationPhase',
	    'flagOwner',
	    'flagSide',
	    'flagTexture',
	    'flatten',
	    'fleeing',
	    'floor',
	    'flyInHeight',
	    'flyInHeightASL',
	    'focusedCtrl',
	    'fog',
	    'fogForecast',
	    'fogParams',
	    'forceAddUniform',
	    'forceAtPositionRTD',
	    'forceCadetDifficulty',
	    'forcedMap',
	    'forceEnd',
	    'forceFlagTexture',
	    'forceFollowRoad',
	    'forceGeneratorRTD',
	    'forceMap',
	    'forceRespawn',
	    'forceSpeed',
	    'forceUnicode',
	    'forceWalk',
	    'forceWeaponFire',
	    'forceWeatherChange',
	    'forEachMember',
	    'forEachMemberAgent',
	    'forEachMemberTeam',
	    'forgetTarget',
	    'format',
	    'formation',
	    'formationDirection',
	    'formationLeader',
	    'formationMembers',
	    'formationPosition',
	    'formationTask',
	    'formatText',
	    'formLeader',
	    'freeExtension',
	    'freeLook',
	    'fromEditor',
	    'fuel',
	    'fullCrew',
	    'gearIDCAmmoCount',
	    'gearSlotAmmoCount',
	    'gearSlotData',
	    'gestureState',
	    'get',
	    'get3DENActionState',
	    'get3DENAttribute',
	    'get3DENCamera',
	    'get3DENConnections',
	    'get3DENEntity',
	    'get3DENEntityID',
	    'get3DENGrid',
	    'get3DENIconsVisible',
	    'get3DENLayerEntities',
	    'get3DENLinesVisible',
	    'get3DENMissionAttribute',
	    'get3DENMouseOver',
	    'get3DENSelected',
	    'getAimingCoef',
	    'getAllEnv3DSoundControllers',
	    'getAllEnvSoundControllers',
	    'getAllHitPointsDamage',
	    'getAllOwnedMines',
	    'getAllPylonsInfo',
	    'getAllSoundControllers',
	    'getAllUnitTraits',
	    'getAmmoCargo',
	    'getAnimAimPrecision',
	    'getAnimSpeedCoef',
	    'getArray',
	    'getArtilleryAmmo',
	    'getArtilleryComputerSettings',
	    'getArtilleryETA',
	    'getAssetDLCInfo',
	    'getAssignedCuratorLogic',
	    'getAssignedCuratorUnit',
	    'getAttackTarget',
	    'getAudioOptionVolumes',
	    'getBackpackCargo',
	    'getBleedingRemaining',
	    'getBurningValue',
	    'getCalculatePlayerVisibilityByFriendly',
	    'getCameraViewDirection',
	    'getCargoIndex',
	    'getCenterOfMass',
	    'getClientState',
	    'getClientStateNumber',
	    'getCompatiblePylonMagazines',
	    'getConnectedUAV',
	    'getConnectedUAVUnit',
	    'getContainerMaxLoad',
	    'getCorpse',
	    'getCruiseControl',
	    'getCursorObjectParams',
	    'getCustomAimCoef',
	    'getCustomSoundController',
	    'getCustomSoundControllerCount',
	    'getDammage',
	    'getDebriefingText',
	    'getDescription',
	    'getDir',
	    'getDirVisual',
	    'getDiverState',
	    'getDLCAssetsUsage',
	    'getDLCAssetsUsageByName',
	    'getDLCs',
	    'getDLCUsageTime',
	    'getEditorCamera',
	    'getEditorMode',
	    'getEditorObjectScope',
	    'getElevationOffset',
	    'getEngineTargetRPMRTD',
	    'getEnv3DSoundController',
	    'getEnvSoundController',
	    'getEventHandlerInfo',
	    'getFatigue',
	    'getFieldManualStartPage',
	    'getForcedFlagTexture',
	    'getForcedSpeed',
	    'getFriend',
	    'getFSMVariable',
	    'getFuelCargo',
	    'getGraphValues',
	    'getGroupIcon',
	    'getGroupIconParams',
	    'getGroupIcons',
	    'getHideFrom',
	    'getHit',
	    'getHitIndex',
	    'getHitPointDamage',
	    'getItemCargo',
	    'getLighting',
	    'getLightingAt',
	    'getLoadedModsInfo',
	    'getMagazineCargo',
	    'getMarkerColor',
	    'getMarkerPos',
	    'getMarkerSize',
	    'getMarkerType',
	    'getMass',
	    'getMissionConfig',
	    'getMissionConfigValue',
	    'getMissionDLCs',
	    'getMissionLayerEntities',
	    'getMissionLayers',
	    'getMissionPath',
	    'getModelInfo',
	    'getMousePosition',
	    'getMusicPlayedTime',
	    'getNumber',
	    'getObjectArgument',
	    'getObjectChildren',
	    'getObjectDLC',
	    'getObjectFOV',
	    'getObjectID',
	    'getObjectMaterials',
	    'getObjectProxy',
	    'getObjectScale',
	    'getObjectTextures',
	    'getObjectType',
	    'getObjectViewDistance',
	    'getOpticsMode',
	    'getOrDefault',
	    'getOrDefaultCall',
	    'getOxygenRemaining',
	    'getPersonUsedDLCs',
	    'getPilotCameraDirection',
	    'getPilotCameraPosition',
	    'getPilotCameraRotation',
	    'getPilotCameraTarget',
	    'getPiPViewDistance',
	    'getPlateNumber',
	    'getPlayerChannel',
	    'getPlayerID',
	    'getPlayerScores',
	    'getPlayerUID',
	    'getPlayerVoNVolume',
	    'getPos',
	    'getPosASL',
	    'getPosASLVisual',
	    'getPosASLW',
	    'getPosATL',
	    'getPosATLVisual',
	    'getPosVisual',
	    'getPosWorld',
	    'getPosWorldVisual',
	    'getPylonMagazines',
	    'getRelDir',
	    'getRelPos',
	    'getRemoteSensorsDisabled',
	    'getRepairCargo',
	    'getResolution',
	    'getRoadInfo',
	    'getRotorBrakeRTD',
	    'getSensorTargets',
	    'getSensorThreats',
	    'getShadowDistance',
	    'getShotParents',
	    'getSlingLoad',
	    'getSoundController',
	    'getSoundControllerResult',
	    'getSpeed',
	    'getStamina',
	    'getStatValue',
	    'getSteamFriendsServers',
	    'getSubtitleOptions',
	    'getSuppression',
	    'getTerrainGrid',
	    'getTerrainHeight',
	    'getTerrainHeightASL',
	    'getTerrainInfo',
	    'getText',
	    'getTextRaw',
	    'getTextureInfo',
	    'getTextWidth',
	    'getTiParameters',
	    'getTotalDLCUsageTime',
	    'getTrimOffsetRTD',
	    'getTurretLimits',
	    'getTurretOpticsMode',
	    'getUnitFreefallInfo',
	    'getUnitLoadout',
	    'getUnitTrait',
	    'getUnloadInCombat',
	    'getUserInfo',
	    'getUserMFDText',
	    'getUserMFDValue',
	    'getVariable',
	    'getVehicleCargo',
	    'getVehicleTiPars',
	    'getWeaponCargo',
	    'getWeaponSway',
	    'getWingsOrientationRTD',
	    'getWingsPositionRTD',
	    'getWPPos',
	    'glanceAt',
	    'globalChat',
	    'globalRadio',
	    'goggles',
	    'goto',
	    'group',
	    'groupChat',
	    'groupFromNetId',
	    'groupIconSelectable',
	    'groupIconsVisible',
	    'groupID',
	    'groupOwner',
	    'groupRadio',
	    'groups',
	    'groupSelectedUnits',
	    'groupSelectUnit',
	    'gunner',
	    'gusts',
	    'halt',
	    'handgunItems',
	    'handgunMagazine',
	    'handgunWeapon',
	    'handsHit',
	    'hashValue',
	    'hasInterface',
	    'hasPilotCamera',
	    'hasWeapon',
	    'hcAllGroups',
	    'hcGroupParams',
	    'hcLeader',
	    'hcRemoveAllGroups',
	    'hcRemoveGroup',
	    'hcSelected',
	    'hcSelectGroup',
	    'hcSetGroup',
	    'hcShowBar',
	    'hcShownBar',
	    'headgear',
	    'hideBody',
	    'hideObject',
	    'hideObjectGlobal',
	    'hideSelection',
	    'hint',
	    'hintC',
	    'hintCadet',
	    'hintSilent',
	    'hmd',
	    'hostMission',
	    'htmlLoad',
	    'HUDMovementLevels',
	    'humidity',
	    'image',
	    'importAllGroups',
	    'importance',
	    'in',
	    'inArea',
	    'inAreaArray',
	    'incapacitatedState',
	    'inflame',
	    'inflamed',
	    'infoPanel',
	    'infoPanelComponentEnabled',
	    'infoPanelComponents',
	    'infoPanels',
	    'inGameUISetEventHandler',
	    'inheritsFrom',
	    'initAmbientLife',
	    'inPolygon',
	    'inputAction',
	    'inputController',
	    'inputMouse',
	    'inRangeOfArtillery',
	    'insert',
	    'insertEditorObject',
	    'intersect',
	    'is3DEN',
	    'is3DENMultiplayer',
	    'is3DENPreview',
	    'isAbleToBreathe',
	    'isActionMenuVisible',
	    'isAgent',
	    'isAimPrecisionEnabled',
	    'isAllowedCrewInImmobile',
	    'isArray',
	    'isAutoHoverOn',
	    'isAutonomous',
	    'isAutoStartUpEnabledRTD',
	    'isAutotest',
	    'isAutoTrimOnRTD',
	    'isAwake',
	    'isBleeding',
	    'isBurning',
	    'isClass',
	    'isCollisionLightOn',
	    'isCopilotEnabled',
	    'isDamageAllowed',
	    'isDedicated',
	    'isDLCAvailable',
	    'isEngineOn',
	    'isEqualRef',
	    'isEqualTo',
	    'isEqualType',
	    'isEqualTypeAll',
	    'isEqualTypeAny',
	    'isEqualTypeArray',
	    'isEqualTypeParams',
	    'isFilePatchingEnabled',
	    'isFinal',
	    'isFlashlightOn',
	    'isFlatEmpty',
	    'isForcedWalk',
	    'isFormationLeader',
	    'isGameFocused',
	    'isGamePaused',
	    'isGroupDeletedWhenEmpty',
	    'isHidden',
	    'isInRemainsCollector',
	    'isInstructorFigureEnabled',
	    'isIRLaserOn',
	    'isKeyActive',
	    'isKindOf',
	    'isLaserOn',
	    'isLightOn',
	    'isLocalized',
	    'isManualFire',
	    'isMarkedForCollection',
	    'isMissionProfileNamespaceLoaded',
	    'isMultiplayer',
	    'isMultiplayerSolo',
	    'isNil',
	    'isNotEqualRef',
	    'isNotEqualTo',
	    'isNull',
	    'isNumber',
	    'isObjectHidden',
	    'isObjectRTD',
	    'isOnRoad',
	    'isPiPEnabled',
	    'isPlayer',
	    'isRealTime',
	    'isRemoteExecuted',
	    'isRemoteExecutedJIP',
	    'isSaving',
	    'isSensorTargetConfirmed',
	    'isServer',
	    'isShowing3DIcons',
	    'isSimpleObject',
	    'isSprintAllowed',
	    'isStaminaEnabled',
	    'isSteamMission',
	    'isSteamOverlayEnabled',
	    'isStreamFriendlyUIEnabled',
	    'isStressDamageEnabled',
	    'isText',
	    'isTouchingGround',
	    'isTurnedOut',
	    'isTutHintsEnabled',
	    'isUAVConnectable',
	    'isUAVConnected',
	    'isUIContext',
	    'isUniformAllowed',
	    'isVehicleCargo',
	    'isVehicleRadarOn',
	    'isVehicleSensorEnabled',
	    'isWalking',
	    'isWeaponDeployed',
	    'isWeaponRested',
	    'itemCargo',
	    'items',
	    'itemsWithMagazines',
	    'join',
	    'joinAs',
	    'joinAsSilent',
	    'joinSilent',
	    'joinString',
	    'kbAddDatabase',
	    'kbAddDatabaseTargets',
	    'kbAddTopic',
	    'kbHasTopic',
	    'kbReact',
	    'kbRemoveTopic',
	    'kbTell',
	    'kbWasSaid',
	    'keyImage',
	    'keyName',
	    'keys',
	    'knowsAbout',
	    'land',
	    'landAt',
	    'landResult',
	    'language',
	    'laserTarget',
	    'lbAdd',
	    'lbClear',
	    'lbColor',
	    'lbColorRight',
	    'lbCurSel',
	    'lbData',
	    'lbDelete',
	    'lbIsSelected',
	    'lbPicture',
	    'lbPictureRight',
	    'lbSelection',
	    'lbSetColor',
	    'lbSetColorRight',
	    'lbSetCurSel',
	    'lbSetData',
	    'lbSetPicture',
	    'lbSetPictureColor',
	    'lbSetPictureColorDisabled',
	    'lbSetPictureColorSelected',
	    'lbSetPictureRight',
	    'lbSetPictureRightColor',
	    'lbSetPictureRightColorDisabled',
	    'lbSetPictureRightColorSelected',
	    'lbSetSelectColor',
	    'lbSetSelectColorRight',
	    'lbSetSelected',
	    'lbSetText',
	    'lbSetTextRight',
	    'lbSetTooltip',
	    'lbSetValue',
	    'lbSize',
	    'lbSort',
	    'lbSortBy',
	    'lbSortByValue',
	    'lbText',
	    'lbTextRight',
	    'lbTooltip',
	    'lbValue',
	    'leader',
	    'leaderboardDeInit',
	    'leaderboardGetRows',
	    'leaderboardInit',
	    'leaderboardRequestRowsFriends',
	    'leaderboardRequestRowsGlobal',
	    'leaderboardRequestRowsGlobalAroundUser',
	    'leaderboardsRequestUploadScore',
	    'leaderboardsRequestUploadScoreKeepBest',
	    'leaderboardState',
	    'leaveVehicle',
	    'libraryCredits',
	    'libraryDisclaimers',
	    'lifeState',
	    'lightAttachObject',
	    'lightDetachObject',
	    'lightIsOn',
	    'lightnings',
	    'limitSpeed',
	    'linearConversion',
	    'lineIntersects',
	    'lineIntersectsObjs',
	    'lineIntersectsSurfaces',
	    'lineIntersectsWith',
	    'linkItem',
	    'list',
	    'listObjects',
	    'listRemoteTargets',
	    'listVehicleSensors',
	    'ln',
	    'lnbAddArray',
	    'lnbAddColumn',
	    'lnbAddRow',
	    'lnbClear',
	    'lnbColor',
	    'lnbColorRight',
	    'lnbCurSelRow',
	    'lnbData',
	    'lnbDeleteColumn',
	    'lnbDeleteRow',
	    'lnbGetColumnsPosition',
	    'lnbPicture',
	    'lnbPictureRight',
	    'lnbSetColor',
	    'lnbSetColorRight',
	    'lnbSetColumnsPos',
	    'lnbSetCurSelRow',
	    'lnbSetData',
	    'lnbSetPicture',
	    'lnbSetPictureColor',
	    'lnbSetPictureColorRight',
	    'lnbSetPictureColorSelected',
	    'lnbSetPictureColorSelectedRight',
	    'lnbSetPictureRight',
	    'lnbSetText',
	    'lnbSetTextRight',
	    'lnbSetTooltip',
	    'lnbSetValue',
	    'lnbSize',
	    'lnbSort',
	    'lnbSortBy',
	    'lnbSortByValue',
	    'lnbText',
	    'lnbTextRight',
	    'lnbValue',
	    'load',
	    'loadAbs',
	    'loadBackpack',
	    'loadConfig',
	    'loadFile',
	    'loadGame',
	    'loadIdentity',
	    'loadMagazine',
	    'loadOverlay',
	    'loadStatus',
	    'loadUniform',
	    'loadVest',
	    'localize',
	    'localNamespace',
	    'locationPosition',
	    'lock',
	    'lockCameraTo',
	    'lockCargo',
	    'lockDriver',
	    'locked',
	    'lockedCameraTo',
	    'lockedCargo',
	    'lockedDriver',
	    'lockedInventory',
	    'lockedTurret',
	    'lockIdentity',
	    'lockInventory',
	    'lockTurret',
	    'lockWp',
	    'log',
	    'logEntities',
	    'logNetwork',
	    'logNetworkTerminate',
	    'lookAt',
	    'lookAtPos',
	    'magazineCargo',
	    'magazines',
	    'magazinesAllTurrets',
	    'magazinesAmmo',
	    'magazinesAmmoCargo',
	    'magazinesAmmoFull',
	    'magazinesDetail',
	    'magazinesDetailBackpack',
	    'magazinesDetailUniform',
	    'magazinesDetailVest',
	    'magazinesTurret',
	    'magazineTurretAmmo',
	    'mapAnimAdd',
	    'mapAnimClear',
	    'mapAnimCommit',
	    'mapAnimDone',
	    'mapCenterOnCamera',
	    'mapGridPosition',
	    'markAsFinishedOnSteam',
	    'markerAlpha',
	    'markerBrush',
	    'markerChannel',
	    'markerColor',
	    'markerDir',
	    'markerPolyline',
	    'markerPos',
	    'markerShadow',
	    'markerShape',
	    'markerSize',
	    'markerText',
	    'markerType',
	    'matrixMultiply',
	    'matrixTranspose',
	    'max',
	    'maxLoad',
	    'members',
	    'menuAction',
	    'menuAdd',
	    'menuChecked',
	    'menuClear',
	    'menuCollapse',
	    'menuData',
	    'menuDelete',
	    'menuEnable',
	    'menuEnabled',
	    'menuExpand',
	    'menuHover',
	    'menuPicture',
	    'menuSetAction',
	    'menuSetCheck',
	    'menuSetData',
	    'menuSetPicture',
	    'menuSetShortcut',
	    'menuSetText',
	    'menuSetURL',
	    'menuSetValue',
	    'menuShortcut',
	    'menuShortcutText',
	    'menuSize',
	    'menuSort',
	    'menuText',
	    'menuURL',
	    'menuValue',
	    'merge',
	    'min',
	    'mineActive',
	    'mineDetectedBy',
	    'missileTarget',
	    'missileTargetPos',
	    'missionConfigFile',
	    'missionDifficulty',
	    'missionEnd',
	    'missionName',
	    'missionNameSource',
	    'missionNamespace',
	    'missionProfileNamespace',
	    'missionStart',
	    'missionVersion',
	    'mod',
	    'modelToWorld',
	    'modelToWorldVisual',
	    'modelToWorldVisualWorld',
	    'modelToWorldWorld',
	    'modParams',
	    'moonIntensity',
	    'moonPhase',
	    'morale',
	    'move',
	    'move3DENCamera',
	    'moveInAny',
	    'moveInCargo',
	    'moveInCommander',
	    'moveInDriver',
	    'moveInGunner',
	    'moveInTurret',
	    'moveObjectToEnd',
	    'moveOut',
	    'moveTime',
	    'moveTo',
	    'moveToCompleted',
	    'moveToFailed',
	    'musicVolume',
	    'name',
	    'namedProperties',
	    'nameSound',
	    'nearEntities',
	    'nearestBuilding',
	    'nearestLocation',
	    'nearestLocations',
	    'nearestLocationWithDubbing',
	    'nearestMines',
	    'nearestObject',
	    'nearestObjects',
	    'nearestTerrainObjects',
	    'nearObjects',
	    'nearObjectsReady',
	    'nearRoads',
	    'nearSupplies',
	    'nearTargets',
	    'needReload',
	    'needService',
	    'netId',
	    'netObjNull',
	    'newOverlay',
	    'nextMenuItemIndex',
	    'nextWeatherChange',
	    'nMenuItems',
	    'not',
	    'numberOfEnginesRTD',
	    'numberToDate',
	    'objectCurators',
	    'objectFromNetId',
	    'objectParent',
	    'objStatus',
	    'onBriefingGroup',
	    'onBriefingNotes',
	    'onBriefingPlan',
	    'onBriefingTeamSwitch',
	    'onCommandModeChanged',
	    'onDoubleClick',
	    'onEachFrame',
	    'onGroupIconClick',
	    'onGroupIconOverEnter',
	    'onGroupIconOverLeave',
	    'onHCGroupSelectionChanged',
	    'onMapSingleClick',
	    'onPlayerConnected',
	    'onPlayerDisconnected',
	    'onPreloadFinished',
	    'onPreloadStarted',
	    'onShowNewObject',
	    'onTeamSwitch',
	    'openCuratorInterface',
	    'openDLCPage',
	    'openGPS',
	    'openMap',
	    'openSteamApp',
	    'openYoutubeVideo',
	    'or',
	    'orderGetIn',
	    'overcast',
	    'overcastForecast',
	    'owner',
	    'param',
	    'params',
	    'parseNumber',
	    'parseSimpleArray',
	    'parseText',
	    'parsingNamespace',
	    'particlesQuality',
	    'periscopeElevation',
	    'pickWeaponPool',
	    'pitch',
	    'pixelGrid',
	    'pixelGridBase',
	    'pixelGridNoUIScale',
	    'pixelH',
	    'pixelW',
	    'playableSlotsNumber',
	    'playableUnits',
	    'playAction',
	    'playActionNow',
	    'player',
	    'playerRespawnTime',
	    'playerSide',
	    'playersNumber',
	    'playGesture',
	    'playMission',
	    'playMove',
	    'playMoveNow',
	    'playMusic',
	    'playScriptedMission',
	    'playSound',
	    'playSound3D',
	    'playSoundUI',
	    'pose',
	    'position',
	    'positionCameraToWorld',
	    'posScreenToWorld',
	    'posWorldToScreen',
	    'ppEffectAdjust',
	    'ppEffectCommit',
	    'ppEffectCommitted',
	    'ppEffectCreate',
	    'ppEffectDestroy',
	    'ppEffectEnable',
	    'ppEffectEnabled',
	    'ppEffectForceInNVG',
	    'precision',
	    'preloadCamera',
	    'preloadObject',
	    'preloadSound',
	    'preloadTitleObj',
	    'preloadTitleRsc',
	    'preprocessFile',
	    'preprocessFileLineNumbers',
	    'primaryWeapon',
	    'primaryWeaponItems',
	    'primaryWeaponMagazine',
	    'priority',
	    'processDiaryLink',
	    'productVersion',
	    'profileName',
	    'profileNamespace',
	    'profileNameSteam',
	    'progressLoadingScreen',
	    'progressPosition',
	    'progressSetPosition',
	    'publicVariable',
	    'publicVariableClient',
	    'publicVariableServer',
	    'pushBack',
	    'pushBackUnique',
	    'putWeaponPool',
	    'queryItemsPool',
	    'queryMagazinePool',
	    'queryWeaponPool',
	    'rad',
	    'radioChannelAdd',
	    'radioChannelCreate',
	    'radioChannelInfo',
	    'radioChannelRemove',
	    'radioChannelSetCallSign',
	    'radioChannelSetLabel',
	    'radioEnabled',
	    'radioVolume',
	    'rain',
	    'rainbow',
	    'rainParams',
	    'random',
	    'rank',
	    'rankId',
	    'rating',
	    'rectangular',
	    'regexFind',
	    'regexMatch',
	    'regexReplace',
	    'registeredTasks',
	    'registerTask',
	    'reload',
	    'reloadEnabled',
	    'remoteControl',
	    'remoteExec',
	    'remoteExecCall',
	    'remoteExecutedOwner',
	    'remove3DENConnection',
	    'remove3DENEventHandler',
	    'remove3DENLayer',
	    'removeAction',
	    'removeAll3DENEventHandlers',
	    'removeAllActions',
	    'removeAllAssignedItems',
	    'removeAllBinocularItems',
	    'removeAllContainers',
	    'removeAllCuratorAddons',
	    'removeAllCuratorCameraAreas',
	    'removeAllCuratorEditingAreas',
	    'removeAllEventHandlers',
	    'removeAllHandgunItems',
	    'removeAllItems',
	    'removeAllItemsWithMagazines',
	    'removeAllMissionEventHandlers',
	    'removeAllMPEventHandlers',
	    'removeAllMusicEventHandlers',
	    'removeAllOwnedMines',
	    'removeAllPrimaryWeaponItems',
	    'removeAllSecondaryWeaponItems',
	    'removeAllUserActionEventHandlers',
	    'removeAllWeapons',
	    'removeBackpack',
	    'removeBackpackGlobal',
	    'removeBinocularItem',
	    'removeCuratorAddons',
	    'removeCuratorCameraArea',
	    'removeCuratorEditableObjects',
	    'removeCuratorEditingArea',
	    'removeDiaryRecord',
	    'removeDiarySubject',
	    'removeDrawIcon',
	    'removeDrawLinks',
	    'removeEventHandler',
	    'removeFromRemainsCollector',
	    'removeGoggles',
	    'removeGroupIcon',
	    'removeHandgunItem',
	    'removeHeadgear',
	    'removeItem',
	    'removeItemFromBackpack',
	    'removeItemFromUniform',
	    'removeItemFromVest',
	    'removeItems',
	    'removeMagazine',
	    'removeMagazineGlobal',
	    'removeMagazines',
	    'removeMagazinesTurret',
	    'removeMagazineTurret',
	    'removeMenuItem',
	    'removeMissionEventHandler',
	    'removeMPEventHandler',
	    'removeMusicEventHandler',
	    'removeOwnedMine',
	    'removePrimaryWeaponItem',
	    'removeSecondaryWeaponItem',
	    'removeSimpleTask',
	    'removeSwitchableUnit',
	    'removeTeamMember',
	    'removeUniform',
	    'removeUserActionEventHandler',
	    'removeVest',
	    'removeWeapon',
	    'removeWeaponAttachmentCargo',
	    'removeWeaponCargo',
	    'removeWeaponGlobal',
	    'removeWeaponTurret',
	    'reportRemoteTarget',
	    'requiredVersion',
	    'resetCamShake',
	    'resetSubgroupDirection',
	    'resize',
	    'resources',
	    'respawnVehicle',
	    'restartEditorCamera',
	    'reveal',
	    'revealMine',
	    'reverse',
	    'reversedMouseY',
	    'roadAt',
	    'roadsConnectedTo',
	    'roleDescription',
	    'ropeAttachedObjects',
	    'ropeAttachedTo',
	    'ropeAttachEnabled',
	    'ropeAttachTo',
	    'ropeCreate',
	    'ropeCut',
	    'ropeDestroy',
	    'ropeDetach',
	    'ropeEndPosition',
	    'ropeLength',
	    'ropes',
	    'ropesAttachedTo',
	    'ropeSegments',
	    'ropeUnwind',
	    'ropeUnwound',
	    'rotorsForcesRTD',
	    'rotorsRpmRTD',
	    'round',
	    'runInitScript',
	    'safeZoneH',
	    'safeZoneW',
	    'safeZoneWAbs',
	    'safeZoneX',
	    'safeZoneXAbs',
	    'safeZoneY',
	    'save3DENInventory',
	    'saveGame',
	    'saveIdentity',
	    'saveJoysticks',
	    'saveMissionProfileNamespace',
	    'saveOverlay',
	    'saveProfileNamespace',
	    'saveStatus',
	    'saveVar',
	    'savingEnabled',
	    'say',
	    'say2D',
	    'say3D',
	    'scopeName',
	    'score',
	    'scoreSide',
	    'screenshot',
	    'screenToWorld',
	    'scriptDone',
	    'scriptName',
	    'scudState',
	    'secondaryWeapon',
	    'secondaryWeaponItems',
	    'secondaryWeaponMagazine',
	    'select',
	    'selectBestPlaces',
	    'selectDiarySubject',
	    'selectedEditorObjects',
	    'selectEditorObject',
	    'selectionNames',
	    'selectionPosition',
	    'selectionVectorDirAndUp',
	    'selectLeader',
	    'selectMax',
	    'selectMin',
	    'selectNoPlayer',
	    'selectPlayer',
	    'selectRandom',
	    'selectRandomWeighted',
	    'selectWeapon',
	    'selectWeaponTurret',
	    'sendAUMessage',
	    'sendSimpleCommand',
	    'sendTask',
	    'sendTaskResult',
	    'sendUDPMessage',
	    'sentencesEnabled',
	    'serverCommand',
	    'serverCommandAvailable',
	    'serverCommandExecutable',
	    'serverName',
	    'serverNamespace',
	    'serverTime',
	    'set',
	    'set3DENAttribute',
	    'set3DENAttributes',
	    'set3DENGrid',
	    'set3DENIconsVisible',
	    'set3DENLayer',
	    'set3DENLinesVisible',
	    'set3DENLogicType',
	    'set3DENMissionAttribute',
	    'set3DENMissionAttributes',
	    'set3DENModelsVisible',
	    'set3DENObjectType',
	    'set3DENSelected',
	    'setAccTime',
	    'setActualCollectiveRTD',
	    'setAirplaneThrottle',
	    'setAirportSide',
	    'setAmmo',
	    'setAmmoCargo',
	    'setAmmoOnPylon',
	    'setAnimSpeedCoef',
	    'setAperture',
	    'setApertureNew',
	    'setArmoryPoints',
	    'setAttributes',
	    'setAutonomous',
	    'setBehaviour',
	    'setBehaviourStrong',
	    'setBleedingRemaining',
	    'setBrakesRTD',
	    'setCameraInterest',
	    'setCamShakeDefParams',
	    'setCamShakeParams',
	    'setCamUseTi',
	    'setCaptive',
	    'setCenterOfMass',
	    'setCollisionLight',
	    'setCombatBehaviour',
	    'setCombatMode',
	    'setCompassOscillation',
	    'setConvoySeparation',
	    'setCruiseControl',
	    'setCuratorCameraAreaCeiling',
	    'setCuratorCoef',
	    'setCuratorEditingAreaType',
	    'setCuratorWaypointCost',
	    'setCurrentChannel',
	    'setCurrentTask',
	    'setCurrentWaypoint',
	    'setCustomAimCoef',
	    'SetCustomMissionData',
	    'setCustomSoundController',
	    'setCustomWeightRTD',
	    'setDamage',
	    'setDammage',
	    'setDate',
	    'setDebriefingText',
	    'setDefaultCamera',
	    'setDestination',
	    'setDetailMapBlendPars',
	    'setDiaryRecordText',
	    'setDiarySubjectPicture',
	    'setDir',
	    'setDirection',
	    'setDrawIcon',
	    'setDriveOnPath',
	    'setDropInterval',
	    'setDynamicSimulationDistance',
	    'setDynamicSimulationDistanceCoef',
	    'setEditorMode',
	    'setEditorObjectScope',
	    'setEffectCondition',
	    'setEffectiveCommander',
	    'setEngineRpmRTD',
	    'setFace',
	    'setFaceanimation',
	    'setFatigue',
	    'setFeatureType',
	    'setFlagAnimationPhase',
	    'setFlagOwner',
	    'setFlagSide',
	    'setFlagTexture',
	    'setFog',
	    'setForceGeneratorRTD',
	    'setFormation',
	    'setFormationTask',
	    'setFormDir',
	    'setFriend',
	    'setFromEditor',
	    'setFSMVariable',
	    'setFuel',
	    'setFuelCargo',
	    'setGroupIcon',
	    'setGroupIconParams',
	    'setGroupIconsSelectable',
	    'setGroupIconsVisible',
	    'setGroupid',
	    'setGroupIdGlobal',
	    'setGroupOwner',
	    'setGusts',
	    'setHideBehind',
	    'setHit',
	    'setHitIndex',
	    'setHitPointDamage',
	    'setHorizonParallaxCoef',
	    'setHUDMovementLevels',
	    'setHumidity',
	    'setIdentity',
	    'setImportance',
	    'setInfoPanel',
	    'setLeader',
	    'setLightAmbient',
	    'setLightAttenuation',
	    'setLightBrightness',
	    'setLightColor',
	    'setLightConePars',
	    'setLightDayLight',
	    'setLightFlareMaxDistance',
	    'setLightFlareSize',
	    'setLightIntensity',
	    'setLightIR',
	    'setLightnings',
	    'setLightUseFlare',
	    'setLightVolumeShape',
	    'setLocalWindParams',
	    'setMagazineTurretAmmo',
	    'setMarkerAlpha',
	    'setMarkerAlphaLocal',
	    'setMarkerBrush',
	    'setMarkerBrushLocal',
	    'setMarkerColor',
	    'setMarkerColorLocal',
	    'setMarkerDir',
	    'setMarkerDirLocal',
	    'setMarkerPolyline',
	    'setMarkerPolylineLocal',
	    'setMarkerPos',
	    'setMarkerPosLocal',
	    'setMarkerShadow',
	    'setMarkerShadowLocal',
	    'setMarkerShape',
	    'setMarkerShapeLocal',
	    'setMarkerSize',
	    'setMarkerSizeLocal',
	    'setMarkerText',
	    'setMarkerTextLocal',
	    'setMarkerType',
	    'setMarkerTypeLocal',
	    'setMass',
	    'setMaxLoad',
	    'setMimic',
	    'setMissileTarget',
	    'setMissileTargetPos',
	    'setMousePosition',
	    'setMusicEffect',
	    'setMusicEventHandler',
	    'setName',
	    'setNameSound',
	    'setObjectArguments',
	    'setObjectMaterial',
	    'setObjectMaterialGlobal',
	    'setObjectProxy',
	    'setObjectScale',
	    'setObjectTexture',
	    'setObjectTextureGlobal',
	    'setObjectViewDistance',
	    'setOpticsMode',
	    'setOvercast',
	    'setOwner',
	    'setOxygenRemaining',
	    'setParticleCircle',
	    'setParticleClass',
	    'setParticleFire',
	    'setParticleParams',
	    'setParticleRandom',
	    'setPilotCameraDirection',
	    'setPilotCameraRotation',
	    'setPilotCameraTarget',
	    'setPilotLight',
	    'setPiPEffect',
	    'setPiPViewDistance',
	    'setPitch',
	    'setPlateNumber',
	    'setPlayable',
	    'setPlayerRespawnTime',
	    'setPlayerVoNVolume',
	    'setPos',
	    'setPosASL',
	    'setPosASL2',
	    'setPosASLW',
	    'setPosATL',
	    'setPosition',
	    'setPosWorld',
	    'setPylonLoadout',
	    'setPylonsPriority',
	    'setRadioMsg',
	    'setRain',
	    'setRainbow',
	    'setRandomLip',
	    'setRank',
	    'setRectangular',
	    'setRepairCargo',
	    'setRotorBrakeRTD',
	    'setShadowDistance',
	    'setShotParents',
	    'setSide',
	    'setSimpleTaskAlwaysVisible',
	    'setSimpleTaskCustomData',
	    'setSimpleTaskDescription',
	    'setSimpleTaskDestination',
	    'setSimpleTaskTarget',
	    'setSimpleTaskType',
	    'setSimulWeatherLayers',
	    'setSize',
	    'setSkill',
	    'setSlingLoad',
	    'setSoundEffect',
	    'setSpeaker',
	    'setSpeech',
	    'setSpeedMode',
	    'setStamina',
	    'setStaminaScheme',
	    'setStatValue',
	    'setSuppression',
	    'setSystemOfUnits',
	    'setTargetAge',
	    'setTaskMarkerOffset',
	    'setTaskResult',
	    'setTaskState',
	    'setTerrainGrid',
	    'setTerrainHeight',
	    'setText',
	    'setTimeMultiplier',
	    'setTiParameter',
	    'setTitleEffect',
	    'setTowParent',
	    'setTrafficDensity',
	    'setTrafficDistance',
	    'setTrafficGap',
	    'setTrafficSpeed',
	    'setTriggerActivation',
	    'setTriggerArea',
	    'setTriggerInterval',
	    'setTriggerStatements',
	    'setTriggerText',
	    'setTriggerTimeout',
	    'setTriggerType',
	    'setTurretLimits',
	    'setTurretOpticsMode',
	    'setType',
	    'setUnconscious',
	    'setUnitAbility',
	    'setUnitCombatMode',
	    'setUnitFreefallHeight',
	    'setUnitLoadout',
	    'setUnitPos',
	    'setUnitPosWeak',
	    'setUnitRank',
	    'setUnitRecoilCoefficient',
	    'setUnitTrait',
	    'setUnloadInCombat',
	    'setUserActionText',
	    'setUserMFDText',
	    'setUserMFDValue',
	    'setVariable',
	    'setVectorDir',
	    'setVectorDirAndUp',
	    'setVectorUp',
	    'setVehicleAmmo',
	    'setVehicleAmmoDef',
	    'setVehicleArmor',
	    'setVehicleCargo',
	    'setVehicleId',
	    'setVehicleLock',
	    'setVehiclePosition',
	    'setVehicleRadar',
	    'setVehicleReceiveRemoteTargets',
	    'setVehicleReportOwnPosition',
	    'setVehicleReportRemoteTargets',
	    'setVehicleTiPars',
	    'setVehicleVarName',
	    'setVelocity',
	    'setVelocityModelSpace',
	    'setVelocityTransformation',
	    'setViewDistance',
	    'setVisibleIfTreeCollapsed',
	    'setWantedRPMRTD',
	    'setWaves',
	    'setWaypointBehaviour',
	    'setWaypointCombatMode',
	    'setWaypointCompletionRadius',
	    'setWaypointDescription',
	    'setWaypointForceBehaviour',
	    'setWaypointFormation',
	    'setWaypointHousePosition',
	    'setWaypointLoiterAltitude',
	    'setWaypointLoiterRadius',
	    'setWaypointLoiterType',
	    'setWaypointName',
	    'setWaypointPosition',
	    'setWaypointScript',
	    'setWaypointSpeed',
	    'setWaypointStatements',
	    'setWaypointTimeout',
	    'setWaypointType',
	    'setWaypointVisible',
	    'setWeaponReloadingTime',
	    'setWeaponZeroing',
	    'setWind',
	    'setWindDir',
	    'setWindForce',
	    'setWindStr',
	    'setWingForceScaleRTD',
	    'setWPPos',
	    'show3DIcons',
	    'showChat',
	    'showCinemaBorder',
	    'showCommandingMenu',
	    'showCompass',
	    'showCuratorCompass',
	    'showGps',
	    'showHUD',
	    'showLegend',
	    'showMap',
	    'shownArtilleryComputer',
	    'shownChat',
	    'shownCompass',
	    'shownCuratorCompass',
	    'showNewEditorObject',
	    'shownGps',
	    'shownHUD',
	    'shownMap',
	    'shownPad',
	    'shownRadio',
	    'shownScoretable',
	    'shownSubtitles',
	    'shownUAVFeed',
	    'shownWarrant',
	    'shownWatch',
	    'showPad',
	    'showRadio',
	    'showScoretable',
	    'showSubtitles',
	    'showUAVFeed',
	    'showWarrant',
	    'showWatch',
	    'showWaypoint',
	    'showWaypoints',
	    'side',
	    'sideChat',
	    'sideRadio',
	    'simpleTasks',
	    'simulationEnabled',
	    'simulCloudDensity',
	    'simulCloudOcclusion',
	    'simulInClouds',
	    'simulWeatherSync',
	    'sin',
	    'size',
	    'sizeOf',
	    'skill',
	    'skillFinal',
	    'skipTime',
	    'sleep',
	    'sliderPosition',
	    'sliderRange',
	    'sliderSetPosition',
	    'sliderSetRange',
	    'sliderSetSpeed',
	    'sliderSpeed',
	    'slingLoadAssistantShown',
	    'soldierMagazines',
	    'someAmmo',
	    'sort',
	    'soundVolume',
	    'spawn',
	    'speaker',
	    'speechVolume',
	    'speed',
	    'speedMode',
	    'splitString',
	    'sqrt',
	    'squadParams',
	    'stance',
	    'startLoadingScreen',
	    'stop',
	    'stopEngineRTD',
	    'stopped',
	    'str',
	    'sunOrMoon',
	    'supportInfo',
	    'suppressFor',
	    'surfaceIsWater',
	    'surfaceNormal',
	    'surfaceTexture',
	    'surfaceType',
	    'swimInDepth',
	    'switchableUnits',
	    'switchAction',
	    'switchCamera',
	    'switchGesture',
	    'switchLight',
	    'switchMove',
	    'synchronizedObjects',
	    'synchronizedTriggers',
	    'synchronizedWaypoints',
	    'synchronizeObjectsAdd',
	    'synchronizeObjectsRemove',
	    'synchronizeTrigger',
	    'synchronizeWaypoint',
	    'systemChat',
	    'systemOfUnits',
	    'systemTime',
	    'systemTimeUTC',
	    'tan',
	    'targetKnowledge',
	    'targets',
	    'targetsAggregate',
	    'targetsQuery',
	    'taskAlwaysVisible',
	    'taskChildren',
	    'taskCompleted',
	    'taskCustomData',
	    'taskDescription',
	    'taskDestination',
	    'taskHint',
	    'taskMarkerOffset',
	    'taskName',
	    'taskParent',
	    'taskResult',
	    'taskState',
	    'taskType',
	    'teamMember',
	    'teamName',
	    'teams',
	    'teamSwitch',
	    'teamSwitchEnabled',
	    'teamType',
	    'terminate',
	    'terrainIntersect',
	    'terrainIntersectASL',
	    'terrainIntersectAtASL',
	    'text',
	    'textLog',
	    'textLogFormat',
	    'tg',
	    'time',
	    'timeMultiplier',
	    'titleCut',
	    'titleFadeOut',
	    'titleObj',
	    'titleRsc',
	    'titleText',
	    'toArray',
	    'toFixed',
	    'toLower',
	    'toLowerANSI',
	    'toString',
	    'toUpper',
	    'toUpperANSI',
	    'triggerActivated',
	    'triggerActivation',
	    'triggerAmmo',
	    'triggerArea',
	    'triggerAttachedVehicle',
	    'triggerAttachObject',
	    'triggerAttachVehicle',
	    'triggerDynamicSimulation',
	    'triggerInterval',
	    'triggerStatements',
	    'triggerText',
	    'triggerTimeout',
	    'triggerTimeoutCurrent',
	    'triggerType',
	    'trim',
	    'turretLocal',
	    'turretOwner',
	    'turretUnit',
	    'tvAdd',
	    'tvClear',
	    'tvCollapse',
	    'tvCollapseAll',
	    'tvCount',
	    'tvCurSel',
	    'tvData',
	    'tvDelete',
	    'tvExpand',
	    'tvExpandAll',
	    'tvIsSelected',
	    'tvPicture',
	    'tvPictureRight',
	    'tvSelection',
	    'tvSetColor',
	    'tvSetCurSel',
	    'tvSetData',
	    'tvSetPicture',
	    'tvSetPictureColor',
	    'tvSetPictureColorDisabled',
	    'tvSetPictureColorSelected',
	    'tvSetPictureRight',
	    'tvSetPictureRightColor',
	    'tvSetPictureRightColorDisabled',
	    'tvSetPictureRightColorSelected',
	    'tvSetSelectColor',
	    'tvSetSelected',
	    'tvSetText',
	    'tvSetTooltip',
	    'tvSetValue',
	    'tvSort',
	    'tvSortAll',
	    'tvSortByValue',
	    'tvSortByValueAll',
	    'tvText',
	    'tvTooltip',
	    'tvValue',
	    'type',
	    'typeName',
	    'typeOf',
	    'UAVControl',
	    'uiNamespace',
	    'uiSleep',
	    'unassignCurator',
	    'unassignItem',
	    'unassignTeam',
	    'unassignVehicle',
	    'underwater',
	    'uniform',
	    'uniformContainer',
	    'uniformItems',
	    'uniformMagazines',
	    'uniqueUnitItems',
	    'unitAddons',
	    'unitAimPosition',
	    'unitAimPositionVisual',
	    'unitBackpack',
	    'unitCombatMode',
	    'unitIsUAV',
	    'unitPos',
	    'unitReady',
	    'unitRecoilCoefficient',
	    'units',
	    'unitsBelowHeight',
	    'unitTurret',
	    'unlinkItem',
	    'unlockAchievement',
	    'unregisterTask',
	    'updateDrawIcon',
	    'updateMenuItem',
	    'updateObjectTree',
	    'useAIOperMapObstructionTest',
	    'useAISteeringComponent',
	    'useAudioTimeForMoves',
	    'userInputDisabled',
	    'values',
	    'vectorAdd',
	    'vectorCos',
	    'vectorCrossProduct',
	    'vectorDiff',
	    'vectorDir',
	    'vectorDirVisual',
	    'vectorDistance',
	    'vectorDistanceSqr',
	    'vectorDotProduct',
	    'vectorFromTo',
	    'vectorLinearConversion',
	    'vectorMagnitude',
	    'vectorMagnitudeSqr',
	    'vectorModelToWorld',
	    'vectorModelToWorldVisual',
	    'vectorMultiply',
	    'vectorNormalized',
	    'vectorUp',
	    'vectorUpVisual',
	    'vectorWorldToModel',
	    'vectorWorldToModelVisual',
	    'vehicle',
	    'vehicleCargoEnabled',
	    'vehicleChat',
	    'vehicleMoveInfo',
	    'vehicleRadio',
	    'vehicleReceiveRemoteTargets',
	    'vehicleReportOwnPosition',
	    'vehicleReportRemoteTargets',
	    'vehicles',
	    'vehicleVarName',
	    'velocity',
	    'velocityModelSpace',
	    'verifySignature',
	    'vest',
	    'vestContainer',
	    'vestItems',
	    'vestMagazines',
	    'viewDistance',
	    'visibleCompass',
	    'visibleGps',
	    'visibleMap',
	    'visiblePosition',
	    'visiblePositionASL',
	    'visibleScoretable',
	    'visibleWatch',
	    'waves',
	    'waypointAttachedObject',
	    'waypointAttachedVehicle',
	    'waypointAttachObject',
	    'waypointAttachVehicle',
	    'waypointBehaviour',
	    'waypointCombatMode',
	    'waypointCompletionRadius',
	    'waypointDescription',
	    'waypointForceBehaviour',
	    'waypointFormation',
	    'waypointHousePosition',
	    'waypointLoiterAltitude',
	    'waypointLoiterRadius',
	    'waypointLoiterType',
	    'waypointName',
	    'waypointPosition',
	    'waypoints',
	    'waypointScript',
	    'waypointsEnabledUAV',
	    'waypointShow',
	    'waypointSpeed',
	    'waypointStatements',
	    'waypointTimeout',
	    'waypointTimeoutCurrent',
	    'waypointType',
	    'waypointVisible',
	    'weaponAccessories',
	    'weaponAccessoriesCargo',
	    'weaponCargo',
	    'weaponDirection',
	    'weaponInertia',
	    'weaponLowered',
	    'weaponReloadingTime',
	    'weapons',
	    'weaponsInfo',
	    'weaponsItems',
	    'weaponsItemsCargo',
	    'weaponState',
	    'weaponsTurret',
	    'weightRTD',
	    'WFSideText',
	    'wind',
	    'windDir',
	    'windRTD',
	    'windStr',
	    'wingsForcesRTD',
	    'worldName',
	    'worldSize',
	    'worldToModel',
	    'worldToModelVisual',
	    'worldToScreen'
	  ];
	  
	  // list of keywords from:
	  // https://community.bistudio.com/wiki/PreProcessor_Commands
	  const PREPROCESSOR = {
	    className: 'meta',
	    begin: /#\s*[a-z]+\b/,
	    end: /$/,
	    keywords: 'define undef ifdef ifndef else endif include if',
	    contains: [
	      {
	        begin: /\\\n/,
	        relevance: 0
	      },
	      hljs.inherit(STRINGS, { className: 'string' }),
	      {
	        begin: /<[^\n>]*>/,
	        end: /$/,
	        illegal: '\\n'
	      },
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE
	    ]
	  };
	  
	  return {
	    name: 'SQF',
	    case_insensitive: true,
	    keywords: {
	      keyword: KEYWORDS,
	      built_in: BUILT_IN,
	      literal: LITERAL
	    },
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.NUMBER_MODE,
	      VARIABLE,
	      FUNCTION,
	      STRINGS,
	      PREPROCESSOR
	    ],
	    illegal: [
	      //$ is only valid when used with Hex numbers (e.g. $FF)
	      /\$[^a-fA-F0-9]/, 
	      /\w\$/,
	      /\?/,      //There's no ? in SQF
	      /@/,       //There's no @ in SQF
	      // Brute-force-fixing the build error. See https://github.com/highlightjs/highlight.js/pull/3193#issuecomment-843088729
	      / \| /,
	      // . is only used in numbers
	      /[a-zA-Z_]\./,
	      /\:\=/,
	      /\[\:/
	    ]
	  };
	}

	sqf_1 = sqf;
	return sqf_1;
}

/*
 Language: SQL
 Website: https://en.wikipedia.org/wiki/SQL
 Category: common, database
 */

var sql_1;
var hasRequiredSql;

function requireSql () {
	if (hasRequiredSql) return sql_1;
	hasRequiredSql = 1;
	/*

	Goals:

	SQL is intended to highlight basic/common SQL keywords and expressions

	- If pretty much every single SQL server includes supports, then it's a canidate.
	- It is NOT intended to include tons of vendor specific keywords (Oracle, MySQL,
	  PostgreSQL) although the list of data types is purposely a bit more expansive.
	- For more specific SQL grammars please see:
	  - PostgreSQL and PL/pgSQL - core
	  - T-SQL - https://github.com/highlightjs/highlightjs-tsql
	  - sql_more (core)

	 */

	function sql(hljs) {
	  const regex = hljs.regex;
	  const COMMENT_MODE = hljs.COMMENT('--', '$');
	  const STRING = {
	    className: 'string',
	    variants: [
	      {
	        begin: /'/,
	        end: /'/,
	        contains: [ { begin: /''/ } ]
	      }
	    ]
	  };
	  const QUOTED_IDENTIFIER = {
	    begin: /"/,
	    end: /"/,
	    contains: [ { begin: /""/ } ]
	  };

	  const LITERALS = [
	    "true",
	    "false",
	    // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.
	    // "null",
	    "unknown"
	  ];

	  const MULTI_WORD_TYPES = [
	    "double precision",
	    "large object",
	    "with timezone",
	    "without timezone"
	  ];

	  const TYPES = [
	    'bigint',
	    'binary',
	    'blob',
	    'boolean',
	    'char',
	    'character',
	    'clob',
	    'date',
	    'dec',
	    'decfloat',
	    'decimal',
	    'float',
	    'int',
	    'integer',
	    'interval',
	    'nchar',
	    'nclob',
	    'national',
	    'numeric',
	    'real',
	    'row',
	    'smallint',
	    'time',
	    'timestamp',
	    'varchar',
	    'varying', // modifier (character varying)
	    'varbinary'
	  ];

	  const NON_RESERVED_WORDS = [
	    "add",
	    "asc",
	    "collation",
	    "desc",
	    "final",
	    "first",
	    "last",
	    "view"
	  ];

	  // https://jakewheat.github.io/sql-overview/sql-2016-foundation-grammar.html#reserved-word
	  const RESERVED_WORDS = [
	    "abs",
	    "acos",
	    "all",
	    "allocate",
	    "alter",
	    "and",
	    "any",
	    "are",
	    "array",
	    "array_agg",
	    "array_max_cardinality",
	    "as",
	    "asensitive",
	    "asin",
	    "asymmetric",
	    "at",
	    "atan",
	    "atomic",
	    "authorization",
	    "avg",
	    "begin",
	    "begin_frame",
	    "begin_partition",
	    "between",
	    "bigint",
	    "binary",
	    "blob",
	    "boolean",
	    "both",
	    "by",
	    "call",
	    "called",
	    "cardinality",
	    "cascaded",
	    "case",
	    "cast",
	    "ceil",
	    "ceiling",
	    "char",
	    "char_length",
	    "character",
	    "character_length",
	    "check",
	    "classifier",
	    "clob",
	    "close",
	    "coalesce",
	    "collate",
	    "collect",
	    "column",
	    "commit",
	    "condition",
	    "connect",
	    "constraint",
	    "contains",
	    "convert",
	    "copy",
	    "corr",
	    "corresponding",
	    "cos",
	    "cosh",
	    "count",
	    "covar_pop",
	    "covar_samp",
	    "create",
	    "cross",
	    "cube",
	    "cume_dist",
	    "current",
	    "current_catalog",
	    "current_date",
	    "current_default_transform_group",
	    "current_path",
	    "current_role",
	    "current_row",
	    "current_schema",
	    "current_time",
	    "current_timestamp",
	    "current_path",
	    "current_role",
	    "current_transform_group_for_type",
	    "current_user",
	    "cursor",
	    "cycle",
	    "date",
	    "day",
	    "deallocate",
	    "dec",
	    "decimal",
	    "decfloat",
	    "declare",
	    "default",
	    "define",
	    "delete",
	    "dense_rank",
	    "deref",
	    "describe",
	    "deterministic",
	    "disconnect",
	    "distinct",
	    "double",
	    "drop",
	    "dynamic",
	    "each",
	    "element",
	    "else",
	    "empty",
	    "end",
	    "end_frame",
	    "end_partition",
	    "end-exec",
	    "equals",
	    "escape",
	    "every",
	    "except",
	    "exec",
	    "execute",
	    "exists",
	    "exp",
	    "external",
	    "extract",
	    "false",
	    "fetch",
	    "filter",
	    "first_value",
	    "float",
	    "floor",
	    "for",
	    "foreign",
	    "frame_row",
	    "free",
	    "from",
	    "full",
	    "function",
	    "fusion",
	    "get",
	    "global",
	    "grant",
	    "group",
	    "grouping",
	    "groups",
	    "having",
	    "hold",
	    "hour",
	    "identity",
	    "in",
	    "indicator",
	    "initial",
	    "inner",
	    "inout",
	    "insensitive",
	    "insert",
	    "int",
	    "integer",
	    "intersect",
	    "intersection",
	    "interval",
	    "into",
	    "is",
	    "join",
	    "json_array",
	    "json_arrayagg",
	    "json_exists",
	    "json_object",
	    "json_objectagg",
	    "json_query",
	    "json_table",
	    "json_table_primitive",
	    "json_value",
	    "lag",
	    "language",
	    "large",
	    "last_value",
	    "lateral",
	    "lead",
	    "leading",
	    "left",
	    "like",
	    "like_regex",
	    "listagg",
	    "ln",
	    "local",
	    "localtime",
	    "localtimestamp",
	    "log",
	    "log10",
	    "lower",
	    "match",
	    "match_number",
	    "match_recognize",
	    "matches",
	    "max",
	    "member",
	    "merge",
	    "method",
	    "min",
	    "minute",
	    "mod",
	    "modifies",
	    "module",
	    "month",
	    "multiset",
	    "national",
	    "natural",
	    "nchar",
	    "nclob",
	    "new",
	    "no",
	    "none",
	    "normalize",
	    "not",
	    "nth_value",
	    "ntile",
	    "null",
	    "nullif",
	    "numeric",
	    "octet_length",
	    "occurrences_regex",
	    "of",
	    "offset",
	    "old",
	    "omit",
	    "on",
	    "one",
	    "only",
	    "open",
	    "or",
	    "order",
	    "out",
	    "outer",
	    "over",
	    "overlaps",
	    "overlay",
	    "parameter",
	    "partition",
	    "pattern",
	    "per",
	    "percent",
	    "percent_rank",
	    "percentile_cont",
	    "percentile_disc",
	    "period",
	    "portion",
	    "position",
	    "position_regex",
	    "power",
	    "precedes",
	    "precision",
	    "prepare",
	    "primary",
	    "procedure",
	    "ptf",
	    "range",
	    "rank",
	    "reads",
	    "real",
	    "recursive",
	    "ref",
	    "references",
	    "referencing",
	    "regr_avgx",
	    "regr_avgy",
	    "regr_count",
	    "regr_intercept",
	    "regr_r2",
	    "regr_slope",
	    "regr_sxx",
	    "regr_sxy",
	    "regr_syy",
	    "release",
	    "result",
	    "return",
	    "returns",
	    "revoke",
	    "right",
	    "rollback",
	    "rollup",
	    "row",
	    "row_number",
	    "rows",
	    "running",
	    "savepoint",
	    "scope",
	    "scroll",
	    "search",
	    "second",
	    "seek",
	    "select",
	    "sensitive",
	    "session_user",
	    "set",
	    "show",
	    "similar",
	    "sin",
	    "sinh",
	    "skip",
	    "smallint",
	    "some",
	    "specific",
	    "specifictype",
	    "sql",
	    "sqlexception",
	    "sqlstate",
	    "sqlwarning",
	    "sqrt",
	    "start",
	    "static",
	    "stddev_pop",
	    "stddev_samp",
	    "submultiset",
	    "subset",
	    "substring",
	    "substring_regex",
	    "succeeds",
	    "sum",
	    "symmetric",
	    "system",
	    "system_time",
	    "system_user",
	    "table",
	    "tablesample",
	    "tan",
	    "tanh",
	    "then",
	    "time",
	    "timestamp",
	    "timezone_hour",
	    "timezone_minute",
	    "to",
	    "trailing",
	    "translate",
	    "translate_regex",
	    "translation",
	    "treat",
	    "trigger",
	    "trim",
	    "trim_array",
	    "true",
	    "truncate",
	    "uescape",
	    "union",
	    "unique",
	    "unknown",
	    "unnest",
	    "update",
	    "upper",
	    "user",
	    "using",
	    "value",
	    "values",
	    "value_of",
	    "var_pop",
	    "var_samp",
	    "varbinary",
	    "varchar",
	    "varying",
	    "versioning",
	    "when",
	    "whenever",
	    "where",
	    "width_bucket",
	    "window",
	    "with",
	    "within",
	    "without",
	    "year",
	  ];

	  // these are reserved words we have identified to be functions
	  // and should only be highlighted in a dispatch-like context
	  // ie, array_agg(...), etc.
	  const RESERVED_FUNCTIONS = [
	    "abs",
	    "acos",
	    "array_agg",
	    "asin",
	    "atan",
	    "avg",
	    "cast",
	    "ceil",
	    "ceiling",
	    "coalesce",
	    "corr",
	    "cos",
	    "cosh",
	    "count",
	    "covar_pop",
	    "covar_samp",
	    "cume_dist",
	    "dense_rank",
	    "deref",
	    "element",
	    "exp",
	    "extract",
	    "first_value",
	    "floor",
	    "json_array",
	    "json_arrayagg",
	    "json_exists",
	    "json_object",
	    "json_objectagg",
	    "json_query",
	    "json_table",
	    "json_table_primitive",
	    "json_value",
	    "lag",
	    "last_value",
	    "lead",
	    "listagg",
	    "ln",
	    "log",
	    "log10",
	    "lower",
	    "max",
	    "min",
	    "mod",
	    "nth_value",
	    "ntile",
	    "nullif",
	    "percent_rank",
	    "percentile_cont",
	    "percentile_disc",
	    "position",
	    "position_regex",
	    "power",
	    "rank",
	    "regr_avgx",
	    "regr_avgy",
	    "regr_count",
	    "regr_intercept",
	    "regr_r2",
	    "regr_slope",
	    "regr_sxx",
	    "regr_sxy",
	    "regr_syy",
	    "row_number",
	    "sin",
	    "sinh",
	    "sqrt",
	    "stddev_pop",
	    "stddev_samp",
	    "substring",
	    "substring_regex",
	    "sum",
	    "tan",
	    "tanh",
	    "translate",
	    "translate_regex",
	    "treat",
	    "trim",
	    "trim_array",
	    "unnest",
	    "upper",
	    "value_of",
	    "var_pop",
	    "var_samp",
	    "width_bucket",
	  ];

	  // these functions can
	  const POSSIBLE_WITHOUT_PARENS = [
	    "current_catalog",
	    "current_date",
	    "current_default_transform_group",
	    "current_path",
	    "current_role",
	    "current_schema",
	    "current_transform_group_for_type",
	    "current_user",
	    "session_user",
	    "system_time",
	    "system_user",
	    "current_time",
	    "localtime",
	    "current_timestamp",
	    "localtimestamp"
	  ];

	  // those exist to boost relevance making these very
	  // "SQL like" keyword combos worth +1 extra relevance
	  const COMBOS = [
	    "create table",
	    "insert into",
	    "primary key",
	    "foreign key",
	    "not null",
	    "alter table",
	    "add constraint",
	    "grouping sets",
	    "on overflow",
	    "character set",
	    "respect nulls",
	    "ignore nulls",
	    "nulls first",
	    "nulls last",
	    "depth first",
	    "breadth first"
	  ];

	  const FUNCTIONS = RESERVED_FUNCTIONS;

	  const KEYWORDS = [
	    ...RESERVED_WORDS,
	    ...NON_RESERVED_WORDS
	  ].filter((keyword) => {
	    return !RESERVED_FUNCTIONS.includes(keyword);
	  });

	  const VARIABLE = {
	    className: "variable",
	    begin: /@[a-z0-9][a-z0-9_]*/,
	  };

	  const OPERATOR = {
	    className: "operator",
	    begin: /[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
	    relevance: 0,
	  };

	  const FUNCTION_CALL = {
	    begin: regex.concat(/\b/, regex.either(...FUNCTIONS), /\s*\(/),
	    relevance: 0,
	    keywords: { built_in: FUNCTIONS }
	  };

	  // keywords with less than 3 letters are reduced in relevancy
	  function reduceRelevancy(list, {
	    exceptions, when
	  } = {}) {
	    const qualifyFn = when;
	    exceptions = exceptions || [];
	    return list.map((item) => {
	      if (item.match(/\|\d+$/) || exceptions.includes(item)) {
	        return item;
	      } else if (qualifyFn(item)) {
	        return `${item}|0`;
	      } else {
	        return item;
	      }
	    });
	  }

	  return {
	    name: 'SQL',
	    case_insensitive: true,
	    // does not include {} or HTML tags `</`
	    illegal: /[{}]|<\//,
	    keywords: {
	      $pattern: /\b[\w\.]+/,
	      keyword:
	        reduceRelevancy(KEYWORDS, { when: (x) => x.length < 3 }),
	      literal: LITERALS,
	      type: TYPES,
	      built_in: POSSIBLE_WITHOUT_PARENS
	    },
	    contains: [
	      {
	        begin: regex.either(...COMBOS),
	        relevance: 0,
	        keywords: {
	          $pattern: /[\w\.]+/,
	          keyword: KEYWORDS.concat(COMBOS),
	          literal: LITERALS,
	          type: TYPES
	        },
	      },
	      {
	        className: "type",
	        begin: regex.either(...MULTI_WORD_TYPES)
	      },
	      FUNCTION_CALL,
	      VARIABLE,
	      STRING,
	      QUOTED_IDENTIFIER,
	      hljs.C_NUMBER_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      COMMENT_MODE,
	      OPERATOR
	    ]
	  };
	}

	sql_1 = sql;
	return sql_1;
}

/*
Language: Stan
Description: The Stan probabilistic programming language
Author: Sean Pinkney <sean.pinkney@gmail.com>
Website: http://mc-stan.org/
Category: scientific
*/

var stan_1;
var hasRequiredStan;

function requireStan () {
	if (hasRequiredStan) return stan_1;
	hasRequiredStan = 1;
	function stan(hljs) {
	  const regex = hljs.regex;
	  // variable names cannot conflict with block identifiers
	  const BLOCKS = [
	    'functions',
	    'model',
	    'data',
	    'parameters',
	    'quantities',
	    'transformed',
	    'generated'
	  ];

	  const STATEMENTS = [
	    'for',
	    'in',
	    'if',
	    'else',
	    'while',
	    'break',
	    'continue',
	    'return'
	  ];

	  const TYPES = [
	    'array',
	    'tuple',
	    'complex',
	    'int',
	    'real',
	    'vector',
	    'complex_vector',
	    'ordered',
	    'positive_ordered',
	    'simplex',
	    'unit_vector',
	    'row_vector',
	    'complex_row_vector',
	    'matrix',
	    'complex_matrix',
	    'cholesky_factor_corr|10',
	    'cholesky_factor_cov|10',
	    'corr_matrix|10',
	    'cov_matrix|10',
	    'void'
	  ];

	  // to get the functions list
	  // clone the [stan-docs repo](https://github.com/stan-dev/docs)
	  // then cd into it and run this bash script https://gist.github.com/joshgoebel/dcd33f82d4059a907c986049893843cf
	  //
	  // the output files are
	  // distributions_quoted.txt
	  // functions_quoted.txt

	  const FUNCTIONS = [
	    'abs',
	    'acos',
	    'acosh',
	    'add_diag',
	    'algebra_solver',
	    'algebra_solver_newton',
	    'append_array',
	    'append_col',
	    'append_row',
	    'asin',
	    'asinh',
	    'atan',
	    'atan2',
	    'atanh',
	    'bessel_first_kind',
	    'bessel_second_kind',
	    'binary_log_loss',
	    'block',
	    'cbrt',
	    'ceil',
	    'chol2inv',
	    'cholesky_decompose',
	    'choose',
	    'col',
	    'cols',
	    'columns_dot_product',
	    'columns_dot_self',
	    'complex_schur_decompose',
	    'complex_schur_decompose_t',
	    'complex_schur_decompose_u',
	    'conj',
	    'cos',
	    'cosh',
	    'cov_exp_quad',
	    'crossprod',
	    'csr_extract',
	    'csr_extract_u',
	    'csr_extract_v',
	    'csr_extract_w',
	    'csr_matrix_times_vector',
	    'csr_to_dense_matrix',
	    'cumulative_sum',
	    'dae',
	    'dae_tol',
	    'determinant',
	    'diag_matrix',
	    'diagonal',
	    'diag_post_multiply',
	    'diag_pre_multiply',
	    'digamma',
	    'dims',
	    'distance',
	    'dot_product',
	    'dot_self',
	    'eigendecompose',
	    'eigendecompose_sym',
	    'eigenvalues',
	    'eigenvalues_sym',
	    'eigenvectors',
	    'eigenvectors_sym',
	    'erf',
	    'erfc',
	    'exp',
	    'exp2',
	    'expm1',
	    'falling_factorial',
	    'fdim',
	    'fft',
	    'fft2',
	    'floor',
	    'fma',
	    'fmax',
	    'fmin',
	    'fmod',
	    'gamma_p',
	    'gamma_q',
	    'generalized_inverse',
	    'get_imag',
	    'get_real',
	    'head',
	    'hmm_hidden_state_prob',
	    'hmm_marginal',
	    'hypot',
	    'identity_matrix',
	    'inc_beta',
	    'integrate_1d',
	    'integrate_ode',
	    'integrate_ode_adams',
	    'integrate_ode_bdf',
	    'integrate_ode_rk45',
	    'int_step',
	    'inv',
	    'inv_cloglog',
	    'inv_erfc',
	    'inverse',
	    'inverse_spd',
	    'inv_fft',
	    'inv_fft2',
	    'inv_inc_beta',
	    'inv_logit',
	    'inv_Phi',
	    'inv_sqrt',
	    'inv_square',
	    'is_inf',
	    'is_nan',
	    'lambert_w0',
	    'lambert_wm1',
	    'lbeta',
	    'lchoose',
	    'ldexp',
	    'lgamma',
	    'linspaced_array',
	    'linspaced_int_array',
	    'linspaced_row_vector',
	    'linspaced_vector',
	    'lmgamma',
	    'lmultiply',
	    'log',
	    'log1m',
	    'log1m_exp',
	    'log1m_inv_logit',
	    'log1p',
	    'log1p_exp',
	    'log_determinant',
	    'log_diff_exp',
	    'log_falling_factorial',
	    'log_inv_logit',
	    'log_inv_logit_diff',
	    'logit',
	    'log_mix',
	    'log_modified_bessel_first_kind',
	    'log_rising_factorial',
	    'log_softmax',
	    'log_sum_exp',
	    'machine_precision',
	    'map_rect',
	    'matrix_exp',
	    'matrix_exp_multiply',
	    'matrix_power',
	    'max',
	    'mdivide_left_spd',
	    'mdivide_left_tri_low',
	    'mdivide_right_spd',
	    'mdivide_right_tri_low',
	    'mean',
	    'min',
	    'modified_bessel_first_kind',
	    'modified_bessel_second_kind',
	    'multiply_lower_tri_self_transpose',
	    'negative_infinity',
	    'norm',
	    'norm1',
	    'norm2',
	    'not_a_number',
	    'num_elements',
	    'ode_adams',
	    'ode_adams_tol',
	    'ode_adjoint_tol_ctl',
	    'ode_bdf',
	    'ode_bdf_tol',
	    'ode_ckrk',
	    'ode_ckrk_tol',
	    'ode_rk45',
	    'ode_rk45_tol',
	    'one_hot_array',
	    'one_hot_int_array',
	    'one_hot_row_vector',
	    'one_hot_vector',
	    'ones_array',
	    'ones_int_array',
	    'ones_row_vector',
	    'ones_vector',
	    'owens_t',
	    'Phi',
	    'Phi_approx',
	    'polar',
	    'positive_infinity',
	    'pow',
	    'print',
	    'prod',
	    'proj',
	    'qr',
	    'qr_Q',
	    'qr_R',
	    'qr_thin',
	    'qr_thin_Q',
	    'qr_thin_R',
	    'quad_form',
	    'quad_form_diag',
	    'quad_form_sym',
	    'quantile',
	    'rank',
	    'reduce_sum',
	    'reject',
	    'rep_array',
	    'rep_matrix',
	    'rep_row_vector',
	    'rep_vector',
	    'reverse',
	    'rising_factorial',
	    'round',
	    'row',
	    'rows',
	    'rows_dot_product',
	    'rows_dot_self',
	    'scale_matrix_exp_multiply',
	    'sd',
	    'segment',
	    'sin',
	    'singular_values',
	    'sinh',
	    'size',
	    'softmax',
	    'sort_asc',
	    'sort_desc',
	    'sort_indices_asc',
	    'sort_indices_desc',
	    'sqrt',
	    'square',
	    'squared_distance',
	    'step',
	    'sub_col',
	    'sub_row',
	    'sum',
	    'svd',
	    'svd_U',
	    'svd_V',
	    'symmetrize_from_lower_tri',
	    'tail',
	    'tan',
	    'tanh',
	    'target',
	    'tcrossprod',
	    'tgamma',
	    'to_array_1d',
	    'to_array_2d',
	    'to_complex',
	    'to_int',
	    'to_matrix',
	    'to_row_vector',
	    'to_vector',
	    'trace',
	    'trace_gen_quad_form',
	    'trace_quad_form',
	    'trigamma',
	    'trunc',
	    'uniform_simplex',
	    'variance',
	    'zeros_array',
	    'zeros_int_array',
	    'zeros_row_vector'
	  ];

	  const DISTRIBUTIONS = [
	    'bernoulli',
	    'bernoulli_logit',
	    'bernoulli_logit_glm',
	    'beta',
	    'beta_binomial',
	    'beta_proportion',
	    'binomial',
	    'binomial_logit',
	    'categorical',
	    'categorical_logit',
	    'categorical_logit_glm',
	    'cauchy',
	    'chi_square',
	    'dirichlet',
	    'discrete_range',
	    'double_exponential',
	    'exp_mod_normal',
	    'exponential',
	    'frechet',
	    'gamma',
	    'gaussian_dlm_obs',
	    'gumbel',
	    'hmm_latent',
	    'hypergeometric',
	    'inv_chi_square',
	    'inv_gamma',
	    'inv_wishart',
	    'inv_wishart_cholesky',
	    'lkj_corr',
	    'lkj_corr_cholesky',
	    'logistic',
	    'loglogistic',
	    'lognormal',
	    'multi_gp',
	    'multi_gp_cholesky',
	    'multinomial',
	    'multinomial_logit',
	    'multi_normal',
	    'multi_normal_cholesky',
	    'multi_normal_prec',
	    'multi_student_cholesky_t',
	    'multi_student_t',
	    'multi_student_t_cholesky',
	    'neg_binomial',
	    'neg_binomial_2',
	    'neg_binomial_2_log',
	    'neg_binomial_2_log_glm',
	    'normal',
	    'normal_id_glm',
	    'ordered_logistic',
	    'ordered_logistic_glm',
	    'ordered_probit',
	    'pareto',
	    'pareto_type_2',
	    'poisson',
	    'poisson_log',
	    'poisson_log_glm',
	    'rayleigh',
	    'scaled_inv_chi_square',
	    'skew_double_exponential',
	    'skew_normal',
	    'std_normal',
	    'std_normal_log',
	    'student_t',
	    'uniform',
	    'von_mises',
	    'weibull',
	    'wiener',
	    'wishart',
	    'wishart_cholesky'
	  ];

	  const BLOCK_COMMENT = hljs.COMMENT(
	    /\/\*/,
	    /\*\//,
	    {
	      relevance: 0,
	      contains: [
	        {
	          scope: 'doctag',
	          match: /@(return|param)/
	        }
	      ]
	    }
	  );

	  const INCLUDE = {
	    scope: 'meta',
	    begin: /#include\b/,
	    end: /$/,
	    contains: [
	      {
	        match: /[a-z][a-z-._]+/,
	        scope: 'string'
	      },
	      hljs.C_LINE_COMMENT_MODE
	    ]
	  };

	  const RANGE_CONSTRAINTS = [
	    "lower",
	    "upper",
	    "offset",
	    "multiplier"
	  ];

	  return {
	    name: 'Stan',
	    aliases: [ 'stanfuncs' ],
	    keywords: {
	      $pattern: hljs.IDENT_RE,
	      title: BLOCKS,
	      type: TYPES,
	      keyword: STATEMENTS,
	      built_in: FUNCTIONS
	    },
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      INCLUDE,
	      hljs.HASH_COMMENT_MODE,
	      BLOCK_COMMENT,
	      {
	        scope: 'built_in',
	        match: /\s(pi|e|sqrt2|log2|log10)(?=\()/,
	        relevance: 0
	      },
	      {
	        match: regex.concat(/[<,]\s*/, regex.either(...RANGE_CONSTRAINTS), /\s*=/),
	        keywords: RANGE_CONSTRAINTS
	      },
	      {
	        scope: 'keyword',
	        match: /\btarget(?=\s*\+=)/,
	      },
	      {
	        // highlights the 'T' in T[,] for only Stan language distributrions
	        match: [
	          /~\s*/,
	          regex.either(...DISTRIBUTIONS),
	          /(?:\(\))/,
	          /\s*T(?=\s*\[)/
	        ],
	        scope: {
	          2: "built_in",
	          4: "keyword"
	        }
	      },
	      {
	        // highlights distributions that end with special endings
	        scope: 'built_in',
	        keywords: DISTRIBUTIONS,
	        begin: regex.concat(/\w*/, regex.either(...DISTRIBUTIONS), /(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\s*[\(.*\)])/)
	      },
	      {
	        // highlights distributions after ~
	        begin: [
	          /~/,
	          /\s*/,
	          regex.concat(regex.either(...DISTRIBUTIONS), /(?=\s*[\(.*\)])/)
	        ],
	        scope: { 3: "built_in" }
	      },
	      {
	        // highlights user defined distributions after ~
	        begin: [
	          /~/,
	          /\s*\w+(?=\s*[\(.*\)])/,
	          '(?!.*/\b(' + regex.either(...DISTRIBUTIONS) + ')\b)'
	        ],
	        scope: { 2: "title.function" }
	      },
	      {
	        // highlights user defined distributions with special endings
	        scope: 'title.function',
	        begin: /\w*(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\s*[\(.*\)])/
	      },
	      {
	        scope: 'number',
	        match: regex.concat(
	          // Comes from @RunDevelopment accessed 11/29/2021 at
	          // https://github.com/PrismJS/prism/blob/c53ad2e65b7193ab4f03a1797506a54bbb33d5a2/components/prism-stan.js#L56

	          // start of big noncapture group which
	          // 1. gets numbers that are by themselves
	          // 2. numbers that are separated by _
	          // 3. numbers that are separted by .
	          /(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)/,
	          // grabs scientific notation
	          // grabs complex numbers with i
	          /(?:[eE][+-]?\d+(?:_\d+)*)?i?(?!\w)/
	        ),
	        relevance: 0
	      },
	      {
	        scope: 'string',
	        begin: /"/,
	        end: /"/
	      }
	    ]
	  };
	}

	stan_1 = stan;
	return stan_1;
}

/*
Language: Stata
Author: Brian Quistorff <bquistorff@gmail.com>
Contributors: Drew McDonald <drewmcdo@gmail.com>
Description: Stata is a general-purpose statistical software package created in 1985 by StataCorp.
Website: https://en.wikipedia.org/wiki/Stata
Category: scientific
*/

var stata_1;
var hasRequiredStata;

function requireStata () {
	if (hasRequiredStata) return stata_1;
	hasRequiredStata = 1;
	/*
	  This is a fork and modification of Drew McDonald's file (https://github.com/drewmcdonald/stata-highlighting). I have also included a list of builtin commands from https://bugs.kde.org/show_bug.cgi?id=135646.
	*/

	function stata(hljs) {
	  return {
	    name: 'Stata',
	    aliases: [
	      'do',
	      'ado'
	    ],
	    case_insensitive: true,
	    keywords: 'if else in foreach for forv forva forval forvalu forvalue forvalues by bys bysort xi quietly qui capture about ac ac_7 acprplot acprplot_7 adjust ado adopath adoupdate alpha ameans an ano anov anova anova_estat anova_terms anovadef aorder ap app appe appen append arch arch_dr arch_estat arch_p archlm areg areg_p args arima arima_dr arima_estat arima_p as asmprobit asmprobit_estat asmprobit_lf asmprobit_mfx__dlg asmprobit_p ass asse asser assert avplot avplot_7 avplots avplots_7 bcskew0 bgodfrey bias binreg bip0_lf biplot bipp_lf bipr_lf bipr_p biprobit bitest bitesti bitowt blogit bmemsize boot bootsamp bootstrap bootstrap_8 boxco_l boxco_p boxcox boxcox_6 boxcox_p bprobit br break brier bro brow brows browse brr brrstat bs bs_7 bsampl_w bsample bsample_7 bsqreg bstat bstat_7 bstat_8 bstrap bstrap_7 bubble bubbleplot ca ca_estat ca_p cabiplot camat canon canon_8 canon_8_p canon_estat canon_p cap caprojection capt captu captur capture cat cc cchart cchart_7 cci cd censobs_table centile cf char chdir checkdlgfiles checkestimationsample checkhlpfiles checksum chelp ci cii cl class classutil clear cli clis clist clo clog clog_lf clog_p clogi clogi_sw clogit clogit_lf clogit_p clogitp clogl_sw cloglog clonevar clslistarray cluster cluster_measures cluster_stop cluster_tree cluster_tree_8 clustermat cmdlog cnr cnre cnreg cnreg_p cnreg_sw cnsreg codebook collaps4 collapse colormult_nb colormult_nw compare compress conf confi confir confirm conren cons const constr constra constrai constrain constraint continue contract copy copyright copysource cor corc corr corr2data corr_anti corr_kmo corr_smc corre correl correla correlat correlate corrgram cou coun count cox cox_p cox_sw coxbase coxhaz coxvar cprplot cprplot_7 crc cret cretu cretur creturn cross cs cscript cscript_log csi ct ct_is ctset ctst_5 ctst_st cttost cumsp cumsp_7 cumul cusum cusum_7 cutil d|0 datasig datasign datasigna datasignat datasignatu datasignatur datasignature datetof db dbeta de dec deco decod decode deff des desc descr descri describ describe destring dfbeta dfgls dfuller di di_g dir dirstats dis discard disp disp_res disp_s displ displa display distinct do doe doed doedi doedit dotplot dotplot_7 dprobit drawnorm drop ds ds_util dstdize duplicates durbina dwstat dydx e|0 ed edi edit egen eivreg emdef en enc enco encod encode eq erase ereg ereg_lf ereg_p ereg_sw ereghet ereghet_glf ereghet_glf_sh ereghet_gp ereghet_ilf ereghet_ilf_sh ereghet_ip eret eretu eretur ereturn err erro error esize est est_cfexist est_cfname est_clickable est_expand est_hold est_table est_unhold est_unholdok estat estat_default estat_summ estat_vce_only esti estimates etodow etof etomdy ex exi exit expand expandcl fac fact facto factor factor_estat factor_p factor_pca_rotated factor_rotate factormat fcast fcast_compute fcast_graph fdades fdadesc fdadescr fdadescri fdadescrib fdadescribe fdasav fdasave fdause fh_st file open file read file close file filefilter fillin find_hlp_file findfile findit findit_7 fit fl fli flis flist for5_0 forest forestplot form forma format fpredict frac_154 frac_adj frac_chk frac_cox frac_ddp frac_dis frac_dv frac_in frac_mun frac_pp frac_pq frac_pv frac_wgt frac_xo fracgen fracplot fracplot_7 fracpoly fracpred fron_ex fron_hn fron_p fron_tn fron_tn2 frontier ftodate ftoe ftomdy ftowdate funnel funnelplot g|0 gamhet_glf gamhet_gp gamhet_ilf gamhet_ip gamma gamma_d2 gamma_p gamma_sw gammahet gdi_hexagon gdi_spokes ge gen gene gener genera generat generate genrank genstd genvmean gettoken gl gladder gladder_7 glim_l01 glim_l02 glim_l03 glim_l04 glim_l05 glim_l06 glim_l07 glim_l08 glim_l09 glim_l10 glim_l11 glim_l12 glim_lf glim_mu glim_nw1 glim_nw2 glim_nw3 glim_p glim_v1 glim_v2 glim_v3 glim_v4 glim_v5 glim_v6 glim_v7 glm glm_6 glm_p glm_sw glmpred glo glob globa global glogit glogit_8 glogit_p gmeans gnbre_lf gnbreg gnbreg_5 gnbreg_p gomp_lf gompe_sw gomper_p gompertz gompertzhet gomphet_glf gomphet_glf_sh gomphet_gp gomphet_ilf gomphet_ilf_sh gomphet_ip gphdot gphpen gphprint gprefs gprobi_p gprobit gprobit_8 gr gr7 gr_copy gr_current gr_db gr_describe gr_dir gr_draw gr_draw_replay gr_drop gr_edit gr_editviewopts gr_example gr_example2 gr_export gr_print gr_qscheme gr_query gr_read gr_rename gr_replay gr_save gr_set gr_setscheme gr_table gr_undo gr_use graph graph7 grebar greigen greigen_7 greigen_8 grmeanby grmeanby_7 gs_fileinfo gs_filetype gs_graphinfo gs_stat gsort gwood h|0 hadimvo hareg hausman haver he heck_d2 heckma_p heckman heckp_lf heckpr_p heckprob hel help hereg hetpr_lf hetpr_p hetprob hettest hexdump hilite hist hist_7 histogram hlogit hlu hmeans hotel hotelling hprobit hreg hsearch icd9 icd9_ff icd9p iis impute imtest inbase include inf infi infil infile infix inp inpu input ins insheet insp inspe inspec inspect integ inten intreg intreg_7 intreg_p intrg2_ll intrg_ll intrg_ll2 ipolate iqreg ir irf irf_create irfm iri is_svy is_svysum isid istdize ivprob_1_lf ivprob_lf ivprobit ivprobit_p ivreg ivreg_footnote ivtob_1_lf ivtob_lf ivtobit ivtobit_p jackknife jacknife jknife jknife_6 jknife_8 jkstat joinby kalarma1 kap kap_3 kapmeier kappa kapwgt kdensity kdensity_7 keep ksm ksmirnov ktau kwallis l|0 la lab labbe labbeplot labe label labelbook ladder levels levelsof leverage lfit lfit_p li lincom line linktest lis list lloghet_glf lloghet_glf_sh lloghet_gp lloghet_ilf lloghet_ilf_sh lloghet_ip llogi_sw llogis_p llogist llogistic llogistichet lnorm_lf lnorm_sw lnorma_p lnormal lnormalhet lnormhet_glf lnormhet_glf_sh lnormhet_gp lnormhet_ilf lnormhet_ilf_sh lnormhet_ip lnskew0 loadingplot loc loca local log logi logis_lf logistic logistic_p logit logit_estat logit_p loglogs logrank loneway lookfor lookup lowess lowess_7 lpredict lrecomp lroc lroc_7 lrtest ls lsens lsens_7 lsens_x lstat ltable ltable_7 ltriang lv lvr2plot lvr2plot_7 m|0 ma mac macr macro makecns man manova manova_estat manova_p manovatest mantel mark markin markout marksample mat mat_capp mat_order mat_put_rr mat_rapp mata mata_clear mata_describe mata_drop mata_matdescribe mata_matsave mata_matuse mata_memory mata_mlib mata_mosave mata_rename mata_which matalabel matcproc matlist matname matr matri matrix matrix_input__dlg matstrik mcc mcci md0_ md1_ md1debug_ md2_ md2debug_ mds mds_estat mds_p mdsconfig mdslong mdsmat mdsshepard mdytoe mdytof me_derd mean means median memory memsize menl meqparse mer merg merge meta mfp mfx mhelp mhodds minbound mixed_ll mixed_ll_reparm mkassert mkdir mkmat mkspline ml ml_5 ml_adjs ml_bhhhs ml_c_d ml_check ml_clear ml_cnt ml_debug ml_defd ml_e0 ml_e0_bfgs ml_e0_cycle ml_e0_dfp ml_e0i ml_e1 ml_e1_bfgs ml_e1_bhhh ml_e1_cycle ml_e1_dfp ml_e2 ml_e2_cycle ml_ebfg0 ml_ebfr0 ml_ebfr1 ml_ebh0q ml_ebhh0 ml_ebhr0 ml_ebr0i ml_ecr0i ml_edfp0 ml_edfr0 ml_edfr1 ml_edr0i ml_eds ml_eer0i ml_egr0i ml_elf ml_elf_bfgs ml_elf_bhhh ml_elf_cycle ml_elf_dfp ml_elfi ml_elfs ml_enr0i ml_enrr0 ml_erdu0 ml_erdu0_bfgs ml_erdu0_bhhh ml_erdu0_bhhhq ml_erdu0_cycle ml_erdu0_dfp ml_erdu0_nrbfgs ml_exde ml_footnote ml_geqnr ml_grad0 ml_graph ml_hbhhh ml_hd0 ml_hold ml_init ml_inv ml_log ml_max ml_mlout ml_mlout_8 ml_model ml_nb0 ml_opt ml_p ml_plot ml_query ml_rdgrd ml_repor ml_s_e ml_score ml_searc ml_technique ml_unhold mleval mlf_ mlmatbysum mlmatsum mlog mlogi mlogit mlogit_footnote mlogit_p mlopts mlsum mlvecsum mnl0_ mor more mov move mprobit mprobit_lf mprobit_p mrdu0_ mrdu1_ mvdecode mvencode mvreg mvreg_estat n|0 nbreg nbreg_al nbreg_lf nbreg_p nbreg_sw nestreg net newey newey_7 newey_p news nl nl_7 nl_9 nl_9_p nl_p nl_p_7 nlcom nlcom_p nlexp2 nlexp2_7 nlexp2a nlexp2a_7 nlexp3 nlexp3_7 nlgom3 nlgom3_7 nlgom4 nlgom4_7 nlinit nllog3 nllog3_7 nllog4 nllog4_7 nlog_rd nlogit nlogit_p nlogitgen nlogittree nlpred no nobreak noi nois noisi noisil noisily note notes notes_dlg nptrend numlabel numlist odbc old_ver olo olog ologi ologi_sw ologit ologit_p ologitp on one onew onewa oneway op_colnm op_comp op_diff op_inv op_str opr opro oprob oprob_sw oprobi oprobi_p oprobit oprobitp opts_exclusive order orthog orthpoly ou out outf outfi outfil outfile outs outsh outshe outshee outsheet ovtest pac pac_7 palette parse parse_dissim pause pca pca_8 pca_display pca_estat pca_p pca_rotate pcamat pchart pchart_7 pchi pchi_7 pcorr pctile pentium pergram pergram_7 permute permute_8 personal peto_st pkcollapse pkcross pkequiv pkexamine pkexamine_7 pkshape pksumm pksumm_7 pl plo plot plugin pnorm pnorm_7 poisgof poiss_lf poiss_sw poisso_p poisson poisson_estat post postclose postfile postutil pperron pr prais prais_e prais_e2 prais_p predict predictnl preserve print pro prob probi probit probit_estat probit_p proc_time procoverlay procrustes procrustes_estat procrustes_p profiler prog progr progra program prop proportion prtest prtesti pwcorr pwd q\\s qby qbys qchi qchi_7 qladder qladder_7 qnorm qnorm_7 qqplot qqplot_7 qreg qreg_c qreg_p qreg_sw qu quadchk quantile quantile_7 que quer query range ranksum ratio rchart rchart_7 rcof recast reclink recode reg reg3 reg3_p regdw regr regre regre_p2 regres regres_p regress regress_estat regriv_p remap ren rena renam rename renpfix repeat replace report reshape restore ret retu retur return rm rmdir robvar roccomp roccomp_7 roccomp_8 rocf_lf rocfit rocfit_8 rocgold rocplot rocplot_7 roctab roctab_7 rolling rologit rologit_p rot rota rotat rotate rotatemat rreg rreg_p ru run runtest rvfplot rvfplot_7 rvpplot rvpplot_7 sa safesum sample sampsi sav save savedresults saveold sc sca scal scala scalar scatter scm_mine sco scob_lf scob_p scobi_sw scobit scor score scoreplot scoreplot_help scree screeplot screeplot_help sdtest sdtesti se search separate seperate serrbar serrbar_7 serset set set_defaults sfrancia sh she shel shell shewhart shewhart_7 signestimationsample signrank signtest simul simul_7 simulate simulate_8 sktest sleep slogit slogit_d2 slogit_p smooth snapspan so sor sort spearman spikeplot spikeplot_7 spikeplt spline_x split sqreg sqreg_p sret sretu sretur sreturn ssc st st_ct st_hc st_hcd st_hcd_sh st_is st_issys st_note st_promo st_set st_show st_smpl st_subid stack statsby statsby_8 stbase stci stci_7 stcox stcox_estat stcox_fr stcox_fr_ll stcox_p stcox_sw stcoxkm stcoxkm_7 stcstat stcurv stcurve stcurve_7 stdes stem stepwise stereg stfill stgen stir stjoin stmc stmh stphplot stphplot_7 stphtest stphtest_7 stptime strate strate_7 streg streg_sw streset sts sts_7 stset stsplit stsum sttocc sttoct stvary stweib su suest suest_8 sum summ summa summar summari summariz summarize sunflower sureg survcurv survsum svar svar_p svmat svy svy_disp svy_dreg svy_est svy_est_7 svy_estat svy_get svy_gnbreg_p svy_head svy_header svy_heckman_p svy_heckprob_p svy_intreg_p svy_ivreg_p svy_logistic_p svy_logit_p svy_mlogit_p svy_nbreg_p svy_ologit_p svy_oprobit_p svy_poisson_p svy_probit_p svy_regress_p svy_sub svy_sub_7 svy_x svy_x_7 svy_x_p svydes svydes_8 svygen svygnbreg svyheckman svyheckprob svyintreg svyintreg_7 svyintrg svyivreg svylc svylog_p svylogit svymarkout svymarkout_8 svymean svymlog svymlogit svynbreg svyolog svyologit svyoprob svyoprobit svyopts svypois svypois_7 svypoisson svyprobit svyprobt svyprop svyprop_7 svyratio svyreg svyreg_p svyregress svyset svyset_7 svyset_8 svytab svytab_7 svytest svytotal sw sw_8 swcnreg swcox swereg swilk swlogis swlogit swologit swoprbt swpois swprobit swqreg swtobit swweib symmetry symmi symplot symplot_7 syntax sysdescribe sysdir sysuse szroeter ta tab tab1 tab2 tab_or tabd tabdi tabdis tabdisp tabi table tabodds tabodds_7 tabstat tabu tabul tabula tabulat tabulate te tempfile tempname tempvar tes test testnl testparm teststd tetrachoric time_it timer tis tob tobi tobit tobit_p tobit_sw token tokeni tokeniz tokenize tostring total translate translator transmap treat_ll treatr_p treatreg trim trimfill trnb_cons trnb_mean trpoiss_d2 trunc_ll truncr_p truncreg tsappend tset tsfill tsline tsline_ex tsreport tsrevar tsrline tsset tssmooth tsunab ttest ttesti tut_chk tut_wait tutorial tw tware_st two twoway twoway__fpfit_serset twoway__function_gen twoway__histogram_gen twoway__ipoint_serset twoway__ipoints_serset twoway__kdensity_gen twoway__lfit_serset twoway__normgen_gen twoway__pci_serset twoway__qfit_serset twoway__scatteri_serset twoway__sunflower_gen twoway_ksm_serset ty typ type typeof u|0 unab unabbrev unabcmd update us use uselabel var var_mkcompanion var_p varbasic varfcast vargranger varirf varirf_add varirf_cgraph varirf_create varirf_ctable varirf_describe varirf_dir varirf_drop varirf_erase varirf_graph varirf_ograph varirf_rename varirf_set varirf_table varlist varlmar varnorm varsoc varstable varstable_w varstable_w2 varwle vce vec vec_fevd vec_mkphi vec_p vec_p_w vecirf_create veclmar veclmar_w vecnorm vecnorm_w vecrank vecstable verinst vers versi versio version view viewsource vif vwls wdatetof webdescribe webseek webuse weib1_lf weib2_lf weib_lf weib_lf0 weibhet_glf weibhet_glf_sh weibhet_glfa weibhet_glfa_sh weibhet_gp weibhet_ilf weibhet_ilf_sh weibhet_ilfa weibhet_ilfa_sh weibhet_ip weibu_sw weibul_p weibull weibull_c weibull_s weibullhet wh whelp whi which whil while wilc_st wilcoxon win wind windo window winexec wntestb wntestb_7 wntestq xchart xchart_7 xcorr xcorr_7 xi xi_6 xmlsav xmlsave xmluse xpose xsh xshe xshel xshell xt_iis xt_tis xtab_p xtabond xtbin_p xtclog xtcloglog xtcloglog_8 xtcloglog_d2 xtcloglog_pa_p xtcloglog_re_p xtcnt_p xtcorr xtdata xtdes xtfront_p xtfrontier xtgee xtgee_elink xtgee_estat xtgee_makeivar xtgee_p xtgee_plink xtgls xtgls_p xthaus xthausman xtht_p xthtaylor xtile xtint_p xtintreg xtintreg_8 xtintreg_d2 xtintreg_p xtivp_1 xtivp_2 xtivreg xtline xtline_ex xtlogit xtlogit_8 xtlogit_d2 xtlogit_fe_p xtlogit_pa_p xtlogit_re_p xtmixed xtmixed_estat xtmixed_p xtnb_fe xtnb_lf xtnbreg xtnbreg_pa_p xtnbreg_refe_p xtpcse xtpcse_p xtpois xtpoisson xtpoisson_d2 xtpoisson_pa_p xtpoisson_refe_p xtpred xtprobit xtprobit_8 xtprobit_d2 xtprobit_re_p xtps_fe xtps_lf xtps_ren xtps_ren_8 xtrar_p xtrc xtrc_p xtrchh xtrefe_p xtreg xtreg_be xtreg_fe xtreg_ml xtreg_pa_p xtreg_re xtregar xtrere_p xtset xtsf_ll xtsf_llti xtsum xttab xttest0 xttobit xttobit_8 xttobit_p xttrans yx yxview__barlike_draw yxview_area_draw yxview_bar_draw yxview_dot_draw yxview_dropline_draw yxview_function_draw yxview_iarrow_draw yxview_ilabels_draw yxview_normal_draw yxview_pcarrow_draw yxview_pcbarrow_draw yxview_pccapsym_draw yxview_pcscatter_draw yxview_pcspike_draw yxview_rarea_draw yxview_rbar_draw yxview_rbarm_draw yxview_rcap_draw yxview_rcapsym_draw yxview_rconnected_draw yxview_rline_draw yxview_rscatter_draw yxview_rspike_draw yxview_spike_draw yxview_sunflower_draw zap_s zinb zinb_llf zinb_plf zip zip_llf zip_p zip_plf zt_ct_5 zt_hc_5 zt_hcd_5 zt_is_5 zt_iss_5 zt_sho_5 zt_smp_5 ztbase_5 ztcox_5 ztdes_5 ztereg_5 ztfill_5 ztgen_5 ztir_5 ztjoin_5 ztnb ztnb_p ztp ztp_p zts_5 ztset_5 ztspli_5 ztsum_5 zttoct_5 ztvary_5 ztweib_5',
	    contains: [
	      {
	        className: 'symbol',
	        begin: /`[a-zA-Z0-9_]+'/
	      },
	      {
	        className: 'variable',
	        begin: /\$\{?[a-zA-Z0-9_]+\}?/,
	        relevance: 0
	      },
	      {
	        className: 'string',
	        variants: [
	          { begin: '`"[^\r\n]*?"\'' },
	          { begin: '"[^\r\n"]*"' }
	        ]
	      },

	      {
	        className: 'built_in',
	        variants: [ { begin: '\\b(abs|acos|asin|atan|atan2|atanh|ceil|cloglog|comb|cos|digamma|exp|floor|invcloglog|invlogit|ln|lnfact|lnfactorial|lngamma|log|log10|max|min|mod|reldif|round|sign|sin|sqrt|sum|tan|tanh|trigamma|trunc|betaden|Binomial|binorm|binormal|chi2|chi2tail|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|F|Fden|Ftail|gammaden|gammap|ibeta|invbinomial|invchi2|invchi2tail|invF|invFtail|invgammap|invibeta|invnchi2|invnFtail|invnibeta|invnorm|invnormal|invttail|nbetaden|nchi2|nFden|nFtail|nibeta|norm|normal|normalden|normd|npnchi2|tden|ttail|uniform|abbrev|char|index|indexnot|length|lower|ltrim|match|plural|proper|real|regexm|regexr|regexs|reverse|rtrim|string|strlen|strlower|strltrim|strmatch|strofreal|strpos|strproper|strreverse|strrtrim|strtrim|strupper|subinstr|subinword|substr|trim|upper|word|wordcount|_caller|autocode|byteorder|chop|clip|cond|e|epsdouble|epsfloat|group|inlist|inrange|irecode|matrix|maxbyte|maxdouble|maxfloat|maxint|maxlong|mi|minbyte|mindouble|minfloat|minint|minlong|missing|r|recode|replay|return|s|scalar|d|date|day|dow|doy|halfyear|mdy|month|quarter|week|year|d|daily|dofd|dofh|dofm|dofq|dofw|dofy|h|halfyearly|hofd|m|mofd|monthly|q|qofd|quarterly|tin|twithin|w|weekly|wofd|y|yearly|yh|ym|yofd|yq|yw|cholesky|colnumb|colsof|corr|det|diag|diag0cnt|el|get|hadamard|I|inv|invsym|issym|issymmetric|J|matmissing|matuniform|mreldif|nullmat|rownumb|rowsof|sweep|syminv|trace|vec|vecdiag)(?=\\()' } ]
	      },

	      hljs.COMMENT('^[ \t]*\\*.*$', false),
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE
	    ]
	  };
	}

	stata_1 = stata;
	return stata_1;
}

/*
Language: STEP Part 21
Contributors: Adam Joseph Cook <adam.joseph.cook@gmail.com>
Description: Syntax highlighter for STEP Part 21 files (ISO 10303-21).
Website: https://en.wikipedia.org/wiki/ISO_10303-21
*/

var step21_1;
var hasRequiredStep21;

function requireStep21 () {
	if (hasRequiredStep21) return step21_1;
	hasRequiredStep21 = 1;
	function step21(hljs) {
	  const STEP21_IDENT_RE = '[A-Z_][A-Z0-9_.]*';
	  const STEP21_KEYWORDS = {
	    $pattern: STEP21_IDENT_RE,
	    keyword: [
	      "HEADER",
	      "ENDSEC",
	      "DATA"
	    ]
	  };
	  const STEP21_START = {
	    className: 'meta',
	    begin: 'ISO-10303-21;',
	    relevance: 10
	  };
	  const STEP21_CLOSE = {
	    className: 'meta',
	    begin: 'END-ISO-10303-21;',
	    relevance: 10
	  };

	  return {
	    name: 'STEP Part 21',
	    aliases: [
	      'p21',
	      'step',
	      'stp'
	    ],
	    case_insensitive: true, // STEP 21 is case insensitive in theory, in practice all non-comments are capitalized.
	    keywords: STEP21_KEYWORDS,
	    contains: [
	      STEP21_START,
	      STEP21_CLOSE,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.COMMENT('/\\*\\*!', '\\*/'),
	      hljs.C_NUMBER_MODE,
	      hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
	      hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
	      {
	        className: 'string',
	        begin: "'",
	        end: "'"
	      },
	      {
	        className: 'symbol',
	        variants: [
	          {
	            begin: '#',
	            end: '\\d+',
	            illegal: '\\W'
	          }
	        ]
	      }
	    ]
	  };
	}

	step21_1 = step21;
	return step21_1;
}

var stylus_1;
var hasRequiredStylus;

function requireStylus () {
	if (hasRequiredStylus) return stylus_1;
	hasRequiredStylus = 1;
	const MODES = (hljs) => {
	  return {
	    IMPORTANT: {
	      scope: 'meta',
	      begin: '!important'
	    },
	    BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
	    HEXCOLOR: {
	      scope: 'number',
	      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
	    },
	    FUNCTION_DISPATCH: {
	      className: "built_in",
	      begin: /[\w-]+(?=\()/
	    },
	    ATTRIBUTE_SELECTOR_MODE: {
	      scope: 'selector-attr',
	      begin: /\[/,
	      end: /\]/,
	      illegal: '$',
	      contains: [
	        hljs.APOS_STRING_MODE,
	        hljs.QUOTE_STRING_MODE
	      ]
	    },
	    CSS_NUMBER_MODE: {
	      scope: 'number',
	      begin: hljs.NUMBER_RE + '(' +
	        '%|em|ex|ch|rem' +
	        '|vw|vh|vmin|vmax' +
	        '|cm|mm|in|pt|pc|px' +
	        '|deg|grad|rad|turn' +
	        '|s|ms' +
	        '|Hz|kHz' +
	        '|dpi|dpcm|dppx' +
	        ')?',
	      relevance: 0
	    },
	    CSS_VARIABLE: {
	      className: "attr",
	      begin: /--[A-Za-z_][A-Za-z0-9_-]*/
	    }
	  };
	};

	const TAGS = [
	  'a',
	  'abbr',
	  'address',
	  'article',
	  'aside',
	  'audio',
	  'b',
	  'blockquote',
	  'body',
	  'button',
	  'canvas',
	  'caption',
	  'cite',
	  'code',
	  'dd',
	  'del',
	  'details',
	  'dfn',
	  'div',
	  'dl',
	  'dt',
	  'em',
	  'fieldset',
	  'figcaption',
	  'figure',
	  'footer',
	  'form',
	  'h1',
	  'h2',
	  'h3',
	  'h4',
	  'h5',
	  'h6',
	  'header',
	  'hgroup',
	  'html',
	  'i',
	  'iframe',
	  'img',
	  'input',
	  'ins',
	  'kbd',
	  'label',
	  'legend',
	  'li',
	  'main',
	  'mark',
	  'menu',
	  'nav',
	  'object',
	  'ol',
	  'p',
	  'q',
	  'quote',
	  'samp',
	  'section',
	  'span',
	  'strong',
	  'summary',
	  'sup',
	  'table',
	  'tbody',
	  'td',
	  'textarea',
	  'tfoot',
	  'th',
	  'thead',
	  'time',
	  'tr',
	  'ul',
	  'var',
	  'video'
	];

	const MEDIA_FEATURES = [
	  'any-hover',
	  'any-pointer',
	  'aspect-ratio',
	  'color',
	  'color-gamut',
	  'color-index',
	  'device-aspect-ratio',
	  'device-height',
	  'device-width',
	  'display-mode',
	  'forced-colors',
	  'grid',
	  'height',
	  'hover',
	  'inverted-colors',
	  'monochrome',
	  'orientation',
	  'overflow-block',
	  'overflow-inline',
	  'pointer',
	  'prefers-color-scheme',
	  'prefers-contrast',
	  'prefers-reduced-motion',
	  'prefers-reduced-transparency',
	  'resolution',
	  'scan',
	  'scripting',
	  'update',
	  'width',
	  // TODO: find a better solution?
	  'min-width',
	  'max-width',
	  'min-height',
	  'max-height'
	];

	// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
	const PSEUDO_CLASSES = [
	  'active',
	  'any-link',
	  'blank',
	  'checked',
	  'current',
	  'default',
	  'defined',
	  'dir', // dir()
	  'disabled',
	  'drop',
	  'empty',
	  'enabled',
	  'first',
	  'first-child',
	  'first-of-type',
	  'fullscreen',
	  'future',
	  'focus',
	  'focus-visible',
	  'focus-within',
	  'has', // has()
	  'host', // host or host()
	  'host-context', // host-context()
	  'hover',
	  'indeterminate',
	  'in-range',
	  'invalid',
	  'is', // is()
	  'lang', // lang()
	  'last-child',
	  'last-of-type',
	  'left',
	  'link',
	  'local-link',
	  'not', // not()
	  'nth-child', // nth-child()
	  'nth-col', // nth-col()
	  'nth-last-child', // nth-last-child()
	  'nth-last-col', // nth-last-col()
	  'nth-last-of-type', //nth-last-of-type()
	  'nth-of-type', //nth-of-type()
	  'only-child',
	  'only-of-type',
	  'optional',
	  'out-of-range',
	  'past',
	  'placeholder-shown',
	  'read-only',
	  'read-write',
	  'required',
	  'right',
	  'root',
	  'scope',
	  'target',
	  'target-within',
	  'user-invalid',
	  'valid',
	  'visited',
	  'where' // where()
	];

	// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
	const PSEUDO_ELEMENTS = [
	  'after',
	  'backdrop',
	  'before',
	  'cue',
	  'cue-region',
	  'first-letter',
	  'first-line',
	  'grammar-error',
	  'marker',
	  'part',
	  'placeholder',
	  'selection',
	  'slotted',
	  'spelling-error'
	];

	const ATTRIBUTES = [
	  'align-content',
	  'align-items',
	  'align-self',
	  'all',
	  'animation',
	  'animation-delay',
	  'animation-direction',
	  'animation-duration',
	  'animation-fill-mode',
	  'animation-iteration-count',
	  'animation-name',
	  'animation-play-state',
	  'animation-timing-function',
	  'backface-visibility',
	  'background',
	  'background-attachment',
	  'background-blend-mode',
	  'background-clip',
	  'background-color',
	  'background-image',
	  'background-origin',
	  'background-position',
	  'background-repeat',
	  'background-size',
	  'block-size',
	  'border',
	  'border-block',
	  'border-block-color',
	  'border-block-end',
	  'border-block-end-color',
	  'border-block-end-style',
	  'border-block-end-width',
	  'border-block-start',
	  'border-block-start-color',
	  'border-block-start-style',
	  'border-block-start-width',
	  'border-block-style',
	  'border-block-width',
	  'border-bottom',
	  'border-bottom-color',
	  'border-bottom-left-radius',
	  'border-bottom-right-radius',
	  'border-bottom-style',
	  'border-bottom-width',
	  'border-collapse',
	  'border-color',
	  'border-image',
	  'border-image-outset',
	  'border-image-repeat',
	  'border-image-slice',
	  'border-image-source',
	  'border-image-width',
	  'border-inline',
	  'border-inline-color',
	  'border-inline-end',
	  'border-inline-end-color',
	  'border-inline-end-style',
	  'border-inline-end-width',
	  'border-inline-start',
	  'border-inline-start-color',
	  'border-inline-start-style',
	  'border-inline-start-width',
	  'border-inline-style',
	  'border-inline-width',
	  'border-left',
	  'border-left-color',
	  'border-left-style',
	  'border-left-width',
	  'border-radius',
	  'border-right',
	  'border-right-color',
	  'border-right-style',
	  'border-right-width',
	  'border-spacing',
	  'border-style',
	  'border-top',
	  'border-top-color',
	  'border-top-left-radius',
	  'border-top-right-radius',
	  'border-top-style',
	  'border-top-width',
	  'border-width',
	  'bottom',
	  'box-decoration-break',
	  'box-shadow',
	  'box-sizing',
	  'break-after',
	  'break-before',
	  'break-inside',
	  'caption-side',
	  'caret-color',
	  'clear',
	  'clip',
	  'clip-path',
	  'clip-rule',
	  'color',
	  'column-count',
	  'column-fill',
	  'column-gap',
	  'column-rule',
	  'column-rule-color',
	  'column-rule-style',
	  'column-rule-width',
	  'column-span',
	  'column-width',
	  'columns',
	  'contain',
	  'content',
	  'content-visibility',
	  'counter-increment',
	  'counter-reset',
	  'cue',
	  'cue-after',
	  'cue-before',
	  'cursor',
	  'direction',
	  'display',
	  'empty-cells',
	  'filter',
	  'flex',
	  'flex-basis',
	  'flex-direction',
	  'flex-flow',
	  'flex-grow',
	  'flex-shrink',
	  'flex-wrap',
	  'float',
	  'flow',
	  'font',
	  'font-display',
	  'font-family',
	  'font-feature-settings',
	  'font-kerning',
	  'font-language-override',
	  'font-size',
	  'font-size-adjust',
	  'font-smoothing',
	  'font-stretch',
	  'font-style',
	  'font-synthesis',
	  'font-variant',
	  'font-variant-caps',
	  'font-variant-east-asian',
	  'font-variant-ligatures',
	  'font-variant-numeric',
	  'font-variant-position',
	  'font-variation-settings',
	  'font-weight',
	  'gap',
	  'glyph-orientation-vertical',
	  'grid',
	  'grid-area',
	  'grid-auto-columns',
	  'grid-auto-flow',
	  'grid-auto-rows',
	  'grid-column',
	  'grid-column-end',
	  'grid-column-start',
	  'grid-gap',
	  'grid-row',
	  'grid-row-end',
	  'grid-row-start',
	  'grid-template',
	  'grid-template-areas',
	  'grid-template-columns',
	  'grid-template-rows',
	  'hanging-punctuation',
	  'height',
	  'hyphens',
	  'icon',
	  'image-orientation',
	  'image-rendering',
	  'image-resolution',
	  'ime-mode',
	  'inline-size',
	  'isolation',
	  'justify-content',
	  'left',
	  'letter-spacing',
	  'line-break',
	  'line-height',
	  'list-style',
	  'list-style-image',
	  'list-style-position',
	  'list-style-type',
	  'margin',
	  'margin-block',
	  'margin-block-end',
	  'margin-block-start',
	  'margin-bottom',
	  'margin-inline',
	  'margin-inline-end',
	  'margin-inline-start',
	  'margin-left',
	  'margin-right',
	  'margin-top',
	  'marks',
	  'mask',
	  'mask-border',
	  'mask-border-mode',
	  'mask-border-outset',
	  'mask-border-repeat',
	  'mask-border-slice',
	  'mask-border-source',
	  'mask-border-width',
	  'mask-clip',
	  'mask-composite',
	  'mask-image',
	  'mask-mode',
	  'mask-origin',
	  'mask-position',
	  'mask-repeat',
	  'mask-size',
	  'mask-type',
	  'max-block-size',
	  'max-height',
	  'max-inline-size',
	  'max-width',
	  'min-block-size',
	  'min-height',
	  'min-inline-size',
	  'min-width',
	  'mix-blend-mode',
	  'nav-down',
	  'nav-index',
	  'nav-left',
	  'nav-right',
	  'nav-up',
	  'none',
	  'normal',
	  'object-fit',
	  'object-position',
	  'opacity',
	  'order',
	  'orphans',
	  'outline',
	  'outline-color',
	  'outline-offset',
	  'outline-style',
	  'outline-width',
	  'overflow',
	  'overflow-wrap',
	  'overflow-x',
	  'overflow-y',
	  'padding',
	  'padding-block',
	  'padding-block-end',
	  'padding-block-start',
	  'padding-bottom',
	  'padding-inline',
	  'padding-inline-end',
	  'padding-inline-start',
	  'padding-left',
	  'padding-right',
	  'padding-top',
	  'page-break-after',
	  'page-break-before',
	  'page-break-inside',
	  'pause',
	  'pause-after',
	  'pause-before',
	  'perspective',
	  'perspective-origin',
	  'pointer-events',
	  'position',
	  'quotes',
	  'resize',
	  'rest',
	  'rest-after',
	  'rest-before',
	  'right',
	  'row-gap',
	  'scroll-margin',
	  'scroll-margin-block',
	  'scroll-margin-block-end',
	  'scroll-margin-block-start',
	  'scroll-margin-bottom',
	  'scroll-margin-inline',
	  'scroll-margin-inline-end',
	  'scroll-margin-inline-start',
	  'scroll-margin-left',
	  'scroll-margin-right',
	  'scroll-margin-top',
	  'scroll-padding',
	  'scroll-padding-block',
	  'scroll-padding-block-end',
	  'scroll-padding-block-start',
	  'scroll-padding-bottom',
	  'scroll-padding-inline',
	  'scroll-padding-inline-end',
	  'scroll-padding-inline-start',
	  'scroll-padding-left',
	  'scroll-padding-right',
	  'scroll-padding-top',
	  'scroll-snap-align',
	  'scroll-snap-stop',
	  'scroll-snap-type',
	  'scrollbar-color',
	  'scrollbar-gutter',
	  'scrollbar-width',
	  'shape-image-threshold',
	  'shape-margin',
	  'shape-outside',
	  'speak',
	  'speak-as',
	  'src', // @font-face
	  'tab-size',
	  'table-layout',
	  'text-align',
	  'text-align-all',
	  'text-align-last',
	  'text-combine-upright',
	  'text-decoration',
	  'text-decoration-color',
	  'text-decoration-line',
	  'text-decoration-style',
	  'text-emphasis',
	  'text-emphasis-color',
	  'text-emphasis-position',
	  'text-emphasis-style',
	  'text-indent',
	  'text-justify',
	  'text-orientation',
	  'text-overflow',
	  'text-rendering',
	  'text-shadow',
	  'text-transform',
	  'text-underline-position',
	  'top',
	  'transform',
	  'transform-box',
	  'transform-origin',
	  'transform-style',
	  'transition',
	  'transition-delay',
	  'transition-duration',
	  'transition-property',
	  'transition-timing-function',
	  'unicode-bidi',
	  'vertical-align',
	  'visibility',
	  'voice-balance',
	  'voice-duration',
	  'voice-family',
	  'voice-pitch',
	  'voice-range',
	  'voice-rate',
	  'voice-stress',
	  'voice-volume',
	  'white-space',
	  'widows',
	  'width',
	  'will-change',
	  'word-break',
	  'word-spacing',
	  'word-wrap',
	  'writing-mode',
	  'z-index'
	  // reverse makes sure longer attributes `font-weight` are matched fully
	  // instead of getting false positives on say `font`
	].reverse();

	/*
	Language: Stylus
	Author: Bryant Williams <b.n.williams@gmail.com>
	Description: Stylus is an expressive, robust, feature-rich CSS language built for nodejs.
	Website: https://github.com/stylus/stylus
	Category: css, web
	*/


	/** @type LanguageFn */
	function stylus(hljs) {
	  const modes = MODES(hljs);

	  const AT_MODIFIERS = "and or not only";
	  const VARIABLE = {
	    className: 'variable',
	    begin: '\\$' + hljs.IDENT_RE
	  };

	  const AT_KEYWORDS = [
	    'charset',
	    'css',
	    'debug',
	    'extend',
	    'font-face',
	    'for',
	    'import',
	    'include',
	    'keyframes',
	    'media',
	    'mixin',
	    'page',
	    'warn',
	    'while'
	  ];

	  const LOOKAHEAD_TAG_END = '(?=[.\\s\\n[:,(])';

	  // illegals
	  const ILLEGAL = [
	    '\\?',
	    '(\\bReturn\\b)', // monkey
	    '(\\bEnd\\b)', // monkey
	    '(\\bend\\b)', // vbscript
	    '(\\bdef\\b)', // gradle
	    ';', // a whole lot of languages
	    '#\\s', // markdown
	    '\\*\\s', // markdown
	    '===\\s', // markdown
	    '\\|',
	    '%' // prolog
	  ];

	  return {
	    name: 'Stylus',
	    aliases: [ 'styl' ],
	    case_insensitive: false,
	    keywords: 'if else for in',
	    illegal: '(' + ILLEGAL.join('|') + ')',
	    contains: [

	      // strings
	      hljs.QUOTE_STRING_MODE,
	      hljs.APOS_STRING_MODE,

	      // comments
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,

	      // hex colors
	      modes.HEXCOLOR,

	      // class tag
	      {
	        begin: '\\.[a-zA-Z][a-zA-Z0-9_-]*' + LOOKAHEAD_TAG_END,
	        className: 'selector-class'
	      },

	      // id tag
	      {
	        begin: '#[a-zA-Z][a-zA-Z0-9_-]*' + LOOKAHEAD_TAG_END,
	        className: 'selector-id'
	      },

	      // tags
	      {
	        begin: '\\b(' + TAGS.join('|') + ')' + LOOKAHEAD_TAG_END,
	        className: 'selector-tag'
	      },

	      // psuedo selectors
	      {
	        className: 'selector-pseudo',
	        begin: '&?:(' + PSEUDO_CLASSES.join('|') + ')' + LOOKAHEAD_TAG_END
	      },
	      {
	        className: 'selector-pseudo',
	        begin: '&?:(:)?(' + PSEUDO_ELEMENTS.join('|') + ')' + LOOKAHEAD_TAG_END
	      },

	      modes.ATTRIBUTE_SELECTOR_MODE,

	      {
	        className: "keyword",
	        begin: /@media/,
	        starts: {
	          end: /[{;}]/,
	          keywords: {
	            $pattern: /[a-z-]+/,
	            keyword: AT_MODIFIERS,
	            attribute: MEDIA_FEATURES.join(" ")
	          },
	          contains: [ modes.CSS_NUMBER_MODE ]
	        }
	      },

	      // @ keywords
	      {
	        className: 'keyword',
	        begin: '\@((-(o|moz|ms|webkit)-)?(' + AT_KEYWORDS.join('|') + '))\\b'
	      },

	      // variables
	      VARIABLE,

	      // dimension
	      modes.CSS_NUMBER_MODE,

	      // functions
	      //  - only from beginning of line + whitespace
	      {
	        className: 'function',
	        begin: '^[a-zA-Z][a-zA-Z0-9_\-]*\\(.*\\)',
	        illegal: '[\\n]',
	        returnBegin: true,
	        contains: [
	          {
	            className: 'title',
	            begin: '\\b[a-zA-Z][a-zA-Z0-9_\-]*'
	          },
	          {
	            className: 'params',
	            begin: /\(/,
	            end: /\)/,
	            contains: [
	              modes.HEXCOLOR,
	              VARIABLE,
	              hljs.APOS_STRING_MODE,
	              modes.CSS_NUMBER_MODE,
	              hljs.QUOTE_STRING_MODE
	            ]
	          }
	        ]
	      },

	      // css variables
	      modes.CSS_VARIABLE,

	      // attributes
	      //  - only from beginning of line + whitespace
	      //  - must have whitespace after it
	      {
	        className: 'attribute',
	        begin: '\\b(' + ATTRIBUTES.join('|') + ')\\b',
	        starts: {
	          // value container
	          end: /;|$/,
	          contains: [
	            modes.HEXCOLOR,
	            VARIABLE,
	            hljs.APOS_STRING_MODE,
	            hljs.QUOTE_STRING_MODE,
	            modes.CSS_NUMBER_MODE,
	            hljs.C_BLOCK_COMMENT_MODE,
	            modes.IMPORTANT,
	            modes.FUNCTION_DISPATCH
	          ],
	          illegal: /\./,
	          relevance: 0
	        }
	      },
	      modes.FUNCTION_DISPATCH
	    ]
	  };
	}

	stylus_1 = stylus;
	return stylus_1;
}

/*
Language: SubUnit
Author: Sergey Bronnikov <sergeyb@bronevichok.ru>
Website: https://pypi.org/project/python-subunit/
*/

var subunit_1;
var hasRequiredSubunit;

function requireSubunit () {
	if (hasRequiredSubunit) return subunit_1;
	hasRequiredSubunit = 1;
	function subunit(hljs) {
	  const DETAILS = {
	    className: 'string',
	    begin: '\\[\n(multipart)?',
	    end: '\\]\n'
	  };
	  const TIME = {
	    className: 'string',
	    begin: '\\d{4}-\\d{2}-\\d{2}(\\s+)\\d{2}:\\d{2}:\\d{2}\.\\d+Z'
	  };
	  const PROGRESSVALUE = {
	    className: 'string',
	    begin: '(\\+|-)\\d+'
	  };
	  const KEYWORDS = {
	    className: 'keyword',
	    relevance: 10,
	    variants: [
	      { begin: '^(test|testing|success|successful|failure|error|skip|xfail|uxsuccess)(:?)\\s+(test)?' },
	      { begin: '^progress(:?)(\\s+)?(pop|push)?' },
	      { begin: '^tags:' },
	      { begin: '^time:' }
	    ]
	  };
	  return {
	    name: 'SubUnit',
	    case_insensitive: true,
	    contains: [
	      DETAILS,
	      TIME,
	      PROGRESSVALUE,
	      KEYWORDS
	    ]
	  };
	}

	subunit_1 = subunit;
	return subunit_1;
}

/**
 * @param {string} value
 * @returns {RegExp}
 * */

var swift_1;
var hasRequiredSwift;

function requireSwift () {
	if (hasRequiredSwift) return swift_1;
	hasRequiredSwift = 1;
	/**
	 * @param {RegExp | string } re
	 * @returns {string}
	 */
	function source(re) {
	  if (!re) return null;
	  if (typeof re === "string") return re;

	  return re.source;
	}

	/**
	 * @param {RegExp | string } re
	 * @returns {string}
	 */
	function lookahead(re) {
	  return concat('(?=', re, ')');
	}

	/**
	 * @param {...(RegExp | string) } args
	 * @returns {string}
	 */
	function concat(...args) {
	  const joined = args.map((x) => source(x)).join("");
	  return joined;
	}

	/**
	 * @param { Array<string | RegExp | Object> } args
	 * @returns {object}
	 */
	function stripOptionsFromArgs(args) {
	  const opts = args[args.length - 1];

	  if (typeof opts === 'object' && opts.constructor === Object) {
	    args.splice(args.length - 1, 1);
	    return opts;
	  } else {
	    return {};
	  }
	}

	/** @typedef { {capture?: boolean} } RegexEitherOptions */

	/**
	 * Any of the passed expresssions may match
	 *
	 * Creates a huge this | this | that | that match
	 * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args
	 * @returns {string}
	 */
	function either(...args) {
	  /** @type { object & {capture?: boolean} }  */
	  const opts = stripOptionsFromArgs(args);
	  const joined = '('
	    + (opts.capture ? "" : "?:")
	    + args.map((x) => source(x)).join("|") + ")";
	  return joined;
	}

	const keywordWrapper = keyword => concat(
	  /\b/,
	  keyword,
	  /\w$/.test(keyword) ? /\b/ : /\B/
	);

	// Keywords that require a leading dot.
	const dotKeywords = [
	  'Protocol', // contextual
	  'Type' // contextual
	].map(keywordWrapper);

	// Keywords that may have a leading dot.
	const optionalDotKeywords = [
	  'init',
	  'self'
	].map(keywordWrapper);

	// should register as keyword, not type
	const keywordTypes = [
	  'Any',
	  'Self'
	];

	// Regular keywords and literals.
	const keywords = [
	  // strings below will be fed into the regular `keywords` engine while regex
	  // will result in additional modes being created to scan for those keywords to
	  // avoid conflicts with other rules
	  'actor',
	  'any', // contextual
	  'associatedtype',
	  'async',
	  'await',
	  /as\?/, // operator
	  /as!/, // operator
	  'as', // operator
	  'borrowing', // contextual
	  'break',
	  'case',
	  'catch',
	  'class',
	  'consume', // contextual
	  'consuming', // contextual
	  'continue',
	  'convenience', // contextual
	  'copy', // contextual
	  'default',
	  'defer',
	  'deinit',
	  'didSet', // contextual
	  'distributed',
	  'do',
	  'dynamic', // contextual
	  'each',
	  'else',
	  'enum',
	  'extension',
	  'fallthrough',
	  /fileprivate\(set\)/,
	  'fileprivate',
	  'final', // contextual
	  'for',
	  'func',
	  'get', // contextual
	  'guard',
	  'if',
	  'import',
	  'indirect', // contextual
	  'infix', // contextual
	  /init\?/,
	  /init!/,
	  'inout',
	  /internal\(set\)/,
	  'internal',
	  'in',
	  'is', // operator
	  'isolated', // contextual
	  'nonisolated', // contextual
	  'lazy', // contextual
	  'let',
	  'macro',
	  'mutating', // contextual
	  'nonmutating', // contextual
	  /open\(set\)/, // contextual
	  'open', // contextual
	  'operator',
	  'optional', // contextual
	  'override', // contextual
	  'postfix', // contextual
	  'precedencegroup',
	  'prefix', // contextual
	  /private\(set\)/,
	  'private',
	  'protocol',
	  /public\(set\)/,
	  'public',
	  'repeat',
	  'required', // contextual
	  'rethrows',
	  'return',
	  'set', // contextual
	  'some', // contextual
	  'static',
	  'struct',
	  'subscript',
	  'super',
	  'switch',
	  'throws',
	  'throw',
	  /try\?/, // operator
	  /try!/, // operator
	  'try', // operator
	  'typealias',
	  /unowned\(safe\)/, // contextual
	  /unowned\(unsafe\)/, // contextual
	  'unowned', // contextual
	  'var',
	  'weak', // contextual
	  'where',
	  'while',
	  'willSet' // contextual
	];

	// NOTE: Contextual keywords are reserved only in specific contexts.
	// Ideally, these should be matched using modes to avoid false positives.

	// Literals.
	const literals = [
	  'false',
	  'nil',
	  'true'
	];

	// Keywords used in precedence groups.
	const precedencegroupKeywords = [
	  'assignment',
	  'associativity',
	  'higherThan',
	  'left',
	  'lowerThan',
	  'none',
	  'right'
	];

	// Keywords that start with a number sign (#).
	// #(un)available is handled separately.
	const numberSignKeywords = [
	  '#colorLiteral',
	  '#column',
	  '#dsohandle',
	  '#else',
	  '#elseif',
	  '#endif',
	  '#error',
	  '#file',
	  '#fileID',
	  '#fileLiteral',
	  '#filePath',
	  '#function',
	  '#if',
	  '#imageLiteral',
	  '#keyPath',
	  '#line',
	  '#selector',
	  '#sourceLocation',
	  '#warning'
	];

	// Global functions in the Standard Library.
	const builtIns = [
	  'abs',
	  'all',
	  'any',
	  'assert',
	  'assertionFailure',
	  'debugPrint',
	  'dump',
	  'fatalError',
	  'getVaList',
	  'isKnownUniquelyReferenced',
	  'max',
	  'min',
	  'numericCast',
	  'pointwiseMax',
	  'pointwiseMin',
	  'precondition',
	  'preconditionFailure',
	  'print',
	  'readLine',
	  'repeatElement',
	  'sequence',
	  'stride',
	  'swap',
	  'swift_unboxFromSwiftValueWithType',
	  'transcode',
	  'type',
	  'unsafeBitCast',
	  'unsafeDowncast',
	  'withExtendedLifetime',
	  'withUnsafeMutablePointer',
	  'withUnsafePointer',
	  'withVaList',
	  'withoutActuallyEscaping',
	  'zip'
	];

	// Valid first characters for operators.
	const operatorHead = either(
	  /[/=\-+!*%<>&|^~?]/,
	  /[\u00A1-\u00A7]/,
	  /[\u00A9\u00AB]/,
	  /[\u00AC\u00AE]/,
	  /[\u00B0\u00B1]/,
	  /[\u00B6\u00BB\u00BF\u00D7\u00F7]/,
	  /[\u2016-\u2017]/,
	  /[\u2020-\u2027]/,
	  /[\u2030-\u203E]/,
	  /[\u2041-\u2053]/,
	  /[\u2055-\u205E]/,
	  /[\u2190-\u23FF]/,
	  /[\u2500-\u2775]/,
	  /[\u2794-\u2BFF]/,
	  /[\u2E00-\u2E7F]/,
	  /[\u3001-\u3003]/,
	  /[\u3008-\u3020]/,
	  /[\u3030]/
	);

	// Valid characters for operators.
	const operatorCharacter = either(
	  operatorHead,
	  /[\u0300-\u036F]/,
	  /[\u1DC0-\u1DFF]/,
	  /[\u20D0-\u20FF]/,
	  /[\uFE00-\uFE0F]/,
	  /[\uFE20-\uFE2F]/
	  // TODO: The following characters are also allowed, but the regex isn't supported yet.
	  // /[\u{E0100}-\u{E01EF}]/u
	);

	// Valid operator.
	const operator = concat(operatorHead, operatorCharacter, '*');

	// Valid first characters for identifiers.
	const identifierHead = either(
	  /[a-zA-Z_]/,
	  /[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/,
	  /[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/,
	  /[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/,
	  /[\u1E00-\u1FFF]/,
	  /[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/,
	  /[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/,
	  /[\u2C00-\u2DFF\u2E80-\u2FFF]/,
	  /[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/,
	  /[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/,
	  /[\uFE47-\uFEFE\uFF00-\uFFFD]/ // Should be /[\uFE47-\uFFFD]/, but we have to exclude FEFF.
	  // The following characters are also allowed, but the regexes aren't supported yet.
	  // /[\u{10000}-\u{1FFFD}\u{20000-\u{2FFFD}\u{30000}-\u{3FFFD}\u{40000}-\u{4FFFD}]/u,
	  // /[\u{50000}-\u{5FFFD}\u{60000-\u{6FFFD}\u{70000}-\u{7FFFD}\u{80000}-\u{8FFFD}]/u,
	  // /[\u{90000}-\u{9FFFD}\u{A0000-\u{AFFFD}\u{B0000}-\u{BFFFD}\u{C0000}-\u{CFFFD}]/u,
	  // /[\u{D0000}-\u{DFFFD}\u{E0000-\u{EFFFD}]/u
	);

	// Valid characters for identifiers.
	const identifierCharacter = either(
	  identifierHead,
	  /\d/,
	  /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/
	);

	// Valid identifier.
	const identifier = concat(identifierHead, identifierCharacter, '*');

	// Valid type identifier.
	const typeIdentifier = concat(/[A-Z]/, identifierCharacter, '*');

	// Built-in attributes, which are highlighted as keywords.
	// @available is handled separately.
	// https://docs.swift.org/swift-book/documentation/the-swift-programming-language/attributes
	const keywordAttributes = [
	  'attached',
	  'autoclosure',
	  concat(/convention\(/, either('swift', 'block', 'c'), /\)/),
	  'discardableResult',
	  'dynamicCallable',
	  'dynamicMemberLookup',
	  'escaping',
	  'freestanding',
	  'frozen',
	  'GKInspectable',
	  'IBAction',
	  'IBDesignable',
	  'IBInspectable',
	  'IBOutlet',
	  'IBSegueAction',
	  'inlinable',
	  'main',
	  'nonobjc',
	  'NSApplicationMain',
	  'NSCopying',
	  'NSManaged',
	  concat(/objc\(/, identifier, /\)/),
	  'objc',
	  'objcMembers',
	  'propertyWrapper',
	  'requires_stored_property_inits',
	  'resultBuilder',
	  'Sendable',
	  'testable',
	  'UIApplicationMain',
	  'unchecked',
	  'unknown',
	  'usableFromInline',
	  'warn_unqualified_access'
	];

	// Contextual keywords used in @available and #(un)available.
	const availabilityKeywords = [
	  'iOS',
	  'iOSApplicationExtension',
	  'macOS',
	  'macOSApplicationExtension',
	  'macCatalyst',
	  'macCatalystApplicationExtension',
	  'watchOS',
	  'watchOSApplicationExtension',
	  'tvOS',
	  'tvOSApplicationExtension',
	  'swift'
	];

	/*
	Language: Swift
	Description: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.
	Author: Steven Van Impe <steven.vanimpe@icloud.com>
	Contributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>
	Website: https://swift.org
	Category: common, system
	*/


	/** @type LanguageFn */
	function swift(hljs) {
	  const WHITESPACE = {
	    match: /\s+/,
	    relevance: 0
	  };
	  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411
	  const BLOCK_COMMENT = hljs.COMMENT(
	    '/\\*',
	    '\\*/',
	    { contains: [ 'self' ] }
	  );
	  const COMMENTS = [
	    hljs.C_LINE_COMMENT_MODE,
	    BLOCK_COMMENT
	  ];

	  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413
	  // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html
	  const DOT_KEYWORD = {
	    match: [
	      /\./,
	      either(...dotKeywords, ...optionalDotKeywords)
	    ],
	    className: { 2: "keyword" }
	  };
	  const KEYWORD_GUARD = {
	    // Consume .keyword to prevent highlighting properties and methods as keywords.
	    match: concat(/\./, either(...keywords)),
	    relevance: 0
	  };
	  const PLAIN_KEYWORDS = keywords
	    .filter(kw => typeof kw === 'string')
	    .concat([ "_|0" ]); // seems common, so 0 relevance
	  const REGEX_KEYWORDS = keywords
	    .filter(kw => typeof kw !== 'string') // find regex
	    .concat(keywordTypes)
	    .map(keywordWrapper);
	  const KEYWORD = { variants: [
	    {
	      className: 'keyword',
	      match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)
	    }
	  ] };
	  // find all the regular keywords
	  const KEYWORDS = {
	    $pattern: either(
	      /\b\w+/, // regular keywords
	      /#\w+/ // number keywords
	    ),
	    keyword: PLAIN_KEYWORDS
	      .concat(numberSignKeywords),
	    literal: literals
	  };
	  const KEYWORD_MODES = [
	    DOT_KEYWORD,
	    KEYWORD_GUARD,
	    KEYWORD
	  ];

	  // https://github.com/apple/swift/tree/main/stdlib/public/core
	  const BUILT_IN_GUARD = {
	    // Consume .built_in to prevent highlighting properties and methods.
	    match: concat(/\./, either(...builtIns)),
	    relevance: 0
	  };
	  const BUILT_IN = {
	    className: 'built_in',
	    match: concat(/\b/, either(...builtIns), /(?=\()/)
	  };
	  const BUILT_INS = [
	    BUILT_IN_GUARD,
	    BUILT_IN
	  ];

	  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418
	  const OPERATOR_GUARD = {
	    // Prevent -> from being highlighting as an operator.
	    match: /->/,
	    relevance: 0
	  };
	  const OPERATOR = {
	    className: 'operator',
	    relevance: 0,
	    variants: [
	      { match: operator },
	      {
	        // dot-operator: only operators that start with a dot are allowed to use dots as
	        // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more
	        // characters that may also include dots.
	        match: `\\.(\\.|${operatorCharacter})+` }
	    ]
	  };
	  const OPERATORS = [
	    OPERATOR_GUARD,
	    OPERATOR
	  ];

	  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal
	  // TODO: Update for leading `-` after lookbehind is supported everywhere
	  const decimalDigits = '([0-9]_*)+';
	  const hexDigits = '([0-9a-fA-F]_*)+';
	  const NUMBER = {
	    className: 'number',
	    relevance: 0,
	    variants: [
	      // decimal floating-point-literal (subsumes decimal-literal)
	      { match: `\\b(${decimalDigits})(\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\b` },
	      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
	      { match: `\\b0x(${hexDigits})(\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\b` },
	      // octal-literal
	      { match: /\b0o([0-7]_*)+\b/ },
	      // binary-literal
	      { match: /\b0b([01]_*)+\b/ }
	    ]
	  };

	  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_string-literal
	  const ESCAPED_CHARACTER = (rawDelimiter = "") => ({
	    className: 'subst',
	    variants: [
	      { match: concat(/\\/, rawDelimiter, /[0\\tnr"']/) },
	      { match: concat(/\\/, rawDelimiter, /u\{[0-9a-fA-F]{1,8}\}/) }
	    ]
	  });
	  const ESCAPED_NEWLINE = (rawDelimiter = "") => ({
	    className: 'subst',
	    match: concat(/\\/, rawDelimiter, /[\t ]*(?:[\r\n]|\r\n)/)
	  });
	  const INTERPOLATION = (rawDelimiter = "") => ({
	    className: 'subst',
	    label: "interpol",
	    begin: concat(/\\/, rawDelimiter, /\(/),
	    end: /\)/
	  });
	  const MULTILINE_STRING = (rawDelimiter = "") => ({
	    begin: concat(rawDelimiter, /"""/),
	    end: concat(/"""/, rawDelimiter),
	    contains: [
	      ESCAPED_CHARACTER(rawDelimiter),
	      ESCAPED_NEWLINE(rawDelimiter),
	      INTERPOLATION(rawDelimiter)
	    ]
	  });
	  const SINGLE_LINE_STRING = (rawDelimiter = "") => ({
	    begin: concat(rawDelimiter, /"/),
	    end: concat(/"/, rawDelimiter),
	    contains: [
	      ESCAPED_CHARACTER(rawDelimiter),
	      INTERPOLATION(rawDelimiter)
	    ]
	  });
	  const STRING = {
	    className: 'string',
	    variants: [
	      MULTILINE_STRING(),
	      MULTILINE_STRING("#"),
	      MULTILINE_STRING("##"),
	      MULTILINE_STRING("###"),
	      SINGLE_LINE_STRING(),
	      SINGLE_LINE_STRING("#"),
	      SINGLE_LINE_STRING("##"),
	      SINGLE_LINE_STRING("###")
	    ]
	  };

	  const REGEXP_CONTENTS = [
	    hljs.BACKSLASH_ESCAPE,
	    {
	      begin: /\[/,
	      end: /\]/,
	      relevance: 0,
	      contains: [ hljs.BACKSLASH_ESCAPE ]
	    }
	  ];

	  const BARE_REGEXP_LITERAL = {
	    begin: /\/[^\s](?=[^/\n]*\/)/,
	    end: /\//,
	    contains: REGEXP_CONTENTS
	  };

	  const EXTENDED_REGEXP_LITERAL = (rawDelimiter) => {
	    const begin = concat(rawDelimiter, /\//);
	    const end = concat(/\//, rawDelimiter);
	    return {
	      begin,
	      end,
	      contains: [
	        ...REGEXP_CONTENTS,
	        {
	          scope: "comment",
	          begin: `#(?!.*${end})`,
	          end: /$/,
	        },
	      ],
	    };
	  };

	  // https://docs.swift.org/swift-book/documentation/the-swift-programming-language/lexicalstructure/#Regular-Expression-Literals
	  const REGEXP = {
	    scope: "regexp",
	    variants: [
	      EXTENDED_REGEXP_LITERAL('###'),
	      EXTENDED_REGEXP_LITERAL('##'),
	      EXTENDED_REGEXP_LITERAL('#'),
	      BARE_REGEXP_LITERAL
	    ]
	  };

	  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID412
	  const QUOTED_IDENTIFIER = { match: concat(/`/, identifier, /`/) };
	  const IMPLICIT_PARAMETER = {
	    className: 'variable',
	    match: /\$\d+/
	  };
	  const PROPERTY_WRAPPER_PROJECTION = {
	    className: 'variable',
	    match: `\\$${identifierCharacter}+`
	  };
	  const IDENTIFIERS = [
	    QUOTED_IDENTIFIER,
	    IMPLICIT_PARAMETER,
	    PROPERTY_WRAPPER_PROJECTION
	  ];

	  // https://docs.swift.org/swift-book/ReferenceManual/Attributes.html
	  const AVAILABLE_ATTRIBUTE = {
	    match: /(@|#(un)?)available/,
	    scope: 'keyword',
	    starts: { contains: [
	      {
	        begin: /\(/,
	        end: /\)/,
	        keywords: availabilityKeywords,
	        contains: [
	          ...OPERATORS,
	          NUMBER,
	          STRING
	        ]
	      }
	    ] }
	  };
	  const KEYWORD_ATTRIBUTE = {
	    scope: 'keyword',
	    match: concat(/@/, either(...keywordAttributes))
	  };
	  const USER_DEFINED_ATTRIBUTE = {
	    scope: 'meta',
	    match: concat(/@/, identifier)
	  };
	  const ATTRIBUTES = [
	    AVAILABLE_ATTRIBUTE,
	    KEYWORD_ATTRIBUTE,
	    USER_DEFINED_ATTRIBUTE
	  ];

	  // https://docs.swift.org/swift-book/ReferenceManual/Types.html
	  const TYPE = {
	    match: lookahead(/\b[A-Z]/),
	    relevance: 0,
	    contains: [
	      { // Common Apple frameworks, for relevance boost
	        className: 'type',
	        match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, '+')
	      },
	      { // Type identifier
	        className: 'type',
	        match: typeIdentifier,
	        relevance: 0
	      },
	      { // Optional type
	        match: /[?!]+/,
	        relevance: 0
	      },
	      { // Variadic parameter
	        match: /\.\.\./,
	        relevance: 0
	      },
	      { // Protocol composition
	        match: concat(/\s+&\s+/, lookahead(typeIdentifier)),
	        relevance: 0
	      }
	    ]
	  };
	  const GENERIC_ARGUMENTS = {
	    begin: /</,
	    end: />/,
	    keywords: KEYWORDS,
	    contains: [
	      ...COMMENTS,
	      ...KEYWORD_MODES,
	      ...ATTRIBUTES,
	      OPERATOR_GUARD,
	      TYPE
	    ]
	  };
	  TYPE.contains.push(GENERIC_ARGUMENTS);

	  // https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552
	  // Prevents element names from being highlighted as keywords.
	  const TUPLE_ELEMENT_NAME = {
	    match: concat(identifier, /\s*:/),
	    keywords: "_|0",
	    relevance: 0
	  };
	  // Matches tuples as well as the parameter list of a function type.
	  const TUPLE = {
	    begin: /\(/,
	    end: /\)/,
	    relevance: 0,
	    keywords: KEYWORDS,
	    contains: [
	      'self',
	      TUPLE_ELEMENT_NAME,
	      ...COMMENTS,
	      REGEXP,
	      ...KEYWORD_MODES,
	      ...BUILT_INS,
	      ...OPERATORS,
	      NUMBER,
	      STRING,
	      ...IDENTIFIERS,
	      ...ATTRIBUTES,
	      TYPE
	    ]
	  };

	  const GENERIC_PARAMETERS = {
	    begin: /</,
	    end: />/,
	    keywords: 'repeat each',
	    contains: [
	      ...COMMENTS,
	      TYPE
	    ]
	  };
	  const FUNCTION_PARAMETER_NAME = {
	    begin: either(
	      lookahead(concat(identifier, /\s*:/)),
	      lookahead(concat(identifier, /\s+/, identifier, /\s*:/))
	    ),
	    end: /:/,
	    relevance: 0,
	    contains: [
	      {
	        className: 'keyword',
	        match: /\b_\b/
	      },
	      {
	        className: 'params',
	        match: identifier
	      }
	    ]
	  };
	  const FUNCTION_PARAMETERS = {
	    begin: /\(/,
	    end: /\)/,
	    keywords: KEYWORDS,
	    contains: [
	      FUNCTION_PARAMETER_NAME,
	      ...COMMENTS,
	      ...KEYWORD_MODES,
	      ...OPERATORS,
	      NUMBER,
	      STRING,
	      ...ATTRIBUTES,
	      TYPE,
	      TUPLE
	    ],
	    endsParent: true,
	    illegal: /["']/
	  };
	  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362
	  // https://docs.swift.org/swift-book/documentation/the-swift-programming-language/declarations/#Macro-Declaration
	  const FUNCTION_OR_MACRO = {
	    match: [
	      /(func|macro)/,
	      /\s+/,
	      either(QUOTED_IDENTIFIER.match, identifier, operator)
	    ],
	    className: {
	      1: "keyword",
	      3: "title.function"
	    },
	    contains: [
	      GENERIC_PARAMETERS,
	      FUNCTION_PARAMETERS,
	      WHITESPACE
	    ],
	    illegal: [
	      /\[/,
	      /%/
	    ]
	  };

	  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID375
	  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID379
	  const INIT_SUBSCRIPT = {
	    match: [
	      /\b(?:subscript|init[?!]?)/,
	      /\s*(?=[<(])/,
	    ],
	    className: { 1: "keyword" },
	    contains: [
	      GENERIC_PARAMETERS,
	      FUNCTION_PARAMETERS,
	      WHITESPACE
	    ],
	    illegal: /\[|%/
	  };
	  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380
	  const OPERATOR_DECLARATION = {
	    match: [
	      /operator/,
	      /\s+/,
	      operator
	    ],
	    className: {
	      1: "keyword",
	      3: "title"
	    }
	  };

	  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID550
	  const PRECEDENCEGROUP = {
	    begin: [
	      /precedencegroup/,
	      /\s+/,
	      typeIdentifier
	    ],
	    className: {
	      1: "keyword",
	      3: "title"
	    },
	    contains: [ TYPE ],
	    keywords: [
	      ...precedencegroupKeywords,
	      ...literals
	    ],
	    end: /}/
	  };

	  // Add supported submodes to string interpolation.
	  for (const variant of STRING.variants) {
	    const interpolation = variant.contains.find(mode => mode.label === "interpol");
	    // TODO: Interpolation can contain any expression, so there's room for improvement here.
	    interpolation.keywords = KEYWORDS;
	    const submodes = [
	      ...KEYWORD_MODES,
	      ...BUILT_INS,
	      ...OPERATORS,
	      NUMBER,
	      STRING,
	      ...IDENTIFIERS
	    ];
	    interpolation.contains = [
	      ...submodes,
	      {
	        begin: /\(/,
	        end: /\)/,
	        contains: [
	          'self',
	          ...submodes
	        ]
	      }
	    ];
	  }

	  return {
	    name: 'Swift',
	    keywords: KEYWORDS,
	    contains: [
	      ...COMMENTS,
	      FUNCTION_OR_MACRO,
	      INIT_SUBSCRIPT,
	      {
	        beginKeywords: 'struct protocol class extension enum actor',
	        end: '\\{',
	        excludeEnd: true,
	        keywords: KEYWORDS,
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, {
	            className: "title.class",
	            begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/
	          }),
	          ...KEYWORD_MODES
	        ]
	      },
	      OPERATOR_DECLARATION,
	      PRECEDENCEGROUP,
	      {
	        beginKeywords: 'import',
	        end: /$/,
	        contains: [ ...COMMENTS ],
	        relevance: 0
	      },
	      REGEXP,
	      ...KEYWORD_MODES,
	      ...BUILT_INS,
	      ...OPERATORS,
	      NUMBER,
	      STRING,
	      ...IDENTIFIERS,
	      ...ATTRIBUTES,
	      TYPE,
	      TUPLE
	    ]
	  };
	}

	swift_1 = swift;
	return swift_1;
}

/*
Language: Tagger Script
Author: Philipp Wolfer <ph.wolfer@gmail.com>
Description: Syntax Highlighting for the Tagger Script as used by MusicBrainz Picard.
Website: https://picard.musicbrainz.org
 */

var taggerscript_1;
var hasRequiredTaggerscript;

function requireTaggerscript () {
	if (hasRequiredTaggerscript) return taggerscript_1;
	hasRequiredTaggerscript = 1;
	function taggerscript(hljs) {
	  const NOOP = {
	    className: 'comment',
	    begin: /\$noop\(/,
	    end: /\)/,
	    contains: [
	      { begin: /\\[()]/ },
	      {
	        begin: /\(/,
	        end: /\)/,
	        contains: [
	          { begin: /\\[()]/ },
	          'self'
	        ]
	      }
	    ],
	    relevance: 10
	  };

	  const FUNCTION = {
	    className: 'keyword',
	    begin: /\$[_a-zA-Z0-9]+(?=\()/
	  };

	  const VARIABLE = {
	    className: 'variable',
	    begin: /%[_a-zA-Z0-9:]+%/
	  };

	  const ESCAPE_SEQUENCE_UNICODE = {
	    className: 'symbol',
	    begin: /\\u[a-fA-F0-9]{4}/
	  };

	  const ESCAPE_SEQUENCE = {
	    className: 'symbol',
	    begin: /\\[\\nt$%,()]/
	  };

	  return {
	    name: 'Tagger Script',
	    contains: [
	      NOOP,
	      FUNCTION,
	      VARIABLE,
	      ESCAPE_SEQUENCE,
	      ESCAPE_SEQUENCE_UNICODE
	    ]
	  };
	}

	taggerscript_1 = taggerscript;
	return taggerscript_1;
}

/*
Language: YAML
Description: Yet Another Markdown Language
Author: Stefan Wienert <stwienert@gmail.com>
Contributors: Carl Baxter <carl@cbax.tech>
Requires: ruby.js
Website: https://yaml.org
Category: common, config
*/

var yaml_1;
var hasRequiredYaml;

function requireYaml () {
	if (hasRequiredYaml) return yaml_1;
	hasRequiredYaml = 1;
	function yaml(hljs) {
	  const LITERALS = 'true false yes no null';

	  // YAML spec allows non-reserved URI characters in tags.
	  const URI_CHARACTERS = '[\\w#;/?:@&=+$,.~*\'()[\\]]+';

	  // Define keys as starting with a word character
	  // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods
	  // ...and ending with a colon followed immediately by a space, tab or newline.
	  // The YAML spec allows for much more than this, but this covers most use-cases.
	  const KEY = {
	    className: 'attr',
	    variants: [
	      { begin: '\\w[\\w :\\/.-]*:(?=[ \t]|$)' },
	      { // double quoted keys
	        begin: '"\\w[\\w :\\/.-]*":(?=[ \t]|$)' },
	      { // single quoted keys
	        begin: '\'\\w[\\w :\\/.-]*\':(?=[ \t]|$)' }
	    ]
	  };

	  const TEMPLATE_VARIABLES = {
	    className: 'template-variable',
	    variants: [
	      { // jinja templates Ansible
	        begin: /\{\{/,
	        end: /\}\}/
	      },
	      { // Ruby i18n
	        begin: /%\{/,
	        end: /\}/
	      }
	    ]
	  };
	  const STRING = {
	    className: 'string',
	    relevance: 0,
	    variants: [
	      {
	        begin: /'/,
	        end: /'/
	      },
	      {
	        begin: /"/,
	        end: /"/
	      },
	      { begin: /\S+/ }
	    ],
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      TEMPLATE_VARIABLES
	    ]
	  };

	  // Strings inside of value containers (objects) can't contain braces,
	  // brackets, or commas
	  const CONTAINER_STRING = hljs.inherit(STRING, { variants: [
	    {
	      begin: /'/,
	      end: /'/
	    },
	    {
	      begin: /"/,
	      end: /"/
	    },
	    { begin: /[^\s,{}[\]]+/ }
	  ] });

	  const DATE_RE = '[0-9]{4}(-[0-9][0-9]){0,2}';
	  const TIME_RE = '([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?';
	  const FRACTION_RE = '(\\.[0-9]*)?';
	  const ZONE_RE = '([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?';
	  const TIMESTAMP = {
	    className: 'number',
	    begin: '\\b' + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + '\\b'
	  };

	  const VALUE_CONTAINER = {
	    end: ',',
	    endsWithParent: true,
	    excludeEnd: true,
	    keywords: LITERALS,
	    relevance: 0
	  };
	  const OBJECT = {
	    begin: /\{/,
	    end: /\}/,
	    contains: [ VALUE_CONTAINER ],
	    illegal: '\\n',
	    relevance: 0
	  };
	  const ARRAY = {
	    begin: '\\[',
	    end: '\\]',
	    contains: [ VALUE_CONTAINER ],
	    illegal: '\\n',
	    relevance: 0
	  };

	  const MODES = [
	    KEY,
	    {
	      className: 'meta',
	      begin: '^---\\s*$',
	      relevance: 10
	    },
	    { // multi line string
	      // Blocks start with a | or > followed by a newline
	      //
	      // Indentation of subsequent lines must be the same to
	      // be considered part of the block
	      className: 'string',
	      begin: '[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*'
	    },
	    { // Ruby/Rails erb
	      begin: '<%[%=-]?',
	      end: '[%-]?%>',
	      subLanguage: 'ruby',
	      excludeBegin: true,
	      excludeEnd: true,
	      relevance: 0
	    },
	    { // named tags
	      className: 'type',
	      begin: '!\\w+!' + URI_CHARACTERS
	    },
	    // https://yaml.org/spec/1.2/spec.html#id2784064
	    { // verbatim tags
	      className: 'type',
	      begin: '!<' + URI_CHARACTERS + ">"
	    },
	    { // primary tags
	      className: 'type',
	      begin: '!' + URI_CHARACTERS
	    },
	    { // secondary tags
	      className: 'type',
	      begin: '!!' + URI_CHARACTERS
	    },
	    { // fragment id &ref
	      className: 'meta',
	      begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$'
	    },
	    { // fragment reference *ref
	      className: 'meta',
	      begin: '\\*' + hljs.UNDERSCORE_IDENT_RE + '$'
	    },
	    { // array listing
	      className: 'bullet',
	      // TODO: remove |$ hack when we have proper look-ahead support
	      begin: '-(?=[ ]|$)',
	      relevance: 0
	    },
	    hljs.HASH_COMMENT_MODE,
	    {
	      beginKeywords: LITERALS,
	      keywords: { literal: LITERALS }
	    },
	    TIMESTAMP,
	    // numbers are any valid C-style number that
	    // sit isolated from other words
	    {
	      className: 'number',
	      begin: hljs.C_NUMBER_RE + '\\b',
	      relevance: 0
	    },
	    OBJECT,
	    ARRAY,
	    STRING
	  ];

	  const VALUE_MODES = [ ...MODES ];
	  VALUE_MODES.pop();
	  VALUE_MODES.push(CONTAINER_STRING);
	  VALUE_CONTAINER.contains = VALUE_MODES;

	  return {
	    name: 'YAML',
	    case_insensitive: true,
	    aliases: [ 'yml' ],
	    contains: MODES
	  };
	}

	yaml_1 = yaml;
	return yaml_1;
}

/*
Language: Test Anything Protocol
Description: TAP, the Test Anything Protocol, is a simple text-based interface between testing modules in a test harness.
Requires: yaml.js
Author: Sergey Bronnikov <sergeyb@bronevichok.ru>
Website: https://testanything.org
*/

var tap_1;
var hasRequiredTap;

function requireTap () {
	if (hasRequiredTap) return tap_1;
	hasRequiredTap = 1;
	function tap(hljs) {
	  return {
	    name: 'Test Anything Protocol',
	    case_insensitive: true,
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      // version of format and total amount of testcases
	      {
	        className: 'meta',
	        variants: [
	          { begin: '^TAP version (\\d+)$' },
	          { begin: '^1\\.\\.(\\d+)$' }
	        ]
	      },
	      // YAML block
	      {
	        begin: /---$/,
	        end: '\\.\\.\\.$',
	        subLanguage: 'yaml',
	        relevance: 0
	      },
	      // testcase number
	      {
	        className: 'number',
	        begin: ' (\\d+) '
	      },
	      // testcase status and description
	      {
	        className: 'symbol',
	        variants: [
	          { begin: '^ok' },
	          { begin: '^not ok' }
	        ]
	      }
	    ]
	  };
	}

	tap_1 = tap;
	return tap_1;
}

/*
Language: Tcl
Description: Tcl is a very simple programming language.
Author: Radek Liska <radekliska@gmail.com>
Website: https://www.tcl.tk/about/language.html
*/

var tcl_1;
var hasRequiredTcl;

function requireTcl () {
	if (hasRequiredTcl) return tcl_1;
	hasRequiredTcl = 1;
	function tcl(hljs) {
	  const regex = hljs.regex;
	  const TCL_IDENT = /[a-zA-Z_][a-zA-Z0-9_]*/;

	  const NUMBER = {
	    className: 'number',
	    variants: [
	      hljs.BINARY_NUMBER_MODE,
	      hljs.C_NUMBER_MODE
	    ]
	  };

	  const KEYWORDS = [
	    "after",
	    "append",
	    "apply",
	    "array",
	    "auto_execok",
	    "auto_import",
	    "auto_load",
	    "auto_mkindex",
	    "auto_mkindex_old",
	    "auto_qualify",
	    "auto_reset",
	    "bgerror",
	    "binary",
	    "break",
	    "catch",
	    "cd",
	    "chan",
	    "clock",
	    "close",
	    "concat",
	    "continue",
	    "dde",
	    "dict",
	    "encoding",
	    "eof",
	    "error",
	    "eval",
	    "exec",
	    "exit",
	    "expr",
	    "fblocked",
	    "fconfigure",
	    "fcopy",
	    "file",
	    "fileevent",
	    "filename",
	    "flush",
	    "for",
	    "foreach",
	    "format",
	    "gets",
	    "glob",
	    "global",
	    "history",
	    "http",
	    "if",
	    "incr",
	    "info",
	    "interp",
	    "join",
	    "lappend|10",
	    "lassign|10",
	    "lindex|10",
	    "linsert|10",
	    "list",
	    "llength|10",
	    "load",
	    "lrange|10",
	    "lrepeat|10",
	    "lreplace|10",
	    "lreverse|10",
	    "lsearch|10",
	    "lset|10",
	    "lsort|10",
	    "mathfunc",
	    "mathop",
	    "memory",
	    "msgcat",
	    "namespace",
	    "open",
	    "package",
	    "parray",
	    "pid",
	    "pkg::create",
	    "pkg_mkIndex",
	    "platform",
	    "platform::shell",
	    "proc",
	    "puts",
	    "pwd",
	    "read",
	    "refchan",
	    "regexp",
	    "registry",
	    "regsub|10",
	    "rename",
	    "return",
	    "safe",
	    "scan",
	    "seek",
	    "set",
	    "socket",
	    "source",
	    "split",
	    "string",
	    "subst",
	    "switch",
	    "tcl_endOfWord",
	    "tcl_findLibrary",
	    "tcl_startOfNextWord",
	    "tcl_startOfPreviousWord",
	    "tcl_wordBreakAfter",
	    "tcl_wordBreakBefore",
	    "tcltest",
	    "tclvars",
	    "tell",
	    "time",
	    "tm",
	    "trace",
	    "unknown",
	    "unload",
	    "unset",
	    "update",
	    "uplevel",
	    "upvar",
	    "variable",
	    "vwait",
	    "while"
	  ];

	  return {
	    name: 'Tcl',
	    aliases: [ 'tk' ],
	    keywords: KEYWORDS,
	    contains: [
	      hljs.COMMENT(';[ \\t]*#', '$'),
	      hljs.COMMENT('^[ \\t]*#', '$'),
	      {
	        beginKeywords: 'proc',
	        end: '[\\{]',
	        excludeEnd: true,
	        contains: [
	          {
	            className: 'title',
	            begin: '[ \\t\\n\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',
	            end: '[ \\t\\n\\r]',
	            endsWithParent: true,
	            excludeEnd: true
	          }
	        ]
	      },
	      {
	        className: "variable",
	        variants: [
	          { begin: regex.concat(
	            /\$/,
	            regex.optional(/::/),
	            TCL_IDENT,
	            '(::',
	            TCL_IDENT,
	            ')*'
	          ) },
	          {
	            begin: '\\$\\{(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',
	            end: '\\}',
	            contains: [ NUMBER ]
	          }
	        ]
	      },
	      {
	        className: 'string',
	        contains: [ hljs.BACKSLASH_ESCAPE ],
	        variants: [ hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }) ]
	      },
	      NUMBER
	    ]
	  };
	}

	tcl_1 = tcl;
	return tcl_1;
}

/*
Language: Thrift
Author: Oleg Efimov <efimovov@gmail.com>
Description: Thrift message definition format
Website: https://thrift.apache.org
Category: protocols
*/

var thrift_1;
var hasRequiredThrift;

function requireThrift () {
	if (hasRequiredThrift) return thrift_1;
	hasRequiredThrift = 1;
	function thrift(hljs) {
	  const TYPES = [
	    "bool",
	    "byte",
	    "i16",
	    "i32",
	    "i64",
	    "double",
	    "string",
	    "binary"
	  ];
	  const KEYWORDS = [
	    "namespace",
	    "const",
	    "typedef",
	    "struct",
	    "enum",
	    "service",
	    "exception",
	    "void",
	    "oneway",
	    "set",
	    "list",
	    "map",
	    "required",
	    "optional"
	  ];
	  return {
	    name: 'Thrift',
	    keywords: {
	      keyword: KEYWORDS,
	      type: TYPES,
	      literal: 'true false'
	    },
	    contains: [
	      hljs.QUOTE_STRING_MODE,
	      hljs.NUMBER_MODE,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'class',
	        beginKeywords: 'struct enum service exception',
	        end: /\{/,
	        illegal: /\n/,
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, {
	            // hack: eating everything after the first title
	            starts: {
	              endsWithParent: true,
	              excludeEnd: true
	            } })
	        ]
	      },
	      {
	        begin: '\\b(set|list|map)\\s*<',
	        keywords: { type: [
	          ...TYPES,
	          "set",
	          "list",
	          "map"
	        ] },
	        end: '>',
	        contains: [ 'self' ]
	      }
	    ]
	  };
	}

	thrift_1 = thrift;
	return thrift_1;
}

/*
Language: TP
Author: Jay Strybis <jay.strybis@gmail.com>
Description: FANUC TP programming language (TPP).
*/

var tp_1;
var hasRequiredTp;

function requireTp () {
	if (hasRequiredTp) return tp_1;
	hasRequiredTp = 1;
	function tp(hljs) {
	  const TPID = {
	    className: 'number',
	    begin: '[1-9][0-9]*', /* no leading zeros */
	    relevance: 0
	  };
	  const TPLABEL = {
	    className: 'symbol',
	    begin: ':[^\\]]+'
	  };
	  const TPDATA = {
	    className: 'built_in',
	    begin: '(AR|P|PAYLOAD|PR|R|SR|RSR|LBL|VR|UALM|MESSAGE|UTOOL|UFRAME|TIMER|'
	    + 'TIMER_OVERFLOW|JOINT_MAX_SPEED|RESUME_PROG|DIAG_REC)\\[',
	    end: '\\]',
	    contains: [
	      'self',
	      TPID,
	      TPLABEL
	    ]
	  };
	  const TPIO = {
	    className: 'built_in',
	    begin: '(AI|AO|DI|DO|F|RI|RO|UI|UO|GI|GO|SI|SO)\\[',
	    end: '\\]',
	    contains: [
	      'self',
	      TPID,
	      hljs.QUOTE_STRING_MODE, /* for pos section at bottom */
	      TPLABEL
	    ]
	  };

	  const KEYWORDS = [
	    "ABORT",
	    "ACC",
	    "ADJUST",
	    "AND",
	    "AP_LD",
	    "BREAK",
	    "CALL",
	    "CNT",
	    "COL",
	    "CONDITION",
	    "CONFIG",
	    "DA",
	    "DB",
	    "DIV",
	    "DETECT",
	    "ELSE",
	    "END",
	    "ENDFOR",
	    "ERR_NUM",
	    "ERROR_PROG",
	    "FINE",
	    "FOR",
	    "GP",
	    "GUARD",
	    "INC",
	    "IF",
	    "JMP",
	    "LINEAR_MAX_SPEED",
	    "LOCK",
	    "MOD",
	    "MONITOR",
	    "OFFSET",
	    "Offset",
	    "OR",
	    "OVERRIDE",
	    "PAUSE",
	    "PREG",
	    "PTH",
	    "RT_LD",
	    "RUN",
	    "SELECT",
	    "SKIP",
	    "Skip",
	    "TA",
	    "TB",
	    "TO",
	    "TOOL_OFFSET",
	    "Tool_Offset",
	    "UF",
	    "UT",
	    "UFRAME_NUM",
	    "UTOOL_NUM",
	    "UNLOCK",
	    "WAIT",
	    "X",
	    "Y",
	    "Z",
	    "W",
	    "P",
	    "R",
	    "STRLEN",
	    "SUBSTR",
	    "FINDSTR",
	    "VOFFSET",
	    "PROG",
	    "ATTR",
	    "MN",
	    "POS"
	  ];
	  const LITERALS = [
	    "ON",
	    "OFF",
	    "max_speed",
	    "LPOS",
	    "JPOS",
	    "ENABLE",
	    "DISABLE",
	    "START",
	    "STOP",
	    "RESET"
	  ];

	  return {
	    name: 'TP',
	    keywords: {
	      keyword: KEYWORDS,
	      literal: LITERALS
	    },
	    contains: [
	      TPDATA,
	      TPIO,
	      {
	        className: 'keyword',
	        begin: '/(PROG|ATTR|MN|POS|END)\\b'
	      },
	      {
	        /* this is for cases like ,CALL */
	        className: 'keyword',
	        begin: '(CALL|RUN|POINT_LOGIC|LBL)\\b'
	      },
	      {
	        /* this is for cases like CNT100 where the default lexemes do not
	         * separate the keyword and the number */
	        className: 'keyword',
	        begin: '\\b(ACC|CNT|Skip|Offset|PSPD|RT_LD|AP_LD|Tool_Offset)'
	      },
	      {
	        /* to catch numbers that do not have a word boundary on the left */
	        className: 'number',
	        begin: '\\d+(sec|msec|mm/sec|cm/min|inch/min|deg/sec|mm|in|cm)?\\b',
	        relevance: 0
	      },
	      hljs.COMMENT('//', '[;$]'),
	      hljs.COMMENT('!', '[;$]'),
	      hljs.COMMENT('--eg:', '$'),
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'string',
	        begin: '\'',
	        end: '\''
	      },
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'variable',
	        begin: '\\$[A-Za-z0-9_]+'
	      }
	    ]
	  };
	}

	tp_1 = tp;
	return tp_1;
}

/*
Language: Twig
Requires: xml.js
Author: Luke Holder <lukemh@gmail.com>
Description: Twig is a templating language for PHP
Website: https://twig.symfony.com
Category: template
*/

var twig_1;
var hasRequiredTwig;

function requireTwig () {
	if (hasRequiredTwig) return twig_1;
	hasRequiredTwig = 1;
	function twig(hljs) {
	  const regex = hljs.regex;
	  const FUNCTION_NAMES = [
	    "absolute_url",
	    "asset|0",
	    "asset_version",
	    "attribute",
	    "block",
	    "constant",
	    "controller|0",
	    "country_timezones",
	    "csrf_token",
	    "cycle",
	    "date",
	    "dump",
	    "expression",
	    "form|0",
	    "form_end",
	    "form_errors",
	    "form_help",
	    "form_label",
	    "form_rest",
	    "form_row",
	    "form_start",
	    "form_widget",
	    "html_classes",
	    "include",
	    "is_granted",
	    "logout_path",
	    "logout_url",
	    "max",
	    "min",
	    "parent",
	    "path|0",
	    "random",
	    "range",
	    "relative_path",
	    "render",
	    "render_esi",
	    "source",
	    "template_from_string",
	    "url|0"
	  ];

	  const FILTERS = [
	    "abs",
	    "abbr_class",
	    "abbr_method",
	    "batch",
	    "capitalize",
	    "column",
	    "convert_encoding",
	    "country_name",
	    "currency_name",
	    "currency_symbol",
	    "data_uri",
	    "date",
	    "date_modify",
	    "default",
	    "escape",
	    "file_excerpt",
	    "file_link",
	    "file_relative",
	    "filter",
	    "first",
	    "format",
	    "format_args",
	    "format_args_as_text",
	    "format_currency",
	    "format_date",
	    "format_datetime",
	    "format_file",
	    "format_file_from_text",
	    "format_number",
	    "format_time",
	    "html_to_markdown",
	    "humanize",
	    "inky_to_html",
	    "inline_css",
	    "join",
	    "json_encode",
	    "keys",
	    "language_name",
	    "last",
	    "length",
	    "locale_name",
	    "lower",
	    "map",
	    "markdown",
	    "markdown_to_html",
	    "merge",
	    "nl2br",
	    "number_format",
	    "raw",
	    "reduce",
	    "replace",
	    "reverse",
	    "round",
	    "slice",
	    "slug",
	    "sort",
	    "spaceless",
	    "split",
	    "striptags",
	    "timezone_name",
	    "title",
	    "trans",
	    "transchoice",
	    "trim",
	    "u|0",
	    "upper",
	    "url_encode",
	    "yaml_dump",
	    "yaml_encode"
	  ];

	  let TAG_NAMES = [
	    "apply",
	    "autoescape",
	    "block",
	    "cache",
	    "deprecated",
	    "do",
	    "embed",
	    "extends",
	    "filter",
	    "flush",
	    "for",
	    "form_theme",
	    "from",
	    "if",
	    "import",
	    "include",
	    "macro",
	    "sandbox",
	    "set",
	    "stopwatch",
	    "trans",
	    "trans_default_domain",
	    "transchoice",
	    "use",
	    "verbatim",
	    "with"
	  ];

	  TAG_NAMES = TAG_NAMES.concat(TAG_NAMES.map(t => `end${t}`));

	  const STRING = {
	    scope: 'string',
	    variants: [
	      {
	        begin: /'/,
	        end: /'/
	      },
	      {
	        begin: /"/,
	        end: /"/
	      },
	    ]
	  };

	  const NUMBER = {
	    scope: "number",
	    match: /\d+/
	  };

	  const PARAMS = {
	    begin: /\(/,
	    end: /\)/,
	    excludeBegin: true,
	    excludeEnd: true,
	    contains: [
	      STRING,
	      NUMBER
	    ]
	  };


	  const FUNCTIONS = {
	    beginKeywords: FUNCTION_NAMES.join(" "),
	    keywords: { name: FUNCTION_NAMES },
	    relevance: 0,
	    contains: [ PARAMS ]
	  };

	  const FILTER = {
	    match: /\|(?=[A-Za-z_]+:?)/,
	    beginScope: "punctuation",
	    relevance: 0,
	    contains: [
	      {
	        match: /[A-Za-z_]+:?/,
	        keywords: FILTERS
	      },
	    ]
	  };

	  const tagNamed = (tagnames, { relevance }) => {
	    return {
	      beginScope: {
	        1: 'template-tag',
	        3: 'name'
	      },
	      relevance: relevance || 2,
	      endScope: 'template-tag',
	      begin: [
	        /\{%/,
	        /\s*/,
	        regex.either(...tagnames)
	      ],
	      end: /%\}/,
	      keywords: "in",
	      contains: [
	        FILTER,
	        FUNCTIONS,
	        STRING,
	        NUMBER
	      ]
	    };
	  };

	  const CUSTOM_TAG_RE = /[a-z_]+/;
	  const TAG = tagNamed(TAG_NAMES, { relevance: 2 });
	  const CUSTOM_TAG = tagNamed([ CUSTOM_TAG_RE ], { relevance: 1 });

	  return {
	    name: 'Twig',
	    aliases: [ 'craftcms' ],
	    case_insensitive: true,
	    subLanguage: 'xml',
	    contains: [
	      hljs.COMMENT(/\{#/, /#\}/),
	      TAG,
	      CUSTOM_TAG,
	      {
	        className: 'template-variable',
	        begin: /\{\{/,
	        end: /\}\}/,
	        contains: [
	          'self',
	          FILTER,
	          FUNCTIONS,
	          STRING,
	          NUMBER
	        ]
	      }
	    ]
	  };
	}

	twig_1 = twig;
	return twig_1;
}

var typescript_1;
var hasRequiredTypescript;

function requireTypescript () {
	if (hasRequiredTypescript) return typescript_1;
	hasRequiredTypescript = 1;
	const IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
	const KEYWORDS = [
	  "as", // for exports
	  "in",
	  "of",
	  "if",
	  "for",
	  "while",
	  "finally",
	  "var",
	  "new",
	  "function",
	  "do",
	  "return",
	  "void",
	  "else",
	  "break",
	  "catch",
	  "instanceof",
	  "with",
	  "throw",
	  "case",
	  "default",
	  "try",
	  "switch",
	  "continue",
	  "typeof",
	  "delete",
	  "let",
	  "yield",
	  "const",
	  "class",
	  // JS handles these with a special rule
	  // "get",
	  // "set",
	  "debugger",
	  "async",
	  "await",
	  "static",
	  "import",
	  "from",
	  "export",
	  "extends"
	];
	const LITERALS = [
	  "true",
	  "false",
	  "null",
	  "undefined",
	  "NaN",
	  "Infinity"
	];

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
	const TYPES = [
	  // Fundamental objects
	  "Object",
	  "Function",
	  "Boolean",
	  "Symbol",
	  // numbers and dates
	  "Math",
	  "Date",
	  "Number",
	  "BigInt",
	  // text
	  "String",
	  "RegExp",
	  // Indexed collections
	  "Array",
	  "Float32Array",
	  "Float64Array",
	  "Int8Array",
	  "Uint8Array",
	  "Uint8ClampedArray",
	  "Int16Array",
	  "Int32Array",
	  "Uint16Array",
	  "Uint32Array",
	  "BigInt64Array",
	  "BigUint64Array",
	  // Keyed collections
	  "Set",
	  "Map",
	  "WeakSet",
	  "WeakMap",
	  // Structured data
	  "ArrayBuffer",
	  "SharedArrayBuffer",
	  "Atomics",
	  "DataView",
	  "JSON",
	  // Control abstraction objects
	  "Promise",
	  "Generator",
	  "GeneratorFunction",
	  "AsyncFunction",
	  // Reflection
	  "Reflect",
	  "Proxy",
	  // Internationalization
	  "Intl",
	  // WebAssembly
	  "WebAssembly"
	];

	const ERROR_TYPES = [
	  "Error",
	  "EvalError",
	  "InternalError",
	  "RangeError",
	  "ReferenceError",
	  "SyntaxError",
	  "TypeError",
	  "URIError"
	];

	const BUILT_IN_GLOBALS = [
	  "setInterval",
	  "setTimeout",
	  "clearInterval",
	  "clearTimeout",

	  "require",
	  "exports",

	  "eval",
	  "isFinite",
	  "isNaN",
	  "parseFloat",
	  "parseInt",
	  "decodeURI",
	  "decodeURIComponent",
	  "encodeURI",
	  "encodeURIComponent",
	  "escape",
	  "unescape"
	];

	const BUILT_IN_VARIABLES = [
	  "arguments",
	  "this",
	  "super",
	  "console",
	  "window",
	  "document",
	  "localStorage",
	  "sessionStorage",
	  "module",
	  "global" // Node.js
	];

	const BUILT_INS = [].concat(
	  BUILT_IN_GLOBALS,
	  TYPES,
	  ERROR_TYPES
	);

	/*
	Language: JavaScript
	Description: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.
	Category: common, scripting, web
	Website: https://developer.mozilla.org/en-US/docs/Web/JavaScript
	*/


	/** @type LanguageFn */
	function javascript(hljs) {
	  const regex = hljs.regex;
	  /**
	   * Takes a string like "<Booger" and checks to see
	   * if we can find a matching "</Booger" later in the
	   * content.
	   * @param {RegExpMatchArray} match
	   * @param {{after:number}} param1
	   */
	  const hasClosingTag = (match, { after }) => {
	    const tag = "</" + match[0].slice(1);
	    const pos = match.input.indexOf(tag, after);
	    return pos !== -1;
	  };

	  const IDENT_RE$1 = IDENT_RE;
	  const FRAGMENT = {
	    begin: '<>',
	    end: '</>'
	  };
	  // to avoid some special cases inside isTrulyOpeningTag
	  const XML_SELF_CLOSING = /<[A-Za-z0-9\\._:-]+\s*\/>/;
	  const XML_TAG = {
	    begin: /<[A-Za-z0-9\\._:-]+/,
	    end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
	    /**
	     * @param {RegExpMatchArray} match
	     * @param {CallbackResponse} response
	     */
	    isTrulyOpeningTag: (match, response) => {
	      const afterMatchIndex = match[0].length + match.index;
	      const nextChar = match.input[afterMatchIndex];
	      if (
	        // HTML should not include another raw `<` inside a tag
	        // nested type?
	        // `<Array<Array<number>>`, etc.
	        nextChar === "<" ||
	        // the , gives away that this is not HTML
	        // `<T, A extends keyof T, V>`
	        nextChar === ","
	        ) {
	        response.ignoreMatch();
	        return;
	      }

	      // `<something>`
	      // Quite possibly a tag, lets look for a matching closing tag...
	      if (nextChar === ">") {
	        // if we cannot find a matching closing tag, then we
	        // will ignore it
	        if (!hasClosingTag(match, { after: afterMatchIndex })) {
	          response.ignoreMatch();
	        }
	      }

	      // `<blah />` (self-closing)
	      // handled by simpleSelfClosing rule

	      let m;
	      const afterMatch = match.input.substring(afterMatchIndex);

	      // some more template typing stuff
	      //  <T = any>(key?: string) => Modify<
	      if ((m = afterMatch.match(/^\s*=/))) {
	        response.ignoreMatch();
	        return;
	      }

	      // `<From extends string>`
	      // technically this could be HTML, but it smells like a type
	      // NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276
	      if ((m = afterMatch.match(/^\s+extends\s+/))) {
	        if (m.index === 0) {
	          response.ignoreMatch();
	          // eslint-disable-next-line no-useless-return
	          return;
	        }
	      }
	    }
	  };
	  const KEYWORDS$1 = {
	    $pattern: IDENT_RE,
	    keyword: KEYWORDS,
	    literal: LITERALS,
	    built_in: BUILT_INS,
	    "variable.language": BUILT_IN_VARIABLES
	  };

	  // https://tc39.es/ecma262/#sec-literals-numeric-literals
	  const decimalDigits = '[0-9](_?[0-9])*';
	  const frac = `\\.(${decimalDigits})`;
	  // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral
	  // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
	  const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;
	  const NUMBER = {
	    className: 'number',
	    variants: [
	      // DecimalLiteral
	      { begin: `(\\b(${decimalInteger})((${frac})|\\.)?|(${frac}))` +
	        `[eE][+-]?(${decimalDigits})\\b` },
	      { begin: `\\b(${decimalInteger})\\b((${frac})\\b|\\.)?|(${frac})\\b` },

	      // DecimalBigIntegerLiteral
	      { begin: `\\b(0|[1-9](_?[0-9])*)n\\b` },

	      // NonDecimalIntegerLiteral
	      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
	      { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
	      { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },

	      // LegacyOctalIntegerLiteral (does not include underscore separators)
	      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
	      { begin: "\\b0[0-7]+n?\\b" },
	    ],
	    relevance: 0
	  };

	  const SUBST = {
	    className: 'subst',
	    begin: '\\$\\{',
	    end: '\\}',
	    keywords: KEYWORDS$1,
	    contains: [] // defined later
	  };
	  const HTML_TEMPLATE = {
	    begin: 'html`',
	    end: '',
	    starts: {
	      end: '`',
	      returnEnd: false,
	      contains: [
	        hljs.BACKSLASH_ESCAPE,
	        SUBST
	      ],
	      subLanguage: 'xml'
	    }
	  };
	  const CSS_TEMPLATE = {
	    begin: 'css`',
	    end: '',
	    starts: {
	      end: '`',
	      returnEnd: false,
	      contains: [
	        hljs.BACKSLASH_ESCAPE,
	        SUBST
	      ],
	      subLanguage: 'css'
	    }
	  };
	  const GRAPHQL_TEMPLATE = {
	    begin: 'gql`',
	    end: '',
	    starts: {
	      end: '`',
	      returnEnd: false,
	      contains: [
	        hljs.BACKSLASH_ESCAPE,
	        SUBST
	      ],
	      subLanguage: 'graphql'
	    }
	  };
	  const TEMPLATE_STRING = {
	    className: 'string',
	    begin: '`',
	    end: '`',
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      SUBST
	    ]
	  };
	  const JSDOC_COMMENT = hljs.COMMENT(
	    /\/\*\*(?!\/)/,
	    '\\*/',
	    {
	      relevance: 0,
	      contains: [
	        {
	          begin: '(?=@[A-Za-z]+)',
	          relevance: 0,
	          contains: [
	            {
	              className: 'doctag',
	              begin: '@[A-Za-z]+'
	            },
	            {
	              className: 'type',
	              begin: '\\{',
	              end: '\\}',
	              excludeEnd: true,
	              excludeBegin: true,
	              relevance: 0
	            },
	            {
	              className: 'variable',
	              begin: IDENT_RE$1 + '(?=\\s*(-)|$)',
	              endsParent: true,
	              relevance: 0
	            },
	            // eat spaces (not newlines) so we can find
	            // types or variables
	            {
	              begin: /(?=[^\n])\s/,
	              relevance: 0
	            }
	          ]
	        }
	      ]
	    }
	  );
	  const COMMENT = {
	    className: "comment",
	    variants: [
	      JSDOC_COMMENT,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.C_LINE_COMMENT_MODE
	    ]
	  };
	  const SUBST_INTERNALS = [
	    hljs.APOS_STRING_MODE,
	    hljs.QUOTE_STRING_MODE,
	    HTML_TEMPLATE,
	    CSS_TEMPLATE,
	    GRAPHQL_TEMPLATE,
	    TEMPLATE_STRING,
	    // Skip numbers when they are part of a variable name
	    { match: /\$\d+/ },
	    NUMBER,
	    // This is intentional:
	    // See https://github.com/highlightjs/highlight.js/issues/3288
	    // hljs.REGEXP_MODE
	  ];
	  SUBST.contains = SUBST_INTERNALS
	    .concat({
	      // we need to pair up {} inside our subst to prevent
	      // it from ending too early by matching another }
	      begin: /\{/,
	      end: /\}/,
	      keywords: KEYWORDS$1,
	      contains: [
	        "self"
	      ].concat(SUBST_INTERNALS)
	    });
	  const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);
	  const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([
	    // eat recursive parens in sub expressions
	    {
	      begin: /\(/,
	      end: /\)/,
	      keywords: KEYWORDS$1,
	      contains: ["self"].concat(SUBST_AND_COMMENTS)
	    }
	  ]);
	  const PARAMS = {
	    className: 'params',
	    begin: /\(/,
	    end: /\)/,
	    excludeBegin: true,
	    excludeEnd: true,
	    keywords: KEYWORDS$1,
	    contains: PARAMS_CONTAINS
	  };

	  // ES6 classes
	  const CLASS_OR_EXTENDS = {
	    variants: [
	      // class Car extends vehicle
	      {
	        match: [
	          /class/,
	          /\s+/,
	          IDENT_RE$1,
	          /\s+/,
	          /extends/,
	          /\s+/,
	          regex.concat(IDENT_RE$1, "(", regex.concat(/\./, IDENT_RE$1), ")*")
	        ],
	        scope: {
	          1: "keyword",
	          3: "title.class",
	          5: "keyword",
	          7: "title.class.inherited"
	        }
	      },
	      // class Car
	      {
	        match: [
	          /class/,
	          /\s+/,
	          IDENT_RE$1
	        ],
	        scope: {
	          1: "keyword",
	          3: "title.class"
	        }
	      },

	    ]
	  };

	  const CLASS_REFERENCE = {
	    relevance: 0,
	    match:
	    regex.either(
	      // Hard coded exceptions
	      /\bJSON/,
	      // Float32Array, OutT
	      /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
	      // CSSFactory, CSSFactoryT
	      /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
	      // FPs, FPsT
	      /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/,
	      // P
	      // single letters are not highlighted
	      // BLAH
	      // this will be flagged as a UPPER_CASE_CONSTANT instead
	    ),
	    className: "title.class",
	    keywords: {
	      _: [
	        // se we still get relevance credit for JS library classes
	        ...TYPES,
	        ...ERROR_TYPES
	      ]
	    }
	  };

	  const USE_STRICT = {
	    label: "use_strict",
	    className: 'meta',
	    relevance: 10,
	    begin: /^\s*['"]use (strict|asm)['"]/
	  };

	  const FUNCTION_DEFINITION = {
	    variants: [
	      {
	        match: [
	          /function/,
	          /\s+/,
	          IDENT_RE$1,
	          /(?=\s*\()/
	        ]
	      },
	      // anonymous function
	      {
	        match: [
	          /function/,
	          /\s*(?=\()/
	        ]
	      }
	    ],
	    className: {
	      1: "keyword",
	      3: "title.function"
	    },
	    label: "func.def",
	    contains: [ PARAMS ],
	    illegal: /%/
	  };

	  const UPPER_CASE_CONSTANT = {
	    relevance: 0,
	    match: /\b[A-Z][A-Z_0-9]+\b/,
	    className: "variable.constant"
	  };

	  function noneOf(list) {
	    return regex.concat("(?!", list.join("|"), ")");
	  }

	  const FUNCTION_CALL = {
	    match: regex.concat(
	      /\b/,
	      noneOf([
	        ...BUILT_IN_GLOBALS,
	        "super",
	        "import"
	      ]),
	      IDENT_RE$1, regex.lookahead(/\(/)),
	    className: "title.function",
	    relevance: 0
	  };

	  const PROPERTY_ACCESS = {
	    begin: regex.concat(/\./, regex.lookahead(
	      regex.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/)
	    )),
	    end: IDENT_RE$1,
	    excludeBegin: true,
	    keywords: "prototype",
	    className: "property",
	    relevance: 0
	  };

	  const GETTER_OR_SETTER = {
	    match: [
	      /get|set/,
	      /\s+/,
	      IDENT_RE$1,
	      /(?=\()/
	    ],
	    className: {
	      1: "keyword",
	      3: "title.function"
	    },
	    contains: [
	      { // eat to avoid empty params
	        begin: /\(\)/
	      },
	      PARAMS
	    ]
	  };

	  const FUNC_LEAD_IN_RE = '(\\(' +
	    '[^()]*(\\(' +
	    '[^()]*(\\(' +
	    '[^()]*' +
	    '\\)[^()]*)*' +
	    '\\)[^()]*)*' +
	    '\\)|' + hljs.UNDERSCORE_IDENT_RE + ')\\s*=>';

	  const FUNCTION_VARIABLE = {
	    match: [
	      /const|var|let/, /\s+/,
	      IDENT_RE$1, /\s*/,
	      /=\s*/,
	      /(async\s*)?/, // async is optional
	      regex.lookahead(FUNC_LEAD_IN_RE)
	    ],
	    keywords: "async",
	    className: {
	      1: "keyword",
	      3: "title.function"
	    },
	    contains: [
	      PARAMS
	    ]
	  };

	  return {
	    name: 'JavaScript',
	    aliases: ['js', 'jsx', 'mjs', 'cjs'],
	    keywords: KEYWORDS$1,
	    // this will be extended by TypeScript
	    exports: { PARAMS_CONTAINS, CLASS_REFERENCE },
	    illegal: /#(?![$_A-z])/,
	    contains: [
	      hljs.SHEBANG({
	        label: "shebang",
	        binary: "node",
	        relevance: 5
	      }),
	      USE_STRICT,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      HTML_TEMPLATE,
	      CSS_TEMPLATE,
	      GRAPHQL_TEMPLATE,
	      TEMPLATE_STRING,
	      COMMENT,
	      // Skip numbers when they are part of a variable name
	      { match: /\$\d+/ },
	      NUMBER,
	      CLASS_REFERENCE,
	      {
	        className: 'attr',
	        begin: IDENT_RE$1 + regex.lookahead(':'),
	        relevance: 0
	      },
	      FUNCTION_VARIABLE,
	      { // "value" container
	        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
	        keywords: 'return throw case',
	        relevance: 0,
	        contains: [
	          COMMENT,
	          hljs.REGEXP_MODE,
	          {
	            className: 'function',
	            // we have to count the parens to make sure we actually have the
	            // correct bounding ( ) before the =>.  There could be any number of
	            // sub-expressions inside also surrounded by parens.
	            begin: FUNC_LEAD_IN_RE,
	            returnBegin: true,
	            end: '\\s*=>',
	            contains: [
	              {
	                className: 'params',
	                variants: [
	                  {
	                    begin: hljs.UNDERSCORE_IDENT_RE,
	                    relevance: 0
	                  },
	                  {
	                    className: null,
	                    begin: /\(\s*\)/,
	                    skip: true
	                  },
	                  {
	                    begin: /\(/,
	                    end: /\)/,
	                    excludeBegin: true,
	                    excludeEnd: true,
	                    keywords: KEYWORDS$1,
	                    contains: PARAMS_CONTAINS
	                  }
	                ]
	              }
	            ]
	          },
	          { // could be a comma delimited list of params to a function call
	            begin: /,/,
	            relevance: 0
	          },
	          {
	            match: /\s+/,
	            relevance: 0
	          },
	          { // JSX
	            variants: [
	              { begin: FRAGMENT.begin, end: FRAGMENT.end },
	              { match: XML_SELF_CLOSING },
	              {
	                begin: XML_TAG.begin,
	                // we carefully check the opening tag to see if it truly
	                // is a tag and not a false positive
	                'on:begin': XML_TAG.isTrulyOpeningTag,
	                end: XML_TAG.end
	              }
	            ],
	            subLanguage: 'xml',
	            contains: [
	              {
	                begin: XML_TAG.begin,
	                end: XML_TAG.end,
	                skip: true,
	                contains: ['self']
	              }
	            ]
	          }
	        ],
	      },
	      FUNCTION_DEFINITION,
	      {
	        // prevent this from getting swallowed up by function
	        // since they appear "function like"
	        beginKeywords: "while if switch catch for"
	      },
	      {
	        // we have to count the parens to make sure we actually have the correct
	        // bounding ( ).  There could be any number of sub-expressions inside
	        // also surrounded by parens.
	        begin: '\\b(?!function)' + hljs.UNDERSCORE_IDENT_RE +
	          '\\(' + // first parens
	          '[^()]*(\\(' +
	            '[^()]*(\\(' +
	              '[^()]*' +
	            '\\)[^()]*)*' +
	          '\\)[^()]*)*' +
	          '\\)\\s*\\{', // end parens
	        returnBegin:true,
	        label: "func.def",
	        contains: [
	          PARAMS,
	          hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1, className: "title.function" })
	        ]
	      },
	      // catch ... so it won't trigger the property rule below
	      {
	        match: /\.\.\./,
	        relevance: 0
	      },
	      PROPERTY_ACCESS,
	      // hack: prevents detection of keywords in some circumstances
	      // .keyword()
	      // $keyword = x
	      {
	        match: '\\$' + IDENT_RE$1,
	        relevance: 0
	      },
	      {
	        match: [ /\bconstructor(?=\s*\()/ ],
	        className: { 1: "title.function" },
	        contains: [ PARAMS ]
	      },
	      FUNCTION_CALL,
	      UPPER_CASE_CONSTANT,
	      CLASS_OR_EXTENDS,
	      GETTER_OR_SETTER,
	      {
	        match: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
	      }
	    ]
	  };
	}

	/*
	Language: TypeScript
	Author: Panu Horsmalahti <panu.horsmalahti@iki.fi>
	Contributors: Ike Ku <dempfi@yahoo.com>
	Description: TypeScript is a strict superset of JavaScript
	Website: https://www.typescriptlang.org
	Category: common, scripting
	*/


	/** @type LanguageFn */
	function typescript(hljs) {
	  const tsLanguage = javascript(hljs);

	  const IDENT_RE$1 = IDENT_RE;
	  const TYPES = [
	    "any",
	    "void",
	    "number",
	    "boolean",
	    "string",
	    "object",
	    "never",
	    "symbol",
	    "bigint",
	    "unknown"
	  ];
	  const NAMESPACE = {
	    beginKeywords: 'namespace',
	    end: /\{/,
	    excludeEnd: true,
	    contains: [ tsLanguage.exports.CLASS_REFERENCE ]
	  };
	  const INTERFACE = {
	    beginKeywords: 'interface',
	    end: /\{/,
	    excludeEnd: true,
	    keywords: {
	      keyword: 'interface extends',
	      built_in: TYPES
	    },
	    contains: [ tsLanguage.exports.CLASS_REFERENCE ]
	  };
	  const USE_STRICT = {
	    className: 'meta',
	    relevance: 10,
	    begin: /^\s*['"]use strict['"]/
	  };
	  const TS_SPECIFIC_KEYWORDS = [
	    "type",
	    "namespace",
	    "interface",
	    "public",
	    "private",
	    "protected",
	    "implements",
	    "declare",
	    "abstract",
	    "readonly",
	    "enum",
	    "override"
	  ];
	  const KEYWORDS$1 = {
	    $pattern: IDENT_RE,
	    keyword: KEYWORDS.concat(TS_SPECIFIC_KEYWORDS),
	    literal: LITERALS,
	    built_in: BUILT_INS.concat(TYPES),
	    "variable.language": BUILT_IN_VARIABLES
	  };
	  const DECORATOR = {
	    className: 'meta',
	    begin: '@' + IDENT_RE$1,
	  };

	  const swapMode = (mode, label, replacement) => {
	    const indx = mode.contains.findIndex(m => m.label === label);
	    if (indx === -1) { throw new Error("can not find mode to replace"); }

	    mode.contains.splice(indx, 1, replacement);
	  };


	  // this should update anywhere keywords is used since
	  // it will be the same actual JS object
	  Object.assign(tsLanguage.keywords, KEYWORDS$1);

	  tsLanguage.exports.PARAMS_CONTAINS.push(DECORATOR);
	  tsLanguage.contains = tsLanguage.contains.concat([
	    DECORATOR,
	    NAMESPACE,
	    INTERFACE,
	  ]);

	  // TS gets a simpler shebang rule than JS
	  swapMode(tsLanguage, "shebang", hljs.SHEBANG());
	  // JS use strict rule purposely excludes `asm` which makes no sense
	  swapMode(tsLanguage, "use_strict", USE_STRICT);

	  const functionDeclaration = tsLanguage.contains.find(m => m.label === "func.def");
	  functionDeclaration.relevance = 0; // () => {} is more typical in TypeScript

	  Object.assign(tsLanguage, {
	    name: 'TypeScript',
	    aliases: [
	      'ts',
	      'tsx',
	      'mts',
	      'cts'
	    ]
	  });

	  return tsLanguage;
	}

	typescript_1 = typescript;
	return typescript_1;
}

/*
Language: Vala
Author: Antono Vasiljev <antono.vasiljev@gmail.com>
Description: Vala is a new programming language that aims to bring modern programming language features to GNOME developers without imposing any additional runtime requirements and without using a different ABI compared to applications and libraries written in C.
Website: https://wiki.gnome.org/Projects/Vala
*/

var vala_1;
var hasRequiredVala;

function requireVala () {
	if (hasRequiredVala) return vala_1;
	hasRequiredVala = 1;
	function vala(hljs) {
	  return {
	    name: 'Vala',
	    keywords: {
	      keyword:
	        // Value types
	        'char uchar unichar int uint long ulong short ushort int8 int16 int32 int64 uint8 '
	        + 'uint16 uint32 uint64 float double bool struct enum string void '
	        // Reference types
	        + 'weak unowned owned '
	        // Modifiers
	        + 'async signal static abstract interface override virtual delegate '
	        // Control Structures
	        + 'if while do for foreach else switch case break default return try catch '
	        // Visibility
	        + 'public private protected internal '
	        // Other
	        + 'using new this get set const stdout stdin stderr var',
	      built_in:
	        'DBus GLib CCode Gee Object Gtk Posix',
	      literal:
	        'false true null'
	    },
	    contains: [
	      {
	        className: 'class',
	        beginKeywords: 'class interface namespace',
	        end: /\{/,
	        excludeEnd: true,
	        illegal: '[^,:\\n\\s\\.]',
	        contains: [ hljs.UNDERSCORE_TITLE_MODE ]
	      },
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'string',
	        begin: '"""',
	        end: '"""',
	        relevance: 5
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'meta',
	        begin: '^#',
	        end: '$',
	      }
	    ]
	  };
	}

	vala_1 = vala;
	return vala_1;
}

/*
Language: Visual Basic .NET
Description: Visual Basic .NET (VB.NET) is a multi-paradigm, object-oriented programming language, implemented on the .NET Framework.
Authors: Poren Chiang <ren.chiang@gmail.com>, Jan Pilzer
Website: https://docs.microsoft.com/dotnet/visual-basic/getting-started
Category: common
*/

var vbnet_1;
var hasRequiredVbnet;

function requireVbnet () {
	if (hasRequiredVbnet) return vbnet_1;
	hasRequiredVbnet = 1;
	/** @type LanguageFn */
	function vbnet(hljs) {
	  const regex = hljs.regex;
	  /**
	   * Character Literal
	   * Either a single character ("a"C) or an escaped double quote (""""C).
	   */
	  const CHARACTER = {
	    className: 'string',
	    begin: /"(""|[^/n])"C\b/
	  };

	  const STRING = {
	    className: 'string',
	    begin: /"/,
	    end: /"/,
	    illegal: /\n/,
	    contains: [
	      {
	        // double quote escape
	        begin: /""/ }
	    ]
	  };

	  /** Date Literals consist of a date, a time, or both separated by whitespace, surrounded by # */
	  const MM_DD_YYYY = /\d{1,2}\/\d{1,2}\/\d{4}/;
	  const YYYY_MM_DD = /\d{4}-\d{1,2}-\d{1,2}/;
	  const TIME_12H = /(\d|1[012])(:\d+){0,2} *(AM|PM)/;
	  const TIME_24H = /\d{1,2}(:\d{1,2}){1,2}/;
	  const DATE = {
	    className: 'literal',
	    variants: [
	      {
	        // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)
	        begin: regex.concat(/# */, regex.either(YYYY_MM_DD, MM_DD_YYYY), / *#/) },
	      {
	        // #H:mm[:ss]# (24h Time)
	        begin: regex.concat(/# */, TIME_24H, / *#/) },
	      {
	        // #h[:mm[:ss]] A# (12h Time)
	        begin: regex.concat(/# */, TIME_12H, / *#/) },
	      {
	        // date plus time
	        begin: regex.concat(
	          /# */,
	          regex.either(YYYY_MM_DD, MM_DD_YYYY),
	          / +/,
	          regex.either(TIME_12H, TIME_24H),
	          / *#/
	        ) }
	    ]
	  };

	  const NUMBER = {
	    className: 'number',
	    relevance: 0,
	    variants: [
	      {
	        // Float
	        begin: /\b\d[\d_]*((\.[\d_]+(E[+-]?[\d_]+)?)|(E[+-]?[\d_]+))[RFD@!#]?/ },
	      {
	        // Integer (base 10)
	        begin: /\b\d[\d_]*((U?[SIL])|[%&])?/ },
	      {
	        // Integer (base 16)
	        begin: /&H[\dA-F_]+((U?[SIL])|[%&])?/ },
	      {
	        // Integer (base 8)
	        begin: /&O[0-7_]+((U?[SIL])|[%&])?/ },
	      {
	        // Integer (base 2)
	        begin: /&B[01_]+((U?[SIL])|[%&])?/ }
	    ]
	  };

	  const LABEL = {
	    className: 'label',
	    begin: /^\w+:/
	  };

	  const DOC_COMMENT = hljs.COMMENT(/'''/, /$/, { contains: [
	    {
	      className: 'doctag',
	      begin: /<\/?/,
	      end: />/
	    }
	  ] });

	  const COMMENT = hljs.COMMENT(null, /$/, { variants: [
	    { begin: /'/ },
	    {
	      // TODO: Use multi-class for leading spaces
	      begin: /([\t ]|^)REM(?=\s)/ }
	  ] });

	  const DIRECTIVES = {
	    className: 'meta',
	    // TODO: Use multi-class for indentation once available
	    begin: /[\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\b/,
	    end: /$/,
	    keywords: { keyword:
	        'const disable else elseif enable end externalsource if region then' },
	    contains: [ COMMENT ]
	  };

	  return {
	    name: 'Visual Basic .NET',
	    aliases: [ 'vb' ],
	    case_insensitive: true,
	    classNameAliases: { label: 'symbol' },
	    keywords: {
	      keyword:
	        'addhandler alias aggregate ansi as async assembly auto binary by byref byval ' /* a-b */
	        + 'call case catch class compare const continue custom declare default delegate dim distinct do ' /* c-d */
	        + 'each equals else elseif end enum erase error event exit explicit finally for friend from function ' /* e-f */
	        + 'get global goto group handles if implements imports in inherits interface into iterator ' /* g-i */
	        + 'join key let lib loop me mid module mustinherit mustoverride mybase myclass ' /* j-m */
	        + 'namespace narrowing new next notinheritable notoverridable ' /* n */
	        + 'of off on operator option optional order overloads overridable overrides ' /* o */
	        + 'paramarray partial preserve private property protected public ' /* p */
	        + 'raiseevent readonly redim removehandler resume return ' /* r */
	        + 'select set shadows shared skip static step stop structure strict sub synclock ' /* s */
	        + 'take text then throw to try unicode until using when where while widening with withevents writeonly yield' /* t-y */,
	      built_in:
	        // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators
	        'addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor '
	        // Type Conversion Functions https://docs.microsoft.com/dotnet/visual-basic/language-reference/functions/type-conversion-functions
	        + 'cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort',
	      type:
	        // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types
	        'boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort',
	      literal: 'true false nothing'
	    },
	    illegal:
	      '//|\\{|\\}|endif|gosub|variant|wend|^\\$ ' /* reserved deprecated keywords */,
	    contains: [
	      CHARACTER,
	      STRING,
	      DATE,
	      NUMBER,
	      LABEL,
	      DOC_COMMENT,
	      COMMENT,
	      DIRECTIVES
	    ]
	  };
	}

	vbnet_1 = vbnet;
	return vbnet_1;
}

/*
Language: VBScript
Description: VBScript ("Microsoft Visual Basic Scripting Edition") is an Active Scripting language developed by Microsoft that is modeled on Visual Basic.
Author: Nikita Ledyaev <lenikita@yandex.ru>
Contributors: Michal Gabrukiewicz <mgabru@gmail.com>
Website: https://en.wikipedia.org/wiki/VBScript
Category: scripting
*/

var vbscript_1;
var hasRequiredVbscript;

function requireVbscript () {
	if (hasRequiredVbscript) return vbscript_1;
	hasRequiredVbscript = 1;
	/** @type LanguageFn */
	function vbscript(hljs) {
	  const regex = hljs.regex;
	  const BUILT_IN_FUNCTIONS = [
	    "lcase",
	    "month",
	    "vartype",
	    "instrrev",
	    "ubound",
	    "setlocale",
	    "getobject",
	    "rgb",
	    "getref",
	    "string",
	    "weekdayname",
	    "rnd",
	    "dateadd",
	    "monthname",
	    "now",
	    "day",
	    "minute",
	    "isarray",
	    "cbool",
	    "round",
	    "formatcurrency",
	    "conversions",
	    "csng",
	    "timevalue",
	    "second",
	    "year",
	    "space",
	    "abs",
	    "clng",
	    "timeserial",
	    "fixs",
	    "len",
	    "asc",
	    "isempty",
	    "maths",
	    "dateserial",
	    "atn",
	    "timer",
	    "isobject",
	    "filter",
	    "weekday",
	    "datevalue",
	    "ccur",
	    "isdate",
	    "instr",
	    "datediff",
	    "formatdatetime",
	    "replace",
	    "isnull",
	    "right",
	    "sgn",
	    "array",
	    "snumeric",
	    "log",
	    "cdbl",
	    "hex",
	    "chr",
	    "lbound",
	    "msgbox",
	    "ucase",
	    "getlocale",
	    "cos",
	    "cdate",
	    "cbyte",
	    "rtrim",
	    "join",
	    "hour",
	    "oct",
	    "typename",
	    "trim",
	    "strcomp",
	    "int",
	    "createobject",
	    "loadpicture",
	    "tan",
	    "formatnumber",
	    "mid",
	    "split",
	    "cint",
	    "sin",
	    "datepart",
	    "ltrim",
	    "sqr",
	    "time",
	    "derived",
	    "eval",
	    "date",
	    "formatpercent",
	    "exp",
	    "inputbox",
	    "left",
	    "ascw",
	    "chrw",
	    "regexp",
	    "cstr",
	    "err"
	  ];
	  const BUILT_IN_OBJECTS = [
	    "server",
	    "response",
	    "request",
	    // take no arguments so can be called without ()
	    "scriptengine",
	    "scriptenginebuildversion",
	    "scriptengineminorversion",
	    "scriptenginemajorversion"
	  ];

	  const BUILT_IN_CALL = {
	    begin: regex.concat(regex.either(...BUILT_IN_FUNCTIONS), "\\s*\\("),
	    // relevance 0 because this is acting as a beginKeywords really
	    relevance: 0,
	    keywords: { built_in: BUILT_IN_FUNCTIONS }
	  };

	  const LITERALS = [
	    "true",
	    "false",
	    "null",
	    "nothing",
	    "empty"
	  ];

	  const KEYWORDS = [
	    "call",
	    "class",
	    "const",
	    "dim",
	    "do",
	    "loop",
	    "erase",
	    "execute",
	    "executeglobal",
	    "exit",
	    "for",
	    "each",
	    "next",
	    "function",
	    "if",
	    "then",
	    "else",
	    "on",
	    "error",
	    "option",
	    "explicit",
	    "new",
	    "private",
	    "property",
	    "let",
	    "get",
	    "public",
	    "randomize",
	    "redim",
	    "rem",
	    "select",
	    "case",
	    "set",
	    "stop",
	    "sub",
	    "while",
	    "wend",
	    "with",
	    "end",
	    "to",
	    "elseif",
	    "is",
	    "or",
	    "xor",
	    "and",
	    "not",
	    "class_initialize",
	    "class_terminate",
	    "default",
	    "preserve",
	    "in",
	    "me",
	    "byval",
	    "byref",
	    "step",
	    "resume",
	    "goto"
	  ];

	  return {
	    name: 'VBScript',
	    aliases: [ 'vbs' ],
	    case_insensitive: true,
	    keywords: {
	      keyword: KEYWORDS,
	      built_in: BUILT_IN_OBJECTS,
	      literal: LITERALS
	    },
	    illegal: '//',
	    contains: [
	      BUILT_IN_CALL,
	      hljs.inherit(hljs.QUOTE_STRING_MODE, { contains: [ { begin: '""' } ] }),
	      hljs.COMMENT(
	        /'/,
	        /$/,
	        { relevance: 0 }
	      ),
	      hljs.C_NUMBER_MODE
	    ]
	  };
	}

	vbscript_1 = vbscript;
	return vbscript_1;
}

/*
Language: VBScript in HTML
Requires: xml.js, vbscript.js
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Description: "Bridge" language defining fragments of VBScript in HTML within <% .. %>
Website: https://en.wikipedia.org/wiki/VBScript
Category: scripting
*/

var vbscriptHtml_1;
var hasRequiredVbscriptHtml;

function requireVbscriptHtml () {
	if (hasRequiredVbscriptHtml) return vbscriptHtml_1;
	hasRequiredVbscriptHtml = 1;
	function vbscriptHtml(hljs) {
	  return {
	    name: 'VBScript in HTML',
	    subLanguage: 'xml',
	    contains: [
	      {
	        begin: '<%',
	        end: '%>',
	        subLanguage: 'vbscript'
	      }
	    ]
	  };
	}

	vbscriptHtml_1 = vbscriptHtml;
	return vbscriptHtml_1;
}

/*
Language: Verilog
Author: Jon Evans <jon@craftyjon.com>
Contributors: Boone Severson <boone.severson@gmail.com>
Description: Verilog is a hardware description language used in electronic design automation to describe digital and mixed-signal systems. This highlighter supports Verilog and SystemVerilog through IEEE 1800-2012.
Website: http://www.verilog.com
*/

var verilog_1;
var hasRequiredVerilog;

function requireVerilog () {
	if (hasRequiredVerilog) return verilog_1;
	hasRequiredVerilog = 1;
	function verilog(hljs) {
	  const regex = hljs.regex;
	  const KEYWORDS = {
	    $pattern: /\$?[\w]+(\$[\w]+)*/,
	    keyword: [
	      "accept_on",
	      "alias",
	      "always",
	      "always_comb",
	      "always_ff",
	      "always_latch",
	      "and",
	      "assert",
	      "assign",
	      "assume",
	      "automatic",
	      "before",
	      "begin",
	      "bind",
	      "bins",
	      "binsof",
	      "bit",
	      "break",
	      "buf|0",
	      "bufif0",
	      "bufif1",
	      "byte",
	      "case",
	      "casex",
	      "casez",
	      "cell",
	      "chandle",
	      "checker",
	      "class",
	      "clocking",
	      "cmos",
	      "config",
	      "const",
	      "constraint",
	      "context",
	      "continue",
	      "cover",
	      "covergroup",
	      "coverpoint",
	      "cross",
	      "deassign",
	      "default",
	      "defparam",
	      "design",
	      "disable",
	      "dist",
	      "do",
	      "edge",
	      "else",
	      "end",
	      "endcase",
	      "endchecker",
	      "endclass",
	      "endclocking",
	      "endconfig",
	      "endfunction",
	      "endgenerate",
	      "endgroup",
	      "endinterface",
	      "endmodule",
	      "endpackage",
	      "endprimitive",
	      "endprogram",
	      "endproperty",
	      "endspecify",
	      "endsequence",
	      "endtable",
	      "endtask",
	      "enum",
	      "event",
	      "eventually",
	      "expect",
	      "export",
	      "extends",
	      "extern",
	      "final",
	      "first_match",
	      "for",
	      "force",
	      "foreach",
	      "forever",
	      "fork",
	      "forkjoin",
	      "function",
	      "generate|5",
	      "genvar",
	      "global",
	      "highz0",
	      "highz1",
	      "if",
	      "iff",
	      "ifnone",
	      "ignore_bins",
	      "illegal_bins",
	      "implements",
	      "implies",
	      "import",
	      "incdir",
	      "include",
	      "initial",
	      "inout",
	      "input",
	      "inside",
	      "instance",
	      "int",
	      "integer",
	      "interconnect",
	      "interface",
	      "intersect",
	      "join",
	      "join_any",
	      "join_none",
	      "large",
	      "let",
	      "liblist",
	      "library",
	      "local",
	      "localparam",
	      "logic",
	      "longint",
	      "macromodule",
	      "matches",
	      "medium",
	      "modport",
	      "module",
	      "nand",
	      "negedge",
	      "nettype",
	      "new",
	      "nexttime",
	      "nmos",
	      "nor",
	      "noshowcancelled",
	      "not",
	      "notif0",
	      "notif1",
	      "or",
	      "output",
	      "package",
	      "packed",
	      "parameter",
	      "pmos",
	      "posedge",
	      "primitive",
	      "priority",
	      "program",
	      "property",
	      "protected",
	      "pull0",
	      "pull1",
	      "pulldown",
	      "pullup",
	      "pulsestyle_ondetect",
	      "pulsestyle_onevent",
	      "pure",
	      "rand",
	      "randc",
	      "randcase",
	      "randsequence",
	      "rcmos",
	      "real",
	      "realtime",
	      "ref",
	      "reg",
	      "reject_on",
	      "release",
	      "repeat",
	      "restrict",
	      "return",
	      "rnmos",
	      "rpmos",
	      "rtran",
	      "rtranif0",
	      "rtranif1",
	      "s_always",
	      "s_eventually",
	      "s_nexttime",
	      "s_until",
	      "s_until_with",
	      "scalared",
	      "sequence",
	      "shortint",
	      "shortreal",
	      "showcancelled",
	      "signed",
	      "small",
	      "soft",
	      "solve",
	      "specify",
	      "specparam",
	      "static",
	      "string",
	      "strong",
	      "strong0",
	      "strong1",
	      "struct",
	      "super",
	      "supply0",
	      "supply1",
	      "sync_accept_on",
	      "sync_reject_on",
	      "table",
	      "tagged",
	      "task",
	      "this",
	      "throughout",
	      "time",
	      "timeprecision",
	      "timeunit",
	      "tran",
	      "tranif0",
	      "tranif1",
	      "tri",
	      "tri0",
	      "tri1",
	      "triand",
	      "trior",
	      "trireg",
	      "type",
	      "typedef",
	      "union",
	      "unique",
	      "unique0",
	      "unsigned",
	      "until",
	      "until_with",
	      "untyped",
	      "use",
	      "uwire",
	      "var",
	      "vectored",
	      "virtual",
	      "void",
	      "wait",
	      "wait_order",
	      "wand",
	      "weak",
	      "weak0",
	      "weak1",
	      "while",
	      "wildcard",
	      "wire",
	      "with",
	      "within",
	      "wor",
	      "xnor",
	      "xor"
	    ],
	    literal: [ 'null' ],
	    built_in: [
	      "$finish",
	      "$stop",
	      "$exit",
	      "$fatal",
	      "$error",
	      "$warning",
	      "$info",
	      "$realtime",
	      "$time",
	      "$printtimescale",
	      "$bitstoreal",
	      "$bitstoshortreal",
	      "$itor",
	      "$signed",
	      "$cast",
	      "$bits",
	      "$stime",
	      "$timeformat",
	      "$realtobits",
	      "$shortrealtobits",
	      "$rtoi",
	      "$unsigned",
	      "$asserton",
	      "$assertkill",
	      "$assertpasson",
	      "$assertfailon",
	      "$assertnonvacuouson",
	      "$assertoff",
	      "$assertcontrol",
	      "$assertpassoff",
	      "$assertfailoff",
	      "$assertvacuousoff",
	      "$isunbounded",
	      "$sampled",
	      "$fell",
	      "$changed",
	      "$past_gclk",
	      "$fell_gclk",
	      "$changed_gclk",
	      "$rising_gclk",
	      "$steady_gclk",
	      "$coverage_control",
	      "$coverage_get",
	      "$coverage_save",
	      "$set_coverage_db_name",
	      "$rose",
	      "$stable",
	      "$past",
	      "$rose_gclk",
	      "$stable_gclk",
	      "$future_gclk",
	      "$falling_gclk",
	      "$changing_gclk",
	      "$display",
	      "$coverage_get_max",
	      "$coverage_merge",
	      "$get_coverage",
	      "$load_coverage_db",
	      "$typename",
	      "$unpacked_dimensions",
	      "$left",
	      "$low",
	      "$increment",
	      "$clog2",
	      "$ln",
	      "$log10",
	      "$exp",
	      "$sqrt",
	      "$pow",
	      "$floor",
	      "$ceil",
	      "$sin",
	      "$cos",
	      "$tan",
	      "$countbits",
	      "$onehot",
	      "$isunknown",
	      "$fatal",
	      "$warning",
	      "$dimensions",
	      "$right",
	      "$high",
	      "$size",
	      "$asin",
	      "$acos",
	      "$atan",
	      "$atan2",
	      "$hypot",
	      "$sinh",
	      "$cosh",
	      "$tanh",
	      "$asinh",
	      "$acosh",
	      "$atanh",
	      "$countones",
	      "$onehot0",
	      "$error",
	      "$info",
	      "$random",
	      "$dist_chi_square",
	      "$dist_erlang",
	      "$dist_exponential",
	      "$dist_normal",
	      "$dist_poisson",
	      "$dist_t",
	      "$dist_uniform",
	      "$q_initialize",
	      "$q_remove",
	      "$q_exam",
	      "$async$and$array",
	      "$async$nand$array",
	      "$async$or$array",
	      "$async$nor$array",
	      "$sync$and$array",
	      "$sync$nand$array",
	      "$sync$or$array",
	      "$sync$nor$array",
	      "$q_add",
	      "$q_full",
	      "$psprintf",
	      "$async$and$plane",
	      "$async$nand$plane",
	      "$async$or$plane",
	      "$async$nor$plane",
	      "$sync$and$plane",
	      "$sync$nand$plane",
	      "$sync$or$plane",
	      "$sync$nor$plane",
	      "$system",
	      "$display",
	      "$displayb",
	      "$displayh",
	      "$displayo",
	      "$strobe",
	      "$strobeb",
	      "$strobeh",
	      "$strobeo",
	      "$write",
	      "$readmemb",
	      "$readmemh",
	      "$writememh",
	      "$value$plusargs",
	      "$dumpvars",
	      "$dumpon",
	      "$dumplimit",
	      "$dumpports",
	      "$dumpportson",
	      "$dumpportslimit",
	      "$writeb",
	      "$writeh",
	      "$writeo",
	      "$monitor",
	      "$monitorb",
	      "$monitorh",
	      "$monitoro",
	      "$writememb",
	      "$dumpfile",
	      "$dumpoff",
	      "$dumpall",
	      "$dumpflush",
	      "$dumpportsoff",
	      "$dumpportsall",
	      "$dumpportsflush",
	      "$fclose",
	      "$fdisplay",
	      "$fdisplayb",
	      "$fdisplayh",
	      "$fdisplayo",
	      "$fstrobe",
	      "$fstrobeb",
	      "$fstrobeh",
	      "$fstrobeo",
	      "$swrite",
	      "$swriteb",
	      "$swriteh",
	      "$swriteo",
	      "$fscanf",
	      "$fread",
	      "$fseek",
	      "$fflush",
	      "$feof",
	      "$fopen",
	      "$fwrite",
	      "$fwriteb",
	      "$fwriteh",
	      "$fwriteo",
	      "$fmonitor",
	      "$fmonitorb",
	      "$fmonitorh",
	      "$fmonitoro",
	      "$sformat",
	      "$sformatf",
	      "$fgetc",
	      "$ungetc",
	      "$fgets",
	      "$sscanf",
	      "$rewind",
	      "$ftell",
	      "$ferror"
	    ]
	  };
	  const BUILT_IN_CONSTANTS = [
	    "__FILE__",
	    "__LINE__"
	  ];
	  const DIRECTIVES = [
	    "begin_keywords",
	    "celldefine",
	    "default_nettype",
	    "default_decay_time",
	    "default_trireg_strength",
	    "define",
	    "delay_mode_distributed",
	    "delay_mode_path",
	    "delay_mode_unit",
	    "delay_mode_zero",
	    "else",
	    "elsif",
	    "end_keywords",
	    "endcelldefine",
	    "endif",
	    "ifdef",
	    "ifndef",
	    "include",
	    "line",
	    "nounconnected_drive",
	    "pragma",
	    "resetall",
	    "timescale",
	    "unconnected_drive",
	    "undef",
	    "undefineall"
	  ];

	  return {
	    name: 'Verilog',
	    aliases: [
	      'v',
	      'sv',
	      'svh'
	    ],
	    case_insensitive: false,
	    keywords: KEYWORDS,
	    contains: [
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        scope: 'number',
	        contains: [ hljs.BACKSLASH_ESCAPE ],
	        variants: [
	          { begin: /\b((\d+'([bhodBHOD]))[0-9xzXZa-fA-F_]+)/ },
	          { begin: /\B(('([bhodBHOD]))[0-9xzXZa-fA-F_]+)/ },
	          { // decimal
	            begin: /\b[0-9][0-9_]*/,
	            relevance: 0
	          }
	        ]
	      },
	      /* parameters to instances */
	      {
	        scope: 'variable',
	        variants: [
	          { begin: '#\\((?!parameter).+\\)' },
	          {
	            begin: '\\.\\w+',
	            relevance: 0
	          }
	        ]
	      },
	      {
	        scope: 'variable.constant',
	        match: regex.concat(/`/, regex.either(...BUILT_IN_CONSTANTS)),
	      },
	      {
	        scope: 'meta',
	        begin: regex.concat(/`/, regex.either(...DIRECTIVES)),
	        end: /$|\/\/|\/\*/,
	        returnEnd: true,
	        keywords: DIRECTIVES
	      }
	    ]
	  };
	}

	verilog_1 = verilog;
	return verilog_1;
}

/*
Language: VHDL
Author: Igor Kalnitsky <igor@kalnitsky.org>
Contributors: Daniel C.K. Kho <daniel.kho@tauhop.com>, Guillaume Savaton <guillaume.savaton@eseo.fr>
Description: VHDL is a hardware description language used in electronic design automation to describe digital and mixed-signal systems.
Website: https://en.wikipedia.org/wiki/VHDL
*/

var vhdl_1;
var hasRequiredVhdl;

function requireVhdl () {
	if (hasRequiredVhdl) return vhdl_1;
	hasRequiredVhdl = 1;
	function vhdl(hljs) {
	  // Regular expression for VHDL numeric literals.

	  // Decimal literal:
	  const INTEGER_RE = '\\d(_|\\d)*';
	  const EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;
	  const DECIMAL_LITERAL_RE = INTEGER_RE + '(\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';
	  // Based literal:
	  const BASED_INTEGER_RE = '\\w+';
	  const BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';

	  const NUMBER_RE = '\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';

	  const KEYWORDS = [
	    "abs",
	    "access",
	    "after",
	    "alias",
	    "all",
	    "and",
	    "architecture",
	    "array",
	    "assert",
	    "assume",
	    "assume_guarantee",
	    "attribute",
	    "begin",
	    "block",
	    "body",
	    "buffer",
	    "bus",
	    "case",
	    "component",
	    "configuration",
	    "constant",
	    "context",
	    "cover",
	    "disconnect",
	    "downto",
	    "default",
	    "else",
	    "elsif",
	    "end",
	    "entity",
	    "exit",
	    "fairness",
	    "file",
	    "for",
	    "force",
	    "function",
	    "generate",
	    "generic",
	    "group",
	    "guarded",
	    "if",
	    "impure",
	    "in",
	    "inertial",
	    "inout",
	    "is",
	    "label",
	    "library",
	    "linkage",
	    "literal",
	    "loop",
	    "map",
	    "mod",
	    "nand",
	    "new",
	    "next",
	    "nor",
	    "not",
	    "null",
	    "of",
	    "on",
	    "open",
	    "or",
	    "others",
	    "out",
	    "package",
	    "parameter",
	    "port",
	    "postponed",
	    "procedure",
	    "process",
	    "property",
	    "protected",
	    "pure",
	    "range",
	    "record",
	    "register",
	    "reject",
	    "release",
	    "rem",
	    "report",
	    "restrict",
	    "restrict_guarantee",
	    "return",
	    "rol",
	    "ror",
	    "select",
	    "sequence",
	    "severity",
	    "shared",
	    "signal",
	    "sla",
	    "sll",
	    "sra",
	    "srl",
	    "strong",
	    "subtype",
	    "then",
	    "to",
	    "transport",
	    "type",
	    "unaffected",
	    "units",
	    "until",
	    "use",
	    "variable",
	    "view",
	    "vmode",
	    "vprop",
	    "vunit",
	    "wait",
	    "when",
	    "while",
	    "with",
	    "xnor",
	    "xor"
	  ];
	  const BUILT_INS = [
	    "boolean",
	    "bit",
	    "character",
	    "integer",
	    "time",
	    "delay_length",
	    "natural",
	    "positive",
	    "string",
	    "bit_vector",
	    "file_open_kind",
	    "file_open_status",
	    "std_logic",
	    "std_logic_vector",
	    "unsigned",
	    "signed",
	    "boolean_vector",
	    "integer_vector",
	    "std_ulogic",
	    "std_ulogic_vector",
	    "unresolved_unsigned",
	    "u_unsigned",
	    "unresolved_signed",
	    "u_signed",
	    "real_vector",
	    "time_vector"
	  ];
	  const LITERALS = [
	    // severity_level
	    "false",
	    "true",
	    "note",
	    "warning",
	    "error",
	    "failure",
	    // textio
	    "line",
	    "text",
	    "side",
	    "width"
	  ];

	  return {
	    name: 'VHDL',
	    case_insensitive: true,
	    keywords: {
	      keyword: KEYWORDS,
	      built_in: BUILT_INS,
	      literal: LITERALS
	    },
	    illegal: /\{/,
	    contains: [
	      hljs.C_BLOCK_COMMENT_MODE, // VHDL-2008 block commenting.
	      hljs.COMMENT('--', '$'),
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'number',
	        begin: NUMBER_RE,
	        relevance: 0
	      },
	      {
	        className: 'string',
	        begin: '\'(U|X|0|1|Z|W|L|H|-)\'',
	        contains: [ hljs.BACKSLASH_ESCAPE ]
	      },
	      {
	        className: 'symbol',
	        begin: '\'[A-Za-z](_?[A-Za-z0-9])*',
	        contains: [ hljs.BACKSLASH_ESCAPE ]
	      }
	    ]
	  };
	}

	vhdl_1 = vhdl;
	return vhdl_1;
}

/*
Language: Vim Script
Author: Jun Yang <yangjvn@126.com>
Description: full keyword and built-in from http://vimdoc.sourceforge.net/htmldoc/
Website: https://www.vim.org
Category: scripting
*/

var vim_1;
var hasRequiredVim;

function requireVim () {
	if (hasRequiredVim) return vim_1;
	hasRequiredVim = 1;
	function vim(hljs) {
	  return {
	    name: 'Vim Script',
	    keywords: {
	      $pattern: /[!#@\w]+/,
	      keyword:
	        // express version except: ! & * < = > !! # @ @@
	        'N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope '
	        + 'cp cpf cq cr cs cst cu cuna cunme cw delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu go gr grepa gu gv ha helpf helpg helpt hi hid his ia iabc if ij il im imapc '
	        + 'ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 '
	        + 'profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf quita qa rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor '
	        + 'so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew '
	        + 'tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ '
	        // full version
	        + 'Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload '
	        + 'bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap '
	        + 'cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor '
	        + 'endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap '
	        + 'imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview '
	        + 'lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap '
	        + 'nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext '
	        + 'ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding '
	        + 'scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace '
	        + 'startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious ' + 'trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew '
	        + 'vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank',
	      built_in: // built in func
	        'synIDtrans atan2 range matcharg did_filetype asin feedkeys xor argv '
	        + 'complete_check add getwinposx getqflist getwinposy screencol '
	        + 'clearmatches empty extend getcmdpos mzeval garbagecollect setreg '
	        + 'ceil sqrt diff_hlID inputsecret get getfperm getpid filewritable '
	        + 'shiftwidth max sinh isdirectory synID system inputrestore winline '
	        + 'atan visualmode inputlist tabpagewinnr round getregtype mapcheck '
	        + 'hasmapto histdel argidx findfile sha256 exists toupper getcmdline '
	        + 'taglist string getmatches bufnr strftime winwidth bufexists '
	        + 'strtrans tabpagebuflist setcmdpos remote_read printf setloclist '
	        + 'getpos getline bufwinnr float2nr len getcmdtype diff_filler luaeval '
	        + 'resolve libcallnr foldclosedend reverse filter has_key bufname '
	        + 'str2float strlen setline getcharmod setbufvar index searchpos '
	        + 'shellescape undofile foldclosed setqflist buflisted strchars str2nr '
	        + 'virtcol floor remove undotree remote_expr winheight gettabwinvar '
	        + 'reltime cursor tabpagenr finddir localtime acos getloclist search '
	        + 'tanh matchend rename gettabvar strdisplaywidth type abs py3eval '
	        + 'setwinvar tolower wildmenumode log10 spellsuggest bufloaded '
	        + 'synconcealed nextnonblank server2client complete settabwinvar '
	        + 'executable input wincol setmatches getftype hlID inputsave '
	        + 'searchpair or screenrow line settabvar histadd deepcopy strpart '
	        + 'remote_peek and eval getftime submatch screenchar winsaveview '
	        + 'matchadd mkdir screenattr getfontname libcall reltimestr getfsize '
	        + 'winnr invert pow getbufline byte2line soundfold repeat fnameescape '
	        + 'tagfiles sin strwidth spellbadword trunc maparg log lispindent '
	        + 'hostname setpos globpath remote_foreground getchar synIDattr '
	        + 'fnamemodify cscope_connection stridx winbufnr indent min '
	        + 'complete_add nr2char searchpairpos inputdialog values matchlist '
	        + 'items hlexists strridx browsedir expand fmod pathshorten line2byte '
	        + 'argc count getwinvar glob foldtextresult getreg foreground cosh '
	        + 'matchdelete has char2nr simplify histget searchdecl iconv '
	        + 'winrestcmd pumvisible writefile foldlevel haslocaldir keys cos '
	        + 'matchstr foldtext histnr tan tempname getcwd byteidx getbufvar '
	        + 'islocked escape eventhandler remote_send serverlist winrestview '
	        + 'synstack pyeval prevnonblank readfile cindent filereadable changenr '
	        + 'exp'
	    },
	    illegal: /;/,
	    contains: [
	      hljs.NUMBER_MODE,
	      {
	        className: 'string',
	        begin: '\'',
	        end: '\'',
	        illegal: '\\n'
	      },

	      /*
	      A double quote can start either a string or a line comment. Strings are
	      ended before the end of a line by another double quote and can contain
	      escaped double-quotes and post-escaped line breaks.

	      Also, any double quote at the beginning of a line is a comment but we
	      don't handle that properly at the moment: any double quote inside will
	      turn them into a string. Handling it properly will require a smarter
	      parser.
	      */
	      {
	        className: 'string',
	        begin: /"(\\"|\n\\|[^"\n])*"/
	      },
	      hljs.COMMENT('"', '$'),

	      {
	        className: 'variable',
	        begin: /[bwtglsav]:[\w\d_]+/
	      },
	      {
	        begin: [
	          /\b(?:function|function!)/,
	          /\s+/,
	          hljs.IDENT_RE
	        ],
	        className: {
	          1: "keyword",
	          3: "title"
	        },
	        end: '$',
	        relevance: 0,
	        contains: [
	          {
	            className: 'params',
	            begin: '\\(',
	            end: '\\)'
	          }
	        ]
	      },
	      {
	        className: 'symbol',
	        begin: /<[\w-]+>/
	      }
	    ]
	  };
	}

	vim_1 = vim;
	return vim_1;
}

/*
Language: WebAssembly
Website: https://webassembly.org
Description:  Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.
Category: web, common
Audit: 2020
*/

var wasm_1;
var hasRequiredWasm;

function requireWasm () {
	if (hasRequiredWasm) return wasm_1;
	hasRequiredWasm = 1;
	/** @type LanguageFn */
	function wasm(hljs) {
	  hljs.regex;
	  const BLOCK_COMMENT = hljs.COMMENT(/\(;/, /;\)/);
	  BLOCK_COMMENT.contains.push("self");
	  const LINE_COMMENT = hljs.COMMENT(/;;/, /$/);

	  const KWS = [
	    "anyfunc",
	    "block",
	    "br",
	    "br_if",
	    "br_table",
	    "call",
	    "call_indirect",
	    "data",
	    "drop",
	    "elem",
	    "else",
	    "end",
	    "export",
	    "func",
	    "global.get",
	    "global.set",
	    "local.get",
	    "local.set",
	    "local.tee",
	    "get_global",
	    "get_local",
	    "global",
	    "if",
	    "import",
	    "local",
	    "loop",
	    "memory",
	    "memory.grow",
	    "memory.size",
	    "module",
	    "mut",
	    "nop",
	    "offset",
	    "param",
	    "result",
	    "return",
	    "select",
	    "set_global",
	    "set_local",
	    "start",
	    "table",
	    "tee_local",
	    "then",
	    "type",
	    "unreachable"
	  ];

	  const FUNCTION_REFERENCE = {
	    begin: [
	      /(?:func|call|call_indirect)/,
	      /\s+/,
	      /\$[^\s)]+/
	    ],
	    className: {
	      1: "keyword",
	      3: "title.function"
	    }
	  };

	  const ARGUMENT = {
	    className: "variable",
	    begin: /\$[\w_]+/
	  };

	  const PARENS = {
	    match: /(\((?!;)|\))+/,
	    className: "punctuation",
	    relevance: 0
	  };

	  const NUMBER = {
	    className: "number",
	    relevance: 0,
	    // borrowed from Prism, TODO: split out into variants
	    match: /[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/
	  };

	  const TYPE = {
	    // look-ahead prevents us from gobbling up opcodes
	    match: /(i32|i64|f32|f64)(?!\.)/,
	    className: "type"
	  };

	  const MATH_OPERATIONS = {
	    className: "keyword",
	    // borrowed from Prism, TODO: split out into variants
	    match: /\b(f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))\b/
	  };

	  const OFFSET_ALIGN = {
	    match: [
	      /(?:offset|align)/,
	      /\s*/,
	      /=/
	    ],
	    className: {
	      1: "keyword",
	      3: "operator"
	    }
	  };

	  return {
	    name: 'WebAssembly',
	    keywords: {
	      $pattern: /[\w.]+/,
	      keyword: KWS
	    },
	    contains: [
	      LINE_COMMENT,
	      BLOCK_COMMENT,
	      OFFSET_ALIGN,
	      ARGUMENT,
	      PARENS,
	      FUNCTION_REFERENCE,
	      hljs.QUOTE_STRING_MODE,
	      TYPE,
	      MATH_OPERATIONS,
	      NUMBER
	    ]
	  };
	}

	wasm_1 = wasm;
	return wasm_1;
}

/*
Language: Wren
Description: Think Smalltalk in a Lua-sized package with a dash of Erlang and wrapped up in a familiar, modern syntax.
Category: scripting
Author: @joshgoebel
Maintainer: @joshgoebel
Website: https://wren.io/
*/

var wren_1;
var hasRequiredWren;

function requireWren () {
	if (hasRequiredWren) return wren_1;
	hasRequiredWren = 1;
	/** @type LanguageFn */
	function wren(hljs) {
	  const regex = hljs.regex;
	  const IDENT_RE = /[a-zA-Z]\w*/;
	  const KEYWORDS = [
	    "as",
	    "break",
	    "class",
	    "construct",
	    "continue",
	    "else",
	    "for",
	    "foreign",
	    "if",
	    "import",
	    "in",
	    "is",
	    "return",
	    "static",
	    "var",
	    "while"
	  ];
	  const LITERALS = [
	    "true",
	    "false",
	    "null"
	  ];
	  const LANGUAGE_VARS = [
	    "this",
	    "super"
	  ];
	  const CORE_CLASSES = [
	    "Bool",
	    "Class",
	    "Fiber",
	    "Fn",
	    "List",
	    "Map",
	    "Null",
	    "Num",
	    "Object",
	    "Range",
	    "Sequence",
	    "String",
	    "System"
	  ];
	  const OPERATORS = [
	    "-",
	    "~",
	    /\*/,
	    "%",
	    /\.\.\./,
	    /\.\./,
	    /\+/,
	    "<<",
	    ">>",
	    ">=",
	    "<=",
	    "<",
	    ">",
	    /\^/,
	    /!=/,
	    /!/,
	    /\bis\b/,
	    "==",
	    "&&",
	    "&",
	    /\|\|/,
	    /\|/,
	    /\?:/,
	    "="
	  ];
	  const FUNCTION = {
	    relevance: 0,
	    match: regex.concat(/\b(?!(if|while|for|else|super)\b)/, IDENT_RE, /(?=\s*[({])/),
	    className: "title.function"
	  };
	  const FUNCTION_DEFINITION = {
	    match: regex.concat(
	      regex.either(
	        regex.concat(/\b(?!(if|while|for|else|super)\b)/, IDENT_RE),
	        regex.either(...OPERATORS)
	      ),
	      /(?=\s*\([^)]+\)\s*\{)/),
	    className: "title.function",
	    starts: { contains: [
	      {
	        begin: /\(/,
	        end: /\)/,
	        contains: [
	          {
	            relevance: 0,
	            scope: "params",
	            match: IDENT_RE
	          }
	        ]
	      }
	    ] }
	  };
	  const CLASS_DEFINITION = {
	    variants: [
	      { match: [
	        /class\s+/,
	        IDENT_RE,
	        /\s+is\s+/,
	        IDENT_RE
	      ] },
	      { match: [
	        /class\s+/,
	        IDENT_RE
	      ] }
	    ],
	    scope: {
	      2: "title.class",
	      4: "title.class.inherited"
	    },
	    keywords: KEYWORDS
	  };

	  const OPERATOR = {
	    relevance: 0,
	    match: regex.either(...OPERATORS),
	    className: "operator"
	  };

	  const TRIPLE_STRING = {
	    className: "string",
	    begin: /"""/,
	    end: /"""/
	  };

	  const PROPERTY = {
	    className: "property",
	    begin: regex.concat(/\./, regex.lookahead(IDENT_RE)),
	    end: IDENT_RE,
	    excludeBegin: true,
	    relevance: 0
	  };

	  const FIELD = {
	    relevance: 0,
	    match: regex.concat(/\b_/, IDENT_RE),
	    scope: "variable"
	  };

	  // CamelCase
	  const CLASS_REFERENCE = {
	    relevance: 0,
	    match: /\b[A-Z]+[a-z]+([A-Z]+[a-z]+)*/,
	    scope: "title.class",
	    keywords: { _: CORE_CLASSES }
	  };

	  // TODO: add custom number modes
	  const NUMBER = hljs.C_NUMBER_MODE;

	  const SETTER = {
	    match: [
	      IDENT_RE,
	      /\s*/,
	      /=/,
	      /\s*/,
	      /\(/,
	      IDENT_RE,
	      /\)\s*\{/
	    ],
	    scope: {
	      1: "title.function",
	      3: "operator",
	      6: "params"
	    }
	  };

	  const COMMENT_DOCS = hljs.COMMENT(
	    /\/\*\*/,
	    /\*\//,
	    { contains: [
	      {
	        match: /@[a-z]+/,
	        scope: "doctag"
	      },
	      "self"
	    ] }
	  );
	  const SUBST = {
	    scope: "subst",
	    begin: /%\(/,
	    end: /\)/,
	    contains: [
	      NUMBER,
	      CLASS_REFERENCE,
	      FUNCTION,
	      FIELD,
	      OPERATOR
	    ]
	  };
	  const STRING = {
	    scope: "string",
	    begin: /"/,
	    end: /"/,
	    contains: [
	      SUBST,
	      {
	        scope: "char.escape",
	        variants: [
	          { match: /\\\\|\\["0%abefnrtv]/ },
	          { match: /\\x[0-9A-F]{2}/ },
	          { match: /\\u[0-9A-F]{4}/ },
	          { match: /\\U[0-9A-F]{8}/ }
	        ]
	      }
	    ]
	  };
	  SUBST.contains.push(STRING);

	  const ALL_KWS = [
	    ...KEYWORDS,
	    ...LANGUAGE_VARS,
	    ...LITERALS
	  ];
	  const VARIABLE = {
	    relevance: 0,
	    match: regex.concat(
	      "\\b(?!",
	      ALL_KWS.join("|"),
	      "\\b)",
	      /[a-zA-Z_]\w*(?:[?!]|\b)/
	    ),
	    className: "variable"
	  };

	  // TODO: reconsider this in the future
	  const ATTRIBUTE = {
	    // scope: "meta",
	    scope: "comment",
	    variants: [
	      {
	        begin: [
	          /#!?/,
	          /[A-Za-z_]+(?=\()/
	        ],
	        beginScope: {
	          // 2: "attr"
	        },
	        keywords: { literal: LITERALS },
	        contains: [
	          // NUMBER,
	          // VARIABLE
	        ],
	        end: /\)/
	      },
	      {
	        begin: [
	          /#!?/,
	          /[A-Za-z_]+/
	        ],
	        beginScope: {
	          // 2: "attr"
	        },
	        end: /$/
	      }
	    ]
	  };

	  return {
	    name: "Wren",
	    keywords: {
	      keyword: KEYWORDS,
	      "variable.language": LANGUAGE_VARS,
	      literal: LITERALS
	    },
	    contains: [
	      ATTRIBUTE,
	      NUMBER,
	      STRING,
	      TRIPLE_STRING,
	      COMMENT_DOCS,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      CLASS_REFERENCE,
	      CLASS_DEFINITION,
	      SETTER,
	      FUNCTION_DEFINITION,
	      FUNCTION,
	      OPERATOR,
	      FIELD,
	      PROPERTY,
	      VARIABLE
	    ]
	  };
	}

	wren_1 = wren;
	return wren_1;
}

/*
Language: Intel x86 Assembly
Author: innocenat <innocenat@gmail.com>
Description: x86 assembly language using Intel's mnemonic and NASM syntax
Website: https://en.wikipedia.org/wiki/X86_assembly_language
Category: assembler
*/

var x86asm_1;
var hasRequiredX86asm;

function requireX86asm () {
	if (hasRequiredX86asm) return x86asm_1;
	hasRequiredX86asm = 1;
	function x86asm(hljs) {
	  return {
	    name: 'Intel x86 Assembly',
	    case_insensitive: true,
	    keywords: {
	      $pattern: '[.%]?' + hljs.IDENT_RE,
	      keyword:
	        'lock rep repe repz repne repnz xaquire xrelease bnd nobnd '
	        + 'aaa aad aam aas adc add and arpl bb0_reset bb1_reset bound bsf bsr bswap bt btc btr bts call cbw cdq cdqe clc cld cli clts cmc cmp cmpsb cmpsd cmpsq cmpsw cmpxchg cmpxchg486 cmpxchg8b cmpxchg16b cpuid cpu_read cpu_write cqo cwd cwde daa das dec div dmint emms enter equ f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcmovb fcmovbe fcmove fcmovnb fcmovnbe fcmovne fcmovnu fcmovu fcom fcomi fcomip fcomp fcompp fcos fdecstp fdisi fdiv fdivp fdivr fdivrp femms feni ffree ffreep fiadd ficom ficomp fidiv fidivr fild fimul fincstp finit fist fistp fisttp fisub fisubr fld fld1 fldcw fldenv fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul fmulp fnclex fndisi fneni fninit fnop fnsave fnstcw fnstenv fnstsw fpatan fprem fprem1 fptan frndint frstor fsave fscale fsetpm fsin fsincos fsqrt fst fstcw fstenv fstp fstsw fsub fsubp fsubr fsubrp ftst fucom fucomi fucomip fucomp fucompp fxam fxch fxtract fyl2x fyl2xp1 hlt ibts icebp idiv imul in inc incbin insb insd insw int int01 int1 int03 int3 into invd invpcid invlpg invlpga iret iretd iretq iretw jcxz jecxz jrcxz jmp jmpe lahf lar lds lea leave les lfence lfs lgdt lgs lidt lldt lmsw loadall loadall286 lodsb lodsd lodsq lodsw loop loope loopne loopnz loopz lsl lss ltr mfence monitor mov movd movq movsb movsd movsq movsw movsx movsxd movzx mul mwait neg nop not or out outsb outsd outsw packssdw packsswb packuswb paddb paddd paddsb paddsiw paddsw paddusb paddusw paddw pand pandn pause paveb pavgusb pcmpeqb pcmpeqd pcmpeqw pcmpgtb pcmpgtd pcmpgtw pdistib pf2id pfacc pfadd pfcmpeq pfcmpge pfcmpgt pfmax pfmin pfmul pfrcp pfrcpit1 pfrcpit2 pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pmachriw pmaddwd pmagw pmulhriw pmulhrwa pmulhrwc pmulhw pmullw pmvgezb pmvlzb pmvnzb pmvzb pop popa popad popaw popf popfd popfq popfw por prefetch prefetchw pslld psllq psllw psrad psraw psrld psrlq psrlw psubb psubd psubsb psubsiw psubsw psubusb psubusw psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq punpcklwd push pusha pushad pushaw pushf pushfd pushfq pushfw pxor rcl rcr rdshr rdmsr rdpmc rdtsc rdtscp ret retf retn rol ror rdm rsdc rsldt rsm rsts sahf sal salc sar sbb scasb scasd scasq scasw sfence sgdt shl shld shr shrd sidt sldt skinit smi smint smintold smsw stc std sti stosb stosd stosq stosw str sub svdc svldt svts swapgs syscall sysenter sysexit sysret test ud0 ud1 ud2b ud2 ud2a umov verr verw fwait wbinvd wrshr wrmsr xadd xbts xchg xlatb xlat xor cmove cmovz cmovne cmovnz cmova cmovnbe cmovae cmovnb cmovb cmovnae cmovbe cmovna cmovg cmovnle cmovge cmovnl cmovl cmovnge cmovle cmovng cmovc cmovnc cmovo cmovno cmovs cmovns cmovp cmovpe cmovnp cmovpo je jz jne jnz ja jnbe jae jnb jb jnae jbe jna jg jnle jge jnl jl jnge jle jng jc jnc jo jno js jns jpo jnp jpe jp sete setz setne setnz seta setnbe setae setnb setnc setb setnae setcset setbe setna setg setnle setge setnl setl setnge setle setng sets setns seto setno setpe setp setpo setnp addps addss andnps andps cmpeqps cmpeqss cmpleps cmpless cmpltps cmpltss cmpneqps cmpneqss cmpnleps cmpnless cmpnltps cmpnltss cmpordps cmpordss cmpunordps cmpunordss cmpps cmpss comiss cvtpi2ps cvtps2pi cvtsi2ss cvtss2si cvttps2pi cvttss2si divps divss ldmxcsr maxps maxss minps minss movaps movhps movlhps movlps movhlps movmskps movntps movss movups mulps mulss orps rcpps rcpss rsqrtps rsqrtss shufps sqrtps sqrtss stmxcsr subps subss ucomiss unpckhps unpcklps xorps fxrstor fxrstor64 fxsave fxsave64 xgetbv xsetbv xsave xsave64 xsaveopt xsaveopt64 xrstor xrstor64 prefetchnta prefetcht0 prefetcht1 prefetcht2 maskmovq movntq pavgb pavgw pextrw pinsrw pmaxsw pmaxub pminsw pminub pmovmskb pmulhuw psadbw pshufw pf2iw pfnacc pfpnacc pi2fw pswapd maskmovdqu clflush movntdq movnti movntpd movdqa movdqu movdq2q movq2dq paddq pmuludq pshufd pshufhw pshuflw pslldq psrldq psubq punpckhqdq punpcklqdq addpd addsd andnpd andpd cmpeqpd cmpeqsd cmplepd cmplesd cmpltpd cmpltsd cmpneqpd cmpneqsd cmpnlepd cmpnlesd cmpnltpd cmpnltsd cmpordpd cmpordsd cmpunordpd cmpunordsd cmppd comisd cvtdq2pd cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps cvtpi2pd cvtps2dq cvtps2pd cvtsd2si cvtsd2ss cvtsi2sd cvtss2sd cvttpd2pi cvttpd2dq cvttps2dq cvttsd2si divpd divsd maxpd maxsd minpd minsd movapd movhpd movlpd movmskpd movupd mulpd mulsd orpd shufpd sqrtpd sqrtsd subpd subsd ucomisd unpckhpd unpcklpd xorpd addsubpd addsubps haddpd haddps hsubpd hsubps lddqu movddup movshdup movsldup clgi stgi vmcall vmclear vmfunc vmlaunch vmload vmmcall vmptrld vmptrst vmread vmresume vmrun vmsave vmwrite vmxoff vmxon invept invvpid pabsb pabsw pabsd palignr phaddw phaddd phaddsw phsubw phsubd phsubsw pmaddubsw pmulhrsw pshufb psignb psignw psignd extrq insertq movntsd movntss lzcnt blendpd blendps blendvpd blendvps dppd dpps extractps insertps movntdqa mpsadbw packusdw pblendvb pblendw pcmpeqq pextrb pextrd pextrq phminposuw pinsrb pinsrd pinsrq pmaxsb pmaxsd pmaxud pmaxuw pminsb pminsd pminud pminuw pmovsxbw pmovsxbd pmovsxbq pmovsxwd pmovsxwq pmovsxdq pmovzxbw pmovzxbd pmovzxbq pmovzxwd pmovzxwq pmovzxdq pmuldq pmulld ptest roundpd roundps roundsd roundss crc32 pcmpestri pcmpestrm pcmpistri pcmpistrm pcmpgtq popcnt getsec pfrcpv pfrsqrtv movbe aesenc aesenclast aesdec aesdeclast aesimc aeskeygenassist vaesenc vaesenclast vaesdec vaesdeclast vaesimc vaeskeygenassist vaddpd vaddps vaddsd vaddss vaddsubpd vaddsubps vandpd vandps vandnpd vandnps vblendpd vblendps vblendvpd vblendvps vbroadcastss vbroadcastsd vbroadcastf128 vcmpeq_ospd vcmpeqpd vcmplt_ospd vcmpltpd vcmple_ospd vcmplepd vcmpunord_qpd vcmpunordpd vcmpneq_uqpd vcmpneqpd vcmpnlt_uspd vcmpnltpd vcmpnle_uspd vcmpnlepd vcmpord_qpd vcmpordpd vcmpeq_uqpd vcmpnge_uspd vcmpngepd vcmpngt_uspd vcmpngtpd vcmpfalse_oqpd vcmpfalsepd vcmpneq_oqpd vcmpge_ospd vcmpgepd vcmpgt_ospd vcmpgtpd vcmptrue_uqpd vcmptruepd vcmplt_oqpd vcmple_oqpd vcmpunord_spd vcmpneq_uspd vcmpnlt_uqpd vcmpnle_uqpd vcmpord_spd vcmpeq_uspd vcmpnge_uqpd vcmpngt_uqpd vcmpfalse_ospd vcmpneq_ospd vcmpge_oqpd vcmpgt_oqpd vcmptrue_uspd vcmppd vcmpeq_osps vcmpeqps vcmplt_osps vcmpltps vcmple_osps vcmpleps vcmpunord_qps vcmpunordps vcmpneq_uqps vcmpneqps vcmpnlt_usps vcmpnltps vcmpnle_usps vcmpnleps vcmpord_qps vcmpordps vcmpeq_uqps vcmpnge_usps vcmpngeps vcmpngt_usps vcmpngtps vcmpfalse_oqps vcmpfalseps vcmpneq_oqps vcmpge_osps vcmpgeps vcmpgt_osps vcmpgtps vcmptrue_uqps vcmptrueps vcmplt_oqps vcmple_oqps vcmpunord_sps vcmpneq_usps vcmpnlt_uqps vcmpnle_uqps vcmpord_sps vcmpeq_usps vcmpnge_uqps vcmpngt_uqps vcmpfalse_osps vcmpneq_osps vcmpge_oqps vcmpgt_oqps vcmptrue_usps vcmpps vcmpeq_ossd vcmpeqsd vcmplt_ossd vcmpltsd vcmple_ossd vcmplesd vcmpunord_qsd vcmpunordsd vcmpneq_uqsd vcmpneqsd vcmpnlt_ussd vcmpnltsd vcmpnle_ussd vcmpnlesd vcmpord_qsd vcmpordsd vcmpeq_uqsd vcmpnge_ussd vcmpngesd vcmpngt_ussd vcmpngtsd vcmpfalse_oqsd vcmpfalsesd vcmpneq_oqsd vcmpge_ossd vcmpgesd vcmpgt_ossd vcmpgtsd vcmptrue_uqsd vcmptruesd vcmplt_oqsd vcmple_oqsd vcmpunord_ssd vcmpneq_ussd vcmpnlt_uqsd vcmpnle_uqsd vcmpord_ssd vcmpeq_ussd vcmpnge_uqsd vcmpngt_uqsd vcmpfalse_ossd vcmpneq_ossd vcmpge_oqsd vcmpgt_oqsd vcmptrue_ussd vcmpsd vcmpeq_osss vcmpeqss vcmplt_osss vcmpltss vcmple_osss vcmpless vcmpunord_qss vcmpunordss vcmpneq_uqss vcmpneqss vcmpnlt_usss vcmpnltss vcmpnle_usss vcmpnless vcmpord_qss vcmpordss vcmpeq_uqss vcmpnge_usss vcmpngess vcmpngt_usss vcmpngtss vcmpfalse_oqss vcmpfalsess vcmpneq_oqss vcmpge_osss vcmpgess vcmpgt_osss vcmpgtss vcmptrue_uqss vcmptruess vcmplt_oqss vcmple_oqss vcmpunord_sss vcmpneq_usss vcmpnlt_uqss vcmpnle_uqss vcmpord_sss vcmpeq_usss vcmpnge_uqss vcmpngt_uqss vcmpfalse_osss vcmpneq_osss vcmpge_oqss vcmpgt_oqss vcmptrue_usss vcmpss vcomisd vcomiss vcvtdq2pd vcvtdq2ps vcvtpd2dq vcvtpd2ps vcvtps2dq vcvtps2pd vcvtsd2si vcvtsd2ss vcvtsi2sd vcvtsi2ss vcvtss2sd vcvtss2si vcvttpd2dq vcvttps2dq vcvttsd2si vcvttss2si vdivpd vdivps vdivsd vdivss vdppd vdpps vextractf128 vextractps vhaddpd vhaddps vhsubpd vhsubps vinsertf128 vinsertps vlddqu vldqqu vldmxcsr vmaskmovdqu vmaskmovps vmaskmovpd vmaxpd vmaxps vmaxsd vmaxss vminpd vminps vminsd vminss vmovapd vmovaps vmovd vmovq vmovddup vmovdqa vmovqqa vmovdqu vmovqqu vmovhlps vmovhpd vmovhps vmovlhps vmovlpd vmovlps vmovmskpd vmovmskps vmovntdq vmovntqq vmovntdqa vmovntpd vmovntps vmovsd vmovshdup vmovsldup vmovss vmovupd vmovups vmpsadbw vmulpd vmulps vmulsd vmulss vorpd vorps vpabsb vpabsw vpabsd vpacksswb vpackssdw vpackuswb vpackusdw vpaddb vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw vpalignr vpand vpandn vpavgb vpavgw vpblendvb vpblendw vpcmpestri vpcmpestrm vpcmpistri vpcmpistrm vpcmpeqb vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtb vpcmpgtw vpcmpgtd vpcmpgtq vpermilpd vpermilps vperm2f128 vpextrb vpextrw vpextrd vpextrq vphaddw vphaddd vphaddsw vphminposuw vphsubw vphsubd vphsubsw vpinsrb vpinsrw vpinsrd vpinsrq vpmaddwd vpmaddubsw vpmaxsb vpmaxsw vpmaxsd vpmaxub vpmaxuw vpmaxud vpminsb vpminsw vpminsd vpminub vpminuw vpminud vpmovmskb vpmovsxbw vpmovsxbd vpmovsxbq vpmovsxwd vpmovsxwq vpmovsxdq vpmovzxbw vpmovzxbd vpmovzxbq vpmovzxwd vpmovzxwq vpmovzxdq vpmulhuw vpmulhrsw vpmulhw vpmullw vpmulld vpmuludq vpmuldq vpor vpsadbw vpshufb vpshufd vpshufhw vpshuflw vpsignb vpsignw vpsignd vpslldq vpsrldq vpsllw vpslld vpsllq vpsraw vpsrad vpsrlw vpsrld vpsrlq vptest vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw vpsubusb vpsubusw vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw vpunpcklwd vpunpckldq vpunpcklqdq vpxor vrcpps vrcpss vrsqrtps vrsqrtss vroundpd vroundps vroundsd vroundss vshufpd vshufps vsqrtpd vsqrtps vsqrtsd vsqrtss vstmxcsr vsubpd vsubps vsubsd vsubss vtestps vtestpd vucomisd vucomiss vunpckhpd vunpckhps vunpcklpd vunpcklps vxorpd vxorps vzeroall vzeroupper pclmullqlqdq pclmulhqlqdq pclmullqhqdq pclmulhqhqdq pclmulqdq vpclmullqlqdq vpclmulhqlqdq vpclmullqhqdq vpclmulhqhqdq vpclmulqdq vfmadd132ps vfmadd132pd vfmadd312ps vfmadd312pd vfmadd213ps vfmadd213pd vfmadd123ps vfmadd123pd vfmadd231ps vfmadd231pd vfmadd321ps vfmadd321pd vfmaddsub132ps vfmaddsub132pd vfmaddsub312ps vfmaddsub312pd vfmaddsub213ps vfmaddsub213pd vfmaddsub123ps vfmaddsub123pd vfmaddsub231ps vfmaddsub231pd vfmaddsub321ps vfmaddsub321pd vfmsub132ps vfmsub132pd vfmsub312ps vfmsub312pd vfmsub213ps vfmsub213pd vfmsub123ps vfmsub123pd vfmsub231ps vfmsub231pd vfmsub321ps vfmsub321pd vfmsubadd132ps vfmsubadd132pd vfmsubadd312ps vfmsubadd312pd vfmsubadd213ps vfmsubadd213pd vfmsubadd123ps vfmsubadd123pd vfmsubadd231ps vfmsubadd231pd vfmsubadd321ps vfmsubadd321pd vfnmadd132ps vfnmadd132pd vfnmadd312ps vfnmadd312pd vfnmadd213ps vfnmadd213pd vfnmadd123ps vfnmadd123pd vfnmadd231ps vfnmadd231pd vfnmadd321ps vfnmadd321pd vfnmsub132ps vfnmsub132pd vfnmsub312ps vfnmsub312pd vfnmsub213ps vfnmsub213pd vfnmsub123ps vfnmsub123pd vfnmsub231ps vfnmsub231pd vfnmsub321ps vfnmsub321pd vfmadd132ss vfmadd132sd vfmadd312ss vfmadd312sd vfmadd213ss vfmadd213sd vfmadd123ss vfmadd123sd vfmadd231ss vfmadd231sd vfmadd321ss vfmadd321sd vfmsub132ss vfmsub132sd vfmsub312ss vfmsub312sd vfmsub213ss vfmsub213sd vfmsub123ss vfmsub123sd vfmsub231ss vfmsub231sd vfmsub321ss vfmsub321sd vfnmadd132ss vfnmadd132sd vfnmadd312ss vfnmadd312sd vfnmadd213ss vfnmadd213sd vfnmadd123ss vfnmadd123sd vfnmadd231ss vfnmadd231sd vfnmadd321ss vfnmadd321sd vfnmsub132ss vfnmsub132sd vfnmsub312ss vfnmsub312sd vfnmsub213ss vfnmsub213sd vfnmsub123ss vfnmsub123sd vfnmsub231ss vfnmsub231sd vfnmsub321ss vfnmsub321sd rdfsbase rdgsbase rdrand wrfsbase wrgsbase vcvtph2ps vcvtps2ph adcx adox rdseed clac stac xstore xcryptecb xcryptcbc xcryptctr xcryptcfb xcryptofb montmul xsha1 xsha256 llwpcb slwpcb lwpval lwpins vfmaddpd vfmaddps vfmaddsd vfmaddss vfmaddsubpd vfmaddsubps vfmsubaddpd vfmsubaddps vfmsubpd vfmsubps vfmsubsd vfmsubss vfnmaddpd vfnmaddps vfnmaddsd vfnmaddss vfnmsubpd vfnmsubps vfnmsubsd vfnmsubss vfrczpd vfrczps vfrczsd vfrczss vpcmov vpcomb vpcomd vpcomq vpcomub vpcomud vpcomuq vpcomuw vpcomw vphaddbd vphaddbq vphaddbw vphadddq vphaddubd vphaddubq vphaddubw vphaddudq vphadduwd vphadduwq vphaddwd vphaddwq vphsubbw vphsubdq vphsubwd vpmacsdd vpmacsdqh vpmacsdql vpmacssdd vpmacssdqh vpmacssdql vpmacsswd vpmacssww vpmacswd vpmacsww vpmadcsswd vpmadcswd vpperm vprotb vprotd vprotq vprotw vpshab vpshad vpshaq vpshaw vpshlb vpshld vpshlq vpshlw vbroadcasti128 vpblendd vpbroadcastb vpbroadcastw vpbroadcastd vpbroadcastq vpermd vpermpd vpermps vpermq vperm2i128 vextracti128 vinserti128 vpmaskmovd vpmaskmovq vpsllvd vpsllvq vpsravd vpsrlvd vpsrlvq vgatherdpd vgatherqpd vgatherdps vgatherqps vpgatherdd vpgatherqd vpgatherdq vpgatherqq xabort xbegin xend xtest andn bextr blci blcic blsi blsic blcfill blsfill blcmsk blsmsk blsr blcs bzhi mulx pdep pext rorx sarx shlx shrx tzcnt tzmsk t1mskc valignd valignq vblendmpd vblendmps vbroadcastf32x4 vbroadcastf64x4 vbroadcasti32x4 vbroadcasti64x4 vcompresspd vcompressps vcvtpd2udq vcvtps2udq vcvtsd2usi vcvtss2usi vcvttpd2udq vcvttps2udq vcvttsd2usi vcvttss2usi vcvtudq2pd vcvtudq2ps vcvtusi2sd vcvtusi2ss vexpandpd vexpandps vextractf32x4 vextractf64x4 vextracti32x4 vextracti64x4 vfixupimmpd vfixupimmps vfixupimmsd vfixupimmss vgetexppd vgetexpps vgetexpsd vgetexpss vgetmantpd vgetmantps vgetmantsd vgetmantss vinsertf32x4 vinsertf64x4 vinserti32x4 vinserti64x4 vmovdqa32 vmovdqa64 vmovdqu32 vmovdqu64 vpabsq vpandd vpandnd vpandnq vpandq vpblendmd vpblendmq vpcmpltd vpcmpled vpcmpneqd vpcmpnltd vpcmpnled vpcmpd vpcmpltq vpcmpleq vpcmpneqq vpcmpnltq vpcmpnleq vpcmpq vpcmpequd vpcmpltud vpcmpleud vpcmpnequd vpcmpnltud vpcmpnleud vpcmpud vpcmpequq vpcmpltuq vpcmpleuq vpcmpnequq vpcmpnltuq vpcmpnleuq vpcmpuq vpcompressd vpcompressq vpermi2d vpermi2pd vpermi2ps vpermi2q vpermt2d vpermt2pd vpermt2ps vpermt2q vpexpandd vpexpandq vpmaxsq vpmaxuq vpminsq vpminuq vpmovdb vpmovdw vpmovqb vpmovqd vpmovqw vpmovsdb vpmovsdw vpmovsqb vpmovsqd vpmovsqw vpmovusdb vpmovusdw vpmovusqb vpmovusqd vpmovusqw vpord vporq vprold vprolq vprolvd vprolvq vprord vprorq vprorvd vprorvq vpscatterdd vpscatterdq vpscatterqd vpscatterqq vpsraq vpsravq vpternlogd vpternlogq vptestmd vptestmq vptestnmd vptestnmq vpxord vpxorq vrcp14pd vrcp14ps vrcp14sd vrcp14ss vrndscalepd vrndscaleps vrndscalesd vrndscaless vrsqrt14pd vrsqrt14ps vrsqrt14sd vrsqrt14ss vscalefpd vscalefps vscalefsd vscalefss vscatterdpd vscatterdps vscatterqpd vscatterqps vshuff32x4 vshuff64x2 vshufi32x4 vshufi64x2 kandnw kandw kmovw knotw kortestw korw kshiftlw kshiftrw kunpckbw kxnorw kxorw vpbroadcastmb2q vpbroadcastmw2d vpconflictd vpconflictq vplzcntd vplzcntq vexp2pd vexp2ps vrcp28pd vrcp28ps vrcp28sd vrcp28ss vrsqrt28pd vrsqrt28ps vrsqrt28sd vrsqrt28ss vgatherpf0dpd vgatherpf0dps vgatherpf0qpd vgatherpf0qps vgatherpf1dpd vgatherpf1dps vgatherpf1qpd vgatherpf1qps vscatterpf0dpd vscatterpf0dps vscatterpf0qpd vscatterpf0qps vscatterpf1dpd vscatterpf1dps vscatterpf1qpd vscatterpf1qps prefetchwt1 bndmk bndcl bndcu bndcn bndmov bndldx bndstx sha1rnds4 sha1nexte sha1msg1 sha1msg2 sha256rnds2 sha256msg1 sha256msg2 hint_nop0 hint_nop1 hint_nop2 hint_nop3 hint_nop4 hint_nop5 hint_nop6 hint_nop7 hint_nop8 hint_nop9 hint_nop10 hint_nop11 hint_nop12 hint_nop13 hint_nop14 hint_nop15 hint_nop16 hint_nop17 hint_nop18 hint_nop19 hint_nop20 hint_nop21 hint_nop22 hint_nop23 hint_nop24 hint_nop25 hint_nop26 hint_nop27 hint_nop28 hint_nop29 hint_nop30 hint_nop31 hint_nop32 hint_nop33 hint_nop34 hint_nop35 hint_nop36 hint_nop37 hint_nop38 hint_nop39 hint_nop40 hint_nop41 hint_nop42 hint_nop43 hint_nop44 hint_nop45 hint_nop46 hint_nop47 hint_nop48 hint_nop49 hint_nop50 hint_nop51 hint_nop52 hint_nop53 hint_nop54 hint_nop55 hint_nop56 hint_nop57 hint_nop58 hint_nop59 hint_nop60 hint_nop61 hint_nop62 hint_nop63',
	      built_in:
	        // Instruction pointer
	        'ip eip rip '
	        // 8-bit registers
	        + 'al ah bl bh cl ch dl dh sil dil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b '
	        // 16-bit registers
	        + 'ax bx cx dx si di bp sp r8w r9w r10w r11w r12w r13w r14w r15w '
	        // 32-bit registers
	        + 'eax ebx ecx edx esi edi ebp esp eip r8d r9d r10d r11d r12d r13d r14d r15d '
	        // 64-bit registers
	        + 'rax rbx rcx rdx rsi rdi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15 '
	        // Segment registers
	        + 'cs ds es fs gs ss '
	        // Floating point stack registers
	        + 'st st0 st1 st2 st3 st4 st5 st6 st7 '
	        // MMX Registers
	        + 'mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 '
	        // SSE registers
	        + 'xmm0  xmm1  xmm2  xmm3  xmm4  xmm5  xmm6  xmm7  xmm8  xmm9 xmm10  xmm11 xmm12 xmm13 xmm14 xmm15 '
	        + 'xmm16 xmm17 xmm18 xmm19 xmm20 xmm21 xmm22 xmm23 xmm24 xmm25 xmm26 xmm27 xmm28 xmm29 xmm30 xmm31 '
	        // AVX registers
	        + 'ymm0  ymm1  ymm2  ymm3  ymm4  ymm5  ymm6  ymm7  ymm8  ymm9 ymm10  ymm11 ymm12 ymm13 ymm14 ymm15 '
	        + 'ymm16 ymm17 ymm18 ymm19 ymm20 ymm21 ymm22 ymm23 ymm24 ymm25 ymm26 ymm27 ymm28 ymm29 ymm30 ymm31 '
	        // AVX-512F registers
	        + 'zmm0  zmm1  zmm2  zmm3  zmm4  zmm5  zmm6  zmm7  zmm8  zmm9 zmm10  zmm11 zmm12 zmm13 zmm14 zmm15 '
	        + 'zmm16 zmm17 zmm18 zmm19 zmm20 zmm21 zmm22 zmm23 zmm24 zmm25 zmm26 zmm27 zmm28 zmm29 zmm30 zmm31 '
	        // AVX-512F mask registers
	        + 'k0 k1 k2 k3 k4 k5 k6 k7 '
	        // Bound (MPX) register
	        + 'bnd0 bnd1 bnd2 bnd3 '
	        // Special register
	        + 'cr0 cr1 cr2 cr3 cr4 cr8 dr0 dr1 dr2 dr3 dr8 tr3 tr4 tr5 tr6 tr7 '
	        // NASM altreg package
	        + 'r0 r1 r2 r3 r4 r5 r6 r7 r0b r1b r2b r3b r4b r5b r6b r7b '
	        + 'r0w r1w r2w r3w r4w r5w r6w r7w r0d r1d r2d r3d r4d r5d r6d r7d '
	        + 'r0h r1h r2h r3h '
	        + 'r0l r1l r2l r3l r4l r5l r6l r7l r8l r9l r10l r11l r12l r13l r14l r15l '

	        + 'db dw dd dq dt ddq do dy dz '
	        + 'resb resw resd resq rest resdq reso resy resz '
	        + 'incbin equ times '
	        + 'byte word dword qword nosplit rel abs seg wrt strict near far a32 ptr',

	      meta:
	        '%define %xdefine %+ %undef %defstr %deftok %assign %strcat %strlen %substr %rotate %elif %else %endif '
	        + '%if %ifmacro %ifctx %ifidn %ifidni %ifid %ifnum %ifstr %iftoken %ifempty %ifenv %error %warning %fatal %rep '
	        + '%endrep %include %push %pop %repl %pathsearch %depend %use %arg %stacksize %local %line %comment %endcomment '
	        + '.nolist '
	        + '__FILE__ __LINE__ __SECT__  __BITS__ __OUTPUT_FORMAT__ __DATE__ __TIME__ __DATE_NUM__ __TIME_NUM__ '
	        + '__UTC_DATE__ __UTC_TIME__ __UTC_DATE_NUM__ __UTC_TIME_NUM__  __PASS__ struc endstruc istruc at iend '
	        + 'align alignb sectalign daz nodaz up down zero default option assume public '

	        + 'bits use16 use32 use64 default section segment absolute extern global common cpu float '
	        + '__utf16__ __utf16le__ __utf16be__ __utf32__ __utf32le__ __utf32be__ '
	        + '__float8__ __float16__ __float32__ __float64__ __float80m__ __float80e__ __float128l__ __float128h__ '
	        + '__Infinity__ __QNaN__ __SNaN__ Inf NaN QNaN SNaN float8 float16 float32 float64 float80m float80e '
	        + 'float128l float128h __FLOAT_DAZ__ __FLOAT_ROUND__ __FLOAT__'
	    },
	    contains: [
	      hljs.COMMENT(
	        ';',
	        '$',
	        { relevance: 0 }
	      ),
	      {
	        className: 'number',
	        variants: [
	          // Float number and x87 BCD
	          {
	            begin: '\\b(?:([0-9][0-9_]*)?\\.[0-9_]*(?:[eE][+-]?[0-9_]+)?|'
	                   + '(0[Xx])?[0-9][0-9_]*(\\.[0-9_]*)?(?:[pP](?:[+-]?[0-9_]+)?)?)\\b',
	            relevance: 0
	          },

	          // Hex number in $
	          {
	            begin: '\\$[0-9][0-9A-Fa-f]*',
	            relevance: 0
	          },

	          // Number in H,D,T,Q,O,B,Y suffix
	          { begin: '\\b(?:[0-9A-Fa-f][0-9A-Fa-f_]*[Hh]|[0-9][0-9_]*[DdTt]?|[0-7][0-7_]*[QqOo]|[0-1][0-1_]*[BbYy])\\b' },

	          // Number in X,D,T,Q,O,B,Y prefix
	          { begin: '\\b(?:0[Xx][0-9A-Fa-f_]+|0[DdTt][0-9_]+|0[QqOo][0-7_]+|0[BbYy][0-1_]+)\\b' }
	        ]
	      },
	      // Double quote string
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'string',
	        variants: [
	          // Single-quoted string
	          {
	            begin: '\'',
	            end: '[^\\\\]\''
	          },
	          // Backquoted string
	          {
	            begin: '`',
	            end: '[^\\\\]`'
	          }
	        ],
	        relevance: 0
	      },
	      {
	        className: 'symbol',
	        variants: [
	          // Global label and local label
	          { begin: '^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)' },
	          // Macro-local label
	          { begin: '^\\s*%%[A-Za-z0-9_$#@~.?]*:' }
	        ],
	        relevance: 0
	      },
	      // Macro parameter
	      {
	        className: 'subst',
	        begin: '%[0-9]+',
	        relevance: 0
	      },
	      // Macro parameter
	      {
	        className: 'subst',
	        begin: '%!\S+',
	        relevance: 0
	      },
	      {
	        className: 'meta',
	        begin: /^\s*\.[\w_-]+/
	      }
	    ]
	  };
	}

	x86asm_1 = x86asm;
	return x86asm_1;
}

/*
Language: XL
Author: Christophe de Dinechin <christophe@taodyne.com>
Description: An extensible programming language, based on parse tree rewriting
Website: http://xlr.sf.net
*/

var xl_1;
var hasRequiredXl;

function requireXl () {
	if (hasRequiredXl) return xl_1;
	hasRequiredXl = 1;
	function xl(hljs) {
	  const KWS = [
	    "if",
	    "then",
	    "else",
	    "do",
	    "while",
	    "until",
	    "for",
	    "loop",
	    "import",
	    "with",
	    "is",
	    "as",
	    "where",
	    "when",
	    "by",
	    "data",
	    "constant",
	    "integer",
	    "real",
	    "text",
	    "name",
	    "boolean",
	    "symbol",
	    "infix",
	    "prefix",
	    "postfix",
	    "block",
	    "tree"
	  ];
	  const BUILT_INS = [
	    "in",
	    "mod",
	    "rem",
	    "and",
	    "or",
	    "xor",
	    "not",
	    "abs",
	    "sign",
	    "floor",
	    "ceil",
	    "sqrt",
	    "sin",
	    "cos",
	    "tan",
	    "asin",
	    "acos",
	    "atan",
	    "exp",
	    "expm1",
	    "log",
	    "log2",
	    "log10",
	    "log1p",
	    "pi",
	    "at",
	    "text_length",
	    "text_range",
	    "text_find",
	    "text_replace",
	    "contains",
	    "page",
	    "slide",
	    "basic_slide",
	    "title_slide",
	    "title",
	    "subtitle",
	    "fade_in",
	    "fade_out",
	    "fade_at",
	    "clear_color",
	    "color",
	    "line_color",
	    "line_width",
	    "texture_wrap",
	    "texture_transform",
	    "texture",
	    "scale_?x",
	    "scale_?y",
	    "scale_?z?",
	    "translate_?x",
	    "translate_?y",
	    "translate_?z?",
	    "rotate_?x",
	    "rotate_?y",
	    "rotate_?z?",
	    "rectangle",
	    "circle",
	    "ellipse",
	    "sphere",
	    "path",
	    "line_to",
	    "move_to",
	    "quad_to",
	    "curve_to",
	    "theme",
	    "background",
	    "contents",
	    "locally",
	    "time",
	    "mouse_?x",
	    "mouse_?y",
	    "mouse_buttons"
	  ];
	  const BUILTIN_MODULES = [
	    "ObjectLoader",
	    "Animate",
	    "MovieCredits",
	    "Slides",
	    "Filters",
	    "Shading",
	    "Materials",
	    "LensFlare",
	    "Mapping",
	    "VLCAudioVideo",
	    "StereoDecoder",
	    "PointCloud",
	    "NetworkAccess",
	    "RemoteControl",
	    "RegExp",
	    "ChromaKey",
	    "Snowfall",
	    "NodeJS",
	    "Speech",
	    "Charts"
	  ];
	  const LITERALS = [
	    "true",
	    "false",
	    "nil"
	  ];
	  const KEYWORDS = {
	    $pattern: /[a-zA-Z][a-zA-Z0-9_?]*/,
	    keyword: KWS,
	    literal: LITERALS,
	    built_in: BUILT_INS.concat(BUILTIN_MODULES)
	  };

	  const DOUBLE_QUOTE_TEXT = {
	    className: 'string',
	    begin: '"',
	    end: '"',
	    illegal: '\\n'
	  };
	  const SINGLE_QUOTE_TEXT = {
	    className: 'string',
	    begin: '\'',
	    end: '\'',
	    illegal: '\\n'
	  };
	  const LONG_TEXT = {
	    className: 'string',
	    begin: '<<',
	    end: '>>'
	  };
	  const BASED_NUMBER = {
	    className: 'number',
	    begin: '[0-9]+#[0-9A-Z_]+(\\.[0-9-A-Z_]+)?#?([Ee][+-]?[0-9]+)?'
	  };
	  const IMPORT = {
	    beginKeywords: 'import',
	    end: '$',
	    keywords: KEYWORDS,
	    contains: [ DOUBLE_QUOTE_TEXT ]
	  };
	  const FUNCTION_DEFINITION = {
	    className: 'function',
	    begin: /[a-z][^\n]*->/,
	    returnBegin: true,
	    end: /->/,
	    contains: [
	      hljs.inherit(hljs.TITLE_MODE, { starts: {
	        endsWithParent: true,
	        keywords: KEYWORDS
	      } })
	    ]
	  };
	  return {
	    name: 'XL',
	    aliases: [ 'tao' ],
	    keywords: KEYWORDS,
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      DOUBLE_QUOTE_TEXT,
	      SINGLE_QUOTE_TEXT,
	      LONG_TEXT,
	      FUNCTION_DEFINITION,
	      IMPORT,
	      BASED_NUMBER,
	      hljs.NUMBER_MODE
	    ]
	  };
	}

	xl_1 = xl;
	return xl_1;
}

/*
Language: XQuery
Author: Dirk Kirsten <dk@basex.org>
Contributor: Duncan Paterson
Description: Supports XQuery 3.1 including XQuery Update 3, so also XPath (as it is a superset)
Refactored to process xml constructor syntax and function-bodies. Added missing data-types, xpath operands, inbuilt functions, and query prologs
Website: https://www.w3.org/XML/Query/
Category: functional
Audit: 2020
*/

var xquery_1;
var hasRequiredXquery;

function requireXquery () {
	if (hasRequiredXquery) return xquery_1;
	hasRequiredXquery = 1;
	/** @type LanguageFn */
	function xquery(_hljs) {
	  // see https://www.w3.org/TR/xquery/#id-terminal-delimitation
	  const KEYWORDS = [
	    "module",
	    "schema",
	    "namespace",
	    "boundary-space",
	    "preserve",
	    "no-preserve",
	    "strip",
	    "default",
	    "collation",
	    "base-uri",
	    "ordering",
	    "context",
	    "decimal-format",
	    "decimal-separator",
	    "copy-namespaces",
	    "empty-sequence",
	    "except",
	    "exponent-separator",
	    "external",
	    "grouping-separator",
	    "inherit",
	    "no-inherit",
	    "lax",
	    "minus-sign",
	    "per-mille",
	    "percent",
	    "schema-attribute",
	    "schema-element",
	    "strict",
	    "unordered",
	    "zero-digit",
	    "declare",
	    "import",
	    "option",
	    "function",
	    "validate",
	    "variable",
	    "for",
	    "at",
	    "in",
	    "let",
	    "where",
	    "order",
	    "group",
	    "by",
	    "return",
	    "if",
	    "then",
	    "else",
	    "tumbling",
	    "sliding",
	    "window",
	    "start",
	    "when",
	    "only",
	    "end",
	    "previous",
	    "next",
	    "stable",
	    "ascending",
	    "descending",
	    "allowing",
	    "empty",
	    "greatest",
	    "least",
	    "some",
	    "every",
	    "satisfies",
	    "switch",
	    "case",
	    "typeswitch",
	    "try",
	    "catch",
	    "and",
	    "or",
	    "to",
	    "union",
	    "intersect",
	    "instance",
	    "of",
	    "treat",
	    "as",
	    "castable",
	    "cast",
	    "map",
	    "array",
	    "delete",
	    "insert",
	    "into",
	    "replace",
	    "value",
	    "rename",
	    "copy",
	    "modify",
	    "update"
	  ];

	  // Node Types (sorted by inheritance)
	  // atomic types (sorted by inheritance)
	  const TYPES = [
	    "item",
	    "document-node",
	    "node",
	    "attribute",
	    "document",
	    "element",
	    "comment",
	    "namespace",
	    "namespace-node",
	    "processing-instruction",
	    "text",
	    "construction",
	    "xs:anyAtomicType",
	    "xs:untypedAtomic",
	    "xs:duration",
	    "xs:time",
	    "xs:decimal",
	    "xs:float",
	    "xs:double",
	    "xs:gYearMonth",
	    "xs:gYear",
	    "xs:gMonthDay",
	    "xs:gMonth",
	    "xs:gDay",
	    "xs:boolean",
	    "xs:base64Binary",
	    "xs:hexBinary",
	    "xs:anyURI",
	    "xs:QName",
	    "xs:NOTATION",
	    "xs:dateTime",
	    "xs:dateTimeStamp",
	    "xs:date",
	    "xs:string",
	    "xs:normalizedString",
	    "xs:token",
	    "xs:language",
	    "xs:NMTOKEN",
	    "xs:Name",
	    "xs:NCName",
	    "xs:ID",
	    "xs:IDREF",
	    "xs:ENTITY",
	    "xs:integer",
	    "xs:nonPositiveInteger",
	    "xs:negativeInteger",
	    "xs:long",
	    "xs:int",
	    "xs:short",
	    "xs:byte",
	    "xs:nonNegativeInteger",
	    "xs:unisignedLong",
	    "xs:unsignedInt",
	    "xs:unsignedShort",
	    "xs:unsignedByte",
	    "xs:positiveInteger",
	    "xs:yearMonthDuration",
	    "xs:dayTimeDuration"
	  ];

	  const LITERALS = [
	    "eq",
	    "ne",
	    "lt",
	    "le",
	    "gt",
	    "ge",
	    "is",
	    "self::",
	    "child::",
	    "descendant::",
	    "descendant-or-self::",
	    "attribute::",
	    "following::",
	    "following-sibling::",
	    "parent::",
	    "ancestor::",
	    "ancestor-or-self::",
	    "preceding::",
	    "preceding-sibling::",
	    "NaN"
	  ];

	  // functions (TODO: find regex for op: without breaking build)
	  const BUILT_IN = {
	    className: 'built_in',
	    variants: [
	      {
	        begin: /\barray:/,
	        end: /(?:append|filter|flatten|fold-(?:left|right)|for-each(?:-pair)?|get|head|insert-before|join|put|remove|reverse|size|sort|subarray|tail)\b/
	      },
	      {
	        begin: /\bmap:/,
	        end: /(?:contains|entry|find|for-each|get|keys|merge|put|remove|size)\b/
	      },
	      {
	        begin: /\bmath:/,
	        end: /(?:a(?:cos|sin|tan[2]?)|cos|exp(?:10)?|log(?:10)?|pi|pow|sin|sqrt|tan)\b/
	      },
	      {
	        begin: /\bop:/,
	        end: /\(/,
	        excludeEnd: true
	      },
	      {
	        begin: /\bfn:/,
	        end: /\(/,
	        excludeEnd: true
	      },
	      // do not highlight inbuilt strings as variable or xml element names
	      { begin: /[^</$:'"-]\b(?:abs|accumulator-(?:after|before)|adjust-(?:date(?:Time)?|time)-to-timezone|analyze-string|apply|available-(?:environment-variables|system-properties)|avg|base-uri|boolean|ceiling|codepoints?-(?:equal|to-string)|collation-key|collection|compare|concat|contains(?:-token)?|copy-of|count|current(?:-)?(?:date(?:Time)?|time|group(?:ing-key)?|output-uri|merge-(?:group|key))?data|dateTime|days?-from-(?:date(?:Time)?|duration)|deep-equal|default-(?:collation|language)|distinct-values|document(?:-uri)?|doc(?:-available)?|element-(?:available|with-id)|empty|encode-for-uri|ends-with|environment-variable|error|escape-html-uri|exactly-one|exists|false|filter|floor|fold-(?:left|right)|for-each(?:-pair)?|format-(?:date(?:Time)?|time|integer|number)|function-(?:arity|available|lookup|name)|generate-id|has-children|head|hours-from-(?:dateTime|duration|time)|id(?:ref)?|implicit-timezone|in-scope-prefixes|index-of|innermost|insert-before|iri-to-uri|json-(?:doc|to-xml)|key|lang|last|load-xquery-module|local-name(?:-from-QName)?|(?:lower|upper)-case|matches|max|minutes-from-(?:dateTime|duration|time)|min|months?-from-(?:date(?:Time)?|duration)|name(?:space-uri-?(?:for-prefix|from-QName)?)?|nilled|node-name|normalize-(?:space|unicode)|not|number|one-or-more|outermost|parse-(?:ietf-date|json)|path|position|(?:prefix-from-)?QName|random-number-generator|regex-group|remove|replace|resolve-(?:QName|uri)|reverse|root|round(?:-half-to-even)?|seconds-from-(?:dateTime|duration|time)|snapshot|sort|starts-with|static-base-uri|stream-available|string-?(?:join|length|to-codepoints)?|subsequence|substring-?(?:after|before)?|sum|system-property|tail|timezone-from-(?:date(?:Time)?|time)|tokenize|trace|trans(?:form|late)|true|type-available|unordered|unparsed-(?:entity|text)?-?(?:public-id|uri|available|lines)?|uri-collection|xml-to-json|years?-from-(?:date(?:Time)?|duration)|zero-or-one)\b/ },
	      {
	        begin: /\blocal:/,
	        end: /\(/,
	        excludeEnd: true
	      },
	      {
	        begin: /\bzip:/,
	        end: /(?:zip-file|(?:xml|html|text|binary)-entry| (?:update-)?entries)\b/
	      },
	      {
	        begin: /\b(?:util|db|functx|app|xdmp|xmldb):/,
	        end: /\(/,
	        excludeEnd: true
	      }
	    ]
	  };

	  const TITLE = {
	    className: 'title',
	    begin: /\bxquery version "[13]\.[01]"\s?(?:encoding ".+")?/,
	    end: /;/
	  };

	  const VAR = {
	    className: 'variable',
	    begin: /[$][\w\-:]+/
	  };

	  const NUMBER = {
	    className: 'number',
	    begin: /(\b0[0-7_]+)|(\b0x[0-9a-fA-F_]+)|(\b[1-9][0-9_]*(\.[0-9_]+)?)|[0_]\b/,
	    relevance: 0
	  };

	  const STRING = {
	    className: 'string',
	    variants: [
	      {
	        begin: /"/,
	        end: /"/,
	        contains: [
	          {
	            begin: /""/,
	            relevance: 0
	          }
	        ]
	      },
	      {
	        begin: /'/,
	        end: /'/,
	        contains: [
	          {
	            begin: /''/,
	            relevance: 0
	          }
	        ]
	      }
	    ]
	  };

	  const ANNOTATION = {
	    className: 'meta',
	    begin: /%[\w\-:]+/
	  };

	  const COMMENT = {
	    className: 'comment',
	    begin: /\(:/,
	    end: /:\)/,
	    relevance: 10,
	    contains: [
	      {
	        className: 'doctag',
	        begin: /@\w+/
	      }
	    ]
	  };

	  // see https://www.w3.org/TR/xquery/#id-computedConstructors
	  // mocha: computed_inbuilt
	  // see https://www.regexpal.com/?fam=99749
	  const COMPUTED = {
	    beginKeywords: 'element attribute comment document processing-instruction',
	    end: /\{/,
	    excludeEnd: true
	  };

	  // mocha: direct_method
	  const DIRECT = {
	    begin: /<([\w._:-]+)(\s+\S*=('|").*('|"))?>/,
	    end: /(\/[\w._:-]+>)/,
	    subLanguage: 'xml',
	    contains: [
	      {
	        begin: /\{/,
	        end: /\}/,
	        subLanguage: 'xquery'
	      },
	      'self'
	    ]
	  };

	  const CONTAINS = [
	    VAR,
	    BUILT_IN,
	    STRING,
	    NUMBER,
	    COMMENT,
	    ANNOTATION,
	    TITLE,
	    COMPUTED,
	    DIRECT
	  ];

	  return {
	    name: 'XQuery',
	    aliases: [
	      'xpath',
	      'xq',
	      'xqm'
	    ],
	    case_insensitive: false,
	    illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,
	    keywords: {
	      $pattern: /[a-zA-Z$][a-zA-Z0-9_:-]*/,
	      keyword: KEYWORDS,
	      type: TYPES,
	      literal: LITERALS
	    },
	    contains: CONTAINS
	  };
	}

	xquery_1 = xquery;
	return xquery_1;
}

/*
 Language: Zephir
 Description: Zephir, an open source, high-level language designed to ease the creation and maintainability of extensions for PHP with a focus on type and memory safety.
 Author: Oleg Efimov <efimovov@gmail.com>
 Website: https://zephir-lang.com/en
 Audit: 2020
 */

var zephir_1;
var hasRequiredZephir;

function requireZephir () {
	if (hasRequiredZephir) return zephir_1;
	hasRequiredZephir = 1;
	/** @type LanguageFn */
	function zephir(hljs) {
	  const STRING = {
	    className: 'string',
	    contains: [ hljs.BACKSLASH_ESCAPE ],
	    variants: [
	      hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
	      hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null })
	    ]
	  };
	  const TITLE_MODE = hljs.UNDERSCORE_TITLE_MODE;
	  const NUMBER = { variants: [
	    hljs.BINARY_NUMBER_MODE,
	    hljs.C_NUMBER_MODE
	  ] };
	  const KEYWORDS =
	    // classes and objects
	    'namespace class interface use extends '
	    + 'function return '
	    + 'abstract final public protected private static deprecated '
	    // error handling
	    + 'throw try catch Exception '
	    // keyword-ish things their website does NOT seem to highlight (in their own snippets)
	    // 'typeof fetch in ' +
	    // operators/helpers
	    + 'echo empty isset instanceof unset '
	    // assignment/variables
	    + 'let var new const self '
	    // control
	    + 'require '
	    + 'if else elseif switch case default '
	    + 'do while loop for continue break '
	    + 'likely unlikely '
	    // magic constants
	    // https://github.com/phalcon/zephir/blob/master/Library/Expression/Constants.php
	    + '__LINE__ __FILE__ __DIR__ __FUNCTION__ __CLASS__ __TRAIT__ __METHOD__ __NAMESPACE__ '
	    // types - https://docs.zephir-lang.com/0.12/en/types
	    + 'array boolean float double integer object resource string '
	    + 'char long unsigned bool int uint ulong uchar '
	    // built-ins
	    + 'true false null undefined';

	  return {
	    name: 'Zephir',
	    aliases: [ 'zep' ],
	    keywords: KEYWORDS,
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.COMMENT(
	        /\/\*/,
	        /\*\//,
	        { contains: [
	          {
	            className: 'doctag',
	            begin: /@[A-Za-z]+/
	          }
	        ] }
	      ),
	      {
	        className: 'string',
	        begin: /<<<['"]?\w+['"]?$/,
	        end: /^\w+;/,
	        contains: [ hljs.BACKSLASH_ESCAPE ]
	      },
	      {
	        // swallow composed identifiers to avoid parsing them as keywords
	        begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/ },
	      {
	        className: 'function',
	        beginKeywords: 'function fn',
	        end: /[;{]/,
	        excludeEnd: true,
	        illegal: /\$|\[|%/,
	        contains: [
	          TITLE_MODE,
	          {
	            className: 'params',
	            begin: /\(/,
	            end: /\)/,
	            keywords: KEYWORDS,
	            contains: [
	              'self',
	              hljs.C_BLOCK_COMMENT_MODE,
	              STRING,
	              NUMBER
	            ]
	          }
	        ]
	      },
	      {
	        className: 'class',
	        beginKeywords: 'class interface',
	        end: /\{/,
	        excludeEnd: true,
	        illegal: /[:($"]/,
	        contains: [
	          { beginKeywords: 'extends implements' },
	          TITLE_MODE
	        ]
	      },
	      {
	        beginKeywords: 'namespace',
	        end: /;/,
	        illegal: /[.']/,
	        contains: [ TITLE_MODE ]
	      },
	      {
	        beginKeywords: 'use',
	        end: /;/,
	        contains: [ TITLE_MODE ]
	      },
	      { begin: /=>/ // No markup, just a relevance booster
	      },
	      STRING,
	      NUMBER
	    ]
	  };
	}

	zephir_1 = zephir;
	return zephir_1;
}

var hljs = core;

hljs.registerLanguage('1c', require_1c());
hljs.registerLanguage('abnf', requireAbnf());
hljs.registerLanguage('accesslog', requireAccesslog());
hljs.registerLanguage('actionscript', requireActionscript());
hljs.registerLanguage('ada', requireAda());
hljs.registerLanguage('angelscript', requireAngelscript());
hljs.registerLanguage('apache', requireApache());
hljs.registerLanguage('applescript', requireApplescript());
hljs.registerLanguage('arcade', requireArcade());
hljs.registerLanguage('arduino', requireArduino());
hljs.registerLanguage('armasm', requireArmasm());
hljs.registerLanguage('xml', requireXml());
hljs.registerLanguage('asciidoc', requireAsciidoc());
hljs.registerLanguage('aspectj', requireAspectj());
hljs.registerLanguage('autohotkey', requireAutohotkey());
hljs.registerLanguage('autoit', requireAutoit());
hljs.registerLanguage('avrasm', requireAvrasm());
hljs.registerLanguage('awk', requireAwk());
hljs.registerLanguage('axapta', requireAxapta());
hljs.registerLanguage('bash', requireBash());
hljs.registerLanguage('basic', requireBasic());
hljs.registerLanguage('bnf', requireBnf());
hljs.registerLanguage('brainfuck', requireBrainfuck());
hljs.registerLanguage('c', requireC());
hljs.registerLanguage('cal', requireCal());
hljs.registerLanguage('capnproto', requireCapnproto());
hljs.registerLanguage('ceylon', requireCeylon());
hljs.registerLanguage('clean', requireClean());
hljs.registerLanguage('clojure', requireClojure());
hljs.registerLanguage('clojure-repl', requireClojureRepl());
hljs.registerLanguage('cmake', requireCmake());
hljs.registerLanguage('coffeescript', requireCoffeescript());
hljs.registerLanguage('coq', requireCoq());
hljs.registerLanguage('cos', requireCos());
hljs.registerLanguage('cpp', requireCpp());
hljs.registerLanguage('crmsh', requireCrmsh());
hljs.registerLanguage('crystal', requireCrystal());
hljs.registerLanguage('csharp', requireCsharp());
hljs.registerLanguage('csp', requireCsp());
hljs.registerLanguage('css', requireCss());
hljs.registerLanguage('d', requireD());
hljs.registerLanguage('markdown', requireMarkdown());
hljs.registerLanguage('dart', requireDart());
hljs.registerLanguage('delphi', requireDelphi());
hljs.registerLanguage('diff', requireDiff());
hljs.registerLanguage('django', requireDjango());
hljs.registerLanguage('dns', requireDns());
hljs.registerLanguage('dockerfile', requireDockerfile());
hljs.registerLanguage('dos', requireDos());
hljs.registerLanguage('dsconfig', requireDsconfig());
hljs.registerLanguage('dts', requireDts());
hljs.registerLanguage('dust', requireDust());
hljs.registerLanguage('ebnf', requireEbnf());
hljs.registerLanguage('elixir', requireElixir());
hljs.registerLanguage('elm', requireElm());
hljs.registerLanguage('ruby', requireRuby());
hljs.registerLanguage('erb', requireErb());
hljs.registerLanguage('erlang-repl', requireErlangRepl());
hljs.registerLanguage('erlang', requireErlang());
hljs.registerLanguage('excel', requireExcel());
hljs.registerLanguage('fix', requireFix());
hljs.registerLanguage('flix', requireFlix());
hljs.registerLanguage('fortran', requireFortran());
hljs.registerLanguage('fsharp', requireFsharp());
hljs.registerLanguage('gams', requireGams());
hljs.registerLanguage('gauss', requireGauss());
hljs.registerLanguage('gcode', requireGcode());
hljs.registerLanguage('gherkin', requireGherkin());
hljs.registerLanguage('glsl', requireGlsl());
hljs.registerLanguage('gml', requireGml());
hljs.registerLanguage('go', requireGo());
hljs.registerLanguage('golo', requireGolo());
hljs.registerLanguage('gradle', requireGradle());
hljs.registerLanguage('graphql', requireGraphql());
hljs.registerLanguage('groovy', requireGroovy());
hljs.registerLanguage('haml', requireHaml());
hljs.registerLanguage('handlebars', requireHandlebars());
hljs.registerLanguage('haskell', requireHaskell());
hljs.registerLanguage('haxe', requireHaxe());
hljs.registerLanguage('hsp', requireHsp());
hljs.registerLanguage('http', requireHttp());
hljs.registerLanguage('hy', requireHy());
hljs.registerLanguage('inform7', requireInform7());
hljs.registerLanguage('ini', requireIni());
hljs.registerLanguage('irpf90', requireIrpf90());
hljs.registerLanguage('isbl', requireIsbl());
hljs.registerLanguage('java', requireJava());
hljs.registerLanguage('javascript', requireJavascript());
hljs.registerLanguage('jboss-cli', requireJbossCli());
hljs.registerLanguage('json', requireJson());
hljs.registerLanguage('julia', requireJulia());
hljs.registerLanguage('julia-repl', requireJuliaRepl());
hljs.registerLanguage('kotlin', requireKotlin());
hljs.registerLanguage('lasso', requireLasso());
hljs.registerLanguage('latex', requireLatex());
hljs.registerLanguage('ldif', requireLdif());
hljs.registerLanguage('leaf', requireLeaf());
hljs.registerLanguage('less', requireLess());
hljs.registerLanguage('lisp', requireLisp());
hljs.registerLanguage('livecodeserver', requireLivecodeserver());
hljs.registerLanguage('livescript', requireLivescript());
hljs.registerLanguage('llvm', requireLlvm());
hljs.registerLanguage('lsl', requireLsl());
hljs.registerLanguage('lua', requireLua());
hljs.registerLanguage('makefile', requireMakefile());
hljs.registerLanguage('mathematica', requireMathematica());
hljs.registerLanguage('matlab', requireMatlab());
hljs.registerLanguage('maxima', requireMaxima());
hljs.registerLanguage('mel', requireMel());
hljs.registerLanguage('mercury', requireMercury());
hljs.registerLanguage('mipsasm', requireMipsasm());
hljs.registerLanguage('mizar', requireMizar());
hljs.registerLanguage('perl', requirePerl());
hljs.registerLanguage('mojolicious', requireMojolicious());
hljs.registerLanguage('monkey', requireMonkey());
hljs.registerLanguage('moonscript', requireMoonscript());
hljs.registerLanguage('n1ql', requireN1ql());
hljs.registerLanguage('nestedtext', requireNestedtext());
hljs.registerLanguage('nginx', requireNginx());
hljs.registerLanguage('nim', requireNim());
hljs.registerLanguage('nix', requireNix());
hljs.registerLanguage('node-repl', requireNodeRepl());
hljs.registerLanguage('nsis', requireNsis());
hljs.registerLanguage('objectivec', requireObjectivec());
hljs.registerLanguage('ocaml', requireOcaml());
hljs.registerLanguage('openscad', requireOpenscad());
hljs.registerLanguage('oxygene', requireOxygene());
hljs.registerLanguage('parser3', requireParser3());
hljs.registerLanguage('pf', requirePf());
hljs.registerLanguage('pgsql', requirePgsql());
hljs.registerLanguage('php', requirePhp());
hljs.registerLanguage('php-template', requirePhpTemplate());
hljs.registerLanguage('plaintext', requirePlaintext());
hljs.registerLanguage('pony', requirePony());
hljs.registerLanguage('powershell', requirePowershell());
hljs.registerLanguage('processing', requireProcessing());
hljs.registerLanguage('profile', requireProfile());
hljs.registerLanguage('prolog', requireProlog());
hljs.registerLanguage('properties', requireProperties());
hljs.registerLanguage('protobuf', requireProtobuf());
hljs.registerLanguage('puppet', requirePuppet());
hljs.registerLanguage('purebasic', requirePurebasic());
hljs.registerLanguage('python', requirePython());
hljs.registerLanguage('python-repl', requirePythonRepl());
hljs.registerLanguage('q', requireQ());
hljs.registerLanguage('qml', requireQml());
hljs.registerLanguage('r', requireR());
hljs.registerLanguage('reasonml', requireReasonml());
hljs.registerLanguage('rib', requireRib());
hljs.registerLanguage('roboconf', requireRoboconf());
hljs.registerLanguage('routeros', requireRouteros());
hljs.registerLanguage('rsl', requireRsl());
hljs.registerLanguage('ruleslanguage', requireRuleslanguage());
hljs.registerLanguage('rust', requireRust());
hljs.registerLanguage('sas', requireSas());
hljs.registerLanguage('scala', requireScala());
hljs.registerLanguage('scheme', requireScheme());
hljs.registerLanguage('scilab', requireScilab());
hljs.registerLanguage('scss', requireScss());
hljs.registerLanguage('shell', requireShell());
hljs.registerLanguage('smali', requireSmali());
hljs.registerLanguage('smalltalk', requireSmalltalk());
hljs.registerLanguage('sml', requireSml());
hljs.registerLanguage('sqf', requireSqf());
hljs.registerLanguage('sql', requireSql());
hljs.registerLanguage('stan', requireStan());
hljs.registerLanguage('stata', requireStata());
hljs.registerLanguage('step21', requireStep21());
hljs.registerLanguage('stylus', requireStylus());
hljs.registerLanguage('subunit', requireSubunit());
hljs.registerLanguage('swift', requireSwift());
hljs.registerLanguage('taggerscript', requireTaggerscript());
hljs.registerLanguage('yaml', requireYaml());
hljs.registerLanguage('tap', requireTap());
hljs.registerLanguage('tcl', requireTcl());
hljs.registerLanguage('thrift', requireThrift());
hljs.registerLanguage('tp', requireTp());
hljs.registerLanguage('twig', requireTwig());
hljs.registerLanguage('typescript', requireTypescript());
hljs.registerLanguage('vala', requireVala());
hljs.registerLanguage('vbnet', requireVbnet());
hljs.registerLanguage('vbscript', requireVbscript());
hljs.registerLanguage('vbscript-html', requireVbscriptHtml());
hljs.registerLanguage('verilog', requireVerilog());
hljs.registerLanguage('vhdl', requireVhdl());
hljs.registerLanguage('vim', requireVim());
hljs.registerLanguage('wasm', requireWasm());
hljs.registerLanguage('wren', requireWren());
hljs.registerLanguage('x86asm', requireX86asm());
hljs.registerLanguage('xl', requireXl());
hljs.registerLanguage('xquery', requireXquery());
hljs.registerLanguage('zephir', requireZephir());

hljs.HighlightJS = hljs;
hljs.default = hljs;
var lib = hljs;

var HighlightJS = /*@__PURE__*/getDefaultExportFromCjs(lib);

var shelljs = require("shelljs");
// Define the middleware function
function copyHeaders(req, res, next) {
    // Define an array of header names to be copied
    const headersToCopy = ['Ph-Id', 'Ph-Group-Id']; // Add more headers as needed
    headersToCopy.forEach(header => {
        // Check if the header exists in the request
        // console.log(req.headers)
        if (req.header(header)) {
            // Copy the header to the response
            res.setHeader(header, req.header(header));
        }
    });
    // Call the next middleware in the chain
    next();
}
var index = () => {
    const app = express();
    const port = process.env.EXPRESS_PORT || 3000;
    app.use(express.static('public'));
    app.use(express.json());
    app.use(copyHeaders);
    app.use(fileUpload());
    let cache = null;
    // multipart file, save to dis
    app.post('/upload', (req, res) => {
        if (!req.files) {
            return res.status(400).send({ error: 'No file uploaded' });
        }
        const file = req.files.file;
        const filename = file.name;
        file.mv(path$6.resolve(`public/uploads/${filename}`), (err) => {
            if (err) {
                // If there's an error, send an error response
                return res.status(500).send({ error: 'File upload failed', message: err.message });
            }
            // If file upload is successful, send a success response with the filename
            res.status(200).send({ data: { filename } });
        });
    });
    app.get("/completion", (req, res) => __awaiter(void 0, void 0, void 0, function* () {
        // get the url from environment variable COMPLETION_ENDPOINT
        const url = process.env.COMPLETION_ENDPOINT ||
            'http://localhost:4002/rest-get/?obtype=SettingInDb&id=codemirror-play';
        const response = yield fetch(url);
        if (!cache) {
            try {
                cache = yield response.json();
                console.log("fetched: ", cache);
            }
            catch (error) {
                console.log(error);
                console.log("-------------end of error ----------------");
            }
        }
        res.send(cache || {
            data: [
                "free -mh, Display amount of free and used memory in the system, local",
                "df -lh / /mnt/g, report file system disk space usage",
                "ps aux, report a snapshot of the current processes",
                "diff -bur folder1 folder2, compare two folders recursively",
            ]
        });
    }));
    app.get("/execute", (req, res) => {
        let cmd = req.query.cmd;
        let parts = cmd.split(",", 2);
        shelljs.exec(parts[0].trim(), (code, stdout, stderr) => {
            if (code === 0) {
                res.send({ data: stdout });
            }
            else {
                res.send({ data: stderr });
            }
        });
    });
    app.get("/devtools/cmcontents/:id", (req, res) => {
        // response with a {data: {id: number, content: string}}
        res.send({ data: { id: req.params.id, content: "content of " + req.params.id } });
    });
    app.post("/devtools/cmcontents", (req, res) => {
        // response with a {data: {id: number, content: string}}
        res.send({ data: { id: 123, content: "content of 123" } });
    });
    app.get("/devtools/asdf-completion", (req, res) => {
        const line = req.query.line;
        const parts = line.trim().split(/\s+/);
        if (parts[0] !== 'asdf') {
            res.send({ data: [] });
            return;
        }
        if (parts.length === 1) {
            res.send({
                data: [
                    {
                        label: parts[0] + " java",
                        type: "magicwand",
                        detail: "replace the current line with this",
                        info: "new content of the current line"
                    },
                    {
                        label: parts[0] + " nodejs",
                        type: "magicwand",
                        detail: "replace the current line with this",
                        info: "new content of the current line\nline 2\nline3\n\nlinen"
                    }
                ]
            });
        }
        else if (parts.length === 2) {
            res.send({
                data: [
                    {
                        label: parts[0] + " " + parts[1] + " " + "000",
                        type: "magicwand",
                        detail: "replace the current line with this",
                        info: "new content of the current line"
                    },
                    {
                        label: parts[0] + " " + parts[1] + " " + "111",
                        type: "magicwand",
                        detail: "replace the current line with this",
                        info: "new content of the current line\nline 2\nline3\n\nlinen"
                    }
                ]
            });
        }
    });
    app.post("/cmd", (req, res) => {
        // response with a {data: {id: number, content: string}}
        res.send({
            data: {
                "error": null,
                "output": "/cmd-execution/292"
            }
        });
    });
    app.post("/devtools/finaltry", (req, res) => {
        res.send({
            "data": {
                "nothing": false,
                "content": {
                    "id": 293,
                    "cmdid": 64,
                    "fullcmd": "start.sh",
                    "envs": "{\"meta\":\"{\\\"githubWebhookSecret\\\":\\\"FEZsIOowTDpfchuhNbwC2NCJ70tmYpD2\\\"}\",\"postmeta\":{\"pm\":1,\"pm2\":{\"a\":1}}}",
                    "createdAt": "2024-01-26T12:06:04.366425+08:00",
                    "finishedAt": "2024-01-26T12:08:52.622719+08:00",
                    "fromapi": true,
                    "outputs": "total 8.0K\n-rw-r--r-- 1 appuser00000046 appuser00000046  731 Jan 25 07:09 __bashrc\ndrwx------ 2 appuser00000046 appuser00000046 4.0K Jan 25 07:09 __scripts",
                    "exitcode": 0
                },
                "replaceLine": true,
                "actions": []
            }
        });
    });
    ///devtools/finalc?word=&line=a&clientid=
    app.get("/devtools/finalc", (req, res) => {
        const line = req.query.line;
        res.send({
            "data": {
                "nothing": false,
                "content": [
                    {
                        "label": line + " 000",
                        "type": "magicwand",
                        "detail": "replace the current line with this",
                        "info": "new content of the current line"
                    },
                    {
                        "label": line + " 111",
                        "type": "magicwand",
                        "detail": "replace the current line with this",
                        "info": "new content of the current line"
                    }
                ],
                "replaceLine": false,
                "actions": []
            }
        });
    });
    // /devtools/perclient
    app.get("/devtools/perclient", (req, res) => {
        req.query.line;
        res.send({
            "data": {
                "completions": [
                    {
                        "label": "perclient 000",
                        "type": "magicwand",
                        "detail": "replace the current line with this",
                        info: "new content of the current line\nline 2\nline3\n\nlinen"
                    },
                    {
                        "label": "perclient 111",
                        "type": "magicwand",
                        "detail": "replace the current line with this",
                        info: "new content of the current line\nline 2\nline3\n\nlinen"
                    }
                ],
                "snippets": [
                    {
                        "label": "snippet 222",
                        "type": "magicwand",
                        "detail": "replace the current line with this 000",
                        "info": "new content of the current line"
                    },
                    {
                        "label": "snippet 333",
                        "type": "magicwand",
                        "detail": "replace the current line with this 111",
                        "info": "new content of the current line"
                    }
                ]
            }
        });
    });
    app.get("/action/set-value", (req, res) => {
        const selector = req.query.selector;
        const item = { action: 'SET_VALUE', params: { selector, value: 'fromserver' } };
        res.send({
            data: [item]
        });
    });
    app.get("/action/replace-node", (req, res) => {
        const selector = req.query.selector;
        const html = `
				<div>
				{{#names}}
				<p>{{.}}</p>
				{{/names}}
				</div>
		`;
        const item = { action: 'REPLACE_NODE', params: { selector, html, model: { names: ["aname", "bname"] } } };
        res.send({
            data: [item]
        });
    });
    app.get("/helpers/:name/", (req, res) => {
        const xRequestWith = req.header('X-Requested-With');
        const isPjax = req.header('Ph-Pjax-Request');
        if (xRequestWith === 'XMLHttpRequest' && !isPjax) {
            // if (true) {
            const pageStr = (req.query.page || "1").toString();
            const sizeStr = (req.query.size || "10").toString();
            const page = parseInt(pageStr);
            const size = parseInt(sizeStr);
            console.log("page: ", page, ", size: ", size);
            const items = Array.from({ length: size }, (_, i) => {
                return {
                    id: i + (page - 1) * size,
                    task: `Item ${i + (page - 1) * size}`,
                    dueDate: '2021-01-01',
                    priority: 'high'
                };
            });
            const respData = {
                data: items
            };
            res.json(respData);
        }
        else {
            const name = req.params.name;
            res.sendFile(path$6.resolve(`public/helpers/${name}.html`));
        }
    });
    app.get("/page", (req, res) => {
        // X-Requested-With
        if (req.header('X-Requested-With') === 'XMLHttpRequest') {
            const item = { action: 'PUSH_STATE', params: { url: req.url } };
            const data = [item];
            res.send({ data });
            return;
        }
        else {
            res.sendFile(path$6.resolve('public/page.html'));
        }
    });
    app.get("/pages/ajax-change", (req, res) => {
        res.json({
            data: [
                {
                    value: 10,
                    name: 'A'
                },
                {
                    value: 20,
                    name: 'B'
                },
                {
                    value: 30,
                    name: 'C'
                }
            ]
        });
    });
    app.get("/pages/redirect", (req, res) => {
        const { url } = req.query;
        res.redirect(url);
    });
    app.get("/pages/:name", (req, res) => {
        let name = req.params.name;
        if (!name.endsWith('.html')) {
            name = name + '.html';
        }
        res.sendFile(path$6.resolve(`public/pages/${name}`));
    });
    app.get("/highlight/", (req, res) => {
        const content = req.query.content;
        const lang = req.query.lang;
        const css = req.query.css;
        if (css) {
            const version = req.query.version || '11.9.0';
            const url = `https://cdnjs.cloudflare.com/ajax/libs/highlight.js/${version}/styles/default.min.css`;
            // fetch the content and return to client
            fetch(url)
                .then(response => response.text())
                .then(css => {
                res.send(css);
            });
        }
        else {
            const highlightedCode = HighlightJS.highlight(content, { language: lang }).value;
            res.send(highlightedCode);
        }
    });
    app.get("/fixtures/data-consumer", (req, res) => {
        res.json({
            data: [
                {
                    id: 1,
                    name: 'A'
                },
                {
                    id: 2,
                    name: 'B'
                },
                {
                    id: 3,
                    name: 'C'
                }
            ]
        });
    });
    app.post("/fixtures/form-submit", (req, res) => {
        req.body;
        res.json({
            "data": [
                {
                    "action": "FAILED_VALIDATES",
                    "params": {
                        "failedValidates": [
                            {
                                "name": "content",
                                "message": "size must be between 6 and 1048576"
                            }
                        ]
                    }
                },
                {
                    "action": "TOAST",
                    "params": {
                        "toast": {
                            "icon": "warning",
                            "title": "validate failed.",
                            "timer": 3000
                        }
                    }
                }
            ]
        });
    });
    app.get("/fixtures/toast", (req, res) => {
        const { position, toast } = req.query;
        let item;
        if (toast) {
            item = {
                "action": "TOAST",
                "params": {
                    "toast": {
                        "position": position || "top-end",
                        "icon": "warning",
                        "title": "validate failed.",
                        "timer": 3000
                    }
                }
            };
        }
        else {
            item = {
                "action": "SWAL2",
                "params": {
                    "swal2": {
                        "icon": "info",
                        "title": "Deploy Outputs",
                        "text": "executing ./deploy.sh\nuser letsscript exists\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nCreate unit file: /etc/systemd/system/demoserverbg.service\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nCreate env file: /etc/demoserverbg/env\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nStart demoserverbg.service\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nlast exit code: 1\ndemoserverbg is running.\nbase64: invalid input\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nsudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\nsudo: a password is required\nread process output done.\nexitCode:1",
                        "wrap": "<pre><code>////</code><pre>"
                    }
                }
            };
        }
        res.json({
            "data": [item]
        });
    });
    app.post("/pages/form-1", (req, res) => {
        // response all headers and body
        // body is json
        console.log(req.body);
        res.send({
            headers: req.headers,
            body: req.body
        });
    });
    // return index.html if no router matched
    app.get('*', (req, res) => {
        res.sendFile(path$6.resolve('public/index.html'));
    });
    app.listen(port, () => {
        console.log(`[server]: Server is running at http://localhost:${port}`);
    });
};

module.exports = index;
